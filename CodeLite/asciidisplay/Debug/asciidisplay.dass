
./Debug/asciidisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fa60 	bl	200004c8 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:


void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	// Setup output pins for asciidisplay
	*GPIO_MODER = 0x55555555;
20000014:	4b0a      	ldr	r3, [pc, #40]	; (20000040 <init_app+0x30>)
20000016:	4a0b      	ldr	r2, [pc, #44]	; (20000044 <init_app+0x34>)
20000018:	601a      	str	r2, [r3, #0]
	
	*GPIO_OTYPER = 0x7777;
2000001a:	4b0b      	ldr	r3, [pc, #44]	; (20000048 <init_app+0x38>)
2000001c:	4a0b      	ldr	r2, [pc, #44]	; (2000004c <init_app+0x3c>)
2000001e:	801a      	strh	r2, [r3, #0]
	
	*GPIO_PUPDR = 0xAAAAAAAA;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <init_app+0x40>)
20000022:	4a0c      	ldr	r2, [pc, #48]	; (20000054 <init_app+0x44>)
20000024:	601a      	str	r2, [r3, #0]
	
	*GPIO_ODR_HIGH = 0;
20000026:	4b0c      	ldr	r3, [pc, #48]	; (20000058 <init_app+0x48>)
20000028:	2200      	movs	r2, #0
2000002a:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = 0;
2000002c:	4b0b      	ldr	r3, [pc, #44]	; (2000005c <init_app+0x4c>)
2000002e:	2200      	movs	r2, #0
20000030:	701a      	strb	r2, [r3, #0]
	*GPIO_IDR_HIGH = 0;
20000032:	4b0b      	ldr	r3, [pc, #44]	; (20000060 <init_app+0x50>)
20000034:	2200      	movs	r2, #0
20000036:	701a      	strb	r2, [r3, #0]
	
}
20000038:	46c0      	nop			; (mov r8, r8)
2000003a:	46bd      	mov	sp, r7
2000003c:	bd80      	pop	{r7, pc}
2000003e:	46c0      	nop			; (mov r8, r8)
20000040:	40021000 	andmi	r1, r2, r0
20000044:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000048:	40021004 	andmi	r1, r2, r4
2000004c:	00007777 	andeq	r7, r0, r7, ror r7
20000050:	4002100c 	andmi	r1, r2, ip
20000054:	aaaaaaaa 	bge	1eaaab04 <startup-0x15554fc>
20000058:	40021015 	andmi	r1, r2, r5, lsl r0
2000005c:	40021014 	andmi	r1, r2, r4, lsl r0
20000060:	40021011 	andmi	r1, r2, r1, lsl r0

20000064 <delay_250ns>:

void delay_250ns(void) {
20000064:	b580      	push	{r7, lr}
20000066:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000068:	4b0c      	ldr	r3, [pc, #48]	; (2000009c <delay_250ns+0x38>)
2000006a:	2200      	movs	r2, #0
2000006c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
2000006e:	4b0c      	ldr	r3, [pc, #48]	; (200000a0 <delay_250ns+0x3c>)
20000070:	2231      	movs	r2, #49	; 0x31
20000072:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000074:	4b0b      	ldr	r3, [pc, #44]	; (200000a4 <delay_250ns+0x40>)
20000076:	2200      	movs	r2, #0
20000078:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000007a:	4b08      	ldr	r3, [pc, #32]	; (2000009c <delay_250ns+0x38>)
2000007c:	2205      	movs	r2, #5
2000007e:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
20000080:	46c0      	nop			; (mov r8, r8)
20000082:	4b06      	ldr	r3, [pc, #24]	; (2000009c <delay_250ns+0x38>)
20000084:	681a      	ldr	r2, [r3, #0]
20000086:	2380      	movs	r3, #128	; 0x80
20000088:	025b      	lsls	r3, r3, #9
2000008a:	4013      	ands	r3, r2
2000008c:	d0f9      	beq.n	20000082 <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
2000008e:	4b03      	ldr	r3, [pc, #12]	; (2000009c <delay_250ns+0x38>)
20000090:	2200      	movs	r2, #0
20000092:	601a      	str	r2, [r3, #0]
}
20000094:	46c0      	nop			; (mov r8, r8)
20000096:	46bd      	mov	sp, r7
20000098:	bd80      	pop	{r7, pc}
2000009a:	46c0      	nop			; (mov r8, r8)
2000009c:	e000e010 	and	lr, r0, r0, lsl r0
200000a0:	e000e014 	and	lr, r0, r4, lsl r0
200000a4:	e000e018 	and	lr, r0, r8, lsl r0

200000a8 <delay_mikro>:

void delay_mikro(unsigned int us) {
200000a8:	b580      	push	{r7, lr}
200000aa:	b082      	sub	sp, #8
200000ac:	af00      	add	r7, sp, #0
200000ae:	6078      	str	r0, [r7, #4]
	while(us--) {
200000b0:	e007      	b.n	200000c2 <delay_mikro+0x1a>
		delay_250ns();
200000b2:	f7ff ffd7 	bl	20000064 <delay_250ns>
		delay_250ns();
200000b6:	f7ff ffd5 	bl	20000064 <delay_250ns>
		delay_250ns();
200000ba:	f7ff ffd3 	bl	20000064 <delay_250ns>
		delay_250ns();
200000be:	f7ff ffd1 	bl	20000064 <delay_250ns>
	while(us--) {
200000c2:	687b      	ldr	r3, [r7, #4]
200000c4:	1e5a      	subs	r2, r3, #1
200000c6:	607a      	str	r2, [r7, #4]
200000c8:	2b00      	cmp	r3, #0
200000ca:	d1f2      	bne.n	200000b2 <delay_mikro+0xa>
	}
}
200000cc:	46c0      	nop			; (mov r8, r8)
200000ce:	46bd      	mov	sp, r7
200000d0:	b002      	add	sp, #8
200000d2:	bd80      	pop	{r7, pc}

200000d4 <delay_milli>:

void delay_milli(unsigned int ms) {
200000d4:	b580      	push	{r7, lr}
200000d6:	b082      	sub	sp, #8
200000d8:	af00      	add	r7, sp, #0
200000da:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_mikro(ms);
200000dc:	687b      	ldr	r3, [r7, #4]
200000de:	0018      	movs	r0, r3
200000e0:	f7ff ffe2 	bl	200000a8 <delay_mikro>
	#else
		delay_mikro(1000 * ms)
	#endif
}
200000e4:	46c0      	nop			; (mov r8, r8)
200000e6:	46bd      	mov	sp, r7
200000e8:	b002      	add	sp, #8
200000ea:	bd80      	pop	{r7, pc}

200000ec <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned int x) {
200000ec:	b580      	push	{r7, lr}
200000ee:	b082      	sub	sp, #8
200000f0:	af00      	add	r7, sp, #0
200000f2:	6078      	str	r0, [r7, #4]
	switch(x) {
200000f4:	687b      	ldr	r3, [r7, #4]
200000f6:	2b07      	cmp	r3, #7
200000f8:	d84e      	bhi.n	20000198 <ascii_ctrl_bit_set+0xac>
200000fa:	687b      	ldr	r3, [r7, #4]
200000fc:	009a      	lsls	r2, r3, #2
200000fe:	4b28      	ldr	r3, [pc, #160]	; (200001a0 <ascii_ctrl_bit_set+0xb4>)
20000100:	18d3      	adds	r3, r2, r3
20000102:	681b      	ldr	r3, [r3, #0]
20000104:	469f      	mov	pc, r3
		case 0: *GPIO_ODR_LOW |= 1; break;
20000106:	4a27      	ldr	r2, [pc, #156]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
20000108:	4b26      	ldr	r3, [pc, #152]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
2000010a:	781b      	ldrb	r3, [r3, #0]
2000010c:	b2db      	uxtb	r3, r3
2000010e:	2101      	movs	r1, #1
20000110:	430b      	orrs	r3, r1
20000112:	b2db      	uxtb	r3, r3
20000114:	7013      	strb	r3, [r2, #0]
20000116:	e03f      	b.n	20000198 <ascii_ctrl_bit_set+0xac>
		case 1: *GPIO_ODR_LOW |= 2; break;
20000118:	4a22      	ldr	r2, [pc, #136]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
2000011a:	4b22      	ldr	r3, [pc, #136]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
2000011c:	781b      	ldrb	r3, [r3, #0]
2000011e:	b2db      	uxtb	r3, r3
20000120:	2102      	movs	r1, #2
20000122:	430b      	orrs	r3, r1
20000124:	b2db      	uxtb	r3, r3
20000126:	7013      	strb	r3, [r2, #0]
20000128:	e036      	b.n	20000198 <ascii_ctrl_bit_set+0xac>
		case 2: *GPIO_ODR_LOW |= 4; break;
2000012a:	4a1e      	ldr	r2, [pc, #120]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
2000012c:	4b1d      	ldr	r3, [pc, #116]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
2000012e:	781b      	ldrb	r3, [r3, #0]
20000130:	b2db      	uxtb	r3, r3
20000132:	2104      	movs	r1, #4
20000134:	430b      	orrs	r3, r1
20000136:	b2db      	uxtb	r3, r3
20000138:	7013      	strb	r3, [r2, #0]
2000013a:	e02d      	b.n	20000198 <ascii_ctrl_bit_set+0xac>
		case 3: *GPIO_ODR_LOW |= 8; break;
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
2000013e:	4b19      	ldr	r3, [pc, #100]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
20000140:	781b      	ldrb	r3, [r3, #0]
20000142:	b2db      	uxtb	r3, r3
20000144:	2108      	movs	r1, #8
20000146:	430b      	orrs	r3, r1
20000148:	b2db      	uxtb	r3, r3
2000014a:	7013      	strb	r3, [r2, #0]
2000014c:	e024      	b.n	20000198 <ascii_ctrl_bit_set+0xac>
		case 4: *GPIO_ODR_LOW |= 16; break;
2000014e:	4a15      	ldr	r2, [pc, #84]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
20000150:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
20000152:	781b      	ldrb	r3, [r3, #0]
20000154:	b2db      	uxtb	r3, r3
20000156:	2110      	movs	r1, #16
20000158:	430b      	orrs	r3, r1
2000015a:	b2db      	uxtb	r3, r3
2000015c:	7013      	strb	r3, [r2, #0]
2000015e:	e01b      	b.n	20000198 <ascii_ctrl_bit_set+0xac>
		case 5: *GPIO_ODR_LOW |= 32; break;
20000160:	4a10      	ldr	r2, [pc, #64]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
20000162:	4b10      	ldr	r3, [pc, #64]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
20000164:	781b      	ldrb	r3, [r3, #0]
20000166:	b2db      	uxtb	r3, r3
20000168:	2120      	movs	r1, #32
2000016a:	430b      	orrs	r3, r1
2000016c:	b2db      	uxtb	r3, r3
2000016e:	7013      	strb	r3, [r2, #0]
20000170:	e012      	b.n	20000198 <ascii_ctrl_bit_set+0xac>
		case 6: *GPIO_ODR_LOW |= 64; break;
20000172:	4a0c      	ldr	r2, [pc, #48]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
20000174:	4b0b      	ldr	r3, [pc, #44]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
20000176:	781b      	ldrb	r3, [r3, #0]
20000178:	b2db      	uxtb	r3, r3
2000017a:	2140      	movs	r1, #64	; 0x40
2000017c:	430b      	orrs	r3, r1
2000017e:	b2db      	uxtb	r3, r3
20000180:	7013      	strb	r3, [r2, #0]
20000182:	e009      	b.n	20000198 <ascii_ctrl_bit_set+0xac>
		case 7: *GPIO_ODR_LOW |= 128; break;
20000184:	4907      	ldr	r1, [pc, #28]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
20000186:	4b07      	ldr	r3, [pc, #28]	; (200001a4 <ascii_ctrl_bit_set+0xb8>)
20000188:	781b      	ldrb	r3, [r3, #0]
2000018a:	b2db      	uxtb	r3, r3
2000018c:	2280      	movs	r2, #128	; 0x80
2000018e:	4252      	negs	r2, r2
20000190:	4313      	orrs	r3, r2
20000192:	b2db      	uxtb	r3, r3
20000194:	700b      	strb	r3, [r1, #0]
20000196:	46c0      	nop			; (mov r8, r8)
	}
}
20000198:	46c0      	nop			; (mov r8, r8)
2000019a:	46bd      	mov	sp, r7
2000019c:	b002      	add	sp, #8
2000019e:	bd80      	pop	{r7, pc}
200001a0:	20000558 	andcs	r0, r0, r8, asr r5
200001a4:	40021014 	andmi	r1, r2, r4, lsl r0

200001a8 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned int x) {
200001a8:	b580      	push	{r7, lr}
200001aa:	b082      	sub	sp, #8
200001ac:	af00      	add	r7, sp, #0
200001ae:	6078      	str	r0, [r7, #4]
	switch(x) {
200001b0:	687b      	ldr	r3, [r7, #4]
200001b2:	2b07      	cmp	r3, #7
200001b4:	d84d      	bhi.n	20000252 <ascii_ctrl_bit_clear+0xaa>
200001b6:	687b      	ldr	r3, [r7, #4]
200001b8:	009a      	lsls	r2, r3, #2
200001ba:	4b28      	ldr	r3, [pc, #160]	; (2000025c <ascii_ctrl_bit_clear+0xb4>)
200001bc:	18d3      	adds	r3, r2, r3
200001be:	681b      	ldr	r3, [r3, #0]
200001c0:	469f      	mov	pc, r3
		case(0): *GPIO_ODR_LOW &= 0xFE; break;
200001c2:	4a27      	ldr	r2, [pc, #156]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
200001c4:	4b26      	ldr	r3, [pc, #152]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
200001c6:	781b      	ldrb	r3, [r3, #0]
200001c8:	b2db      	uxtb	r3, r3
200001ca:	2101      	movs	r1, #1
200001cc:	438b      	bics	r3, r1
200001ce:	b2db      	uxtb	r3, r3
200001d0:	7013      	strb	r3, [r2, #0]
200001d2:	e03e      	b.n	20000252 <ascii_ctrl_bit_clear+0xaa>
		case(1): *GPIO_ODR_LOW &= 0xFD; break;
200001d4:	4a22      	ldr	r2, [pc, #136]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
200001d6:	4b22      	ldr	r3, [pc, #136]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
200001d8:	781b      	ldrb	r3, [r3, #0]
200001da:	b2db      	uxtb	r3, r3
200001dc:	2102      	movs	r1, #2
200001de:	438b      	bics	r3, r1
200001e0:	b2db      	uxtb	r3, r3
200001e2:	7013      	strb	r3, [r2, #0]
200001e4:	e035      	b.n	20000252 <ascii_ctrl_bit_clear+0xaa>
		case(2): *GPIO_ODR_LOW &= 0xFB; break;
200001e6:	4a1e      	ldr	r2, [pc, #120]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
200001e8:	4b1d      	ldr	r3, [pc, #116]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
200001ea:	781b      	ldrb	r3, [r3, #0]
200001ec:	b2db      	uxtb	r3, r3
200001ee:	2104      	movs	r1, #4
200001f0:	438b      	bics	r3, r1
200001f2:	b2db      	uxtb	r3, r3
200001f4:	7013      	strb	r3, [r2, #0]
200001f6:	e02c      	b.n	20000252 <ascii_ctrl_bit_clear+0xaa>
		case(3): *GPIO_ODR_LOW &= 0xF7; break;
200001f8:	4a19      	ldr	r2, [pc, #100]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
200001fa:	4b19      	ldr	r3, [pc, #100]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
200001fc:	781b      	ldrb	r3, [r3, #0]
200001fe:	b2db      	uxtb	r3, r3
20000200:	2108      	movs	r1, #8
20000202:	438b      	bics	r3, r1
20000204:	b2db      	uxtb	r3, r3
20000206:	7013      	strb	r3, [r2, #0]
20000208:	e023      	b.n	20000252 <ascii_ctrl_bit_clear+0xaa>
		case(4): *GPIO_ODR_LOW &= 0xEF; break;
2000020a:	4a15      	ldr	r2, [pc, #84]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
2000020c:	4b14      	ldr	r3, [pc, #80]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
2000020e:	781b      	ldrb	r3, [r3, #0]
20000210:	b2db      	uxtb	r3, r3
20000212:	2110      	movs	r1, #16
20000214:	438b      	bics	r3, r1
20000216:	b2db      	uxtb	r3, r3
20000218:	7013      	strb	r3, [r2, #0]
2000021a:	e01a      	b.n	20000252 <ascii_ctrl_bit_clear+0xaa>
		case(5): *GPIO_ODR_LOW &= 0xDF; break;
2000021c:	4a10      	ldr	r2, [pc, #64]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
2000021e:	4b10      	ldr	r3, [pc, #64]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
20000220:	781b      	ldrb	r3, [r3, #0]
20000222:	b2db      	uxtb	r3, r3
20000224:	2120      	movs	r1, #32
20000226:	438b      	bics	r3, r1
20000228:	b2db      	uxtb	r3, r3
2000022a:	7013      	strb	r3, [r2, #0]
2000022c:	e011      	b.n	20000252 <ascii_ctrl_bit_clear+0xaa>
		case(6): *GPIO_ODR_LOW &= 0xBF; break;
2000022e:	4a0c      	ldr	r2, [pc, #48]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
20000230:	4b0b      	ldr	r3, [pc, #44]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
20000232:	781b      	ldrb	r3, [r3, #0]
20000234:	b2db      	uxtb	r3, r3
20000236:	2140      	movs	r1, #64	; 0x40
20000238:	438b      	bics	r3, r1
2000023a:	b2db      	uxtb	r3, r3
2000023c:	7013      	strb	r3, [r2, #0]
2000023e:	e008      	b.n	20000252 <ascii_ctrl_bit_clear+0xaa>
		case(7): *GPIO_ODR_LOW &= 0x7F; break;
20000240:	4a07      	ldr	r2, [pc, #28]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
20000242:	4b07      	ldr	r3, [pc, #28]	; (20000260 <ascii_ctrl_bit_clear+0xb8>)
20000244:	781b      	ldrb	r3, [r3, #0]
20000246:	b2db      	uxtb	r3, r3
20000248:	217f      	movs	r1, #127	; 0x7f
2000024a:	400b      	ands	r3, r1
2000024c:	b2db      	uxtb	r3, r3
2000024e:	7013      	strb	r3, [r2, #0]
20000250:	46c0      	nop			; (mov r8, r8)
	}
}
20000252:	46c0      	nop			; (mov r8, r8)
20000254:	46bd      	mov	sp, r7
20000256:	b002      	add	sp, #8
20000258:	bd80      	pop	{r7, pc}
2000025a:	46c0      	nop			; (mov r8, r8)
2000025c:	20000578 	andcs	r0, r0, r8, ror r5
20000260:	40021014 	andmi	r1, r2, r4, lsl r0

20000264 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte) {
20000264:	b580      	push	{r7, lr}
20000266:	b082      	sub	sp, #8
20000268:	af00      	add	r7, sp, #0
2000026a:	0002      	movs	r2, r0
2000026c:	1dfb      	adds	r3, r7, #7
2000026e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20000270:	2006      	movs	r0, #6
20000272:	f7ff ff3b 	bl	200000ec <ascii_ctrl_bit_set>
	*GPIO_ODR_HIGH = byte;
20000276:	4a06      	ldr	r2, [pc, #24]	; (20000290 <ascii_write_controller+0x2c>)
20000278:	1dfb      	adds	r3, r7, #7
2000027a:	781b      	ldrb	r3, [r3, #0]
2000027c:	7013      	strb	r3, [r2, #0]
	delay_250ns();
2000027e:	f7ff fef1 	bl	20000064 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20000282:	2006      	movs	r0, #6
20000284:	f7ff ff90 	bl	200001a8 <ascii_ctrl_bit_clear>
}
20000288:	46c0      	nop			; (mov r8, r8)
2000028a:	46bd      	mov	sp, r7
2000028c:	b002      	add	sp, #8
2000028e:	bd80      	pop	{r7, pc}
20000290:	40021015 	andmi	r1, r2, r5, lsl r0

20000294 <ascii_read_controller>:

unsigned char ascii_read_controller() {
20000294:	b580      	push	{r7, lr}
20000296:	b082      	sub	sp, #8
20000298:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
2000029a:	2006      	movs	r0, #6
2000029c:	f7ff ff26 	bl	200000ec <ascii_ctrl_bit_set>
	delay_250ns();
200002a0:	f7ff fee0 	bl	20000064 <delay_250ns>
	delay_250ns();
200002a4:	f7ff fede 	bl	20000064 <delay_250ns>
	unsigned char rv = *GPIO_IDR_HIGH;
200002a8:	4a06      	ldr	r2, [pc, #24]	; (200002c4 <ascii_read_controller+0x30>)
200002aa:	1dfb      	adds	r3, r7, #7
200002ac:	7812      	ldrb	r2, [r2, #0]
200002ae:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
200002b0:	2006      	movs	r0, #6
200002b2:	f7ff ff79 	bl	200001a8 <ascii_ctrl_bit_clear>
	return rv;
200002b6:	1dfb      	adds	r3, r7, #7
200002b8:	781b      	ldrb	r3, [r3, #0]
}
200002ba:	0018      	movs	r0, r3
200002bc:	46bd      	mov	sp, r7
200002be:	b002      	add	sp, #8
200002c0:	bd80      	pop	{r7, pc}
200002c2:	46c0      	nop			; (mov r8, r8)
200002c4:	40021011 	andmi	r1, r2, r1, lsl r0

200002c8 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command) {
200002c8:	b580      	push	{r7, lr}
200002ca:	b082      	sub	sp, #8
200002cc:	af00      	add	r7, sp, #0
200002ce:	0002      	movs	r2, r0
200002d0:	1dfb      	adds	r3, r7, #7
200002d2:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200002d4:	2000      	movs	r0, #0
200002d6:	f7ff ff67 	bl	200001a8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
200002da:	2001      	movs	r0, #1
200002dc:	f7ff ff64 	bl	200001a8 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
200002e0:	1dfb      	adds	r3, r7, #7
200002e2:	781b      	ldrb	r3, [r3, #0]
200002e4:	0018      	movs	r0, r3
200002e6:	f7ff ffbd 	bl	20000264 <ascii_write_controller>
}
200002ea:	46c0      	nop			; (mov r8, r8)
200002ec:	46bd      	mov	sp, r7
200002ee:	b002      	add	sp, #8
200002f0:	bd80      	pop	{r7, pc}

200002f2 <ascii_write_data>:

void ascii_write_data(unsigned char data) {
200002f2:	b580      	push	{r7, lr}
200002f4:	b082      	sub	sp, #8
200002f6:	af00      	add	r7, sp, #0
200002f8:	0002      	movs	r2, r0
200002fa:	1dfb      	adds	r3, r7, #7
200002fc:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200002fe:	2000      	movs	r0, #0
20000300:	f7ff fef4 	bl	200000ec <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000304:	2001      	movs	r0, #1
20000306:	f7ff ff4f 	bl	200001a8 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
2000030a:	1dfb      	adds	r3, r7, #7
2000030c:	781b      	ldrb	r3, [r3, #0]
2000030e:	0018      	movs	r0, r3
20000310:	f7ff ffa8 	bl	20000264 <ascii_write_controller>
}
20000314:	46c0      	nop			; (mov r8, r8)
20000316:	46bd      	mov	sp, r7
20000318:	b002      	add	sp, #8
2000031a:	bd80      	pop	{r7, pc}

2000031c <ascii_read_status>:

unsigned char ascii_read_status(void) {
2000031c:	b590      	push	{r4, r7, lr}
2000031e:	b083      	sub	sp, #12
20000320:	af00      	add	r7, sp, #0
	*GPIO_MODER &= 0x0000FFFF;	
20000322:	4b11      	ldr	r3, [pc, #68]	; (20000368 <ascii_read_status+0x4c>)
20000324:	4a10      	ldr	r2, [pc, #64]	; (20000368 <ascii_read_status+0x4c>)
20000326:	6812      	ldr	r2, [r2, #0]
20000328:	0412      	lsls	r2, r2, #16
2000032a:	0c12      	lsrs	r2, r2, #16
2000032c:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
2000032e:	2000      	movs	r0, #0
20000330:	f7ff ff3a 	bl	200001a8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000334:	2001      	movs	r0, #1
20000336:	f7ff fed9 	bl	200000ec <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
2000033a:	1dfc      	adds	r4, r7, #7
2000033c:	f7ff ffaa 	bl	20000294 <ascii_read_controller>
20000340:	0003      	movs	r3, r0
20000342:	7023      	strb	r3, [r4, #0]
	*GPIO_MODER &= 0x0000FFFF;
20000344:	4b08      	ldr	r3, [pc, #32]	; (20000368 <ascii_read_status+0x4c>)
20000346:	4a08      	ldr	r2, [pc, #32]	; (20000368 <ascii_read_status+0x4c>)
20000348:	6812      	ldr	r2, [r2, #0]
2000034a:	0412      	lsls	r2, r2, #16
2000034c:	0c12      	lsrs	r2, r2, #16
2000034e:	601a      	str	r2, [r3, #0]
	*GPIO_MODER |= 0x55550000;	
20000350:	4b05      	ldr	r3, [pc, #20]	; (20000368 <ascii_read_status+0x4c>)
20000352:	4a05      	ldr	r2, [pc, #20]	; (20000368 <ascii_read_status+0x4c>)
20000354:	6812      	ldr	r2, [r2, #0]
20000356:	4905      	ldr	r1, [pc, #20]	; (2000036c <ascii_read_status+0x50>)
20000358:	430a      	orrs	r2, r1
2000035a:	601a      	str	r2, [r3, #0]
	return rv;
2000035c:	1dfb      	adds	r3, r7, #7
2000035e:	781b      	ldrb	r3, [r3, #0]
}
20000360:	0018      	movs	r0, r3
20000362:	46bd      	mov	sp, r7
20000364:	b003      	add	sp, #12
20000366:	bd90      	pop	{r4, r7, pc}
20000368:	40021000 	andmi	r1, r2, r0
2000036c:	55550000 	ldrbpl	r0, [r5, #-0]

20000370 <ascii_read_data>:

unsigned char ascii_read_data(void) {
20000370:	b590      	push	{r4, r7, lr}
20000372:	b083      	sub	sp, #12
20000374:	af00      	add	r7, sp, #0
	*GPIO_MODER &= 0x0000FFFF;	
20000376:	4b11      	ldr	r3, [pc, #68]	; (200003bc <ascii_read_data+0x4c>)
20000378:	4a10      	ldr	r2, [pc, #64]	; (200003bc <ascii_read_data+0x4c>)
2000037a:	6812      	ldr	r2, [r2, #0]
2000037c:	0412      	lsls	r2, r2, #16
2000037e:	0c12      	lsrs	r2, r2, #16
20000380:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000382:	2000      	movs	r0, #0
20000384:	f7ff feb2 	bl	200000ec <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000388:	2001      	movs	r0, #1
2000038a:	f7ff feaf 	bl	200000ec <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
2000038e:	1dfc      	adds	r4, r7, #7
20000390:	f7ff ff80 	bl	20000294 <ascii_read_controller>
20000394:	0003      	movs	r3, r0
20000396:	7023      	strb	r3, [r4, #0]
	*GPIO_MODER &= 0x0000FFFF;
20000398:	4b08      	ldr	r3, [pc, #32]	; (200003bc <ascii_read_data+0x4c>)
2000039a:	4a08      	ldr	r2, [pc, #32]	; (200003bc <ascii_read_data+0x4c>)
2000039c:	6812      	ldr	r2, [r2, #0]
2000039e:	0412      	lsls	r2, r2, #16
200003a0:	0c12      	lsrs	r2, r2, #16
200003a2:	601a      	str	r2, [r3, #0]
	*GPIO_MODER |= 0x55550000;	
200003a4:	4b05      	ldr	r3, [pc, #20]	; (200003bc <ascii_read_data+0x4c>)
200003a6:	4a05      	ldr	r2, [pc, #20]	; (200003bc <ascii_read_data+0x4c>)
200003a8:	6812      	ldr	r2, [r2, #0]
200003aa:	4905      	ldr	r1, [pc, #20]	; (200003c0 <ascii_read_data+0x50>)
200003ac:	430a      	orrs	r2, r1
200003ae:	601a      	str	r2, [r3, #0]
	return rv;
200003b0:	1dfb      	adds	r3, r7, #7
200003b2:	781b      	ldrb	r3, [r3, #0]
}
200003b4:	0018      	movs	r0, r3
200003b6:	46bd      	mov	sp, r7
200003b8:	b003      	add	sp, #12
200003ba:	bd90      	pop	{r4, r7, pc}
200003bc:	40021000 	andmi	r1, r2, r0
200003c0:	55550000 	ldrbpl	r0, [r5, #-0]

200003c4 <ascii_command>:

void ascii_command(char command, unsigned int delayMicro) {
200003c4:	b580      	push	{r7, lr}
200003c6:	b082      	sub	sp, #8
200003c8:	af00      	add	r7, sp, #0
200003ca:	0002      	movs	r2, r0
200003cc:	6039      	str	r1, [r7, #0]
200003ce:	1dfb      	adds	r3, r7, #7
200003d0:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80) {
200003d2:	46c0      	nop			; (mov r8, r8)
200003d4:	f7ff ffa2 	bl	2000031c <ascii_read_status>
200003d8:	0003      	movs	r3, r0
200003da:	001a      	movs	r2, r3
200003dc:	2380      	movs	r3, #128	; 0x80
200003de:	4013      	ands	r3, r2
200003e0:	2b80      	cmp	r3, #128	; 0x80
200003e2:	d0f7      	beq.n	200003d4 <ascii_command+0x10>
		// Do nothing, wait for status flag
	}
	delay_mikro(8);
200003e4:	2008      	movs	r0, #8
200003e6:	f7ff fe5f 	bl	200000a8 <delay_mikro>
	ascii_write_cmd(command);
200003ea:	1dfb      	adds	r3, r7, #7
200003ec:	781b      	ldrb	r3, [r3, #0]
200003ee:	0018      	movs	r0, r3
200003f0:	f7ff ff6a 	bl	200002c8 <ascii_write_cmd>
	delay_mikro(delayMicro);
200003f4:	683b      	ldr	r3, [r7, #0]
200003f6:	0018      	movs	r0, r3
200003f8:	f7ff fe56 	bl	200000a8 <delay_mikro>
}
200003fc:	46c0      	nop			; (mov r8, r8)
200003fe:	46bd      	mov	sp, r7
20000400:	b002      	add	sp, #8
20000402:	bd80      	pop	{r7, pc}

20000404 <ascii_init>:

void ascii_init(void) {
20000404:	b580      	push	{r7, lr}
20000406:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_SELECT);
20000408:	2002      	movs	r0, #2
2000040a:	f7ff fe6f 	bl	200000ec <ascii_ctrl_bit_set>
	ascii_command(0x38, 40); // Set display size and font size
2000040e:	2128      	movs	r1, #40	; 0x28
20000410:	2038      	movs	r0, #56	; 0x38
20000412:	f7ff ffd7 	bl	200003c4 <ascii_command>
    ascii_command(0xE, 40); // Set display, cursor on
20000416:	2128      	movs	r1, #40	; 0x28
20000418:	200e      	movs	r0, #14
2000041a:	f7ff ffd3 	bl	200003c4 <ascii_command>
	ascii_command(0x01, 1530); // Clear display
2000041e:	4b06      	ldr	r3, [pc, #24]	; (20000438 <ascii_init+0x34>)
20000420:	0019      	movs	r1, r3
20000422:	2001      	movs	r0, #1
20000424:	f7ff ffce 	bl	200003c4 <ascii_command>
    ascii_command(0x6, 40); // Inc, no shift
20000428:	2128      	movs	r1, #40	; 0x28
2000042a:	2006      	movs	r0, #6
2000042c:	f7ff ffca 	bl	200003c4 <ascii_command>
}
20000430:	46c0      	nop			; (mov r8, r8)
20000432:	46bd      	mov	sp, r7
20000434:	bd80      	pop	{r7, pc}
20000436:	46c0      	nop			; (mov r8, r8)
20000438:	000005fa 	strdeq	r0, [r0], -sl

2000043c <ascii_write_char>:

void ascii_write_char(unsigned char charToWrite) {
2000043c:	b580      	push	{r7, lr}
2000043e:	b082      	sub	sp, #8
20000440:	af00      	add	r7, sp, #0
20000442:	0002      	movs	r2, r0
20000444:	1dfb      	adds	r3, r7, #7
20000446:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80) {
20000448:	46c0      	nop			; (mov r8, r8)
2000044a:	f7ff ff67 	bl	2000031c <ascii_read_status>
2000044e:	0003      	movs	r3, r0
20000450:	001a      	movs	r2, r3
20000452:	2380      	movs	r3, #128	; 0x80
20000454:	4013      	ands	r3, r2
20000456:	2b80      	cmp	r3, #128	; 0x80
20000458:	d0f7      	beq.n	2000044a <ascii_write_char+0xe>
	// Do nothing, wait for status flag
    }
	delay_mikro(8);
2000045a:	2008      	movs	r0, #8
2000045c:	f7ff fe24 	bl	200000a8 <delay_mikro>
    ascii_write_data(charToWrite);
20000460:	1dfb      	adds	r3, r7, #7
20000462:	781b      	ldrb	r3, [r3, #0]
20000464:	0018      	movs	r0, r3
20000466:	f7ff ff44 	bl	200002f2 <ascii_write_data>
    delay_mikro(45);
2000046a:	202d      	movs	r0, #45	; 0x2d
2000046c:	f7ff fe1c 	bl	200000a8 <delay_mikro>
}
20000470:	46c0      	nop			; (mov r8, r8)
20000472:	46bd      	mov	sp, r7
20000474:	b002      	add	sp, #8
20000476:	bd80      	pop	{r7, pc}

20000478 <goToXY>:

void goToXY(unsigned char row, unsigned char column) {
20000478:	b580      	push	{r7, lr}
2000047a:	b084      	sub	sp, #16
2000047c:	af00      	add	r7, sp, #0
2000047e:	0002      	movs	r2, r0
20000480:	1dfb      	adds	r3, r7, #7
20000482:	701a      	strb	r2, [r3, #0]
20000484:	1dbb      	adds	r3, r7, #6
20000486:	1c0a      	adds	r2, r1, #0
20000488:	701a      	strb	r2, [r3, #0]
	unsigned char address = row - 1;
2000048a:	230f      	movs	r3, #15
2000048c:	18fb      	adds	r3, r7, r3
2000048e:	1dfa      	adds	r2, r7, #7
20000490:	7812      	ldrb	r2, [r2, #0]
20000492:	3a01      	subs	r2, #1
20000494:	701a      	strb	r2, [r3, #0]
	if(column == 2) {
20000496:	1dbb      	adds	r3, r7, #6
20000498:	781b      	ldrb	r3, [r3, #0]
2000049a:	2b02      	cmp	r3, #2
2000049c:	d106      	bne.n	200004ac <goToXY+0x34>
		address = address + 0x40;
2000049e:	230f      	movs	r3, #15
200004a0:	18fb      	adds	r3, r7, r3
200004a2:	220f      	movs	r2, #15
200004a4:	18ba      	adds	r2, r7, r2
200004a6:	7812      	ldrb	r2, [r2, #0]
200004a8:	3240      	adds	r2, #64	; 0x40
200004aa:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
200004ac:	230f      	movs	r3, #15
200004ae:	18fb      	adds	r3, r7, r3
200004b0:	781b      	ldrb	r3, [r3, #0]
200004b2:	2280      	movs	r2, #128	; 0x80
200004b4:	4252      	negs	r2, r2
200004b6:	4313      	orrs	r3, r2
200004b8:	b2db      	uxtb	r3, r3
200004ba:	0018      	movs	r0, r3
200004bc:	f7ff ff04 	bl	200002c8 <ascii_write_cmd>
}
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	46bd      	mov	sp, r7
200004c4:	b004      	add	sp, #16
200004c6:	bd80      	pop	{r7, pc}

200004c8 <main>:

void main(int argc, char **argv) {
200004c8:	b590      	push	{r4, r7, lr}
200004ca:	b08d      	sub	sp, #52	; 0x34
200004cc:	af00      	add	r7, sp, #0
200004ce:	6078      	str	r0, [r7, #4]
200004d0:	6039      	str	r1, [r7, #0]
	char *s;
	char test1[] = "Alfanumerisk ";
200004d2:	231c      	movs	r3, #28
200004d4:	18fb      	adds	r3, r7, r3
200004d6:	4a1e      	ldr	r2, [pc, #120]	; (20000550 <main+0x88>)
200004d8:	ca13      	ldmia	r2!, {r0, r1, r4}
200004da:	c313      	stmia	r3!, {r0, r1, r4}
200004dc:	8812      	ldrh	r2, [r2, #0]
200004de:	801a      	strh	r2, [r3, #0]
	char test2[] = "Display - test";
200004e0:	230c      	movs	r3, #12
200004e2:	18fb      	adds	r3, r7, r3
200004e4:	4a1b      	ldr	r2, [pc, #108]	; (20000554 <main+0x8c>)
200004e6:	ca13      	ldmia	r2!, {r0, r1, r4}
200004e8:	c313      	stmia	r3!, {r0, r1, r4}
200004ea:	8811      	ldrh	r1, [r2, #0]
200004ec:	8019      	strh	r1, [r3, #0]
200004ee:	7892      	ldrb	r2, [r2, #2]
200004f0:	709a      	strb	r2, [r3, #2]
////	
	init_app();
200004f2:	f7ff fd8d 	bl	20000010 <init_app>
    ascii_init();
200004f6:	f7ff ff85 	bl	20000404 <ascii_init>
	goToXY(1,1);
200004fa:	2101      	movs	r1, #1
200004fc:	2001      	movs	r0, #1
200004fe:	f7ff ffbb 	bl	20000478 <goToXY>
	
	s = test1;
20000502:	231c      	movs	r3, #28
20000504:	18fb      	adds	r3, r7, r3
20000506:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(*s) {
20000508:	e006      	b.n	20000518 <main+0x50>
		ascii_write_char(*s++);
2000050a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000050c:	1c5a      	adds	r2, r3, #1
2000050e:	62fa      	str	r2, [r7, #44]	; 0x2c
20000510:	781b      	ldrb	r3, [r3, #0]
20000512:	0018      	movs	r0, r3
20000514:	f7ff ff92 	bl	2000043c <ascii_write_char>
	while(*s) {
20000518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000051a:	781b      	ldrb	r3, [r3, #0]
2000051c:	2b00      	cmp	r3, #0
2000051e:	d1f4      	bne.n	2000050a <main+0x42>
	}
	goToXY(1,2);
20000520:	2102      	movs	r1, #2
20000522:	2001      	movs	r0, #1
20000524:	f7ff ffa8 	bl	20000478 <goToXY>
	s = test2;
20000528:	230c      	movs	r3, #12
2000052a:	18fb      	adds	r3, r7, r3
2000052c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(*s) {
2000052e:	e006      	b.n	2000053e <main+0x76>
		ascii_write_char(*s++);
20000530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000532:	1c5a      	adds	r2, r3, #1
20000534:	62fa      	str	r2, [r7, #44]	; 0x2c
20000536:	781b      	ldrb	r3, [r3, #0]
20000538:	0018      	movs	r0, r3
2000053a:	f7ff ff7f 	bl	2000043c <ascii_write_char>
	while(*s) {
2000053e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000540:	781b      	ldrb	r3, [r3, #0]
20000542:	2b00      	cmp	r3, #0
20000544:	d1f4      	bne.n	20000530 <main+0x68>
	}
	return 0;
20000546:	46c0      	nop			; (mov r8, r8)
}
20000548:	46bd      	mov	sp, r7
2000054a:	b00d      	add	sp, #52	; 0x34
2000054c:	bd90      	pop	{r4, r7, pc}
2000054e:	46c0      	nop			; (mov r8, r8)
20000550:	20000598 	mulcs	r0, r8, r5
20000554:	200005a8 	andcs	r0, r0, r8, lsr #11
20000558:	20000106 	andcs	r0, r0, r6, lsl #2
2000055c:	20000118 	andcs	r0, r0, r8, lsl r1
20000560:	2000012a 	andcs	r0, r0, sl, lsr #2
20000564:	2000013c 	andcs	r0, r0, ip, lsr r1
20000568:	2000014e 	andcs	r0, r0, lr, asr #2
2000056c:	20000160 	andcs	r0, r0, r0, ror #2
20000570:	20000172 	andcs	r0, r0, r2, ror r1
20000574:	20000184 	andcs	r0, r0, r4, lsl #3
20000578:	200001c2 	andcs	r0, r0, r2, asr #3
2000057c:	200001d4 	ldrdcs	r0, [r0], -r4
20000580:	200001e6 	andcs	r0, r0, r6, ror #3
20000584:	200001f8 	strdcs	r0, [r0], -r8
20000588:	2000020a 	andcs	r0, r0, sl, lsl #4
2000058c:	2000021c 	andcs	r0, r0, ip, lsl r2
20000590:	2000022e 	andcs	r0, r0, lr, lsr #4
20000594:	20000240 	andcs	r0, r0, r0, asr #4
20000598:	61666c41 	cmnvs	r6, r1, asr #24
2000059c:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
200005a0:	6b736972 	blvs	21cdab70 <main+0x1cda6a8>
200005a4:	00000020 	andeq	r0, r0, r0, lsr #32
200005a8:	70736944 	rsbsvc	r6, r3, r4, asr #18
200005ac:	2079616c 	rsbscs	r6, r9, ip, ror #2
200005b0:	6574202d 	ldrbvs	r2, [r4, #-45]!	; 0xffffffd3
200005b4:	00007473 	andeq	r7, r0, r3, ror r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000030c 	andeq	r0, r0, ip, lsl #6
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000138 	andeq	r0, r0, r8, lsr r1
  10:	0000950c 	andeq	r9, r0, ip, lsl #10
	...
  20:	01d00200 	bicseq	r0, r0, r0, lsl #4
  24:	bb010000 	bllt	4002c <startup-0x1ffbffd4>
  28:	200004c8 	andcs	r0, r0, r8, asr #9
  2c:	00000090 	muleq	r0, r0, r0
  30:	007b9c01 	rsbseq	r9, fp, r1, lsl #24
  34:	da030000 	ble	c003c <startup-0x1ff3ffc4>
  38:	01000001 	tsteq	r0, r1
  3c:	00007bbb 			; <UNDEFINED> instruction: 0x00007bbb
  40:	44910200 	ldrmi	r0, [r1], #512	; 0x200
  44:	00022e03 	andeq	r2, r2, r3, lsl #28
  48:	82bb0100 	adcshi	r0, fp, #0, 2
  4c:	02000000 	andeq	r0, r0, #0
  50:	73044091 	movwvc	r4, #16529	; 0x4091
  54:	88bc0100 	ldmhi	ip!, {r8}
  58:	02000000 	andeq	r0, r0, #0
  5c:	df056c91 	svcle	0x00056c91
  60:	01000001 	tsteq	r0, r1
  64:	000095bd 			; <UNDEFINED> instruction: 0x000095bd
  68:	5c910200 	lfmpl	f0, 4, [r1], {0}
  6c:	0001e505 	andeq	lr, r1, r5, lsl #10
  70:	acbe0100 	ldfges	f0, [lr]
  74:	02000000 	andeq	r0, r0, #0
  78:	06004c91 			; <UNDEFINED> instruction: 0x06004c91
  7c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  80:	04070074 	streq	r0, [r7], #-116	; 0xffffff8c
  84:	00000088 	andeq	r0, r0, r8, lsl #1
  88:	008e0407 	addeq	r0, lr, r7, lsl #8
  8c:	01080000 	mrseq	r0, (UNDEF: 8)
  90:	00013308 	andeq	r3, r1, r8, lsl #6
  94:	008e0900 	addeq	r0, lr, r0, lsl #18
  98:	00a50000 	adceq	r0, r5, r0
  9c:	a50a0000 	strge	r0, [sl, #-0]
  a0:	0d000000 	stceq	0, cr0, [r0, #-0]
  a4:	07040800 	streq	r0, [r4, -r0, lsl #16]
  a8:	00000201 	andeq	r0, r0, r1, lsl #4
  ac:	00008e09 	andeq	r8, r0, r9, lsl #28
  b0:	0000bc00 	andeq	fp, r0, r0, lsl #24
  b4:	00a50a00 	adceq	r0, r5, r0, lsl #20
  b8:	000e0000 	andeq	r0, lr, r0
  bc:	0001f202 	andeq	pc, r1, r2, lsl #4
  c0:	78b30100 	ldmvc	r3!, {r8}
  c4:	50200004 	eorpl	r0, r0, r4
  c8:	01000000 	mrseq	r0, (UNDEF: 0)
  cc:	0000fc9c 	muleq	r0, ip, ip
  d0:	6f720b00 	svcvs	0x00720b00
  d4:	b3010077 	movwlt	r0, #4215	; 0x1077
  d8:	000000fc 	strdeq	r0, [r0], -ip
  dc:	036f9102 	cmneq	pc, #-2147483648	; 0x80000000
  e0:	000001eb 	andeq	r0, r0, fp, ror #3
  e4:	00fcb301 	rscseq	fp, ip, r1, lsl #6
  e8:	91020000 	mrsls	r0, (UNDEF: 2)
  ec:	007b056e 	rsbseq	r0, fp, lr, ror #10
  f0:	b4010000 	strlt	r0, [r1], #-0
  f4:	000000fc 	strdeq	r0, [r0], -ip
  f8:	00779102 	rsbseq	r9, r7, r2, lsl #2
  fc:	2a080108 	bcs	200524 <startup-0x1fdffadc>
 100:	02000001 	andeq	r0, r0, #1
 104:	0000020a 	andeq	r0, r0, sl, lsl #4
 108:	043caa01 	ldrteq	sl, [ip], #-2561	; 0xfffff5ff
 10c:	003c2000 	eorseq	r2, ip, r0
 110:	9c010000 	stcls	0, cr0, [r1], {-0}
 114:	00000127 	andeq	r0, r0, r7, lsr #2
 118:	00023303 	andeq	r3, r2, r3, lsl #6
 11c:	fcaa0100 	stc2	1, cr0, [sl]
 120:	02000000 	andeq	r0, r0, #0
 124:	0c007791 	stceq	7, cr7, [r0], {145}	; 0x91
 128:	0000011f 	andeq	r0, r0, pc, lsl r1
 12c:	0404a201 	streq	sl, [r4], #-513	; 0xfffffdff
 130:	00382000 	eorseq	r2, r8, r0
 134:	9c010000 	stcls	0, cr0, [r1], {-0}
 138:	00010102 	andeq	r0, r1, r2, lsl #2
 13c:	c4990100 	ldrgt	r0, [r9], #256	; 0x100
 140:	40200003 	eormi	r0, r0, r3
 144:	01000000 	mrseq	r0, (UNDEF: 0)
 148:	00016a9c 	muleq	r1, ip, sl
 14c:	01070300 	mrseq	r0, SP_und
 150:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 154:	0000008e 	andeq	r0, r0, lr, lsl #1
 158:	03779102 	cmneq	r7, #-2147483648	; 0x80000000
 15c:	00000067 	andeq	r0, r0, r7, rrx
 160:	016a9901 	cmneq	sl, r1, lsl #18
 164:	91020000 	mrsls	r0, (UNDEF: 2)
 168:	04080070 	streq	r0, [r8], #-112	; 0xffffff90
 16c:	00000c07 	andeq	r0, r0, r7, lsl #24
 170:	010f0d00 	tsteq	pc, r0, lsl #26
 174:	8f010000 	svchi	0x00010000
 178:	000000fc 	strdeq	r0, [r0], -ip
 17c:	20000370 	andcs	r0, r0, r0, ror r3
 180:	00000054 	andeq	r0, r0, r4, asr r0
 184:	01989c01 	orrseq	r9, r8, r1, lsl #24
 188:	72040000 	andvc	r0, r4, #0
 18c:	93010076 	movwls	r0, #4214	; 0x1076
 190:	000000fc 	strdeq	r0, [r0], -ip
 194:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 198:	0000830d 	andeq	r8, r0, sp, lsl #6
 19c:	fc850100 	stc2	1, cr0, [r5], {0}
 1a0:	1c000000 	stcne	0, cr0, [r0], {-0}
 1a4:	54200003 	strtpl	r0, [r0], #-3
 1a8:	01000000 	mrseq	r0, (UNDEF: 0)
 1ac:	0001bf9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
 1b0:	76720400 	ldrbtvc	r0, [r2], -r0, lsl #8
 1b4:	fc890100 	stc2	1, cr0, [r9], {0}
 1b8:	02000000 	andeq	r0, r0, #0
 1bc:	02006f91 	andeq	r6, r0, #580	; 0x244
 1c0:	000000d4 	ldrdeq	r0, [r0], -r4
 1c4:	02f27f01 	rscseq	r7, r2, #1, 30
 1c8:	002a2000 	eoreq	r2, sl, r0
 1cc:	9c010000 	stcls	0, cr0, [r1], {-0}
 1d0:	000001e3 	andeq	r0, r0, r3, ror #3
 1d4:	00011a03 	andeq	r1, r1, r3, lsl #20
 1d8:	fc7f0100 	ldc2l	1, cr0, [pc], #-0	; 1e0 <startup-0x1ffffe20>
 1dc:	02000000 	andeq	r0, r0, #0
 1e0:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 1e4:	000000e5 	andeq	r0, r0, r5, ror #1
 1e8:	02c87901 	sbceq	r7, r8, #16384	; 0x4000
 1ec:	002a2000 	eoreq	r2, sl, r0
 1f0:	9c010000 	stcls	0, cr0, [r1], {-0}
 1f4:	00000207 	andeq	r0, r0, r7, lsl #4
 1f8:	00010703 	andeq	r0, r1, r3, lsl #14
 1fc:	fc790100 	ldc2l	1, cr0, [r9], #-0
 200:	02000000 	andeq	r0, r0, #0
 204:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
 208:	0000003a 	andeq	r0, r0, sl, lsr r0
 20c:	00fc7001 	rscseq	r7, ip, r1
 210:	02940000 	addseq	r0, r4, #0
 214:	00342000 	eorseq	r2, r4, r0
 218:	9c010000 	stcls	0, cr0, [r1], {-0}
 21c:	0000022e 	andeq	r0, r0, lr, lsr #4
 220:	00767204 	rsbseq	r7, r6, r4, lsl #4
 224:	00fc7401 	rscseq	r7, ip, r1, lsl #8
 228:	91020000 	mrsls	r0, (UNDEF: 2)
 22c:	50020077 	andpl	r0, r2, r7, ror r0
 230:	01000000 	mrseq	r0, (UNDEF: 0)
 234:	00026469 	andeq	r6, r2, r9, ror #8
 238:	00003020 	andeq	r3, r0, r0, lsr #32
 23c:	529c0100 	addspl	r0, ip, #0, 2
 240:	03000002 	movweq	r0, #2
 244:	000001d5 	ldrdeq	r0, [r0], -r5
 248:	00fc6901 	rscseq	r6, ip, r1, lsl #18
 24c:	91020000 	mrsls	r0, (UNDEF: 2)
 250:	190f0077 	stmdbne	pc, {r0, r1, r2, r4, r5, r6}	; <UNPREDICTABLE>
 254:	01000000 	mrseq	r0, (UNDEF: 0)
 258:	0001a85c 	andeq	sl, r1, ip, asr r8
 25c:	0000bc20 	andeq	fp, r0, r0, lsr #24
 260:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
 264:	0b000002 	bleq	274 <startup-0x1ffffd8c>
 268:	5c010078 	stcpl	0, cr0, [r1], {120}	; 0x78
 26c:	0000016a 	andeq	r0, r0, sl, ror #2
 270:	00749102 	rsbseq	r9, r4, r2, lsl #2
 274:	00021b0f 	andeq	r1, r2, pc, lsl #22
 278:	ec4f0100 	stfe	f0, [pc], {-0}
 27c:	bc200000 	stclt	0, cr0, [r0], #-0
 280:	01000000 	mrseq	r0, (UNDEF: 0)
 284:	0002969c 	muleq	r2, ip, r6
 288:	00780b00 	rsbseq	r0, r8, r0, lsl #22
 28c:	016a4f01 	cmneq	sl, r1, lsl #30
 290:	91020000 	mrsls	r0, (UNDEF: 2)
 294:	00020074 	andeq	r0, r2, r4, ror r0
 298:	01000000 	mrseq	r0, (UNDEF: 0)
 29c:	0000d447 	andeq	sp, r0, r7, asr #8
 2a0:	00001820 	andeq	r1, r0, r0, lsr #16
 2a4:	b99c0100 	ldmiblt	ip, {r8}
 2a8:	0b000002 	bleq	2b8 <startup-0x1ffffd48>
 2ac:	0100736d 	tsteq	r0, sp, ror #6
 2b0:	00016a47 	andeq	r6, r1, r7, asr #20
 2b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2b8:	002e0200 	eoreq	r0, lr, r0, lsl #4
 2bc:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
 2c0:	200000a8 	andcs	r0, r0, r8, lsr #1
 2c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2c8:	02dc9c01 	sbcseq	r9, ip, #256	; 0x100
 2cc:	750b0000 	strvc	r0, [fp, #-0]
 2d0:	3e010073 	mcrcc	0, 0, r0, cr1, cr3, {3}
 2d4:	0000016a 	andeq	r0, r0, sl, ror #2
 2d8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 2dc:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
 2e0:	64330100 	ldrtvs	r0, [r3], #-256	; 0xffffff00
 2e4:	44200000 	strtmi	r0, [r0], #-0
 2e8:	01000000 	mrseq	r0, (UNDEF: 0)
 2ec:	0072109c 			; <UNDEFINED> instruction: 0x0072109c
 2f0:	25010000 	strcs	r0, [r1, #-0]
 2f4:	20000010 	andcs	r0, r0, r0, lsl r0
 2f8:	00000054 	andeq	r0, r0, r4, asr r0
 2fc:	f9109c01 			; <UNDEFINED> instruction: 0xf9109c01
 300:	01000001 	tsteq	r0, r1
 304:	0000001a 	andeq	r0, r0, sl, lsl r0
 308:	00000c20 	andeq	r0, r0, r0, lsr #24
 30c:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	012e0200 			; <UNDEFINED> instruction: 0x012e0200
  14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	01111927 	tsteq	r1, r7, lsr #18
  20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  24:	01194296 			; <UNDEFINED> instruction: 0x01194296
  28:	03000013 	movweq	r0, #19
  2c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  38:	34040000 	strcc	r0, [r4], #-0
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	00180213 	andseq	r0, r8, r3, lsl r2
  48:	00340500 	eorseq	r0, r4, r0, lsl #10
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  54:	00001802 	andeq	r1, r0, r2, lsl #16
  58:	0b002406 	bleq	9078 <startup-0x1fff6f88>
  5c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  60:	07000008 	streq	r0, [r0, -r8]
  64:	0b0b000f 	bleq	2c00a8 <startup-0x1fd3ff58>
  68:	00001349 	andeq	r1, r0, r9, asr #6
  6c:	0b002408 	bleq	9094 <startup-0x1fff6f6c>
  70:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  74:	0900000e 	stmdbeq	r0, {r1, r2, r3}
  78:	13490101 	movtne	r0, #37121	; 0x9101
  7c:	00001301 	andeq	r1, r0, r1, lsl #6
  80:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
  84:	000b2f13 	andeq	r2, fp, r3, lsl pc
  88:	00050b00 	andeq	r0, r5, r0, lsl #22
  8c:	0b3a0803 	bleq	e820a0 <startup-0x1f17df60>
  90:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  94:	00001802 	andeq	r1, r0, r2, lsl #16
  98:	3f002e0c 	svccc	0x00002e0c
  9c:	3a0e0319 	bcc	380d08 <startup-0x1fc7f2f8>
  a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  a4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  a8:	96184006 	ldrls	r4, [r8], -r6
  ac:	00001942 	andeq	r1, r0, r2, asr #18
  b0:	3f012e0d 	svccc	0x00012e0d
  b4:	3a0e0319 	bcc	380d20 <startup-0x1fc7f2e0>
  b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  bc:	11134919 	tstne	r3, r9, lsl r9
  c0:	40061201 	andmi	r1, r6, r1, lsl #4
  c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  c8:	00001301 	andeq	r1, r0, r1, lsl #6
  cc:	3f012e0e 	svccc	0x00012e0e
  d0:	3a0e0319 	bcc	380d3c <startup-0x1fc7f2c4>
  d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  dc:	96184006 	ldrls	r4, [r8], -r6
  e0:	13011942 	movwne	r1, #6466	; 0x1942
  e4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  e8:	03193f01 	tsteq	r9, #1, 30
  ec:	3b0b3a0e 	blcc	2ce92c <startup-0x1fd316d4>
  f0:	1119270b 	tstne	r9, fp, lsl #14
  f4:	40061201 	andmi	r1, r6, r1, lsl #4
  f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  fc:	00001301 	andeq	r1, r0, r1, lsl #6
 100:	3f002e10 	svccc	0x00002e10
 104:	3a0e0319 	bcc	380d70 <startup-0x1fc7f290>
 108:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 10c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 110:	97184006 	ldrls	r4, [r8, -r6]
 114:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000548 	andeq	r0, r0, r8, asr #10
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000558 	andcs	r0, r0, r8, asr r5
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000115 	andeq	r0, r0, r5, lsl r1
   4:	00550002 	subseq	r0, r5, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	612f6574 			; <UNDEFINED> instruction: 0x612f6574
  44:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  48:	70736964 	rsbsvc	r6, r3, r4, ror #18
  4c:	0079616c 	rsbseq	r6, r9, ip, ror #2
  50:	61747300 	cmnvs	r4, r0, lsl #6
  54:	70757472 	rsbsvc	r7, r5, r2, ror r4
  58:	0100632e 	tsteq	r0, lr, lsr #6
  5c:	00000000 	andeq	r0, r0, r0
  60:	00000205 	andeq	r0, r0, r5, lsl #4
  64:	1a032000 	bne	c806c <startup-0x1ff37f94>
  68:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
  6c:	01010003 	tsteq	r1, r3
  70:	10020500 	andne	r0, r2, r0, lsl #10
  74:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  78:	3e300124 	rsfccsp	f0, f0, f4
  7c:	3d3d3e3e 	ldccc	14, cr3, [sp, #-248]!	; 0xffffff08
  80:	2f5a083e 	svccs	0x005a083e
  84:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  88:	01040200 	mrseq	r0, R12_usr
  8c:	69062006 	stmdbvs	r6, {r1, r2, sp}
  90:	214ba03d 	cmpcs	fp, sp, lsr r0
  94:	2a2f2f2f 	bcs	bcbd58 <startup-0x1f4342a8>
  98:	4e4c4c5e 	mcrmi	12, 2, r4, cr12, cr14, {2}
  9c:	91914b4c 	orrsls	r4, r1, ip, asr #22
  a0:	91919191 			; <UNDEFINED> instruction: 0x91919191
  a4:	84a09191 	strthi	r9, [r0], #401	; 0x191
  a8:	9191914b 	orrsls	r9, r1, fp, asr #2
  ac:	91919191 			; <UNDEFINED> instruction: 0x91919191
  b0:	67929291 			; <UNDEFINED> instruction: 0x67929291
  b4:	3d2f4b3d 	fstmdbxcc	pc!, {d4-d33}	;@ Deprecated
  b8:	2f3d3d68 	svccs	0x003d3d68
  bc:	2f3d4b2f 	svccs	0x003d4b2f
  c0:	3d3d6776 	ldccc	7, cr6, [sp, #-472]!	; 0xfffffe28
  c4:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
  c8:	3d4c593d 	vstrcc.16	s11, [ip, #-122]	; 0xffffff86	; <UNPREDICTABLE>
  cc:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
  d0:	842f6767 	strthi	r6, [pc], #-1895	; d8 <startup-0x1fffff28>
  d4:	3d3d673d 	ldccc	7, cr6, [sp, #-244]!	; 0xffffff0c
  d8:	2f676759 	svccs	0x00676759
  dc:	02007584 	andeq	r7, r0, #132, 10	; 0x21000000
  e0:	20060104 	andcs	r0, r6, r4, lsl #2
  e4:	593d8506 	ldmdbpl	sp!, {r1, r2, r8, sl, pc}
  e8:	3d2f4c4b 	stccc	12, cr4, [pc, #-300]!	; ffffffc4 <main+0xdffffafc>
  ec:	4b594b4b 	blmi	1652e20 <startup-0x1e9ad1e0>
  f0:	02006768 	andeq	r6, r0, #104, 14	; 0x1a00000
  f4:	20060104 	andcs	r0, r6, r4, lsl #2
  f8:	593d8506 	ldmdbpl	sp!, {r1, r2, r8, sl, pc}
  fc:	67914c3d 			; <UNDEFINED> instruction: 0x67914c3d
 100:	4c9f764b 	ldcmi	6, cr7, [pc], {75}	; 0x4b
 104:	2f92755a 	svccs	0x0092755a
 108:	213d4c2f 	teqcs	sp, pc, lsr #24
 10c:	3d4b4d73 	stclcc	13, cr4, [fp, #-460]	; 0xfffffe34
 110:	214d7321 	cmpcs	sp, r1, lsr #6
 114:	01000802 	tsteq	r0, r2, lsl #16
 118:	Address 0x00000118 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  10:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  14:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  18:	63736100 	cmnvs	r3, #0, 2
  1c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
  20:	5f6c7274 	svcpl	0x006c7274
  24:	5f746962 	svcpl	0x00746962
  28:	61656c63 	cmnvs	r5, r3, ror #24
  2c:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
  30:	5f79616c 	svcpl	0x0079616c
  34:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
  38:	7361006f 	cmnvc	r1, #111	; 0x6f
  3c:	5f696963 	svcpl	0x00696963
  40:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  44:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  48:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; fffffe80 <main+0xdffff9b8>
  4c:	0072656c 	rsbseq	r6, r2, ip, ror #10
  50:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  54:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  58:	5f657469 	svcpl	0x00657469
  5c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  60:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  64:	64007265 	strvs	r7, [r0], #-613	; 0xfffffd9b
  68:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  6c:	7263694d 	rsbvc	r6, r3, #1261568	; 0x134000
  70:	6e69006f 	cdpvs	0, 6, cr0, cr9, cr15, {3}
  74:	615f7469 	cmpvs	pc, r9, ror #8
  78:	61007070 	tstvs	r0, r0, ror r0
  7c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
  80:	61007373 	tstvs	r0, r3, ror r3
  84:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  88:	6165725f 	cmnvs	r5, pc, asr r2
  8c:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
  90:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
  94:	2f3a4300 	svccs	0x003a4300
  98:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  9c:	61482f73 	hvcvs	33523	; 0x82f3
  a0:	7375706d 	cmnvc	r5, #109	; 0x6d
  a4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  a8:	706f746b 	rsbvc	r7, pc, fp, ror #8
  ac:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  b0:	2f373130 	svccs	0x00373130
  b4:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  b8:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  bc:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
  c0:	69646969 	stmdbvs	r4!, {r0, r3, r5, r6, r8, fp, sp, lr}^
  c4:	616c7073 	smcvs	50947	; 0xc703
  c8:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
  cc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  d0:	00632e70 	rsbeq	r2, r3, r0, ror lr
  d4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  d8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  dc:	5f657469 	svcpl	0x00657469
  e0:	61746164 	cmnvs	r4, r4, ror #2
  e4:	63736100 	cmnvs	r3, #0, 2
  e8:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  ec:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  f0:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
  f4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  f8:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
  fc:	736e3035 	cmnvc	lr, #53	; 0x35
 100:	63736100 	cmnvs	r3, #0, 2
 104:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 108:	616d6d6f 	cmnvs	sp, pc, ror #26
 10c:	6100646e 	tstvs	r0, lr, ror #8
 110:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 114:	6165725f 	cmnvs	r5, pc, asr r2
 118:	61645f64 	cmnvs	r4, r4, ror #30
 11c:	61006174 	tstvs	r0, r4, ror r1
 120:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 124:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 128:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
 12c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 130:	63206465 			; <UNDEFINED> instruction: 0x63206465
 134:	00726168 	rsbseq	r6, r2, r8, ror #2
 138:	20554e47 	subscs	r4, r5, r7, asr #28
 13c:	20393943 	eorscs	r3, r9, r3, asr #18
 140:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
 144:	30322031 	eorscc	r2, r2, r1, lsr r0
 148:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
 14c:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
 150:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
 154:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 158:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 15c:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
 160:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 164:	362d6465 	strtcc	r6, [sp], -r5, ror #8
 168:	6172622d 	cmnvs	r2, sp, lsr #4
 16c:	2068636e 	rsbcs	r6, r8, lr, ror #6
 170:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 174:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 178:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
 17c:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
 180:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 184:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 188:	616d2d20 	cmnvs	sp, r0, lsr #26
 18c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 190:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 194:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 198:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 19c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 1a0:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 1a4:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 1a8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 1ac:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 1b0:	616d2d20 	cmnvs	sp, r0, lsr #26
 1b4:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 1b8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 1bc:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 1c0:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 1c4:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 1c8:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 1cc:	00393963 	eorseq	r3, r9, r3, ror #18
 1d0:	6e69616d 	powvsez	f6, f1, #5.0
 1d4:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 1d8:	72610065 	rsbvc	r0, r1, #101	; 0x65
 1dc:	74006367 	strvc	r6, [r0], #-871	; 0xfffffc99
 1e0:	31747365 	cmncc	r4, r5, ror #6
 1e4:	73657400 	cmnvc	r5, #0, 8
 1e8:	63003274 	movwvs	r3, #628	; 0x274
 1ec:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 1f0:	6f67006e 	svcvs	0x0067006e
 1f4:	59586f54 	ldmdbpl	r8, {r2, r4, r6, r8, r9, sl, fp, sp, lr}^
 1f8:	61747300 	cmnvs	r4, r0, lsl #6
 1fc:	70757472 	rsbsvc	r7, r5, r2, ror r4
 200:	7a697300 	bvc	1a5ce08 <startup-0x1e5a31f8>
 204:	70797465 	rsbsvc	r7, r9, r5, ror #8
 208:	73610065 	cmnvc	r1, #101	; 0x65
 20c:	5f696963 	svcpl	0x00696963
 210:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 214:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 218:	61007261 	tstvs	r0, r1, ror #4
 21c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 220:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 224:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 228:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 22c:	72610074 	rsbvc	r0, r1, #116	; 0x74
 230:	63007667 	movwvs	r7, #1639	; 0x667
 234:	54726168 	ldrbtpl	r6, [r2], #-360	; 0xfffffe98
 238:	6972576f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, lr}^
 23c:	Address 0x0000023c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000054 	andeq	r0, r0, r4, asr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000064 	andcs	r0, r0, r4, rrx
  48:	00000044 	andeq	r0, r0, r4, asr #32
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	200000a8 	andcs	r0, r0, r8, lsr #1
  64:	0000002c 	andeq	r0, r0, ip, lsr #32
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	100e4101 	andne	r4, lr, r1, lsl #2
  74:	00070d41 	andeq	r0, r7, r1, asr #26
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000d4 	ldrdcs	r0, [r0], -r4
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	100e4101 	andne	r4, lr, r1, lsl #2
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000ec 	andcs	r0, r0, ip, ror #1
  a4:	000000bc 	strheq	r0, [r0], -ip
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200001a8 	andcs	r0, r0, r8, lsr #3
  c4:	000000bc 	strheq	r0, [r0], -ip
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000264 	andcs	r0, r0, r4, ror #4
  e4:	00000030 	andeq	r0, r0, r0, lsr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000294 	mulcs	r0, r4, r2
 104:	00000034 	andeq	r0, r0, r4, lsr r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200002c8 	andcs	r0, r0, r8, asr #5
 124:	0000002a 	andeq	r0, r0, sl, lsr #32
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200002f2 	strdcs	r0, [r0], -r2
 144:	0000002a 	andeq	r0, r0, sl, lsr #32
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	00000020 	andeq	r0, r0, r0, lsr #32
 15c:	00000000 	andeq	r0, r0, r0
 160:	2000031c 	andcs	r0, r0, ip, lsl r3
 164:	00000054 	andeq	r0, r0, r4, asr r0
 168:	400c0e41 	andmi	r0, ip, r1, asr #28
 16c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 170:	018e4002 	orreq	r4, lr, r2
 174:	41180e41 	tstmi	r8, r1, asr #28
 178:	0000070d 	andeq	r0, r0, sp, lsl #14
 17c:	00000020 	andeq	r0, r0, r0, lsr #32
 180:	00000000 	andeq	r0, r0, r0
 184:	20000370 	andcs	r0, r0, r0, ror r3
 188:	00000054 	andeq	r0, r0, r4, asr r0
 18c:	400c0e41 	andmi	r0, ip, r1, asr #28
 190:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 194:	018e4002 	orreq	r4, lr, r2
 198:	41180e41 	tstmi	r8, r1, asr #28
 19c:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	200003c4 	andcs	r0, r0, r4, asr #7
 1ac:	00000040 	andeq	r0, r0, r0, asr #32
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	100e4101 	andne	r4, lr, r1, lsl #2
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	00000018 	andeq	r0, r0, r8, lsl r0
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	20000404 	andcs	r0, r0, r4, lsl #8
 1cc:	00000038 	andeq	r0, r0, r8, lsr r0
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	2000043c 	andcs	r0, r0, ip, lsr r4
 1e8:	0000003c 	andeq	r0, r0, ip, lsr r0
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	100e4101 	andne	r4, lr, r1, lsl #2
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	20000478 	andcs	r0, r0, r8, ror r4
 208:	00000050 	andeq	r0, r0, r0, asr r0
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	180e4101 	stmdane	lr, {r0, r8, lr}
 218:	00070d41 	andeq	r0, r7, r1, asr #26
 21c:	00000020 	andeq	r0, r0, r0, lsr #32
 220:	00000000 	andeq	r0, r0, r0
 224:	200004c8 	andcs	r0, r0, r8, asr #9
 228:	00000090 	muleq	r0, r0, r0
 22c:	400c0e41 	andmi	r0, ip, r1, asr #28
 230:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 234:	018e4002 	orreq	r4, lr, r2
 238:	41400e41 	cmpmi	r0, r1, asr #28
 23c:	0000070d 	andeq	r0, r0, sp, lsl #14
