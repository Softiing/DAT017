
./Debug/asciidisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f926 	bl	20000254 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:


void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	// Setup output pins for asciidisplay
	*GPIO_MODER &= 0xFFFFFFFF;
20000014:	4b11      	ldr	r3, [pc, #68]	; (2000005c <init_app+0x4c>)
20000016:	4a11      	ldr	r2, [pc, #68]	; (2000005c <init_app+0x4c>)
20000018:	6812      	ldr	r2, [r2, #0]
2000001a:	601a      	str	r2, [r3, #0]
	*GPIO_MODER |= 0x55555555;
2000001c:	4b0f      	ldr	r3, [pc, #60]	; (2000005c <init_app+0x4c>)
2000001e:	4a0f      	ldr	r2, [pc, #60]	; (2000005c <init_app+0x4c>)
20000020:	6812      	ldr	r2, [r2, #0]
20000022:	490f      	ldr	r1, [pc, #60]	; (20000060 <init_app+0x50>)
20000024:	430a      	orrs	r2, r1
20000026:	601a      	str	r2, [r3, #0]
	
	*GPIO_OTYPER &= 0xFFFF;
20000028:	4b0e      	ldr	r3, [pc, #56]	; (20000064 <init_app+0x54>)
2000002a:	4a0e      	ldr	r2, [pc, #56]	; (20000064 <init_app+0x54>)
2000002c:	8812      	ldrh	r2, [r2, #0]
2000002e:	b292      	uxth	r2, r2
20000030:	801a      	strh	r2, [r3, #0]
	*GPIO_OTYPER |= 0x7777;
20000032:	4a0c      	ldr	r2, [pc, #48]	; (20000064 <init_app+0x54>)
20000034:	4b0b      	ldr	r3, [pc, #44]	; (20000064 <init_app+0x54>)
20000036:	881b      	ldrh	r3, [r3, #0]
20000038:	b29b      	uxth	r3, r3
2000003a:	490b      	ldr	r1, [pc, #44]	; (20000068 <init_app+0x58>)
2000003c:	430b      	orrs	r3, r1
2000003e:	b29b      	uxth	r3, r3
20000040:	8013      	strh	r3, [r2, #0]
	
	*GPIO_PUPDR &= 0xFFFFFFFF;
20000042:	4b0a      	ldr	r3, [pc, #40]	; (2000006c <init_app+0x5c>)
20000044:	4a09      	ldr	r2, [pc, #36]	; (2000006c <init_app+0x5c>)
20000046:	6812      	ldr	r2, [r2, #0]
20000048:	601a      	str	r2, [r3, #0]
	*GPIO_PUPDR |= 0xAAAAAAAA;
2000004a:	4b08      	ldr	r3, [pc, #32]	; (2000006c <init_app+0x5c>)
2000004c:	4a07      	ldr	r2, [pc, #28]	; (2000006c <init_app+0x5c>)
2000004e:	6812      	ldr	r2, [r2, #0]
20000050:	4907      	ldr	r1, [pc, #28]	; (20000070 <init_app+0x60>)
20000052:	430a      	orrs	r2, r1
20000054:	601a      	str	r2, [r3, #0]
}
20000056:	46c0      	nop			; (mov r8, r8)
20000058:	46bd      	mov	sp, r7
2000005a:	bd80      	pop	{r7, pc}
2000005c:	40021000 	andmi	r1, r2, r0
20000060:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000064:	40021004 	andmi	r1, r2, r4
20000068:	00007777 	andeq	r7, r0, r7, ror r7
2000006c:	4002100c 	andmi	r1, r2, ip
20000070:	aaaaaaaa 	bge	1eaaab20 <startup-0x15554e0>

20000074 <delay_250ns>:

void delay_250ns(void) {
20000074:	b580      	push	{r7, lr}
20000076:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000078:	4b0c      	ldr	r3, [pc, #48]	; (200000ac <delay_250ns+0x38>)
2000007a:	2200      	movs	r2, #0
2000007c:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000007e:	4b0c      	ldr	r3, [pc, #48]	; (200000b0 <delay_250ns+0x3c>)
20000080:	2200      	movs	r2, #0
20000082:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
20000084:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <delay_250ns+0x40>)
20000086:	2231      	movs	r2, #49	; 0x31
20000088:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 0x1;
2000008a:	4b08      	ldr	r3, [pc, #32]	; (200000ac <delay_250ns+0x38>)
2000008c:	2201      	movs	r2, #1
2000008e:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	4b06      	ldr	r3, [pc, #24]	; (200000ac <delay_250ns+0x38>)
20000094:	681a      	ldr	r2, [r3, #0]
20000096:	2380      	movs	r3, #128	; 0x80
20000098:	025b      	lsls	r3, r3, #9
2000009a:	4013      	ands	r3, r2
2000009c:	d0f9      	beq.n	20000092 <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
2000009e:	4b03      	ldr	r3, [pc, #12]	; (200000ac <delay_250ns+0x38>)
200000a0:	2200      	movs	r2, #0
200000a2:	601a      	str	r2, [r3, #0]
}
200000a4:	46c0      	nop			; (mov r8, r8)
200000a6:	46bd      	mov	sp, r7
200000a8:	bd80      	pop	{r7, pc}
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	e000e010 	and	lr, r0, r0, lsl r0
200000b0:	e000e018 	and	lr, r0, r8, lsl r0
200000b4:	e000e014 	and	lr, r0, r4, lsl r0

200000b8 <delay_mikro>:

void delay_mikro(unsigned int us) {
200000b8:	b580      	push	{r7, lr}
200000ba:	b084      	sub	sp, #16
200000bc:	af00      	add	r7, sp, #0
200000be:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < us; i++) {
200000c0:	2300      	movs	r3, #0
200000c2:	60fb      	str	r3, [r7, #12]
200000c4:	e002      	b.n	200000cc <delay_mikro+0x14>
200000c6:	68fb      	ldr	r3, [r7, #12]
200000c8:	3301      	adds	r3, #1
200000ca:	60fb      	str	r3, [r7, #12]
200000cc:	68fa      	ldr	r2, [r7, #12]
200000ce:	687b      	ldr	r3, [r7, #4]
200000d0:	429a      	cmp	r2, r3
200000d2:	d3f8      	bcc.n	200000c6 <delay_mikro+0xe>
		delay_250ns;
		delay_250ns;
		delay_250ns;
		delay_250ns;
	}
}
200000d4:	46c0      	nop			; (mov r8, r8)
200000d6:	46bd      	mov	sp, r7
200000d8:	b004      	add	sp, #16
200000da:	bd80      	pop	{r7, pc}

200000dc <delay_milli>:

void delay_milli(unsigned int ms) {
200000dc:	b580      	push	{r7, lr}
200000de:	b082      	sub	sp, #8
200000e0:	af00      	add	r7, sp, #0
200000e2:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms / 1000;
		ms++;
	#endif
	
	delay_mikro(1000 * ms);	
200000e4:	687b      	ldr	r3, [r7, #4]
200000e6:	22fa      	movs	r2, #250	; 0xfa
200000e8:	0092      	lsls	r2, r2, #2
200000ea:	4353      	muls	r3, r2
200000ec:	0018      	movs	r0, r3
200000ee:	f7ff ffe3 	bl	200000b8 <delay_mikro>
}
200000f2:	46c0      	nop			; (mov r8, r8)
200000f4:	46bd      	mov	sp, r7
200000f6:	b002      	add	sp, #8
200000f8:	bd80      	pop	{r7, pc}

200000fa <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x) {
200000fa:	b580      	push	{r7, lr}
200000fc:	b082      	sub	sp, #8
200000fe:	af00      	add	r7, sp, #0
20000100:	0002      	movs	r2, r0
20000102:	1dfb      	adds	r3, r7, #7
20000104:	701a      	strb	r2, [r3, #0]
	switch(x) {
20000106:	1dfb      	adds	r3, r7, #7
20000108:	781b      	ldrb	r3, [r3, #0]
2000010a:	2b07      	cmp	r3, #7
2000010c:	d83a      	bhi.n	20000184 <ascii_ctrl_bit_set+0x8a>
2000010e:	009a      	lsls	r2, r3, #2
20000110:	4b1e      	ldr	r3, [pc, #120]	; (2000018c <ascii_ctrl_bit_set+0x92>)
20000112:	18d3      	adds	r3, r2, r3
20000114:	681b      	ldr	r3, [r3, #0]
20000116:	469f      	mov	pc, r3
		case(0): *GPIO_ODR_LOW |= 0x00000001; break;
20000118:	4a1d      	ldr	r2, [pc, #116]	; (20000190 <ascii_ctrl_bit_set+0x96>)
2000011a:	4b1d      	ldr	r3, [pc, #116]	; (20000190 <ascii_ctrl_bit_set+0x96>)
2000011c:	781b      	ldrb	r3, [r3, #0]
2000011e:	b2db      	uxtb	r3, r3
20000120:	2101      	movs	r1, #1
20000122:	430b      	orrs	r3, r1
20000124:	b2db      	uxtb	r3, r3
20000126:	7013      	strb	r3, [r2, #0]
20000128:	e02c      	b.n	20000184 <ascii_ctrl_bit_set+0x8a>
		case(1): *GPIO_ODR_LOW |= 0x00000010; break;
2000012a:	4a19      	ldr	r2, [pc, #100]	; (20000190 <ascii_ctrl_bit_set+0x96>)
2000012c:	4b18      	ldr	r3, [pc, #96]	; (20000190 <ascii_ctrl_bit_set+0x96>)
2000012e:	781b      	ldrb	r3, [r3, #0]
20000130:	b2db      	uxtb	r3, r3
20000132:	2110      	movs	r1, #16
20000134:	430b      	orrs	r3, r1
20000136:	b2db      	uxtb	r3, r3
20000138:	7013      	strb	r3, [r2, #0]
2000013a:	e023      	b.n	20000184 <ascii_ctrl_bit_set+0x8a>
		case(2): *GPIO_ODR_LOW |= 0x00000100; break;
2000013c:	4b14      	ldr	r3, [pc, #80]	; (20000190 <ascii_ctrl_bit_set+0x96>)
2000013e:	4a14      	ldr	r2, [pc, #80]	; (20000190 <ascii_ctrl_bit_set+0x96>)
20000140:	7812      	ldrb	r2, [r2, #0]
20000142:	b2d2      	uxtb	r2, r2
20000144:	701a      	strb	r2, [r3, #0]
20000146:	e01d      	b.n	20000184 <ascii_ctrl_bit_set+0x8a>
		case(3): *GPIO_ODR_LOW |= 0x00001000; break;
20000148:	4b11      	ldr	r3, [pc, #68]	; (20000190 <ascii_ctrl_bit_set+0x96>)
2000014a:	4a11      	ldr	r2, [pc, #68]	; (20000190 <ascii_ctrl_bit_set+0x96>)
2000014c:	7812      	ldrb	r2, [r2, #0]
2000014e:	b2d2      	uxtb	r2, r2
20000150:	701a      	strb	r2, [r3, #0]
20000152:	e017      	b.n	20000184 <ascii_ctrl_bit_set+0x8a>
		case(4): *GPIO_ODR_LOW |= 0x00010000; break;
20000154:	4b0e      	ldr	r3, [pc, #56]	; (20000190 <ascii_ctrl_bit_set+0x96>)
20000156:	4a0e      	ldr	r2, [pc, #56]	; (20000190 <ascii_ctrl_bit_set+0x96>)
20000158:	7812      	ldrb	r2, [r2, #0]
2000015a:	b2d2      	uxtb	r2, r2
2000015c:	701a      	strb	r2, [r3, #0]
2000015e:	e011      	b.n	20000184 <ascii_ctrl_bit_set+0x8a>
		case(5): *GPIO_ODR_LOW |= 0x00100000; break;
20000160:	4b0b      	ldr	r3, [pc, #44]	; (20000190 <ascii_ctrl_bit_set+0x96>)
20000162:	4a0b      	ldr	r2, [pc, #44]	; (20000190 <ascii_ctrl_bit_set+0x96>)
20000164:	7812      	ldrb	r2, [r2, #0]
20000166:	b2d2      	uxtb	r2, r2
20000168:	701a      	strb	r2, [r3, #0]
2000016a:	e00b      	b.n	20000184 <ascii_ctrl_bit_set+0x8a>
		case(6): *GPIO_ODR_LOW |= 0x01000000; break;
2000016c:	4b08      	ldr	r3, [pc, #32]	; (20000190 <ascii_ctrl_bit_set+0x96>)
2000016e:	4a08      	ldr	r2, [pc, #32]	; (20000190 <ascii_ctrl_bit_set+0x96>)
20000170:	7812      	ldrb	r2, [r2, #0]
20000172:	b2d2      	uxtb	r2, r2
20000174:	701a      	strb	r2, [r3, #0]
20000176:	e005      	b.n	20000184 <ascii_ctrl_bit_set+0x8a>
		case(7): *GPIO_ODR_LOW |= 0x10000000; break;
20000178:	4b05      	ldr	r3, [pc, #20]	; (20000190 <ascii_ctrl_bit_set+0x96>)
2000017a:	4a05      	ldr	r2, [pc, #20]	; (20000190 <ascii_ctrl_bit_set+0x96>)
2000017c:	7812      	ldrb	r2, [r2, #0]
2000017e:	b2d2      	uxtb	r2, r2
20000180:	701a      	strb	r2, [r3, #0]
20000182:	46c0      	nop			; (mov r8, r8)
	}
}
20000184:	46c0      	nop			; (mov r8, r8)
20000186:	46bd      	mov	sp, r7
20000188:	b002      	add	sp, #8
2000018a:	bd80      	pop	{r7, pc}
2000018c:	20000284 	andcs	r0, r0, r4, lsl #5
20000190:	40021014 	andmi	r1, r2, r4, lsl r0

20000194 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x) {
20000194:	b580      	push	{r7, lr}
20000196:	b082      	sub	sp, #8
20000198:	af00      	add	r7, sp, #0
2000019a:	0002      	movs	r2, r0
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	701a      	strb	r2, [r3, #0]
	switch(x) {
200001a0:	1dfb      	adds	r3, r7, #7
200001a2:	781b      	ldrb	r3, [r3, #0]
200001a4:	2b07      	cmp	r3, #7
200001a6:	d84c      	bhi.n	20000242 <ascii_ctrl_bit_clear+0xae>
200001a8:	009a      	lsls	r2, r3, #2
200001aa:	4b28      	ldr	r3, [pc, #160]	; (2000024c <ascii_ctrl_bit_clear+0xb8>)
200001ac:	18d3      	adds	r3, r2, r3
200001ae:	681b      	ldr	r3, [r3, #0]
200001b0:	469f      	mov	pc, r3
		case(0): *GPIO_ODR_LOW &= 0x11111110; break;
200001b2:	4a27      	ldr	r2, [pc, #156]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
200001b4:	4b26      	ldr	r3, [pc, #152]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
200001b6:	781b      	ldrb	r3, [r3, #0]
200001b8:	b2db      	uxtb	r3, r3
200001ba:	2110      	movs	r1, #16
200001bc:	400b      	ands	r3, r1
200001be:	b2db      	uxtb	r3, r3
200001c0:	7013      	strb	r3, [r2, #0]
200001c2:	e03e      	b.n	20000242 <ascii_ctrl_bit_clear+0xae>
		case(1): *GPIO_ODR_LOW &= 0x11111101; break;
200001c4:	4a22      	ldr	r2, [pc, #136]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
200001c6:	4b22      	ldr	r3, [pc, #136]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
200001c8:	781b      	ldrb	r3, [r3, #0]
200001ca:	b2db      	uxtb	r3, r3
200001cc:	2101      	movs	r1, #1
200001ce:	400b      	ands	r3, r1
200001d0:	b2db      	uxtb	r3, r3
200001d2:	7013      	strb	r3, [r2, #0]
200001d4:	e035      	b.n	20000242 <ascii_ctrl_bit_clear+0xae>
		case(2): *GPIO_ODR_LOW &= 0x11111011; break;
200001d6:	4a1e      	ldr	r2, [pc, #120]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
200001d8:	4b1d      	ldr	r3, [pc, #116]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
200001da:	781b      	ldrb	r3, [r3, #0]
200001dc:	b2db      	uxtb	r3, r3
200001de:	2111      	movs	r1, #17
200001e0:	400b      	ands	r3, r1
200001e2:	b2db      	uxtb	r3, r3
200001e4:	7013      	strb	r3, [r2, #0]
200001e6:	e02c      	b.n	20000242 <ascii_ctrl_bit_clear+0xae>
		case(3): *GPIO_ODR_LOW &= 0x11110111; break;
200001e8:	4a19      	ldr	r2, [pc, #100]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
200001ea:	4b19      	ldr	r3, [pc, #100]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
200001ec:	781b      	ldrb	r3, [r3, #0]
200001ee:	b2db      	uxtb	r3, r3
200001f0:	2111      	movs	r1, #17
200001f2:	400b      	ands	r3, r1
200001f4:	b2db      	uxtb	r3, r3
200001f6:	7013      	strb	r3, [r2, #0]
200001f8:	e023      	b.n	20000242 <ascii_ctrl_bit_clear+0xae>
		case(4): *GPIO_ODR_LOW &= 0x11101111; break;
200001fa:	4a15      	ldr	r2, [pc, #84]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
200001fc:	4b14      	ldr	r3, [pc, #80]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
200001fe:	781b      	ldrb	r3, [r3, #0]
20000200:	b2db      	uxtb	r3, r3
20000202:	2111      	movs	r1, #17
20000204:	400b      	ands	r3, r1
20000206:	b2db      	uxtb	r3, r3
20000208:	7013      	strb	r3, [r2, #0]
2000020a:	e01a      	b.n	20000242 <ascii_ctrl_bit_clear+0xae>
		case(5): *GPIO_ODR_LOW &= 0x11011111; break;
2000020c:	4a10      	ldr	r2, [pc, #64]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
2000020e:	4b10      	ldr	r3, [pc, #64]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
20000210:	781b      	ldrb	r3, [r3, #0]
20000212:	b2db      	uxtb	r3, r3
20000214:	2111      	movs	r1, #17
20000216:	400b      	ands	r3, r1
20000218:	b2db      	uxtb	r3, r3
2000021a:	7013      	strb	r3, [r2, #0]
2000021c:	e011      	b.n	20000242 <ascii_ctrl_bit_clear+0xae>
		case(6): *GPIO_ODR_LOW &= 0x10111111; break;
2000021e:	4a0c      	ldr	r2, [pc, #48]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
20000220:	4b0b      	ldr	r3, [pc, #44]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
20000222:	781b      	ldrb	r3, [r3, #0]
20000224:	b2db      	uxtb	r3, r3
20000226:	2111      	movs	r1, #17
20000228:	400b      	ands	r3, r1
2000022a:	b2db      	uxtb	r3, r3
2000022c:	7013      	strb	r3, [r2, #0]
2000022e:	e008      	b.n	20000242 <ascii_ctrl_bit_clear+0xae>
		case(7): *GPIO_ODR_LOW &= 0x01111111; break;
20000230:	4a07      	ldr	r2, [pc, #28]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
20000232:	4b07      	ldr	r3, [pc, #28]	; (20000250 <ascii_ctrl_bit_clear+0xbc>)
20000234:	781b      	ldrb	r3, [r3, #0]
20000236:	b2db      	uxtb	r3, r3
20000238:	2111      	movs	r1, #17
2000023a:	400b      	ands	r3, r1
2000023c:	b2db      	uxtb	r3, r3
2000023e:	7013      	strb	r3, [r2, #0]
20000240:	46c0      	nop			; (mov r8, r8)
	}
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	200002a4 	andcs	r0, r0, r4, lsr #5
20000250:	40021014 	andmi	r1, r2, r4, lsl r0

20000254 <main>:

void main(void) {
20000254:	b580      	push	{r7, lr}
20000256:	af00      	add	r7, sp, #0
	init_app();
20000258:	f7ff feda 	bl	20000010 <init_app>
	while(1) {
		*GPIO_ODR_LOW = 0;
2000025c:	4b08      	ldr	r3, [pc, #32]	; (20000280 <main+0x2c>)
2000025e:	2200      	movs	r2, #0
20000260:	701a      	strb	r2, [r3, #0]
		delay_milli(500);
20000262:	23fa      	movs	r3, #250	; 0xfa
20000264:	005b      	lsls	r3, r3, #1
20000266:	0018      	movs	r0, r3
20000268:	f7ff ff38 	bl	200000dc <delay_milli>
		*GPIO_ODR_LOW = 0xFF;
2000026c:	4b04      	ldr	r3, [pc, #16]	; (20000280 <main+0x2c>)
2000026e:	22ff      	movs	r2, #255	; 0xff
20000270:	701a      	strb	r2, [r3, #0]
		delay_milli(500);
20000272:	23fa      	movs	r3, #250	; 0xfa
20000274:	005b      	lsls	r3, r3, #1
20000276:	0018      	movs	r0, r3
20000278:	f7ff ff30 	bl	200000dc <delay_milli>
		*GPIO_ODR_LOW = 0;
2000027c:	e7ee      	b.n	2000025c <main+0x8>
2000027e:	46c0      	nop			; (mov r8, r8)
20000280:	40021014 	andmi	r1, r2, r4, lsl r0
20000284:	20000118 	andcs	r0, r0, r8, lsl r1
20000288:	2000012a 	andcs	r0, r0, sl, lsr #2
2000028c:	2000013c 	andcs	r0, r0, ip, lsr r1
20000290:	20000148 	andcs	r0, r0, r8, asr #2
20000294:	20000154 	andcs	r0, r0, r4, asr r1
20000298:	20000160 	andcs	r0, r0, r0, ror #2
2000029c:	2000016c 	andcs	r0, r0, ip, ror #2
200002a0:	20000178 	andcs	r0, r0, r8, ror r1
200002a4:	200001b2 			; <UNDEFINED> instruction: 0x200001b2
200002a8:	200001c4 	andcs	r0, r0, r4, asr #3
200002ac:	200001d6 	ldrdcs	r0, [r0], -r6
200002b0:	200001e8 	andcs	r0, r0, r8, ror #3
200002b4:	200001fa 	strdcs	r0, [r0], -sl
200002b8:	2000020c 	andcs	r0, r0, ip, lsl #4
200002bc:	2000021e 	andcs	r0, r0, lr, lsl r2
200002c0:	20000230 	andcs	r0, r0, r0, lsr r2

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000110 	andeq	r0, r0, r0, lsl r1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000044 	andeq	r0, r0, r4, asr #32
  10:	0000ea0c 	andeq	lr, r0, ip, lsl #20
	...
  20:	00370200 	eorseq	r0, r7, r0, lsl #4
  24:	63010000 	movwvs	r0, #4096	; 0x1000
  28:	20000254 	andcs	r0, r0, r4, asr r2
  2c:	00000030 	andeq	r0, r0, r0, lsr r0
  30:	22039c01 	andcs	r9, r3, #256	; 0x100
  34:	01000000 	mrseq	r0, (UNDEF: 0)
  38:	00019456 	andeq	r9, r1, r6, asr r4
  3c:	0000c020 	andeq	ip, r0, r0, lsr #32
  40:	549c0100 	ldrpl	r0, [ip], #256	; 0x100
  44:	04000000 	streq	r0, [r0], #-0
  48:	56010078 			; <UNDEFINED> instruction: 0x56010078
  4c:	00000054 	andeq	r0, r0, r4, asr r0
  50:	00779102 	rsbseq	r9, r7, r2, lsl #2
  54:	dc080105 	stfles	f0, [r8], {5}
  58:	03000000 	movweq	r0, #0
  5c:	00000141 	andeq	r0, r0, r1, asr #2
  60:	00fa4901 	rscseq	r4, sl, r1, lsl #18
  64:	009a2000 	addseq	r2, sl, r0
  68:	9c010000 	stcls	0, cr0, [r1], {-0}
  6c:	0000007d 	andeq	r0, r0, sp, ror r0
  70:	01007804 	tsteq	r0, r4, lsl #16
  74:	00005449 	andeq	r5, r0, r9, asr #8
  78:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  7c:	01290600 			; <UNDEFINED> instruction: 0x01290600
  80:	40010000 	andmi	r0, r1, r0
  84:	200000dc 	ldrdcs	r0, [r0], -ip
  88:	0000001e 	andeq	r0, r0, lr, lsl r0
  8c:	00a09c01 	adceq	r9, r0, r1, lsl #24
  90:	6d040000 	stcvs	0, cr0, [r4, #-0]
  94:	40010073 	andmi	r0, r1, r3, ror r0
  98:	000000a0 	andeq	r0, r0, r0, lsr #1
  9c:	00749102 	rsbseq	r9, r4, r2, lsl #2
  a0:	00070405 	andeq	r0, r7, r5, lsl #8
  a4:	03000000 	movweq	r0, #0
  a8:	0000000d 	andeq	r0, r0, sp
  ac:	00b83701 	adcseq	r3, r8, r1, lsl #14
  b0:	00242000 	eoreq	r2, r4, r0
  b4:	9c010000 	stcls	0, cr0, [r1], {-0}
  b8:	000000e0 	andeq	r0, r0, r0, ror #1
  bc:	00737504 	rsbseq	r7, r3, r4, lsl #10
  c0:	00a03701 	adceq	r3, r0, r1, lsl #14
  c4:	91020000 	mrsls	r0, (UNDEF: 2)
  c8:	00c0076c 	sbceq	r0, r0, ip, ror #14
  cc:	00142000 	andseq	r2, r4, r0
  d0:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
  d4:	a0380100 	eorsge	r0, r8, r0, lsl #2
  d8:	02000000 	andeq	r0, r0, #0
  dc:	00007491 	muleq	r0, r1, r4
  e0:	00013509 	andeq	r3, r1, r9, lsl #10
  e4:	742c0100 	strtvc	r0, [ip], #-256	; 0xffffff00
  e8:	44200000 	strtmi	r0, [r0], #-0
  ec:	01000000 	mrseq	r0, (UNDEF: 0)
  f0:	0019099c 	mulseq	r9, ip, r9
  f4:	20010000 	andcs	r0, r1, r0
  f8:	20000010 	andcs	r0, r0, r0, lsl r0
  fc:	00000064 	andeq	r0, r0, r4, rrx
 100:	3c099c01 	stccc	12, cr9, [r9], {1}
 104:	01000000 	mrseq	r0, (UNDEF: 0)
 108:	00000015 	andeq	r0, r0, r5, lsl r0
 10c:	00000c20 	andeq	r0, r0, r0, lsr #24
 110:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	002e0200 	eoreq	r0, lr, r0, lsl #4
  14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	01111927 	tsteq	r1, r7, lsr #18
  20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  24:	00194296 	mulseq	r9, r6, r2
  28:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
  2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	01111927 	tsteq	r1, r7, lsr #18
  38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  3c:	01194297 			; <UNDEFINED> instruction: 0x01194297
  40:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  44:	08030005 	stmdaeq	r3, {r0, r2}
  48:	0b3b0b3a 	bleq	ec2d38 <startup-0x1f13d2c8>
  4c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  50:	24050000 	strcs	r0, [r5], #-0
  54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  58:	000e030b 	andeq	r0, lr, fp, lsl #6
  5c:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
  60:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  64:	0b3b0b3a 	bleq	ec2d54 <startup-0x1f13d2ac>
  68:	01111927 	tsteq	r1, r7, lsr #18
  6c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  70:	01194296 			; <UNDEFINED> instruction: 0x01194296
  74:	07000013 	smladeq	r0, r3, r0, r0
  78:	0111010b 	tsteq	r1, fp, lsl #2
  7c:	00000612 	andeq	r0, r0, r2, lsl r6
  80:	03003408 	movweq	r3, #1032	; 0x408
  84:	3b0b3a08 	blcc	2ce8ac <startup-0x1fd31754>
  88:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  8c:	09000018 	stmdbeq	r0, {r3, r4}
  90:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  94:	0b3a0e03 	bleq	e838a8 <startup-0x1f17c758>
  98:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  a4:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000274 	andeq	r0, r0, r4, ror r2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000284 	andcs	r0, r0, r4, lsl #5
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000d4 	ldrdeq	r0, [r0], -r4
   4:	00550002 	subseq	r0, r5, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	612f6574 			; <UNDEFINED> instruction: 0x612f6574
  44:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  48:	70736964 	rsbsvc	r6, r3, r4, ror #18
  4c:	0079616c 	rsbseq	r6, r9, ip, ror #2
  50:	61747300 	cmnvs	r4, r0, lsl #6
  54:	70757472 	rsbsvc	r7, r5, r2, ror r4
  58:	0100632e 	tsteq	r0, lr, lsr #6
  5c:	00000000 	andeq	r0, r0, r0
  60:	00000205 	andeq	r0, r0, r5, lsl #4
  64:	15032000 	strne	r2, [r3, #-0]
  68:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
  6c:	01010003 	tsteq	r1, r3
  70:	10020500 	andne	r0, r2, r0, lsl #10
  74:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  78:	4b30011f 	blmi	c004fc <startup-0x1f3ffb04>
  7c:	4b845968 	blmi	fe116624 <main+0xde1163d0>
  80:	3d2fe667 	stccc	6, cr14, [pc, #-412]!	; fffffeec <main+0xdffffc98>
  84:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
  88:	06010402 	streq	r0, [r1], -r2, lsl #8
  8c:	3d690620 	stclcc	6, cr0, [r9, #-128]!	; 0xffffff80
  90:	02004ba0 	andeq	r4, r0, #160, 22	; 0x28000
  94:	3c060304 	stccc	3, cr0, [r6], {4}
  98:	01040200 	mrseq	r0, R12_usr
  9c:	4c50063c 	mrrcmi	6, 3, r0, r0, cr12	; <UNPREDICTABLE>
  a0:	674c7550 	smlsldvs	r7, ip, r0, r5
  a4:	67919191 			; <UNDEFINED> instruction: 0x67919191
  a8:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
  ac:	91678468 	cmnls	r7, r8, ror #8
  b0:	91919191 			; <UNDEFINED> instruction: 0x91919191
  b4:	92919191 	addsls	r9, r1, #1073741860	; 0x40000024
  b8:	02002f92 	andeq	r2, r0, #584	; 0x248
  bc:	00300104 	eorseq	r0, r0, r4, lsl #2
  c0:	3d010402 	cfstrscc	mvf0, [r1, #-8]
  c4:	01040200 	mrseq	r0, R12_usr
  c8:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
  cc:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
  d0:	02550104 	subseq	r0, r5, #4, 2
  d4:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
   4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
   8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
   c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  10:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; ffffff56 <main+0xdffffd02>	; <UNPREDICTABLE>
  14:	6f726b69 	svcvs	0x00726b69
  18:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
  1c:	70615f74 	rsbvc	r5, r1, r4, ror pc
  20:	73610070 	cmnvc	r1, #112	; 0x70
  24:	5f696963 	svcpl	0x00696963
  28:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  2c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  30:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  34:	6d007261 	sfmvs	f7, 4, [r0, #-388]	; 0xfffffe7c
  38:	006e6961 	rsbeq	r6, lr, r1, ror #18
  3c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  40:	00707574 	rsbseq	r7, r0, r4, ror r5
  44:	20554e47 	subscs	r4, r5, r7, asr #28
  48:	20393943 	eorscs	r3, r9, r3, asr #18
  4c:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
  50:	30322031 	eorscc	r2, r2, r1, lsr r0
  54:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  58:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  5c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  60:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  64:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  68:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  6c:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  70:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  74:	6172622d 	cmnvs	r2, sp, lsr #4
  78:	2068636e 	rsbcs	r6, r8, lr, ror #6
  7c:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  80:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  84:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  88:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  8c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  90:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  94:	616d2d20 	cmnvs	sp, r0, lsr #26
  98:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  9c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  a0:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  a4:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  a8:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  ac:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  b0:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  b4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  b8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  bc:	616d2d20 	cmnvs	sp, r0, lsr #26
  c0:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  c4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  c8:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  cc:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  d0:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  d4:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  d8:	00393963 	eorseq	r3, r9, r3, ror #18
  dc:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  e0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  e4:	61686320 	cmnvs	r8, r0, lsr #6
  e8:	3a430072 	bcc	10c02b8 <startup-0x1ef3fd48>
  ec:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  f0:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
  f4:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
  f8:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
  fc:	6f746b73 	svcvs	0x00746b73
 100:	41442f70 	hvcmi	17136	; 0x42f0
 104:	37313054 			; <UNDEFINED> instruction: 0x37313054
 108:	646f432f 	strbtvs	r4, [pc], #-815	; 110 <startup-0x1ffffef0>
 10c:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 110:	73612f65 	cmnvc	r1, #404	; 0x194
 114:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
 118:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 11c:	732f7961 			; <UNDEFINED> instruction: 0x732f7961
 120:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 124:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 128:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 12c:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 72 <startup-0x1fffff8e>	; <UNPREDICTABLE>
 130:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 134:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 138:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 13c:	736e3035 	cmnvc	lr, #53	; 0x35
 140:	63736100 	cmnvs	r3, #0, 2
 144:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 148:	5f6c7274 	svcpl	0x006c7274
 14c:	5f746962 	svcpl	0x00746962
 150:	00746573 	rsbseq	r6, r4, r3, ror r5

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000064 	andeq	r0, r0, r4, rrx
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000074 	andcs	r0, r0, r4, ror r0
  48:	00000044 	andeq	r0, r0, r4, asr #32
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	200000b8 	strhcs	r0, [r0], -r8
  64:	00000024 	andeq	r0, r0, r4, lsr #32
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	180e4101 	stmdane	lr, {r0, r8, lr}
  74:	00070d41 	andeq	r0, r7, r1, asr #26
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000dc 	ldrdcs	r0, [r0], -ip
  84:	0000001e 	andeq	r0, r0, lr, lsl r0
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	100e4101 	andne	r4, lr, r1, lsl #2
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000fa 	strdcs	r0, [r0], -sl
  a4:	0000009a 	muleq	r0, sl, r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000194 	mulcs	r0, r4, r1
  c4:	000000c0 	andeq	r0, r0, r0, asr #1
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	00000018 	andeq	r0, r0, r8, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000254 	andcs	r0, r0, r4, asr r2
  e4:	00000030 	andeq	r0, r0, r0, lsr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
