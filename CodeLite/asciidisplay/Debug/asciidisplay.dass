
./Debug/asciidisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fa12 	bl	2000042c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:


void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	// Setup output pins for asciidisplay
	*GPIO_MODER &= 0xFFFFFFFF;
20000014:	4b11      	ldr	r3, [pc, #68]	; (2000005c <init_app+0x4c>)
20000016:	4a11      	ldr	r2, [pc, #68]	; (2000005c <init_app+0x4c>)
20000018:	6812      	ldr	r2, [r2, #0]
2000001a:	601a      	str	r2, [r3, #0]
	*GPIO_MODER |= 0x55555555;
2000001c:	4b0f      	ldr	r3, [pc, #60]	; (2000005c <init_app+0x4c>)
2000001e:	4a0f      	ldr	r2, [pc, #60]	; (2000005c <init_app+0x4c>)
20000020:	6812      	ldr	r2, [r2, #0]
20000022:	490f      	ldr	r1, [pc, #60]	; (20000060 <init_app+0x50>)
20000024:	430a      	orrs	r2, r1
20000026:	601a      	str	r2, [r3, #0]
	
	*GPIO_OTYPER &= 0xFFFF;
20000028:	4b0e      	ldr	r3, [pc, #56]	; (20000064 <init_app+0x54>)
2000002a:	4a0e      	ldr	r2, [pc, #56]	; (20000064 <init_app+0x54>)
2000002c:	8812      	ldrh	r2, [r2, #0]
2000002e:	b292      	uxth	r2, r2
20000030:	801a      	strh	r2, [r3, #0]
	*GPIO_OTYPER |= 0x7777;
20000032:	4a0c      	ldr	r2, [pc, #48]	; (20000064 <init_app+0x54>)
20000034:	4b0b      	ldr	r3, [pc, #44]	; (20000064 <init_app+0x54>)
20000036:	881b      	ldrh	r3, [r3, #0]
20000038:	b29b      	uxth	r3, r3
2000003a:	490b      	ldr	r1, [pc, #44]	; (20000068 <init_app+0x58>)
2000003c:	430b      	orrs	r3, r1
2000003e:	b29b      	uxth	r3, r3
20000040:	8013      	strh	r3, [r2, #0]
	
	*GPIO_PUPDR &= 0xFFFFFFFF;
20000042:	4b0a      	ldr	r3, [pc, #40]	; (2000006c <init_app+0x5c>)
20000044:	4a09      	ldr	r2, [pc, #36]	; (2000006c <init_app+0x5c>)
20000046:	6812      	ldr	r2, [r2, #0]
20000048:	601a      	str	r2, [r3, #0]
	*GPIO_PUPDR |= 0xAAAAAAAA;
2000004a:	4b08      	ldr	r3, [pc, #32]	; (2000006c <init_app+0x5c>)
2000004c:	4a07      	ldr	r2, [pc, #28]	; (2000006c <init_app+0x5c>)
2000004e:	6812      	ldr	r2, [r2, #0]
20000050:	4907      	ldr	r1, [pc, #28]	; (20000070 <init_app+0x60>)
20000052:	430a      	orrs	r2, r1
20000054:	601a      	str	r2, [r3, #0]
}
20000056:	46c0      	nop			; (mov r8, r8)
20000058:	46bd      	mov	sp, r7
2000005a:	bd80      	pop	{r7, pc}
2000005c:	40021000 	andmi	r1, r2, r0
20000060:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000064:	40021004 	andmi	r1, r2, r4
20000068:	00007777 	andeq	r7, r0, r7, ror r7
2000006c:	4002100c 	andmi	r1, r2, ip
20000070:	aaaaaaaa 	bge	1eaaab20 <startup-0x15554e0>

20000074 <delay_250ns>:

void delay_250ns(void) {
20000074:	b580      	push	{r7, lr}
20000076:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000078:	4b0c      	ldr	r3, [pc, #48]	; (200000ac <delay_250ns+0x38>)
2000007a:	2200      	movs	r2, #0
2000007c:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000007e:	4b0c      	ldr	r3, [pc, #48]	; (200000b0 <delay_250ns+0x3c>)
20000080:	2200      	movs	r2, #0
20000082:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
20000084:	4b0b      	ldr	r3, [pc, #44]	; (200000b4 <delay_250ns+0x40>)
20000086:	2231      	movs	r2, #49	; 0x31
20000088:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 0x1;
2000008a:	4b08      	ldr	r3, [pc, #32]	; (200000ac <delay_250ns+0x38>)
2000008c:	2201      	movs	r2, #1
2000008e:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	4b06      	ldr	r3, [pc, #24]	; (200000ac <delay_250ns+0x38>)
20000094:	681a      	ldr	r2, [r3, #0]
20000096:	2380      	movs	r3, #128	; 0x80
20000098:	025b      	lsls	r3, r3, #9
2000009a:	4013      	ands	r3, r2
2000009c:	d0f9      	beq.n	20000092 <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
2000009e:	4b03      	ldr	r3, [pc, #12]	; (200000ac <delay_250ns+0x38>)
200000a0:	2200      	movs	r2, #0
200000a2:	601a      	str	r2, [r3, #0]
}
200000a4:	46c0      	nop			; (mov r8, r8)
200000a6:	46bd      	mov	sp, r7
200000a8:	bd80      	pop	{r7, pc}
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	e000e010 	and	lr, r0, r0, lsl r0
200000b0:	e000e018 	and	lr, r0, r8, lsl r0
200000b4:	e000e014 	and	lr, r0, r4, lsl r0

200000b8 <delay_mikro>:

void delay_mikro(unsigned int us) {
200000b8:	b580      	push	{r7, lr}
200000ba:	b084      	sub	sp, #16
200000bc:	af00      	add	r7, sp, #0
200000be:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < us; i++) {
200000c0:	2300      	movs	r3, #0
200000c2:	60fb      	str	r3, [r7, #12]
200000c4:	e002      	b.n	200000cc <delay_mikro+0x14>
200000c6:	68fb      	ldr	r3, [r7, #12]
200000c8:	3301      	adds	r3, #1
200000ca:	60fb      	str	r3, [r7, #12]
200000cc:	68fa      	ldr	r2, [r7, #12]
200000ce:	687b      	ldr	r3, [r7, #4]
200000d0:	429a      	cmp	r2, r3
200000d2:	d3f8      	bcc.n	200000c6 <delay_mikro+0xe>
		delay_250ns;
		delay_250ns;
		delay_250ns;
		delay_250ns;
	}
}
200000d4:	46c0      	nop			; (mov r8, r8)
200000d6:	46bd      	mov	sp, r7
200000d8:	b004      	add	sp, #16
200000da:	bd80      	pop	{r7, pc}

200000dc <delay_milli>:

void delay_milli(unsigned int ms) {
200000dc:	b580      	push	{r7, lr}
200000de:	b082      	sub	sp, #8
200000e0:	af00      	add	r7, sp, #0
200000e2:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms / 1000;
200000e4:	687a      	ldr	r2, [r7, #4]
200000e6:	23fa      	movs	r3, #250	; 0xfa
200000e8:	0099      	lsls	r1, r3, #2
200000ea:	0010      	movs	r0, r2
200000ec:	f000 f9cc 	bl	20000488 <__udivsi3>
200000f0:	0003      	movs	r3, r0
200000f2:	607b      	str	r3, [r7, #4]
		ms++;
200000f4:	687b      	ldr	r3, [r7, #4]
200000f6:	3301      	adds	r3, #1
200000f8:	607b      	str	r3, [r7, #4]
	#endif
	
	delay_mikro(1000 * ms);	
200000fa:	687b      	ldr	r3, [r7, #4]
200000fc:	22fa      	movs	r2, #250	; 0xfa
200000fe:	0092      	lsls	r2, r2, #2
20000100:	4353      	muls	r3, r2
20000102:	0018      	movs	r0, r3
20000104:	f7ff ffd8 	bl	200000b8 <delay_mikro>
}
20000108:	46c0      	nop			; (mov r8, r8)
2000010a:	46bd      	mov	sp, r7
2000010c:	b002      	add	sp, #8
2000010e:	bd80      	pop	{r7, pc}

20000110 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x) {
20000110:	b580      	push	{r7, lr}
20000112:	b082      	sub	sp, #8
20000114:	af00      	add	r7, sp, #0
20000116:	0002      	movs	r2, r0
20000118:	1dfb      	adds	r3, r7, #7
2000011a:	701a      	strb	r2, [r3, #0]
	switch(x) {
2000011c:	1dfb      	adds	r3, r7, #7
2000011e:	781b      	ldrb	r3, [r3, #0]
20000120:	2b07      	cmp	r3, #7
20000122:	d83a      	bhi.n	2000019a <ascii_ctrl_bit_set+0x8a>
20000124:	009a      	lsls	r2, r3, #2
20000126:	4b1f      	ldr	r3, [pc, #124]	; (200001a4 <ascii_ctrl_bit_set+0x94>)
20000128:	18d3      	adds	r3, r2, r3
2000012a:	681b      	ldr	r3, [r3, #0]
2000012c:	469f      	mov	pc, r3
		case(0): *GPIO_ODR_LOW |= 0x00000001; break;
2000012e:	4a1e      	ldr	r2, [pc, #120]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
20000130:	4b1d      	ldr	r3, [pc, #116]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
20000132:	781b      	ldrb	r3, [r3, #0]
20000134:	b2db      	uxtb	r3, r3
20000136:	2101      	movs	r1, #1
20000138:	430b      	orrs	r3, r1
2000013a:	b2db      	uxtb	r3, r3
2000013c:	7013      	strb	r3, [r2, #0]
2000013e:	e02c      	b.n	2000019a <ascii_ctrl_bit_set+0x8a>
		case(1): *GPIO_ODR_LOW |= 0x00000010; break;
20000140:	4a19      	ldr	r2, [pc, #100]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
20000142:	4b19      	ldr	r3, [pc, #100]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
20000144:	781b      	ldrb	r3, [r3, #0]
20000146:	b2db      	uxtb	r3, r3
20000148:	2110      	movs	r1, #16
2000014a:	430b      	orrs	r3, r1
2000014c:	b2db      	uxtb	r3, r3
2000014e:	7013      	strb	r3, [r2, #0]
20000150:	e023      	b.n	2000019a <ascii_ctrl_bit_set+0x8a>
		case(2): *GPIO_ODR_LOW |= 0x00000100; break;
20000152:	4b15      	ldr	r3, [pc, #84]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
20000154:	4a14      	ldr	r2, [pc, #80]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
20000156:	7812      	ldrb	r2, [r2, #0]
20000158:	b2d2      	uxtb	r2, r2
2000015a:	701a      	strb	r2, [r3, #0]
2000015c:	e01d      	b.n	2000019a <ascii_ctrl_bit_set+0x8a>
		case(3): *GPIO_ODR_LOW |= 0x00001000; break;
2000015e:	4b12      	ldr	r3, [pc, #72]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
20000160:	4a11      	ldr	r2, [pc, #68]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
20000162:	7812      	ldrb	r2, [r2, #0]
20000164:	b2d2      	uxtb	r2, r2
20000166:	701a      	strb	r2, [r3, #0]
20000168:	e017      	b.n	2000019a <ascii_ctrl_bit_set+0x8a>
		case(4): *GPIO_ODR_LOW |= 0x00010000; break;
2000016a:	4b0f      	ldr	r3, [pc, #60]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
2000016c:	4a0e      	ldr	r2, [pc, #56]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
2000016e:	7812      	ldrb	r2, [r2, #0]
20000170:	b2d2      	uxtb	r2, r2
20000172:	701a      	strb	r2, [r3, #0]
20000174:	e011      	b.n	2000019a <ascii_ctrl_bit_set+0x8a>
		case(5): *GPIO_ODR_LOW |= 0x00100000; break;
20000176:	4b0c      	ldr	r3, [pc, #48]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
20000178:	4a0b      	ldr	r2, [pc, #44]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
2000017a:	7812      	ldrb	r2, [r2, #0]
2000017c:	b2d2      	uxtb	r2, r2
2000017e:	701a      	strb	r2, [r3, #0]
20000180:	e00b      	b.n	2000019a <ascii_ctrl_bit_set+0x8a>
		case(6): *GPIO_ODR_LOW |= 0x01000000; break;
20000182:	4b09      	ldr	r3, [pc, #36]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
20000184:	4a08      	ldr	r2, [pc, #32]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
20000186:	7812      	ldrb	r2, [r2, #0]
20000188:	b2d2      	uxtb	r2, r2
2000018a:	701a      	strb	r2, [r3, #0]
2000018c:	e005      	b.n	2000019a <ascii_ctrl_bit_set+0x8a>
		case(7): *GPIO_ODR_LOW |= 0x10000000; break;
2000018e:	4b06      	ldr	r3, [pc, #24]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
20000190:	4a05      	ldr	r2, [pc, #20]	; (200001a8 <ascii_ctrl_bit_set+0x98>)
20000192:	7812      	ldrb	r2, [r2, #0]
20000194:	b2d2      	uxtb	r2, r2
20000196:	701a      	strb	r2, [r3, #0]
20000198:	46c0      	nop			; (mov r8, r8)
	}
}
2000019a:	46c0      	nop			; (mov r8, r8)
2000019c:	46bd      	mov	sp, r7
2000019e:	b002      	add	sp, #8
200001a0:	bd80      	pop	{r7, pc}
200001a2:	46c0      	nop			; (mov r8, r8)
200001a4:	200005a0 	andcs	r0, r0, r0, lsr #11
200001a8:	40021014 	andmi	r1, r2, r4, lsl r0

200001ac <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x) {
200001ac:	b580      	push	{r7, lr}
200001ae:	b082      	sub	sp, #8
200001b0:	af00      	add	r7, sp, #0
200001b2:	0002      	movs	r2, r0
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	701a      	strb	r2, [r3, #0]
	switch(x) {
200001b8:	1dfb      	adds	r3, r7, #7
200001ba:	781b      	ldrb	r3, [r3, #0]
200001bc:	2b07      	cmp	r3, #7
200001be:	d84c      	bhi.n	2000025a <ascii_ctrl_bit_clear+0xae>
200001c0:	009a      	lsls	r2, r3, #2
200001c2:	4b28      	ldr	r3, [pc, #160]	; (20000264 <ascii_ctrl_bit_clear+0xb8>)
200001c4:	18d3      	adds	r3, r2, r3
200001c6:	681b      	ldr	r3, [r3, #0]
200001c8:	469f      	mov	pc, r3
		case(0): *GPIO_ODR_LOW &= 0x11111110; break;
200001ca:	4a27      	ldr	r2, [pc, #156]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
200001cc:	4b26      	ldr	r3, [pc, #152]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
200001ce:	781b      	ldrb	r3, [r3, #0]
200001d0:	b2db      	uxtb	r3, r3
200001d2:	2110      	movs	r1, #16
200001d4:	400b      	ands	r3, r1
200001d6:	b2db      	uxtb	r3, r3
200001d8:	7013      	strb	r3, [r2, #0]
200001da:	e03e      	b.n	2000025a <ascii_ctrl_bit_clear+0xae>
		case(1): *GPIO_ODR_LOW &= 0x11111101; break;
200001dc:	4a22      	ldr	r2, [pc, #136]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
200001de:	4b22      	ldr	r3, [pc, #136]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
200001e0:	781b      	ldrb	r3, [r3, #0]
200001e2:	b2db      	uxtb	r3, r3
200001e4:	2101      	movs	r1, #1
200001e6:	400b      	ands	r3, r1
200001e8:	b2db      	uxtb	r3, r3
200001ea:	7013      	strb	r3, [r2, #0]
200001ec:	e035      	b.n	2000025a <ascii_ctrl_bit_clear+0xae>
		case(2): *GPIO_ODR_LOW &= 0x11111011; break;
200001ee:	4a1e      	ldr	r2, [pc, #120]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
200001f0:	4b1d      	ldr	r3, [pc, #116]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
200001f2:	781b      	ldrb	r3, [r3, #0]
200001f4:	b2db      	uxtb	r3, r3
200001f6:	2111      	movs	r1, #17
200001f8:	400b      	ands	r3, r1
200001fa:	b2db      	uxtb	r3, r3
200001fc:	7013      	strb	r3, [r2, #0]
200001fe:	e02c      	b.n	2000025a <ascii_ctrl_bit_clear+0xae>
		case(3): *GPIO_ODR_LOW &= 0x11110111; break;
20000200:	4a19      	ldr	r2, [pc, #100]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
20000202:	4b19      	ldr	r3, [pc, #100]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
20000204:	781b      	ldrb	r3, [r3, #0]
20000206:	b2db      	uxtb	r3, r3
20000208:	2111      	movs	r1, #17
2000020a:	400b      	ands	r3, r1
2000020c:	b2db      	uxtb	r3, r3
2000020e:	7013      	strb	r3, [r2, #0]
20000210:	e023      	b.n	2000025a <ascii_ctrl_bit_clear+0xae>
		case(4): *GPIO_ODR_LOW &= 0x11101111; break;
20000212:	4a15      	ldr	r2, [pc, #84]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
20000214:	4b14      	ldr	r3, [pc, #80]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
20000216:	781b      	ldrb	r3, [r3, #0]
20000218:	b2db      	uxtb	r3, r3
2000021a:	2111      	movs	r1, #17
2000021c:	400b      	ands	r3, r1
2000021e:	b2db      	uxtb	r3, r3
20000220:	7013      	strb	r3, [r2, #0]
20000222:	e01a      	b.n	2000025a <ascii_ctrl_bit_clear+0xae>
		case(5): *GPIO_ODR_LOW &= 0x11011111; break;
20000224:	4a10      	ldr	r2, [pc, #64]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
20000226:	4b10      	ldr	r3, [pc, #64]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
20000228:	781b      	ldrb	r3, [r3, #0]
2000022a:	b2db      	uxtb	r3, r3
2000022c:	2111      	movs	r1, #17
2000022e:	400b      	ands	r3, r1
20000230:	b2db      	uxtb	r3, r3
20000232:	7013      	strb	r3, [r2, #0]
20000234:	e011      	b.n	2000025a <ascii_ctrl_bit_clear+0xae>
		case(6): *GPIO_ODR_LOW &= 0x10111111; break;
20000236:	4a0c      	ldr	r2, [pc, #48]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
20000238:	4b0b      	ldr	r3, [pc, #44]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
2000023a:	781b      	ldrb	r3, [r3, #0]
2000023c:	b2db      	uxtb	r3, r3
2000023e:	2111      	movs	r1, #17
20000240:	400b      	ands	r3, r1
20000242:	b2db      	uxtb	r3, r3
20000244:	7013      	strb	r3, [r2, #0]
20000246:	e008      	b.n	2000025a <ascii_ctrl_bit_clear+0xae>
		case(7): *GPIO_ODR_LOW &= 0x01111111; break;
20000248:	4a07      	ldr	r2, [pc, #28]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
2000024a:	4b07      	ldr	r3, [pc, #28]	; (20000268 <ascii_ctrl_bit_clear+0xbc>)
2000024c:	781b      	ldrb	r3, [r3, #0]
2000024e:	b2db      	uxtb	r3, r3
20000250:	2111      	movs	r1, #17
20000252:	400b      	ands	r3, r1
20000254:	b2db      	uxtb	r3, r3
20000256:	7013      	strb	r3, [r2, #0]
20000258:	46c0      	nop			; (mov r8, r8)
	}
}
2000025a:	46c0      	nop			; (mov r8, r8)
2000025c:	46bd      	mov	sp, r7
2000025e:	b002      	add	sp, #8
20000260:	bd80      	pop	{r7, pc}
20000262:	46c0      	nop			; (mov r8, r8)
20000264:	200005c0 	andcs	r0, r0, r0, asr #11
20000268:	40021014 	andmi	r1, r2, r4, lsl r0

2000026c <ascii_write_controller>:

void ascii_write_controller(unsigned char byte) {
2000026c:	b580      	push	{r7, lr}
2000026e:	b082      	sub	sp, #8
20000270:	af00      	add	r7, sp, #0
20000272:	0002      	movs	r2, r0
20000274:	1dfb      	adds	r3, r7, #7
20000276:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20000278:	2006      	movs	r0, #6
2000027a:	f7ff ff49 	bl	20000110 <ascii_ctrl_bit_set>
	*GPIO_ODR_HIGH = byte;
2000027e:	4a06      	ldr	r2, [pc, #24]	; (20000298 <ascii_write_controller+0x2c>)
20000280:	1dfb      	adds	r3, r7, #7
20000282:	781b      	ldrb	r3, [r3, #0]
20000284:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20000286:	f7ff fef5 	bl	20000074 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
2000028a:	2006      	movs	r0, #6
2000028c:	f7ff ff8e 	bl	200001ac <ascii_ctrl_bit_clear>
}
20000290:	46c0      	nop			; (mov r8, r8)
20000292:	46bd      	mov	sp, r7
20000294:	b002      	add	sp, #8
20000296:	bd80      	pop	{r7, pc}
20000298:	40021015 	andmi	r1, r2, r5, lsl r0

2000029c <ascii_read_controller>:

unsigned char ascii_read_controller() {
2000029c:	b580      	push	{r7, lr}
2000029e:	b082      	sub	sp, #8
200002a0:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
200002a2:	2006      	movs	r0, #6
200002a4:	f7ff ff34 	bl	20000110 <ascii_ctrl_bit_set>
	delay_250ns();
200002a8:	f7ff fee4 	bl	20000074 <delay_250ns>
	delay_250ns();
200002ac:	f7ff fee2 	bl	20000074 <delay_250ns>
	unsigned char rv = *GPIO_IDR_HIGH;
200002b0:	4a06      	ldr	r2, [pc, #24]	; (200002cc <ascii_read_controller+0x30>)
200002b2:	1dfb      	adds	r3, r7, #7
200002b4:	7812      	ldrb	r2, [r2, #0]
200002b6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
200002b8:	2006      	movs	r0, #6
200002ba:	f7ff ff77 	bl	200001ac <ascii_ctrl_bit_clear>
	return rv;
200002be:	1dfb      	adds	r3, r7, #7
200002c0:	781b      	ldrb	r3, [r3, #0]
}
200002c2:	0018      	movs	r0, r3
200002c4:	46bd      	mov	sp, r7
200002c6:	b002      	add	sp, #8
200002c8:	bd80      	pop	{r7, pc}
200002ca:	46c0      	nop			; (mov r8, r8)
200002cc:	40021011 	andmi	r1, r2, r1, lsl r0

200002d0 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command) {
200002d0:	b580      	push	{r7, lr}
200002d2:	b082      	sub	sp, #8
200002d4:	af00      	add	r7, sp, #0
200002d6:	0002      	movs	r2, r0
200002d8:	1dfb      	adds	r3, r7, #7
200002da:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200002dc:	2000      	movs	r0, #0
200002de:	f7ff ff17 	bl	20000110 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
200002e2:	2001      	movs	r0, #1
200002e4:	f7ff ff14 	bl	20000110 <ascii_ctrl_bit_set>
	ascii_write_controller(command);
200002e8:	1dfb      	adds	r3, r7, #7
200002ea:	781b      	ldrb	r3, [r3, #0]
200002ec:	0018      	movs	r0, r3
200002ee:	f7ff ffbd 	bl	2000026c <ascii_write_controller>
}
200002f2:	46c0      	nop			; (mov r8, r8)
200002f4:	46bd      	mov	sp, r7
200002f6:	b002      	add	sp, #8
200002f8:	bd80      	pop	{r7, pc}

200002fa <ascii_write_data>:

void ascii_write_data(unsigned char data) {
200002fa:	b580      	push	{r7, lr}
200002fc:	b082      	sub	sp, #8
200002fe:	af00      	add	r7, sp, #0
20000300:	0002      	movs	r2, r0
20000302:	1dfb      	adds	r3, r7, #7
20000304:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000306:	2000      	movs	r0, #0
20000308:	f7ff ff02 	bl	20000110 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
2000030c:	2001      	movs	r0, #1
2000030e:	f7ff ff4d 	bl	200001ac <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000312:	1dfb      	adds	r3, r7, #7
20000314:	781b      	ldrb	r3, [r3, #0]
20000316:	0018      	movs	r0, r3
20000318:	f7ff ffa8 	bl	2000026c <ascii_write_controller>
}
2000031c:	46c0      	nop			; (mov r8, r8)
2000031e:	46bd      	mov	sp, r7
20000320:	b002      	add	sp, #8
20000322:	bd80      	pop	{r7, pc}

20000324 <ascii_read_status>:

unsigned char ascii_read_status(void) {
20000324:	b590      	push	{r4, r7, lr}
20000326:	b083      	sub	sp, #12
20000328:	af00      	add	r7, sp, #0
	*GPIO_MODER &= 0x0000FFFF;	
2000032a:	4b0e      	ldr	r3, [pc, #56]	; (20000364 <ascii_read_status+0x40>)
2000032c:	4a0d      	ldr	r2, [pc, #52]	; (20000364 <ascii_read_status+0x40>)
2000032e:	6812      	ldr	r2, [r2, #0]
20000330:	0412      	lsls	r2, r2, #16
20000332:	0c12      	lsrs	r2, r2, #16
20000334:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000336:	2000      	movs	r0, #0
20000338:	f7ff ff38 	bl	200001ac <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
2000033c:	2001      	movs	r0, #1
2000033e:	f7ff fee7 	bl	20000110 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000342:	1dfc      	adds	r4, r7, #7
20000344:	f7ff ffaa 	bl	2000029c <ascii_read_controller>
20000348:	0003      	movs	r3, r0
2000034a:	7023      	strb	r3, [r4, #0]
	*GPIO_MODER |= 0x5555FFFF;	
2000034c:	4b05      	ldr	r3, [pc, #20]	; (20000364 <ascii_read_status+0x40>)
2000034e:	4a05      	ldr	r2, [pc, #20]	; (20000364 <ascii_read_status+0x40>)
20000350:	6812      	ldr	r2, [r2, #0]
20000352:	4905      	ldr	r1, [pc, #20]	; (20000368 <ascii_read_status+0x44>)
20000354:	430a      	orrs	r2, r1
20000356:	601a      	str	r2, [r3, #0]
	return rv;
20000358:	1dfb      	adds	r3, r7, #7
2000035a:	781b      	ldrb	r3, [r3, #0]
}
2000035c:	0018      	movs	r0, r3
2000035e:	46bd      	mov	sp, r7
20000360:	b003      	add	sp, #12
20000362:	bd90      	pop	{r4, r7, pc}
20000364:	40021000 	andmi	r1, r2, r0
20000368:	5555ffff 	ldrbpl	pc, [r5, #-4095]	; 0xfffff001	; <UNPREDICTABLE>

2000036c <ascii_read_data>:

unsigned char ascii_read_data(void) {
2000036c:	b590      	push	{r4, r7, lr}
2000036e:	b083      	sub	sp, #12
20000370:	af00      	add	r7, sp, #0
	*GPIO_MODER &= 0x0000FFFF;	
20000372:	4b0e      	ldr	r3, [pc, #56]	; (200003ac <ascii_read_data+0x40>)
20000374:	4a0d      	ldr	r2, [pc, #52]	; (200003ac <ascii_read_data+0x40>)
20000376:	6812      	ldr	r2, [r2, #0]
20000378:	0412      	lsls	r2, r2, #16
2000037a:	0c12      	lsrs	r2, r2, #16
2000037c:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
2000037e:	2000      	movs	r0, #0
20000380:	f7ff fec6 	bl	20000110 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000384:	2001      	movs	r0, #1
20000386:	f7ff fec3 	bl	20000110 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
2000038a:	1dfc      	adds	r4, r7, #7
2000038c:	f7ff ff86 	bl	2000029c <ascii_read_controller>
20000390:	0003      	movs	r3, r0
20000392:	7023      	strb	r3, [r4, #0]
	*GPIO_MODER |= 0x5555FFFF;	
20000394:	4b05      	ldr	r3, [pc, #20]	; (200003ac <ascii_read_data+0x40>)
20000396:	4a05      	ldr	r2, [pc, #20]	; (200003ac <ascii_read_data+0x40>)
20000398:	6812      	ldr	r2, [r2, #0]
2000039a:	4905      	ldr	r1, [pc, #20]	; (200003b0 <ascii_read_data+0x44>)
2000039c:	430a      	orrs	r2, r1
2000039e:	601a      	str	r2, [r3, #0]
	return rv;
200003a0:	1dfb      	adds	r3, r7, #7
200003a2:	781b      	ldrb	r3, [r3, #0]
}
200003a4:	0018      	movs	r0, r3
200003a6:	46bd      	mov	sp, r7
200003a8:	b003      	add	sp, #12
200003aa:	bd90      	pop	{r4, r7, pc}
200003ac:	40021000 	andmi	r1, r2, r0
200003b0:	5555ffff 	ldrbpl	pc, [r5, #-4095]	; 0xfffff001	; <UNPREDICTABLE>

200003b4 <ascii_command>:

void ascii_command(char command) {
200003b4:	b580      	push	{r7, lr}
200003b6:	b082      	sub	sp, #8
200003b8:	af00      	add	r7, sp, #0
200003ba:	0002      	movs	r2, r0
200003bc:	1dfb      	adds	r3, r7, #7
200003be:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 80) == 0x80) {
200003c0:	46c0      	nop			; (mov r8, r8)
200003c2:	f7ff ffaf 	bl	20000324 <ascii_read_status>
		// Do nothing, wait for status flag
	}
	delay_mikro(8);
200003c6:	2008      	movs	r0, #8
200003c8:	f7ff fe76 	bl	200000b8 <delay_mikro>
	ascii_write_cmd(1);
200003cc:	2001      	movs	r0, #1
200003ce:	f7ff ff7f 	bl	200002d0 <ascii_write_cmd>
	delay_milli(2);
200003d2:	2002      	movs	r0, #2
200003d4:	f7ff fe82 	bl	200000dc <delay_milli>
}
200003d8:	46c0      	nop			; (mov r8, r8)
200003da:	46bd      	mov	sp, r7
200003dc:	b002      	add	sp, #8
200003de:	bd80      	pop	{r7, pc}

200003e0 <ascii_init>:

void ascii_init(void) {
200003e0:	b580      	push	{r7, lr}
200003e2:	af00      	add	r7, sp, #0
	ascii_command(0x00111000); // Set display size and font size
200003e4:	2000      	movs	r0, #0
200003e6:	f7ff ffe5 	bl	200003b4 <ascii_command>
    ascii_command(0x00001110); // Set display, cursor on
200003ea:	2010      	movs	r0, #16
200003ec:	f7ff ffe2 	bl	200003b4 <ascii_command>
    ascii_command(0x00000110); // Inc, no shift
200003f0:	2010      	movs	r0, #16
200003f2:	f7ff ffdf 	bl	200003b4 <ascii_command>
}
200003f6:	46c0      	nop			; (mov r8, r8)
200003f8:	46bd      	mov	sp, r7
200003fa:	bd80      	pop	{r7, pc}

200003fc <ascii_write_char>:

void ascii_write_char(unsigned char charToWrite) {
200003fc:	b580      	push	{r7, lr}
200003fe:	b082      	sub	sp, #8
20000400:	af00      	add	r7, sp, #0
20000402:	0002      	movs	r2, r0
20000404:	1dfb      	adds	r3, r7, #7
20000406:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 80) == 0x80) {
20000408:	46c0      	nop			; (mov r8, r8)
2000040a:	f7ff ff8b 	bl	20000324 <ascii_read_status>
	// Do nothing, wait for status flag
    }
	delay_mikro(8);
2000040e:	2008      	movs	r0, #8
20000410:	f7ff fe52 	bl	200000b8 <delay_mikro>
    ascii_write_data(charToWrite);
20000414:	1dfb      	adds	r3, r7, #7
20000416:	781b      	ldrb	r3, [r3, #0]
20000418:	0018      	movs	r0, r3
2000041a:	f7ff ff6e 	bl	200002fa <ascii_write_data>
    delay_milli(2);
2000041e:	2002      	movs	r0, #2
20000420:	f7ff fe5c 	bl	200000dc <delay_milli>
}
20000424:	46c0      	nop			; (mov r8, r8)
20000426:	46bd      	mov	sp, r7
20000428:	b002      	add	sp, #8
2000042a:	bd80      	pop	{r7, pc}

2000042c <main>:

void main(void) {
2000042c:	b580      	push	{r7, lr}
2000042e:	af00      	add	r7, sp, #0
	init_app();
20000430:	f7ff fdee 	bl	20000010 <init_app>
    ascii_init();
20000434:	f7ff ffd4 	bl	200003e0 <ascii_init>
	ascii_write_char('a');
20000438:	2061      	movs	r0, #97	; 0x61
2000043a:	f7ff ffdf 	bl	200003fc <ascii_write_char>
	ascii_write_char('a');
2000043e:	2061      	movs	r0, #97	; 0x61
20000440:	f7ff ffdc 	bl	200003fc <ascii_write_char>
	ascii_write_char('a');
20000444:	2061      	movs	r0, #97	; 0x61
20000446:	f7ff ffd9 	bl	200003fc <ascii_write_char>
	ascii_write_char('a');
2000044a:	2061      	movs	r0, #97	; 0x61
2000044c:	f7ff ffd6 	bl	200003fc <ascii_write_char>
	ascii_write_char('a');
20000450:	2061      	movs	r0, #97	; 0x61
20000452:	f7ff ffd3 	bl	200003fc <ascii_write_char>
	ascii_write_char('a');
20000456:	2061      	movs	r0, #97	; 0x61
20000458:	f7ff ffd0 	bl	200003fc <ascii_write_char>
	ascii_write_char('a');
2000045c:	2061      	movs	r0, #97	; 0x61
2000045e:	f7ff ffcd 	bl	200003fc <ascii_write_char>
	ascii_write_char('a');
20000462:	2061      	movs	r0, #97	; 0x61
20000464:	f7ff ffca 	bl	200003fc <ascii_write_char>
	ascii_write_char('a');
20000468:	2061      	movs	r0, #97	; 0x61
2000046a:	f7ff ffc7 	bl	200003fc <ascii_write_char>
	ascii_write_char('a');
2000046e:	2061      	movs	r0, #97	; 0x61
20000470:	f7ff ffc4 	bl	200003fc <ascii_write_char>
	ascii_write_char('a');
20000474:	2061      	movs	r0, #97	; 0x61
20000476:	f7ff ffc1 	bl	200003fc <ascii_write_char>
	ascii_write_char('a');
2000047a:	2061      	movs	r0, #97	; 0x61
2000047c:	f7ff ffbe 	bl	200003fc <ascii_write_char>
}
20000480:	46c0      	nop			; (mov r8, r8)
20000482:	46bd      	mov	sp, r7
20000484:	bd80      	pop	{r7, pc}
20000486:	46c0      	nop			; (mov r8, r8)

20000488 <__udivsi3>:
20000488:	2200      	movs	r2, #0
2000048a:	0843      	lsrs	r3, r0, #1
2000048c:	428b      	cmp	r3, r1
2000048e:	d374      	bcc.n	2000057a <__udivsi3+0xf2>
20000490:	0903      	lsrs	r3, r0, #4
20000492:	428b      	cmp	r3, r1
20000494:	d35f      	bcc.n	20000556 <__udivsi3+0xce>
20000496:	0a03      	lsrs	r3, r0, #8
20000498:	428b      	cmp	r3, r1
2000049a:	d344      	bcc.n	20000526 <__udivsi3+0x9e>
2000049c:	0b03      	lsrs	r3, r0, #12
2000049e:	428b      	cmp	r3, r1
200004a0:	d328      	bcc.n	200004f4 <__udivsi3+0x6c>
200004a2:	0c03      	lsrs	r3, r0, #16
200004a4:	428b      	cmp	r3, r1
200004a6:	d30d      	bcc.n	200004c4 <__udivsi3+0x3c>
200004a8:	22ff      	movs	r2, #255	; 0xff
200004aa:	0209      	lsls	r1, r1, #8
200004ac:	ba12      	rev	r2, r2
200004ae:	0c03      	lsrs	r3, r0, #16
200004b0:	428b      	cmp	r3, r1
200004b2:	d302      	bcc.n	200004ba <__udivsi3+0x32>
200004b4:	1212      	asrs	r2, r2, #8
200004b6:	0209      	lsls	r1, r1, #8
200004b8:	d065      	beq.n	20000586 <__udivsi3+0xfe>
200004ba:	0b03      	lsrs	r3, r0, #12
200004bc:	428b      	cmp	r3, r1
200004be:	d319      	bcc.n	200004f4 <__udivsi3+0x6c>
200004c0:	e000      	b.n	200004c4 <__udivsi3+0x3c>
200004c2:	0a09      	lsrs	r1, r1, #8
200004c4:	0bc3      	lsrs	r3, r0, #15
200004c6:	428b      	cmp	r3, r1
200004c8:	d301      	bcc.n	200004ce <__udivsi3+0x46>
200004ca:	03cb      	lsls	r3, r1, #15
200004cc:	1ac0      	subs	r0, r0, r3
200004ce:	4152      	adcs	r2, r2
200004d0:	0b83      	lsrs	r3, r0, #14
200004d2:	428b      	cmp	r3, r1
200004d4:	d301      	bcc.n	200004da <__udivsi3+0x52>
200004d6:	038b      	lsls	r3, r1, #14
200004d8:	1ac0      	subs	r0, r0, r3
200004da:	4152      	adcs	r2, r2
200004dc:	0b43      	lsrs	r3, r0, #13
200004de:	428b      	cmp	r3, r1
200004e0:	d301      	bcc.n	200004e6 <__udivsi3+0x5e>
200004e2:	034b      	lsls	r3, r1, #13
200004e4:	1ac0      	subs	r0, r0, r3
200004e6:	4152      	adcs	r2, r2
200004e8:	0b03      	lsrs	r3, r0, #12
200004ea:	428b      	cmp	r3, r1
200004ec:	d301      	bcc.n	200004f2 <__udivsi3+0x6a>
200004ee:	030b      	lsls	r3, r1, #12
200004f0:	1ac0      	subs	r0, r0, r3
200004f2:	4152      	adcs	r2, r2
200004f4:	0ac3      	lsrs	r3, r0, #11
200004f6:	428b      	cmp	r3, r1
200004f8:	d301      	bcc.n	200004fe <__udivsi3+0x76>
200004fa:	02cb      	lsls	r3, r1, #11
200004fc:	1ac0      	subs	r0, r0, r3
200004fe:	4152      	adcs	r2, r2
20000500:	0a83      	lsrs	r3, r0, #10
20000502:	428b      	cmp	r3, r1
20000504:	d301      	bcc.n	2000050a <__udivsi3+0x82>
20000506:	028b      	lsls	r3, r1, #10
20000508:	1ac0      	subs	r0, r0, r3
2000050a:	4152      	adcs	r2, r2
2000050c:	0a43      	lsrs	r3, r0, #9
2000050e:	428b      	cmp	r3, r1
20000510:	d301      	bcc.n	20000516 <__udivsi3+0x8e>
20000512:	024b      	lsls	r3, r1, #9
20000514:	1ac0      	subs	r0, r0, r3
20000516:	4152      	adcs	r2, r2
20000518:	0a03      	lsrs	r3, r0, #8
2000051a:	428b      	cmp	r3, r1
2000051c:	d301      	bcc.n	20000522 <__udivsi3+0x9a>
2000051e:	020b      	lsls	r3, r1, #8
20000520:	1ac0      	subs	r0, r0, r3
20000522:	4152      	adcs	r2, r2
20000524:	d2cd      	bcs.n	200004c2 <__udivsi3+0x3a>
20000526:	09c3      	lsrs	r3, r0, #7
20000528:	428b      	cmp	r3, r1
2000052a:	d301      	bcc.n	20000530 <__udivsi3+0xa8>
2000052c:	01cb      	lsls	r3, r1, #7
2000052e:	1ac0      	subs	r0, r0, r3
20000530:	4152      	adcs	r2, r2
20000532:	0983      	lsrs	r3, r0, #6
20000534:	428b      	cmp	r3, r1
20000536:	d301      	bcc.n	2000053c <__udivsi3+0xb4>
20000538:	018b      	lsls	r3, r1, #6
2000053a:	1ac0      	subs	r0, r0, r3
2000053c:	4152      	adcs	r2, r2
2000053e:	0943      	lsrs	r3, r0, #5
20000540:	428b      	cmp	r3, r1
20000542:	d301      	bcc.n	20000548 <__udivsi3+0xc0>
20000544:	014b      	lsls	r3, r1, #5
20000546:	1ac0      	subs	r0, r0, r3
20000548:	4152      	adcs	r2, r2
2000054a:	0903      	lsrs	r3, r0, #4
2000054c:	428b      	cmp	r3, r1
2000054e:	d301      	bcc.n	20000554 <__udivsi3+0xcc>
20000550:	010b      	lsls	r3, r1, #4
20000552:	1ac0      	subs	r0, r0, r3
20000554:	4152      	adcs	r2, r2
20000556:	08c3      	lsrs	r3, r0, #3
20000558:	428b      	cmp	r3, r1
2000055a:	d301      	bcc.n	20000560 <__udivsi3+0xd8>
2000055c:	00cb      	lsls	r3, r1, #3
2000055e:	1ac0      	subs	r0, r0, r3
20000560:	4152      	adcs	r2, r2
20000562:	0883      	lsrs	r3, r0, #2
20000564:	428b      	cmp	r3, r1
20000566:	d301      	bcc.n	2000056c <__udivsi3+0xe4>
20000568:	008b      	lsls	r3, r1, #2
2000056a:	1ac0      	subs	r0, r0, r3
2000056c:	4152      	adcs	r2, r2
2000056e:	0843      	lsrs	r3, r0, #1
20000570:	428b      	cmp	r3, r1
20000572:	d301      	bcc.n	20000578 <__udivsi3+0xf0>
20000574:	004b      	lsls	r3, r1, #1
20000576:	1ac0      	subs	r0, r0, r3
20000578:	4152      	adcs	r2, r2
2000057a:	1a41      	subs	r1, r0, r1
2000057c:	d200      	bcs.n	20000580 <__udivsi3+0xf8>
2000057e:	4601      	mov	r1, r0
20000580:	4152      	adcs	r2, r2
20000582:	4610      	mov	r0, r2
20000584:	4770      	bx	lr
20000586:	e7ff      	b.n	20000588 <__udivsi3+0x100>
20000588:	b501      	push	{r0, lr}
2000058a:	2000      	movs	r0, #0
2000058c:	f000 f806 	bl	2000059c <__aeabi_idiv0>
20000590:	bd02      	pop	{r1, pc}
20000592:	46c0      	nop			; (mov r8, r8)

20000594 <__aeabi_uidivmod>:
20000594:	2900      	cmp	r1, #0
20000596:	d0f7      	beq.n	20000588 <__udivsi3+0x100>
20000598:	e776      	b.n	20000488 <__udivsi3>
2000059a:	4770      	bx	lr

2000059c <__aeabi_idiv0>:
2000059c:	4770      	bx	lr
2000059e:	46c0      	nop			; (mov r8, r8)
200005a0:	2000012e 	andcs	r0, r0, lr, lsr #2
200005a4:	20000140 	andcs	r0, r0, r0, asr #2
200005a8:	20000152 	andcs	r0, r0, r2, asr r1
200005ac:	2000015e 	andcs	r0, r0, lr, asr r1
200005b0:	2000016a 	andcs	r0, r0, sl, ror #2
200005b4:	20000176 	andcs	r0, r0, r6, ror r1
200005b8:	20000182 	andcs	r0, r0, r2, lsl #3
200005bc:	2000018e 	andcs	r0, r0, lr, lsl #3
200005c0:	200001ca 	andcs	r0, r0, sl, asr #3
200005c4:	200001dc 	ldrdcs	r0, [r0], -ip
200005c8:	200001ee 	andcs	r0, r0, lr, ror #3
200005cc:	20000200 	andcs	r0, r0, r0, lsl #4
200005d0:	20000212 	andcs	r0, r0, r2, lsl r2
200005d4:	20000224 	andcs	r0, r0, r4, lsr #4
200005d8:	20000236 	andcs	r0, r0, r6, lsr r2
200005dc:	20000248 	andcs	r0, r0, r8, asr #4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000251 	andeq	r0, r0, r1, asr r2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000011b 	andeq	r0, r0, fp, lsl r1
  10:	00008a0c 	andeq	r8, r0, ip, lsl #20
	...
  20:	01b30200 			; <UNDEFINED> instruction: 0x01b30200
  24:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
  28:	2000042c 	andcs	r0, r0, ip, lsr #8
  2c:	0000005a 	andeq	r0, r0, sl, asr r0
  30:	67039c01 	strvs	r9, [r3, -r1, lsl #24]
  34:	01000000 	mrseq	r0, (UNDEF: 0)
  38:	0003fca5 	andeq	pc, r3, r5, lsr #25
  3c:	00003020 	andeq	r3, r0, r0, lsr #32
  40:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
  44:	04000000 	streq	r0, [r0], #-0
  48:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
  4c:	0056a501 	subseq	sl, r6, r1, lsl #10
  50:	91020000 	mrsls	r0, (UNDEF: 2)
  54:	01050077 	tsteq	r5, r7, ror r0
  58:	00010d08 	andeq	r0, r1, r8, lsl #26
  5c:	01f40200 	mvnseq	r0, r0, lsl #4
  60:	9f010000 	svcls	0x00010000
  64:	200003e0 	andcs	r0, r0, r0, ror #7
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	e6039c01 	str	r9, [r3], -r1, lsl #24
  70:	01000000 	mrseq	r0, (UNDEF: 0)
  74:	0003b496 	muleq	r3, r6, r4
  78:	00002c20 	andeq	r2, r0, r0, lsr #24
  7c:	929c0100 	addsls	r0, ip, #0, 2
  80:	04000000 	streq	r0, [r0], #-0
  84:	000000ec 	andeq	r0, r0, ip, ror #1
  88:	00929601 	addseq	r9, r2, r1, lsl #12
  8c:	91020000 	mrsls	r0, (UNDEF: 2)
  90:	01050077 	tsteq	r5, r7, ror r0
  94:	00011608 	andeq	r1, r1, r8, lsl #12
  98:	00fd0600 	rscseq	r0, sp, r0, lsl #12
  9c:	8d010000 	stchi	0, cr0, [r1, #-0]
  a0:	00000056 	andeq	r0, r0, r6, asr r0
  a4:	2000036c 	andcs	r0, r0, ip, ror #6
  a8:	00000048 	andeq	r0, r0, r8, asr #32
  ac:	00c09c01 	sbceq	r9, r0, r1, lsl #24
  b0:	72070000 	andvc	r0, r7, #0
  b4:	91010076 	tstls	r1, r6, ror r0
  b8:	00000056 	andeq	r0, r0, r6, asr r0
  bc:	006f9102 	rsbeq	r9, pc, r2, lsl #2
  c0:	00007806 	andeq	r7, r0, r6, lsl #16
  c4:	56840100 	strpl	r0, [r4], r0, lsl #2
  c8:	24000000 	strcs	r0, [r0], #-0
  cc:	48200003 	stmdami	r0!, {r0, r1}
  d0:	01000000 	mrseq	r0, (UNDEF: 0)
  d4:	0000e79c 	muleq	r0, ip, r7
  d8:	76720700 	ldrbtvc	r0, [r2], -r0, lsl #14
  dc:	56880100 	strpl	r0, [r8], r0, lsl #2
  e0:	02000000 	andeq	r0, r0, #0
  e4:	03006f91 	movweq	r6, #3985	; 0xf91
  e8:	000000c9 	andeq	r0, r0, r9, asr #1
  ec:	02fa7e01 	rscseq	r7, sl, #1, 28
  f0:	002a2000 	eoreq	r2, sl, r0
  f4:	9c010000 	stcls	0, cr0, [r1], {-0}
  f8:	0000010b 	andeq	r0, r0, fp, lsl #2
  fc:	00010804 	andeq	r0, r1, r4, lsl #16
 100:	567e0100 	ldrbtpl	r0, [lr], -r0, lsl #2
 104:	02000000 	andeq	r0, r0, #0
 108:	03007791 	movweq	r7, #1937	; 0x791
 10c:	000001d1 	ldrdeq	r0, [r0], -r1
 110:	02d07801 	sbcseq	r7, r0, #65536	; 0x10000
 114:	002a2000 	eoreq	r2, sl, r0
 118:	9c010000 	stcls	0, cr0, [r1], {-0}
 11c:	0000012f 	andeq	r0, r0, pc, lsr #2
 120:	0000ec04 	andeq	lr, r0, r4, lsl #24
 124:	56780100 	ldrbtpl	r0, [r8], -r0, lsl #2
 128:	02000000 	andeq	r0, r0, #0
 12c:	08007791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 130:	0000003a 	andeq	r0, r0, sl, lsr r0
 134:	00566f01 	subseq	r6, r6, r1, lsl #30
 138:	029c0000 	addseq	r0, ip, #0
 13c:	00342000 	eorseq	r2, r4, r0
 140:	9c010000 	stcls	0, cr0, [r1], {-0}
 144:	00000156 	andeq	r0, r0, r6, asr r1
 148:	00767207 	rsbseq	r7, r6, r7, lsl #4
 14c:	00567301 	subseq	r7, r6, r1, lsl #6
 150:	91020000 	mrsls	r0, (UNDEF: 2)
 154:	50030077 	andpl	r0, r3, r7, ror r0
 158:	01000000 	mrseq	r0, (UNDEF: 0)
 15c:	00026c68 	andeq	r6, r2, r8, ror #24
 160:	00003020 	andeq	r3, r0, r0, lsr #32
 164:	7a9c0100 	bvc	fe70056c <__aeabi_idiv0+0xde6fffd0>
 168:	04000001 	streq	r0, [r0], #-1
 16c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 170:	00566801 	subseq	r6, r6, r1, lsl #16
 174:	91020000 	mrsls	r0, (UNDEF: 2)
 178:	19090077 	stmdbne	r9, {r0, r1, r2, r4, r5, r6}
 17c:	01000000 	mrseq	r0, (UNDEF: 0)
 180:	0001ac5b 	andeq	sl, r1, fp, asr ip
 184:	0000c020 	andeq	ip, r0, r0, lsr #32
 188:	9c9c0100 	ldflss	f0, [ip], {0}
 18c:	0a000001 	beq	198 <startup-0x1ffffe68>
 190:	5b010078 	blpl	40378 <startup-0x1ffbfc88>
 194:	00000056 	andeq	r0, r0, r6, asr r0
 198:	00779102 	rsbseq	r9, r7, r2, lsl #2
 19c:	0001e109 	andeq	lr, r1, r9, lsl #2
 1a0:	104e0100 	subne	r0, lr, r0, lsl #2
 1a4:	9c200001 	stcls	0, cr0, [r0], #-4
 1a8:	01000000 	mrseq	r0, (UNDEF: 0)
 1ac:	0001be9c 	muleq	r1, ip, lr
 1b0:	00780a00 	rsbseq	r0, r8, r0, lsl #20
 1b4:	00564e01 	subseq	r4, r6, r1, lsl #28
 1b8:	91020000 	mrsls	r0, (UNDEF: 2)
 1bc:	00030077 	andeq	r0, r3, r7, ror r0
 1c0:	01000000 	mrseq	r0, (UNDEF: 0)
 1c4:	0000dc45 	andeq	sp, r0, r5, asr #24
 1c8:	00003420 	andeq	r3, r0, r0, lsr #8
 1cc:	e19c0100 	orrs	r0, ip, r0, lsl #2
 1d0:	0a000001 	beq	1dc <startup-0x1ffffe24>
 1d4:	0100736d 	tsteq	r0, sp, ror #6
 1d8:	0001e145 	andeq	lr, r1, r5, asr #2
 1dc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 1e0:	07040500 	streq	r0, [r4, -r0, lsl #10]
 1e4:	0000000c 	andeq	r0, r0, ip
 1e8:	00002e09 	andeq	r2, r0, r9, lsl #28
 1ec:	b83c0100 	ldmdalt	ip!, {r8}
 1f0:	24200000 	strtcs	r0, [r0], #-0
 1f4:	01000000 	mrseq	r0, (UNDEF: 0)
 1f8:	0002219c 	muleq	r2, ip, r1
 1fc:	73750a00 	cmnvc	r5, #0, 20
 200:	e13c0100 	teq	ip, r0, lsl #2
 204:	02000001 	andeq	r0, r0, #1
 208:	c00b6c91 	mulgt	fp, r1, ip
 20c:	14200000 	strtne	r0, [r0], #-0
 210:	07000000 	streq	r0, [r0, -r0]
 214:	3d010069 	stccc	0, cr0, [r1, #-420]	; 0xfffffe5c
 218:	000001e1 	andeq	r0, r0, r1, ror #3
 21c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 220:	00da0c00 	sbcseq	r0, sl, r0, lsl #24
 224:	31010000 	mrscc	r0, (UNDEF: 1)
 228:	20000074 	andcs	r0, r0, r4, ror r0
 22c:	00000044 	andeq	r0, r0, r4, asr #32
 230:	f40c9c01 			; <UNDEFINED> instruction: 0xf40c9c01
 234:	01000000 	mrseq	r0, (UNDEF: 0)
 238:	00001025 	andeq	r1, r0, r5, lsr #32
 23c:	00006420 	andeq	r6, r0, r0, lsr #8
 240:	0c9c0100 	ldfeqs	f0, [ip], {0}
 244:	000001c9 	andeq	r0, r0, r9, asr #3
 248:	00001a01 	andeq	r1, r0, r1, lsl #20
 24c:	000c2000 	andeq	r2, ip, r0
 250:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	002e0200 	eoreq	r0, lr, r0, lsl #4
  14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	01111927 	tsteq	r1, r7, lsr #18
  20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  24:	00194296 	mulseq	r9, r6, r2
  28:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
  2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	01111927 	tsteq	r1, r7, lsr #18
  38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  3c:	01194296 			; <UNDEFINED> instruction: 0x01194296
  40:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  44:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  48:	0b3b0b3a 	bleq	ec2d38 <startup-0x1f13d2c8>
  4c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  50:	24050000 	strcs	r0, [r5], #-0
  54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  58:	000e030b 	andeq	r0, lr, fp, lsl #6
  5c:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
  60:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  64:	0b3b0b3a 	bleq	ec2d54 <startup-0x1f13d2ac>
  68:	13491927 	movtne	r1, #39207	; 0x9927
  6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  70:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  74:	00130119 	andseq	r0, r3, r9, lsl r1
  78:	00340700 	eorseq	r0, r4, r0, lsl #14
  7c:	0b3a0803 	bleq	e82090 <startup-0x1f17df70>
  80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  84:	00001802 	andeq	r1, r0, r2, lsl #16
  88:	3f012e08 	svccc	0x00012e08
  8c:	3a0e0319 	bcc	380cf8 <startup-0x1fc7f308>
  90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  94:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  98:	96184006 	ldrls	r4, [r8], -r6
  9c:	13011942 	movwne	r1, #6466	; 0x1942
  a0:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
  a4:	03193f01 	tsteq	r9, #1, 30
  a8:	3b0b3a0e 	blcc	2ce8e8 <startup-0x1fd31718>
  ac:	1119270b 	tstne	r9, fp, lsl #14
  b0:	40061201 	andmi	r1, r6, r1, lsl #4
  b4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  b8:	00001301 	andeq	r1, r0, r1, lsl #6
  bc:	0300050a 	movweq	r0, #1290	; 0x50a
  c0:	3b0b3a08 	blcc	2ce8e8 <startup-0x1fd31718>
  c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  c8:	0b000018 	bleq	130 <startup-0x1ffffed0>
  cc:	0111010b 	tsteq	r1, fp, lsl #2
  d0:	00000612 	andeq	r0, r0, r2, lsl r6
  d4:	3f002e0c 	svccc	0x00002e0c
  d8:	3a0e0319 	bcc	380d44 <startup-0x1fc7f2bc>
  dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  e4:	97184006 	ldrls	r4, [r8, -r6]
  e8:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000476 	andeq	r0, r0, r6, ror r4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000486 	andcs	r0, r0, r6, lsl #9
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000104 	andeq	r0, r0, r4, lsl #2
   4:	00550002 	subseq	r0, r5, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	612f6574 			; <UNDEFINED> instruction: 0x612f6574
  44:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  48:	70736964 	rsbsvc	r6, r3, r4, ror #18
  4c:	0079616c 	rsbseq	r6, r9, ip, ror #2
  50:	61747300 	cmnvs	r4, r0, lsl #6
  54:	70757472 	rsbsvc	r7, r5, r2, ror r4
  58:	0100632e 	tsteq	r0, lr, lsr #6
  5c:	00000000 	andeq	r0, r0, r0
  60:	00000205 	andeq	r0, r0, r5, lsl #4
  64:	1a032000 	bne	c806c <startup-0x1ff37f94>
  68:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
  6c:	01010003 	tsteq	r1, r3
  70:	10020500 	andne	r0, r2, r0, lsl #10
  74:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  78:	4b300124 	blmi	c00510 <startup-0x1f3ffaf0>
  7c:	4b845968 	blmi	fe116624 <__aeabi_idiv0+0xde116088>
  80:	3d2fe667 	stccc	6, cr14, [pc, #-412]!	; fffffeec <__aeabi_idiv0+0xdffff950>
  84:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
  88:	06010402 	streq	r0, [r1], -r2, lsl #8
  8c:	3d690620 	stclcc	6, cr0, [r9, #-128]!	; 0xffffff80
  90:	02004ba0 	andeq	r4, r0, #160, 22	; 0x28000
  94:	3c060304 	stccc	3, cr0, [r6], {4}
  98:	01040200 	mrseq	r0, R12_usr
  9c:	4c50063c 	mrrcmi	6, 3, r0, r0, cr12	; <UNPREDICTABLE>
  a0:	753f834c 	ldrvc	r8, [pc, #-844]!	; fffffd5c <__aeabi_idiv0+0xdffff7c0>
  a4:	9191674c 	orrsls	r6, r1, ip, asr #14
  a8:	67676791 			; <UNDEFINED> instruction: 0x67676791
  ac:	92686767 	rsbls	r6, r8, #27000832	; 0x19c0000
  b0:	91919167 	orrsls	r9, r1, r7, ror #2
  b4:	91919191 			; <UNDEFINED> instruction: 0x91919191
  b8:	67929291 			; <UNDEFINED> instruction: 0x67929291
  bc:	3d2f4b3d 	fstmdbxcc	pc!, {d4-d33}	;@ Deprecated
  c0:	2f3d3d68 	svccs	0x003d3d68
  c4:	2f3d4b2f 	svccs	0x003d4b2f
  c8:	3d3d6776 	ldccc	7, cr6, [sp, #-472]!	; 0xfffffe28
  cc:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
  d0:	3d4c593d 	vstrcc.16	s11, [ip, #-122]	; 0xffffff86	; <UNPREDICTABLE>
  d4:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
  d8:	3d842f67 	stccc	15, cr2, [r4, #412]	; 0x19c
  dc:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
  e0:	67842f67 	strvs	r2, [r4, r7, ror #30]
  e4:	3d3d3d3f 	ldccc	13, cr3, [sp, #-252]!	; 0xffffff04
  e8:	3d3d2f4c 	ldccc	15, cr2, [sp, #-304]!	; 0xfffffed0
  ec:	3f673e3d 	svccc	0x00673e3d
  f0:	4c3d593d 			; <UNDEFINED> instruction: 0x4c3d593d
  f4:	3d2f2f2f 	stccc	15, cr2, [pc, #-188]!	; 40 <startup-0x1fffffc0>
  f8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  fc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 100:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
 104:	01010003 	tsteq	r1, r3

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  10:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  14:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  18:	63736100 	cmnvs	r3, #0, 2
  1c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
  20:	5f6c7274 	svcpl	0x006c7274
  24:	5f746962 	svcpl	0x00746962
  28:	61656c63 	cmnvs	r5, r3, ror #24
  2c:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
  30:	5f79616c 	svcpl	0x0079616c
  34:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
  38:	7361006f 	cmnvc	r1, #111	; 0x6f
  3c:	5f696963 	svcpl	0x00696963
  40:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  44:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  48:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; fffffe80 <__aeabi_idiv0+0xdffff8e4>
  4c:	0072656c 	rsbseq	r6, r2, ip, ror #10
  50:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  54:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  58:	5f657469 	svcpl	0x00657469
  5c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  60:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  64:	61007265 	tstvs	r0, r5, ror #4
  68:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  6c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  70:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  74:	00726168 	rsbseq	r6, r2, r8, ror #2
  78:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  7c:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
  80:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
  84:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
  88:	3a430073 	bcc	10c025c <startup-0x1ef3fda4>
  8c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  90:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
  94:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
  98:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
  9c:	6f746b73 	svcvs	0x00746b73
  a0:	41442f70 	hvcmi	17136	; 0x42f0
  a4:	37313054 			; <UNDEFINED> instruction: 0x37313054
  a8:	646f432f 	strbtvs	r4, [pc], #-815	; b0 <startup-0x1fffff50>
  ac:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  b0:	73612f65 	cmnvc	r1, #404	; 0x194
  b4:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
  b8:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  bc:	732f7961 			; <UNDEFINED> instruction: 0x732f7961
  c0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  c4:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  c8:	63736100 	cmnvs	r3, #0, 2
  cc:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  d0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  d4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  d8:	65640061 	strbvs	r0, [r4, #-97]!	; 0xffffff9f
  dc:	5f79616c 	svcpl	0x0079616c
  e0:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
  e4:	73610073 	cmnvc	r1, #115	; 0x73
  e8:	5f696963 	svcpl	0x00696963
  ec:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  f0:	00646e61 	rsbeq	r6, r4, r1, ror #28
  f4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
  f8:	7070615f 	rsbsvc	r6, r0, pc, asr r1
  fc:	63736100 	cmnvs	r3, #0, 2
 100:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 104:	5f646165 	svcpl	0x00646165
 108:	61746164 	cmnvs	r4, r4, ror #2
 10c:	736e7500 	cmnvc	lr, #0, 10
 110:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 114:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 118:	47007261 	strmi	r7, [r0, -r1, ror #4]
 11c:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
 120:	36203939 			; <UNDEFINED> instruction: 0x36203939
 124:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
 128:	31303220 	teqcc	r0, r0, lsr #4
 12c:	31323037 	teqcc	r2, r7, lsr r0
 130:	72282035 	eorvc	r2, r8, #53	; 0x35
 134:	61656c65 	cmnvs	r5, r5, ror #24
 138:	20296573 	eorcs	r6, r9, r3, ror r5
 13c:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
 140:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
 144:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
 148:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
 14c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 150:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 154:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 158:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 15c:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
 160:	205d3231 	subscs	r3, sp, r1, lsr r2
 164:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 168:	20626d75 	rsbcs	r6, r2, r5, ror sp
 16c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 170:	613d6863 	teqvs	sp, r3, ror #16
 174:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 178:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 17c:	6f6c666d 	svcvs	0x006c666d
 180:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 184:	733d6962 	teqvc	sp, #1605632	; 0x188000
 188:	2074666f 	rsbscs	r6, r4, pc, ror #12
 18c:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 190:	20626d75 	rsbcs	r6, r2, r5, ror sp
 194:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 198:	613d6863 	teqvs	sp, r3, ror #16
 19c:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 1a0:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 1a4:	4f2d2067 	svcmi	0x002d2067
 1a8:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 1ac:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 1b0:	6d003939 	vstrvs.16	s6, [r0, #-114]	; 0xffffff8e	; <UNPREDICTABLE>
 1b4:	006e6961 	rsbeq	r6, lr, r1, ror #18
 1b8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 1bc:	61686300 	cmnvs	r8, r0, lsl #6
 1c0:	576f5472 			; <UNDEFINED> instruction: 0x576f5472
 1c4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1c8:	61747300 	cmnvs	r4, r0, lsl #6
 1cc:	70757472 	rsbsvc	r7, r5, r2, ror r4
 1d0:	63736100 	cmnvs	r3, #0, 2
 1d4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1d8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1dc:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 1e0:	63736100 	cmnvs	r3, #0, 2
 1e4:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 1e8:	5f6c7274 	svcpl	0x006c7274
 1ec:	5f746962 	svcpl	0x00746962
 1f0:	00746573 	rsbseq	r6, r4, r3, ror r5
 1f4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1f8:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 1fc:	Address 0x000001fc is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000064 	andeq	r0, r0, r4, rrx
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000074 	andcs	r0, r0, r4, ror r0
  48:	00000044 	andeq	r0, r0, r4, asr #32
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	200000b8 	strhcs	r0, [r0], -r8
  64:	00000024 	andeq	r0, r0, r4, lsr #32
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	180e4101 	stmdane	lr, {r0, r8, lr}
  74:	00070d41 	andeq	r0, r7, r1, asr #26
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000dc 	ldrdcs	r0, [r0], -ip
  84:	00000034 	andeq	r0, r0, r4, lsr r0
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	100e4101 	andne	r4, lr, r1, lsl #2
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	20000110 	andcs	r0, r0, r0, lsl r1
  a4:	0000009c 	muleq	r0, ip, r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200001ac 	andcs	r0, r0, ip, lsr #3
  c4:	000000c0 	andeq	r0, r0, r0, asr #1
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	2000026c 	andcs	r0, r0, ip, ror #4
  e4:	00000030 	andeq	r0, r0, r0, lsr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	2000029c 	mulcs	r0, ip, r2
 104:	00000034 	andeq	r0, r0, r4, lsr r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 124:	0000002a 	andeq	r0, r0, sl, lsr #32
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200002fa 	strdcs	r0, [r0], -sl
 144:	0000002a 	andeq	r0, r0, sl, lsr #32
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	00000020 	andeq	r0, r0, r0, lsr #32
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000324 	andcs	r0, r0, r4, lsr #6
 164:	00000048 	andeq	r0, r0, r8, asr #32
 168:	400c0e41 	andmi	r0, ip, r1, asr #28
 16c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 170:	018e4002 	orreq	r4, lr, r2
 174:	41180e41 	tstmi	r8, r1, asr #28
 178:	0000070d 	andeq	r0, r0, sp, lsl #14
 17c:	00000020 	andeq	r0, r0, r0, lsr #32
 180:	00000000 	andeq	r0, r0, r0
 184:	2000036c 	andcs	r0, r0, ip, ror #6
 188:	00000048 	andeq	r0, r0, r8, asr #32
 18c:	400c0e41 	andmi	r0, ip, r1, asr #28
 190:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 194:	018e4002 	orreq	r4, lr, r2
 198:	41180e41 	tstmi	r8, r1, asr #28
 19c:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	200003b4 			; <UNDEFINED> instruction: 0x200003b4
 1ac:	0000002c 	andeq	r0, r0, ip, lsr #32
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	100e4101 	andne	r4, lr, r1, lsl #2
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	00000018 	andeq	r0, r0, r8, lsl r0
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	200003e0 	andcs	r0, r0, r0, ror #7
 1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	200003fc 	strdcs	r0, [r0], -ip
 1e8:	00000030 	andeq	r0, r0, r0, lsr r0
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	100e4101 	andne	r4, lr, r1, lsl #2
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	00000018 	andeq	r0, r0, r8, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	2000042c 	andcs	r0, r0, ip, lsr #8
 208:	0000005a 	andeq	r0, r0, sl, asr r0
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 218:	0000000c 	andeq	r0, r0, ip
 21c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 220:	7c010001 	stcvc	0, cr0, [r1], {1}
 224:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 228:	0000000c 	andeq	r0, r0, ip
 22c:	00000218 	andeq	r0, r0, r8, lsl r2
 230:	20000489 	andcs	r0, r0, r9, lsl #9
 234:	0000010a 	andeq	r0, r0, sl, lsl #2
