
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4806      	ldr	r0, [pc, #24]	; (2000001c <_exit+0x14>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f926 	bl	20000254 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
	
	// Setup output pins for display
	*GPIO_MODER = 0x55555555;
2000000a:	4b02      	ldr	r3, [pc, #8]	; (20000014 <_exit+0xc>)
2000000c:	4a02      	ldr	r2, [pc, #8]	; (20000018 <_exit+0x10>)
2000000e:	601a      	str	r2, [r3, #0]
}
20000010:	46c0      	nop			; (mov r8, r8)
20000012:	46c0      	nop			; (mov r8, r8)
20000014:	40021000 	andmi	r1, r2, r0
20000018:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000001c:	2001c000 	andcs	ip, r1, r0

20000020 <delay_250ns>:

void delay_250ns(void) {
20000020:	b580      	push	{r7, lr}
20000022:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000024:	4b0c      	ldr	r3, [pc, #48]	; (20000058 <delay_250ns+0x38>)
20000026:	2200      	movs	r2, #0
20000028:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
2000002a:	4b0c      	ldr	r3, [pc, #48]	; (2000005c <delay_250ns+0x3c>)
2000002c:	2231      	movs	r2, #49	; 0x31
2000002e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000030:	4b0b      	ldr	r3, [pc, #44]	; (20000060 <delay_250ns+0x40>)
20000032:	2200      	movs	r2, #0
20000034:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000036:	4b08      	ldr	r3, [pc, #32]	; (20000058 <delay_250ns+0x38>)
20000038:	2205      	movs	r2, #5
2000003a:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
2000003c:	46c0      	nop			; (mov r8, r8)
2000003e:	4b06      	ldr	r3, [pc, #24]	; (20000058 <delay_250ns+0x38>)
20000040:	681a      	ldr	r2, [r3, #0]
20000042:	2380      	movs	r3, #128	; 0x80
20000044:	025b      	lsls	r3, r3, #9
20000046:	4013      	ands	r3, r2
20000048:	d0f9      	beq.n	2000003e <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
2000004a:	4b03      	ldr	r3, [pc, #12]	; (20000058 <delay_250ns+0x38>)
2000004c:	2200      	movs	r2, #0
2000004e:	601a      	str	r2, [r3, #0]
}
20000050:	46c0      	nop			; (mov r8, r8)
20000052:	46bd      	mov	sp, r7
20000054:	bd80      	pop	{r7, pc}
20000056:	46c0      	nop			; (mov r8, r8)
20000058:	e000e010 	and	lr, r0, r0, lsl r0
2000005c:	e000e014 	and	lr, r0, r4, lsl r0
20000060:	e000e018 	and	lr, r0, r8, lsl r0

20000064 <delay_mikro>:

void delay_mikro(unsigned int us) {
20000064:	b580      	push	{r7, lr}
20000066:	b082      	sub	sp, #8
20000068:	af00      	add	r7, sp, #0
2000006a:	6078      	str	r0, [r7, #4]
	while(us--) {
2000006c:	e007      	b.n	2000007e <delay_mikro+0x1a>
		delay_250ns();
2000006e:	f7ff ffd7 	bl	20000020 <delay_250ns>
		delay_250ns();
20000072:	f7ff ffd5 	bl	20000020 <delay_250ns>
		delay_250ns();
20000076:	f7ff ffd3 	bl	20000020 <delay_250ns>
		delay_250ns();
2000007a:	f7ff ffd1 	bl	20000020 <delay_250ns>
	while(us--) {
2000007e:	687b      	ldr	r3, [r7, #4]
20000080:	1e5a      	subs	r2, r3, #1
20000082:	607a      	str	r2, [r7, #4]
20000084:	2b00      	cmp	r3, #0
20000086:	d1f2      	bne.n	2000006e <delay_mikro+0xa>
	}
}
20000088:	46c0      	nop			; (mov r8, r8)
2000008a:	46bd      	mov	sp, r7
2000008c:	b002      	add	sp, #8
2000008e:	bd80      	pop	{r7, pc}

20000090 <delay_milli>:

void delay_milli(unsigned int ms) {
20000090:	b580      	push	{r7, lr}
20000092:	b082      	sub	sp, #8
20000094:	af00      	add	r7, sp, #0
20000096:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_mikro(ms);
	#else
		delay_mikro(1000 * ms);
20000098:	687b      	ldr	r3, [r7, #4]
2000009a:	22fa      	movs	r2, #250	; 0xfa
2000009c:	0092      	lsls	r2, r2, #2
2000009e:	4353      	muls	r3, r2
200000a0:	0018      	movs	r0, r3
200000a2:	f7ff ffdf 	bl	20000064 <delay_mikro>
	#endif
}
200000a6:	46c0      	nop			; (mov r8, r8)
200000a8:	46bd      	mov	sp, r7
200000aa:	b002      	add	sp, #8
200000ac:	bd80      	pop	{r7, pc}

200000ae <delay_500ns>:

void delay_500ns(void) {
200000ae:	b580      	push	{r7, lr}
200000b0:	af00      	add	r7, sp, #0
	delay_250ns();
200000b2:	f7ff ffb5 	bl	20000020 <delay_250ns>
	delay_250ns();
200000b6:	f7ff ffb3 	bl	20000020 <delay_250ns>
}
200000ba:	46c0      	nop			; (mov r8, r8)
200000bc:	46bd      	mov	sp, r7
200000be:	bd80      	pop	{r7, pc}

200000c0 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x) {
200000c0:	b580      	push	{r7, lr}
200000c2:	b082      	sub	sp, #8
200000c4:	af00      	add	r7, sp, #0
200000c6:	0002      	movs	r2, r0
200000c8:	1dfb      	adds	r3, r7, #7
200000ca:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW |= (x & ~B_SELECT);
200000cc:	4909      	ldr	r1, [pc, #36]	; (200000f4 <graphic_ctrl_bit_set+0x34>)
200000ce:	4b09      	ldr	r3, [pc, #36]	; (200000f4 <graphic_ctrl_bit_set+0x34>)
200000d0:	781b      	ldrb	r3, [r3, #0]
200000d2:	b2db      	uxtb	r3, r3
200000d4:	b25a      	sxtb	r2, r3
200000d6:	1dfb      	adds	r3, r7, #7
200000d8:	781b      	ldrb	r3, [r3, #0]
200000da:	b25b      	sxtb	r3, r3
200000dc:	2004      	movs	r0, #4
200000de:	4383      	bics	r3, r0
200000e0:	b25b      	sxtb	r3, r3
200000e2:	4313      	orrs	r3, r2
200000e4:	b25b      	sxtb	r3, r3
200000e6:	b2db      	uxtb	r3, r3
200000e8:	700b      	strb	r3, [r1, #0]
}
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	46bd      	mov	sp, r7
200000ee:	b002      	add	sp, #8
200000f0:	bd80      	pop	{r7, pc}
200000f2:	46c0      	nop			; (mov r8, r8)
200000f4:	40021014 	andmi	r1, r2, r4, lsl r0

200000f8 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x) {
200000f8:	b580      	push	{r7, lr}
200000fa:	b082      	sub	sp, #8
200000fc:	af00      	add	r7, sp, #0
200000fe:	0002      	movs	r2, r0
20000100:	1dfb      	adds	r3, r7, #7
20000102:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW &= ~x;
20000104:	4908      	ldr	r1, [pc, #32]	; (20000128 <graphic_ctrl_bit_clear+0x30>)
20000106:	4b08      	ldr	r3, [pc, #32]	; (20000128 <graphic_ctrl_bit_clear+0x30>)
20000108:	781b      	ldrb	r3, [r3, #0]
2000010a:	b2db      	uxtb	r3, r3
2000010c:	b25b      	sxtb	r3, r3
2000010e:	1dfa      	adds	r2, r7, #7
20000110:	7812      	ldrb	r2, [r2, #0]
20000112:	b252      	sxtb	r2, r2
20000114:	43d2      	mvns	r2, r2
20000116:	b252      	sxtb	r2, r2
20000118:	4013      	ands	r3, r2
2000011a:	b25b      	sxtb	r3, r3
2000011c:	b2db      	uxtb	r3, r3
2000011e:	700b      	strb	r3, [r1, #0]
}
20000120:	46c0      	nop			; (mov r8, r8)
20000122:	46bd      	mov	sp, r7
20000124:	b002      	add	sp, #8
20000126:	bd80      	pop	{r7, pc}
20000128:	40021014 	andmi	r1, r2, r4, lsl r0

2000012c <select_cotroller>:

void select_cotroller(uint8_t controller) {
2000012c:	b580      	push	{r7, lr}
2000012e:	b082      	sub	sp, #8
20000130:	af00      	add	r7, sp, #0
20000132:	0002      	movs	r2, r0
20000134:	1dfb      	adds	r3, r7, #7
20000136:	701a      	strb	r2, [r3, #0]
	if(controller == 0) {
20000138:	1dfb      	adds	r3, r7, #7
2000013a:	781b      	ldrb	r3, [r3, #0]
2000013c:	2b00      	cmp	r3, #0
2000013e:	d106      	bne.n	2000014e <select_cotroller+0x22>
		graphic_ctrl_bit_clear(B_CS1);
20000140:	2008      	movs	r0, #8
20000142:	f7ff ffd9 	bl	200000f8 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_clear(B_CS2);
20000146:	2010      	movs	r0, #16
20000148:	f7ff ffd6 	bl	200000f8 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_clear(B_CS2);
	} else if(controller == B_CS2) {
		graphic_ctrl_bit_clear(B_CS1);
		graphic_ctrl_bit_set(B_CS2);
	}
}
2000014c:	e005      	b.n	2000015a <select_cotroller+0x2e>
		graphic_ctrl_bit_set(B_CS1);
2000014e:	2008      	movs	r0, #8
20000150:	f7ff ffb6 	bl	200000c0 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_set(B_CS2);
20000154:	2010      	movs	r0, #16
20000156:	f7ff ffb3 	bl	200000c0 <graphic_ctrl_bit_set>
}
2000015a:	46c0      	nop			; (mov r8, r8)
2000015c:	46bd      	mov	sp, r7
2000015e:	b002      	add	sp, #8
20000160:	bd80      	pop	{r7, pc}

20000162 <graphic_wait_ready>:

void graphic_wait_ready() {
20000162:	b580      	push	{r7, lr}
20000164:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
20000166:	2040      	movs	r0, #64	; 0x40
20000168:	f7ff ffc6 	bl	200000f8 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
2000016c:	4b11      	ldr	r3, [pc, #68]	; (200001b4 <graphic_wait_ready+0x52>)
2000016e:	4a12      	ldr	r2, [pc, #72]	; (200001b8 <graphic_wait_ready+0x56>)
20000170:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000172:	2001      	movs	r0, #1
20000174:	f7ff ffc0 	bl	200000f8 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000178:	2002      	movs	r0, #2
2000017a:	f7ff ffa1 	bl	200000c0 <graphic_ctrl_bit_set>
	delay_500ns;
	while(*GPIO_IDR_HIGH & 0x80) { // Wait for display not to be busy
2000017e:	e009      	b.n	20000194 <graphic_wait_ready+0x32>
		graphic_ctrl_bit_set(B_E);
20000180:	2040      	movs	r0, #64	; 0x40
20000182:	f7ff ff9d 	bl	200000c0 <graphic_ctrl_bit_set>
		delay_500ns();
20000186:	f7ff ff92 	bl	200000ae <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
2000018a:	2040      	movs	r0, #64	; 0x40
2000018c:	f7ff ffb4 	bl	200000f8 <graphic_ctrl_bit_clear>
		delay_500ns();		
20000190:	f7ff ff8d 	bl	200000ae <delay_500ns>
	while(*GPIO_IDR_HIGH & 0x80) { // Wait for display not to be busy
20000194:	4b09      	ldr	r3, [pc, #36]	; (200001bc <graphic_wait_ready+0x5a>)
20000196:	781b      	ldrb	r3, [r3, #0]
20000198:	b2db      	uxtb	r3, r3
2000019a:	b25b      	sxtb	r3, r3
2000019c:	2b00      	cmp	r3, #0
2000019e:	dbef      	blt.n	20000180 <graphic_wait_ready+0x1e>
	}
	graphic_ctrl_bit_set(B_E);
200001a0:	2040      	movs	r0, #64	; 0x40
200001a2:	f7ff ff8d 	bl	200000c0 <graphic_ctrl_bit_set>
	*GPIO_MODER = 0x55555555;
200001a6:	4b03      	ldr	r3, [pc, #12]	; (200001b4 <graphic_wait_ready+0x52>)
200001a8:	4a05      	ldr	r2, [pc, #20]	; (200001c0 <graphic_wait_ready+0x5e>)
200001aa:	601a      	str	r2, [r3, #0]
}
200001ac:	46c0      	nop			; (mov r8, r8)
200001ae:	46bd      	mov	sp, r7
200001b0:	bd80      	pop	{r7, pc}
200001b2:	46c0      	nop			; (mov r8, r8)
200001b4:	40021000 	andmi	r1, r2, r0
200001b8:	00005555 	andeq	r5, r0, r5, asr r5
200001bc:	40021011 	andmi	r1, r2, r1, lsl r0
200001c0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001c4 <graphic_read>:

char graphic_read(unsigned int controller) {
200001c4:	b580      	push	{r7, lr}
200001c6:	b084      	sub	sp, #16
200001c8:	af00      	add	r7, sp, #0
200001ca:	6078      	str	r0, [r7, #4]
	graphic_ctrl_bit_clear(B_E);
200001cc:	2040      	movs	r0, #64	; 0x40
200001ce:	f7ff ff93 	bl	200000f8 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
200001d2:	4b1c      	ldr	r3, [pc, #112]	; (20000244 <graphic_read+0x80>)
200001d4:	4a1c      	ldr	r2, [pc, #112]	; (20000248 <graphic_read+0x84>)
200001d6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
200001d8:	2001      	movs	r0, #1
200001da:	f7ff ff71 	bl	200000c0 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
200001de:	2002      	movs	r0, #2
200001e0:	f7ff ff6e 	bl	200000c0 <graphic_ctrl_bit_set>
	select_cotroller(controller);
200001e4:	687b      	ldr	r3, [r7, #4]
200001e6:	b2db      	uxtb	r3, r3
200001e8:	0018      	movs	r0, r3
200001ea:	f7ff ff9f 	bl	2000012c <select_cotroller>
	delay_500ns();
200001ee:	f7ff ff5e 	bl	200000ae <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200001f2:	2040      	movs	r0, #64	; 0x40
200001f4:	f7ff ff64 	bl	200000c0 <graphic_ctrl_bit_set>
	delay_500ns();
200001f8:	f7ff ff59 	bl	200000ae <delay_500ns>
	char RV = *GPIO_IDR_HIGH;
200001fc:	4a13      	ldr	r2, [pc, #76]	; (2000024c <graphic_read+0x88>)
200001fe:	230f      	movs	r3, #15
20000200:	18fb      	adds	r3, r7, r3
20000202:	7812      	ldrb	r2, [r2, #0]
20000204:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000206:	2040      	movs	r0, #64	; 0x40
20000208:	f7ff ff76 	bl	200000f8 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x55555555;
2000020c:	4b0d      	ldr	r3, [pc, #52]	; (20000244 <graphic_read+0x80>)
2000020e:	4a10      	ldr	r2, [pc, #64]	; (20000250 <graphic_read+0x8c>)
20000210:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1) {
20000212:	687b      	ldr	r3, [r7, #4]
20000214:	2b08      	cmp	r3, #8
20000216:	d105      	bne.n	20000224 <graphic_read+0x60>
		select_cotroller(B_CS1);
20000218:	2008      	movs	r0, #8
2000021a:	f7ff ff87 	bl	2000012c <select_cotroller>
		graphic_wait_ready();
2000021e:	f7ff ffa0 	bl	20000162 <graphic_wait_ready>
20000222:	e007      	b.n	20000234 <graphic_read+0x70>
	} else if(controller == B_CS2) {
20000224:	687b      	ldr	r3, [r7, #4]
20000226:	2b10      	cmp	r3, #16
20000228:	d104      	bne.n	20000234 <graphic_read+0x70>
		select_cotroller(B_CS2);
2000022a:	2010      	movs	r0, #16
2000022c:	f7ff ff7e 	bl	2000012c <select_cotroller>
		graphic_wait_ready();
20000230:	f7ff ff97 	bl	20000162 <graphic_wait_ready>
	}
	return RV;
20000234:	230f      	movs	r3, #15
20000236:	18fb      	adds	r3, r7, r3
20000238:	781b      	ldrb	r3, [r3, #0]
	
	
}
2000023a:	0018      	movs	r0, r3
2000023c:	46bd      	mov	sp, r7
2000023e:	b004      	add	sp, #16
20000240:	bd80      	pop	{r7, pc}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	40021000 	andmi	r1, r2, r0
20000248:	00005555 	andeq	r5, r0, r5, asr r5
2000024c:	40021011 	andmi	r1, r2, r1, lsl r0
20000250:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000254 <main>:

void main(void) {
20000254:	b580      	push	{r7, lr}
20000256:	af00      	add	r7, sp, #0
}
20000258:	46c0      	nop			; (mov r8, r8)
2000025a:	46bd      	mov	sp, r7
2000025c:	bd80      	pop	{r7, pc}
2000025e:	46c0      	nop			; (mov r8, r8)

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000176 	andeq	r0, r0, r6, ror r1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000000d9 	ldrdeq	r0, [r0], -r9
  10:	0000610c 	andeq	r6, r0, ip, lsl #2
	...
  20:	000d0200 	andeq	r0, sp, r0, lsl #4
  24:	1b010000 	blne	4002c <startup-0x1ffbffd4>
  28:	0000002c 	andeq	r0, r0, ip, lsr #32
  2c:	71080103 	tstvc	r8, r3, lsl #2
  30:	04000001 	streq	r0, [r0], #-1
  34:	0000017f 	andeq	r0, r0, pc, ror r1
  38:	02548d01 	subseq	r8, r4, #1, 26	; 0x40
  3c:	000a2000 	andeq	r2, sl, r0
  40:	9c010000 	stcls	0, cr0, [r1], {-0}
  44:	0000ad05 	andeq	sl, r0, r5, lsl #26
  48:	79750100 	ldmdbvc	r5!, {r8}^
  4c:	c4000000 	strgt	r0, [r0], #-0
  50:	90200001 	eorls	r0, r0, r1
  54:	01000000 	mrseq	r0, (UNDEF: 0)
  58:	0000799c 	muleq	r0, ip, r9
  5c:	00a20600 	adceq	r0, r2, r0, lsl #12
  60:	75010000 	strvc	r0, [r1, #-0]
  64:	00000080 	andeq	r0, r0, r0, lsl #1
  68:	076c9102 	strbeq	r9, [ip, -r2, lsl #2]!
  6c:	01005652 	tsteq	r0, r2, asr r6
  70:	0000797e 	andeq	r7, r0, lr, ror r9
  74:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  78:	08010300 	stmdaeq	r1, {r8, r9}
  7c:	0000017a 	andeq	r0, r0, sl, ror r1
  80:	00070403 	andeq	r0, r7, r3, lsl #8
  84:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  88:	000000ba 	strheq	r0, [r0], -sl
  8c:	01626501 	cmneq	r2, r1, lsl #10
  90:	00622000 	rsbeq	r2, r2, r0
  94:	9c010000 	stcls	0, cr0, [r1], {-0}
  98:	00002d09 	andeq	r2, r0, r9, lsl #26
  9c:	2c550100 	ldfcse	f0, [r5], {-0}
  a0:	36200001 	strtcc	r0, [r0], -r1
  a4:	01000000 	mrseq	r0, (UNDEF: 0)
  a8:	0000bc9c 	muleq	r0, ip, ip
  ac:	00a20600 	adceq	r0, r2, r0, lsl #12
  b0:	55010000 	strpl	r0, [r1, #-0]
  b4:	00000021 	andeq	r0, r0, r1, lsr #32
  b8:	00779102 	rsbseq	r9, r7, r2, lsl #2
  bc:	00004a0a 	andeq	r4, r0, sl, lsl #20
  c0:	f8510100 			; <UNDEFINED> instruction: 0xf8510100
  c4:	34200000 	strtcc	r0, [r0], #-0
  c8:	01000000 	mrseq	r0, (UNDEF: 0)
  cc:	0000de9c 	muleq	r0, ip, lr
  d0:	00780b00 	rsbseq	r0, r8, r0, lsl #22
  d4:	00215101 	eoreq	r5, r1, r1, lsl #2
  d8:	91020000 	mrsls	r0, (UNDEF: 2)
  dc:	840a0077 	strhi	r0, [sl], #-119	; 0xffffff89
  e0:	01000001 	tsteq	r0, r1
  e4:	0000c04d 	andeq	ip, r0, sp, asr #32
  e8:	00003820 	andeq	r3, r0, r0, lsr #16
  ec:	009c0100 	addseq	r0, ip, r0, lsl #2
  f0:	0b000001 	bleq	fc <startup-0x1fffff04>
  f4:	4d010078 	stcmi	0, cr0, [r1, #-480]	; 0xfffffe20
  f8:	00000021 	andeq	r0, r0, r1, lsr #32
  fc:	00779102 	rsbseq	r9, r7, r2, lsl #2
 100:	0000210c 	andeq	r2, r0, ip, lsl #2
 104:	ae480100 	dvfgee	f0, f0, f0
 108:	12200000 	eorne	r0, r0, #0
 10c:	01000000 	mrseq	r0, (UNDEF: 0)
 110:	003e099c 	mlaseq	lr, ip, r9, r0
 114:	40010000 	andmi	r0, r1, r0
 118:	20000090 	mulcs	r0, r0, r0
 11c:	0000001e 	andeq	r0, r0, lr, lsl r0
 120:	01349c01 	teqeq	r4, r1, lsl #24
 124:	6d0b0000 	stcvs	0, cr0, [fp, #-0]
 128:	40010073 	andmi	r0, r1, r3, ror r0
 12c:	00000080 	andeq	r0, r0, r0, lsl #1
 130:	00749102 	rsbseq	r9, r4, r2, lsl #2
 134:	00001509 	andeq	r1, r0, r9, lsl #10
 138:	64370100 	ldrtvs	r0, [r7], #-256	; 0xffffff00
 13c:	2c200000 	stccs	0, cr0, [r0], #-0
 140:	01000000 	mrseq	r0, (UNDEF: 0)
 144:	0001579c 	muleq	r1, ip, r7
 148:	73750b00 	cmnvc	r5, #0, 22
 14c:	80370100 	eorshi	r0, r7, r0, lsl #2
 150:	02000000 	andeq	r0, r0, #0
 154:	04007491 	streq	r7, [r0], #-1169	; 0xfffffb6f
 158:	000000cd 	andeq	r0, r0, sp, asr #1
 15c:	00202c01 	eoreq	r2, r0, r1, lsl #24
 160:	00442000 	subeq	r2, r4, r0
 164:	9c010000 	stcls	0, cr0, [r1], {-0}
 168:	00019904 	andeq	r9, r1, r4, lsl #18
 16c:	001f0100 	andseq	r0, pc, r0, lsl #2
 170:	1c200000 	stcne	0, cr0, [r0], #-0
 174:	01000000 	mrseq	r0, (UNDEF: 0)
 178:	Address 0x00000178 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00160200 	andseq	r0, r6, r0, lsl #4
  14:	0b3a0e03 	bleq	e83828 <startup-0x1f17c7d8>
  18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	002e0400 	eoreq	r0, lr, r0, lsl #8
  2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	01111927 	tsteq	r1, r7, lsr #18
  38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  3c:	00194297 	mulseq	r9, r7, r2
  40:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
  44:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  48:	0b3b0b3a 	bleq	ec2d38 <startup-0x1f13d2c8>
  4c:	13491927 	movtne	r1, #39207	; 0x9927
  50:	06120111 			; <UNDEFINED> instruction: 0x06120111
  54:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  58:	00130119 	andseq	r0, r3, r9, lsl r1
  5c:	00050600 	andeq	r0, r5, r0, lsl #12
  60:	0b3a0e03 	bleq	e83874 <startup-0x1f17c78c>
  64:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  68:	00001802 	andeq	r1, r0, r2, lsl #16
  6c:	03003407 	movweq	r3, #1031	; 0x407
  70:	3b0b3a08 	blcc	2ce898 <startup-0x1fd31768>
  74:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  78:	08000018 	stmdaeq	r0, {r3, r4}
  7c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  80:	0b3a0e03 	bleq	e83894 <startup-0x1f17c76c>
  84:	01110b3b 	tsteq	r1, fp, lsr fp
  88:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  8c:	00194296 	mulseq	r9, r6, r2
  90:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
  94:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  98:	0b3b0b3a 	bleq	ec2d88 <startup-0x1f13d278>
  9c:	01111927 	tsteq	r1, r7, lsr #18
  a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  a4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  a8:	0a000013 	beq	fc <startup-0x1fffff04>
  ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  b0:	0b3a0e03 	bleq	e838c4 <startup-0x1f17c73c>
  b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  bc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  c0:	00130119 	andseq	r0, r3, r9, lsl r1
  c4:	00050b00 	andeq	r0, r5, r0, lsl #22
  c8:	0b3a0803 	bleq	e820dc <startup-0x1f17df24>
  cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
  d4:	3f002e0c 	svccc	0x00002e0c
  d8:	3a0e0319 	bcc	380d44 <startup-0x1fc7f2bc>
  dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  e4:	96184006 	ldrls	r4, [r8], -r6
  e8:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000020 	andcs	r0, r0, r0, lsr #32
  14:	0000023e 	andeq	r0, r0, lr, lsr r2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000020 	andcs	r0, r0, r0, lsr #32
   4:	2000025e 	andcs	r0, r0, lr, asr r2
   8:	20000000 	andcs	r0, r0, r0
   c:	2000001c 	andcs	r0, r0, ip, lsl r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000d1 	ldrdeq	r0, [r0], -r1
   4:	00570002 	subseq	r0, r7, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	672f6574 			; <UNDEFINED> instruction: 0x672f6574
  44:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  48:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  4c:	616c7073 	smcvs	50947	; 0xc703
  50:	73000079 	movwvc	r0, #121	; 0x79
  54:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  58:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  5c:	00000100 	andeq	r0, r0, r0, lsl #2
  60:	02050000 	andeq	r0, r5, #0
  64:	20000000 	andcs	r0, r0, r0
  68:	13011f03 	movwne	r1, #7939	; 0x1f03
  6c:	08023d60 	stmdaeq	r2, {r5, r6, r8, sl, fp, ip, sp}
  70:	00010100 	andeq	r0, r1, r0, lsl #2
  74:	00200205 	eoreq	r0, r0, r5, lsl #4
  78:	2b032000 	blcs	c8080 <startup-0x1ff37f80>
  7c:	3d3d2f01 	ldccc	15, cr2, [sp, #-4]!
  80:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
  84:	20060104 	andcs	r0, r6, r4, lsl #2
  88:	a03d6906 	eorsge	r6, sp, r6, lsl #18
  8c:	2f2f214b 	svccs	0x002f214b
  90:	4c5e2a2f 	mrrcmi	10, 2, r2, lr, cr15
  94:	2f4c764e 	svccs	0x004c764e
  98:	673e2f2f 	ldrvs	r2, [lr, -pc, lsr #30]!
  9c:	d76776e5 	strble	r7, [r7, -r5, ror #13]!
  a0:	3d4b6768 	stclcc	7, cr6, [fp, #-416]	; 0xfffffe60
  a4:	033c0b03 	teqeq	ip, #3072	; 0xc00
  a8:	443d2077 	ldrtmi	r2, [sp], #-119	; 0xffffff89
  ac:	3d3d2f4c 	ldccc	15, cr2, [sp, #-304]!	; 0xfffffed0
  b0:	3d213e3d 	stccc	14, cr3, [r1, #-244]!	; 0xffffff0c
  b4:	6c2a3d2f 	stcvs	13, cr3, [sl], #-188	; 0xffffff44
  b8:	4bbc3d3d 	blmi	fef0f5b4 <main+0xdef0f360>
  bc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  c0:	2f3d2f59 	svccs	0x003d2f59
  c4:	3d3d3d59 	ldccc	13, cr3, [sp, #-356]!	; 0xfffffe9c
  c8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  cc:	2fca3f30 	svccs	0x00ca3f30
  d0:	01000302 	tsteq	r0, r2, lsl #6
  d4:	Address 0x000000d4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
   4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
   8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
   c:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
  10:	745f3874 	ldrbvc	r3, [pc], #-2164	; 18 <startup-0x1fffffe8>
  14:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  18:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; ffffff5e <main+0xdffffd0a>	; <UNPREDICTABLE>
  1c:	6f726b69 	svcvs	0x00726b69
  20:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  24:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff6cb <main+0xdffff477>
  28:	736e3030 	cmnvc	lr, #48	; 0x30
  2c:	6c657300 	stclvs	3, cr7, [r5], #-0
  30:	5f746365 	svcpl	0x00746365
  34:	72746f63 	rsbsvc	r6, r4, #396	; 0x18c
  38:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  3c:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
  40:	5f79616c 	svcpl	0x0079616c
  44:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
  48:	72670069 	rsbvc	r0, r7, #105	; 0x69
  4c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  50:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
  54:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
  58:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
  5c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
  60:	2f3a4300 	svccs	0x003a4300
  64:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  68:	61482f73 	hvcvs	33523	; 0x82f3
  6c:	7375706d 	cmnvc	r5, #109	; 0x6d
  70:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  74:	706f746b 	rsbvc	r7, pc, fp, ror #8
  78:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  7c:	2f373130 	svccs	0x00373130
  80:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  84:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  88:	6172672f 	cmnvs	r2, pc, lsr #14
  8c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  90:	70736964 	rsbsvc	r6, r3, r4, ror #18
  94:	2f79616c 	svccs	0x0079616c
  98:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  9c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  a0:	6f630063 	svcvs	0x00630063
  a4:	6f72746e 	svcvs	0x0072746e
  a8:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  ac:	61726700 	cmnvs	r2, r0, lsl #14
  b0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  b4:	6165725f 	cmnvs	r5, pc, asr r2
  b8:	72670064 	rsbvc	r0, r7, #100	; 0x64
  bc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  c0:	61775f63 	cmnvs	r7, r3, ror #30
  c4:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
  c8:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
  cc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  d0:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
  d4:	736e3035 	cmnvc	lr, #53	; 0x35
  d8:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  dc:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  e0:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
  e4:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  e8:	30373130 	eorscc	r3, r7, r0, lsr r1
  ec:	20353132 	eorscs	r3, r5, r2, lsr r1
  f0:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  f4:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  f8:	415b2029 	cmpmi	fp, r9, lsr #32
  fc:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff3b2 <main+0xdffff15e>
 100:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 104:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
 108:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
 10c:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 110:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 114:	6f697369 	svcvs	0x00697369
 118:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
 11c:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
 120:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 124:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 128:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 12c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 130:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 134:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 138:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 13c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 140:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 144:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 148:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 14c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 150:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 154:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 158:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 15c:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 160:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 164:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 168:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 16c:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 170:	736e7500 	cmnvc	lr, #0, 10
 174:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 178:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 17c:	6d007261 	sfmvs	f7, 4, [r0, #-388]	; 0xfffffe7c
 180:	006e6961 	rsbeq	r6, lr, r1, ror #18
 184:	70617267 	rsbvc	r7, r1, r7, ror #4
 188:	5f636968 	svcpl	0x00636968
 18c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 190:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 194:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 198:	61747300 	cmnvs	r4, r0, lsl #6
 19c:	70757472 	rsbsvc	r7, r5, r2, ror r4
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000001c 	andeq	r0, r0, ip, lsl r0
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000020 	andcs	r0, r0, r0, lsr #32
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000064 	andcs	r0, r0, r4, rrx
  48:	0000002c 	andeq	r0, r0, ip, lsr #32
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	100e4101 	andne	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	20000090 	mulcs	r0, r0, r0
  68:	0000001e 	andeq	r0, r0, lr, lsl r0
  6c:	40080e41 	andmi	r0, r8, r1, asr #28
  70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  74:	100e4101 	andne	r4, lr, r1, lsl #2
  78:	00070d41 	andeq	r0, r7, r1, asr #26
  7c:	00000018 	andeq	r0, r0, r8, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000ae 	andcs	r0, r0, lr, lsr #1
  88:	00000012 	andeq	r0, r0, r2, lsl r0
  8c:	40080e41 	andmi	r0, r8, r1, asr #28
  90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  94:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000c0 	andcs	r0, r0, r0, asr #1
  a4:	00000038 	andeq	r0, r0, r8, lsr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200000f8 	strdcs	r0, [r0], -r8
  c4:	00000034 	andeq	r0, r0, r4, lsr r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	2000012c 	andcs	r0, r0, ip, lsr #2
  e4:	00000036 	andeq	r0, r0, r6, lsr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	00000018 	andeq	r0, r0, r8, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000162 	andcs	r0, r0, r2, ror #2
 104:	00000062 	andeq	r0, r0, r2, rrx
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	200001c4 	andcs	r0, r0, r4, asr #3
 120:	00000090 	muleq	r0, r0, r0
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	180e4101 	stmdane	lr, {r0, r8, lr}
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	00000018 	andeq	r0, r0, r8, lsl r0
 138:	00000000 	andeq	r0, r0, r0
 13c:	20000254 	andcs	r0, r0, r4, asr r2
 140:	0000000a 	andeq	r0, r0, sl
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
