
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fa4c 	bl	200004a0 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	// Setup output pins for display
	*GPIO_MODER = 0x55555555;
20000014:	4b07      	ldr	r3, [pc, #28]	; (20000034 <init_app+0x24>)
20000016:	4a08      	ldr	r2, [pc, #32]	; (20000038 <init_app+0x28>)
20000018:	601a      	str	r2, [r3, #0]
//	*GPIO_OTYPER = 0x7777;
//	*GPIO_PUPDR = 0xAAAAAAAA;
	*GPIO_ODR_HIGH = 0;
2000001a:	4b08      	ldr	r3, [pc, #32]	; (2000003c <init_app+0x2c>)
2000001c:	2200      	movs	r2, #0
2000001e:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = 0;
20000020:	4b07      	ldr	r3, [pc, #28]	; (20000040 <init_app+0x30>)
20000022:	2200      	movs	r2, #0
20000024:	701a      	strb	r2, [r3, #0]
	*GPIO_IDR_HIGH = 0;
20000026:	4b07      	ldr	r3, [pc, #28]	; (20000044 <init_app+0x34>)
20000028:	2200      	movs	r2, #0
2000002a:	701a      	strb	r2, [r3, #0]
}
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	46bd      	mov	sp, r7
20000030:	bd80      	pop	{r7, pc}
20000032:	46c0      	nop			; (mov r8, r8)
20000034:	40021000 	andmi	r1, r2, r0
20000038:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000003c:	40021015 	andmi	r1, r2, r5, lsl r0
20000040:	40021014 	andmi	r1, r2, r4, lsl r0
20000044:	40021011 	andmi	r1, r2, r1, lsl r0

20000048 <delay_250ns>:

void delay_250ns(void) {
20000048:	b580      	push	{r7, lr}
2000004a:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000004c:	4b0c      	ldr	r3, [pc, #48]	; (20000080 <delay_250ns+0x38>)
2000004e:	2200      	movs	r2, #0
20000050:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
20000052:	4b0c      	ldr	r3, [pc, #48]	; (20000084 <delay_250ns+0x3c>)
20000054:	2231      	movs	r2, #49	; 0x31
20000056:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000058:	4b0b      	ldr	r3, [pc, #44]	; (20000088 <delay_250ns+0x40>)
2000005a:	2200      	movs	r2, #0
2000005c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000005e:	4b08      	ldr	r3, [pc, #32]	; (20000080 <delay_250ns+0x38>)
20000060:	2205      	movs	r2, #5
20000062:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
20000064:	46c0      	nop			; (mov r8, r8)
20000066:	4b06      	ldr	r3, [pc, #24]	; (20000080 <delay_250ns+0x38>)
20000068:	681a      	ldr	r2, [r3, #0]
2000006a:	2380      	movs	r3, #128	; 0x80
2000006c:	025b      	lsls	r3, r3, #9
2000006e:	4013      	ands	r3, r2
20000070:	d0f9      	beq.n	20000066 <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
20000072:	4b03      	ldr	r3, [pc, #12]	; (20000080 <delay_250ns+0x38>)
20000074:	2200      	movs	r2, #0
20000076:	601a      	str	r2, [r3, #0]
}
20000078:	46c0      	nop			; (mov r8, r8)
2000007a:	46bd      	mov	sp, r7
2000007c:	bd80      	pop	{r7, pc}
2000007e:	46c0      	nop			; (mov r8, r8)
20000080:	e000e010 	and	lr, r0, r0, lsl r0
20000084:	e000e014 	and	lr, r0, r4, lsl r0
20000088:	e000e018 	and	lr, r0, r8, lsl r0

2000008c <delay_mikro>:

void delay_mikro(unsigned int us) {
2000008c:	b580      	push	{r7, lr}
2000008e:	b082      	sub	sp, #8
20000090:	af00      	add	r7, sp, #0
20000092:	6078      	str	r0, [r7, #4]
	while(us--) {
20000094:	e007      	b.n	200000a6 <delay_mikro+0x1a>
		delay_250ns();
20000096:	f7ff ffd7 	bl	20000048 <delay_250ns>
		delay_250ns();
2000009a:	f7ff ffd5 	bl	20000048 <delay_250ns>
		delay_250ns();
2000009e:	f7ff ffd3 	bl	20000048 <delay_250ns>
		delay_250ns();
200000a2:	f7ff ffd1 	bl	20000048 <delay_250ns>
	while(us--) {
200000a6:	687b      	ldr	r3, [r7, #4]
200000a8:	1e5a      	subs	r2, r3, #1
200000aa:	607a      	str	r2, [r7, #4]
200000ac:	2b00      	cmp	r3, #0
200000ae:	d1f2      	bne.n	20000096 <delay_mikro+0xa>
	}
}
200000b0:	46c0      	nop			; (mov r8, r8)
200000b2:	46bd      	mov	sp, r7
200000b4:	b002      	add	sp, #8
200000b6:	bd80      	pop	{r7, pc}

200000b8 <delay_milli>:

void delay_milli(unsigned int ms) {
200000b8:	b580      	push	{r7, lr}
200000ba:	b082      	sub	sp, #8
200000bc:	af00      	add	r7, sp, #0
200000be:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_mikro(ms);
200000c0:	687b      	ldr	r3, [r7, #4]
200000c2:	0018      	movs	r0, r3
200000c4:	f7ff ffe2 	bl	2000008c <delay_mikro>
	#else
		delay_mikro(1000 * ms);
	#endif
}
200000c8:	46c0      	nop			; (mov r8, r8)
200000ca:	46bd      	mov	sp, r7
200000cc:	b002      	add	sp, #8
200000ce:	bd80      	pop	{r7, pc}

200000d0 <delay_500ns>:

void delay_500ns(void) {
200000d0:	b580      	push	{r7, lr}
200000d2:	af00      	add	r7, sp, #0
	delay_250ns();
200000d4:	f7ff ffb8 	bl	20000048 <delay_250ns>
	delay_250ns();
200000d8:	f7ff ffb6 	bl	20000048 <delay_250ns>
}
200000dc:	46c0      	nop			; (mov r8, r8)
200000de:	46bd      	mov	sp, r7
200000e0:	bd80      	pop	{r7, pc}

200000e2 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x) {
200000e2:	b580      	push	{r7, lr}
200000e4:	b082      	sub	sp, #8
200000e6:	af00      	add	r7, sp, #0
200000e8:	0002      	movs	r2, r0
200000ea:	1dfb      	adds	r3, r7, #7
200000ec:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW |= (x & ~B_SELECT);
200000ee:	4909      	ldr	r1, [pc, #36]	; (20000114 <graphic_ctrl_bit_set+0x32>)
200000f0:	4b08      	ldr	r3, [pc, #32]	; (20000114 <graphic_ctrl_bit_set+0x32>)
200000f2:	781b      	ldrb	r3, [r3, #0]
200000f4:	b2db      	uxtb	r3, r3
200000f6:	b25a      	sxtb	r2, r3
200000f8:	1dfb      	adds	r3, r7, #7
200000fa:	781b      	ldrb	r3, [r3, #0]
200000fc:	b25b      	sxtb	r3, r3
200000fe:	2004      	movs	r0, #4
20000100:	4383      	bics	r3, r0
20000102:	b25b      	sxtb	r3, r3
20000104:	4313      	orrs	r3, r2
20000106:	b25b      	sxtb	r3, r3
20000108:	b2db      	uxtb	r3, r3
2000010a:	700b      	strb	r3, [r1, #0]
}
2000010c:	46c0      	nop			; (mov r8, r8)
2000010e:	46bd      	mov	sp, r7
20000110:	b002      	add	sp, #8
20000112:	bd80      	pop	{r7, pc}
20000114:	40021014 	andmi	r1, r2, r4, lsl r0

20000118 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x) {
20000118:	b580      	push	{r7, lr}
2000011a:	b082      	sub	sp, #8
2000011c:	af00      	add	r7, sp, #0
2000011e:	0002      	movs	r2, r0
20000120:	1dfb      	adds	r3, r7, #7
20000122:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW &= ~x;
20000124:	4908      	ldr	r1, [pc, #32]	; (20000148 <graphic_ctrl_bit_clear+0x30>)
20000126:	4b08      	ldr	r3, [pc, #32]	; (20000148 <graphic_ctrl_bit_clear+0x30>)
20000128:	781b      	ldrb	r3, [r3, #0]
2000012a:	b2db      	uxtb	r3, r3
2000012c:	b25b      	sxtb	r3, r3
2000012e:	1dfa      	adds	r2, r7, #7
20000130:	7812      	ldrb	r2, [r2, #0]
20000132:	b252      	sxtb	r2, r2
20000134:	43d2      	mvns	r2, r2
20000136:	b252      	sxtb	r2, r2
20000138:	4013      	ands	r3, r2
2000013a:	b25b      	sxtb	r3, r3
2000013c:	b2db      	uxtb	r3, r3
2000013e:	700b      	strb	r3, [r1, #0]
}
20000140:	46c0      	nop			; (mov r8, r8)
20000142:	46bd      	mov	sp, r7
20000144:	b002      	add	sp, #8
20000146:	bd80      	pop	{r7, pc}
20000148:	40021014 	andmi	r1, r2, r4, lsl r0

2000014c <select_cotroller>:

void select_cotroller(uint8_t controller) {
2000014c:	b580      	push	{r7, lr}
2000014e:	b082      	sub	sp, #8
20000150:	af00      	add	r7, sp, #0
20000152:	0002      	movs	r2, r0
20000154:	1dfb      	adds	r3, r7, #7
20000156:	701a      	strb	r2, [r3, #0]
	if(controller == 0) {
20000158:	1dfb      	adds	r3, r7, #7
2000015a:	781b      	ldrb	r3, [r3, #0]
2000015c:	2b00      	cmp	r3, #0
2000015e:	d106      	bne.n	2000016e <select_cotroller+0x22>
		graphic_ctrl_bit_clear(B_CS1);
20000160:	2008      	movs	r0, #8
20000162:	f7ff ffd9 	bl	20000118 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_clear(B_CS2);
20000166:	2010      	movs	r0, #16
20000168:	f7ff ffd6 	bl	20000118 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_clear(B_CS2);
	} else if(controller == B_CS2) {
		graphic_ctrl_bit_clear(B_CS1);
		graphic_ctrl_bit_set(B_CS2);
	}
}
2000016c:	e01f      	b.n	200001ae <select_cotroller+0x62>
	} else if(controller == (B_CS1 | B_CS2)) {
2000016e:	1dfb      	adds	r3, r7, #7
20000170:	781b      	ldrb	r3, [r3, #0]
20000172:	2b18      	cmp	r3, #24
20000174:	d106      	bne.n	20000184 <select_cotroller+0x38>
		graphic_ctrl_bit_set(B_CS1);
20000176:	2008      	movs	r0, #8
20000178:	f7ff ffb3 	bl	200000e2 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_set(B_CS2);
2000017c:	2010      	movs	r0, #16
2000017e:	f7ff ffb0 	bl	200000e2 <graphic_ctrl_bit_set>
}
20000182:	e014      	b.n	200001ae <select_cotroller+0x62>
	} else if(controller == B_CS1) {
20000184:	1dfb      	adds	r3, r7, #7
20000186:	781b      	ldrb	r3, [r3, #0]
20000188:	2b08      	cmp	r3, #8
2000018a:	d106      	bne.n	2000019a <select_cotroller+0x4e>
		graphic_ctrl_bit_set(B_CS1);
2000018c:	2008      	movs	r0, #8
2000018e:	f7ff ffa8 	bl	200000e2 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_clear(B_CS2);
20000192:	2010      	movs	r0, #16
20000194:	f7ff ffc0 	bl	20000118 <graphic_ctrl_bit_clear>
}
20000198:	e009      	b.n	200001ae <select_cotroller+0x62>
	} else if(controller == B_CS2) {
2000019a:	1dfb      	adds	r3, r7, #7
2000019c:	781b      	ldrb	r3, [r3, #0]
2000019e:	2b10      	cmp	r3, #16
200001a0:	d105      	bne.n	200001ae <select_cotroller+0x62>
		graphic_ctrl_bit_clear(B_CS1);
200001a2:	2008      	movs	r0, #8
200001a4:	f7ff ffb8 	bl	20000118 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_set(B_CS2);
200001a8:	2010      	movs	r0, #16
200001aa:	f7ff ff9a 	bl	200000e2 <graphic_ctrl_bit_set>
}
200001ae:	46c0      	nop			; (mov r8, r8)
200001b0:	46bd      	mov	sp, r7
200001b2:	b002      	add	sp, #8
200001b4:	bd80      	pop	{r7, pc}

200001b6 <graphic_wait_ready>:

void graphic_wait_ready() {
200001b6:	b580      	push	{r7, lr}
200001b8:	b082      	sub	sp, #8
200001ba:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001bc:	2040      	movs	r0, #64	; 0x40
200001be:	f7ff ffab 	bl	20000118 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
200001c2:	4b15      	ldr	r3, [pc, #84]	; (20000218 <graphic_wait_ready+0x62>)
200001c4:	4a15      	ldr	r2, [pc, #84]	; (2000021c <graphic_wait_ready+0x66>)
200001c6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200001c8:	2001      	movs	r0, #1
200001ca:	f7ff ffa5 	bl	20000118 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200001ce:	2002      	movs	r0, #2
200001d0:	f7ff ff87 	bl	200000e2 <graphic_ctrl_bit_set>
	delay_500ns();
200001d4:	f7ff ff7c 	bl	200000d0 <delay_500ns>
	while(1) { // Wait for display not to be busy
		graphic_ctrl_bit_set(B_E);
200001d8:	2040      	movs	r0, #64	; 0x40
200001da:	f7ff ff82 	bl	200000e2 <graphic_ctrl_bit_set>
		delay_500ns();
200001de:	f7ff ff77 	bl	200000d0 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
200001e2:	2040      	movs	r0, #64	; 0x40
200001e4:	f7ff ff98 	bl	20000118 <graphic_ctrl_bit_clear>
		delay_500ns();		
200001e8:	f7ff ff72 	bl	200000d0 <delay_500ns>
		unsigned char i = *GPIO_IDR_HIGH;
200001ec:	4a0c      	ldr	r2, [pc, #48]	; (20000220 <graphic_wait_ready+0x6a>)
200001ee:	1dfb      	adds	r3, r7, #7
200001f0:	7812      	ldrb	r2, [r2, #0]
200001f2:	701a      	strb	r2, [r3, #0]
		if((*GPIO_IDR_HIGH & LCD_BUSY) == 0) {
200001f4:	4b0a      	ldr	r3, [pc, #40]	; (20000220 <graphic_wait_ready+0x6a>)
200001f6:	781b      	ldrb	r3, [r3, #0]
200001f8:	b2db      	uxtb	r3, r3
200001fa:	b25b      	sxtb	r3, r3
200001fc:	2b00      	cmp	r3, #0
200001fe:	da00      	bge.n	20000202 <graphic_wait_ready+0x4c>
	while(1) { // Wait for display not to be busy
20000200:	e7ea      	b.n	200001d8 <graphic_wait_ready+0x22>
			break;
20000202:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
20000204:	2040      	movs	r0, #64	; 0x40
20000206:	f7ff ff6c 	bl	200000e2 <graphic_ctrl_bit_set>
	*GPIO_MODER = 0x55555555;
2000020a:	4b03      	ldr	r3, [pc, #12]	; (20000218 <graphic_wait_ready+0x62>)
2000020c:	4a05      	ldr	r2, [pc, #20]	; (20000224 <graphic_wait_ready+0x6e>)
2000020e:	601a      	str	r2, [r3, #0]
}
20000210:	46c0      	nop			; (mov r8, r8)
20000212:	46bd      	mov	sp, r7
20000214:	b002      	add	sp, #8
20000216:	bd80      	pop	{r7, pc}
20000218:	40021000 	andmi	r1, r2, r0
2000021c:	00005555 	andeq	r5, r0, r5, asr r5
20000220:	40021011 	andmi	r1, r2, r1, lsl r0
20000224:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000228 <graphic_read>:

unsigned char graphic_read(unsigned char controller) {
20000228:	b580      	push	{r7, lr}
2000022a:	b084      	sub	sp, #16
2000022c:	af00      	add	r7, sp, #0
2000022e:	0002      	movs	r2, r0
20000230:	1dfb      	adds	r3, r7, #7
20000232:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000234:	2040      	movs	r0, #64	; 0x40
20000236:	f7ff ff6f 	bl	20000118 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
2000023a:	4b1c      	ldr	r3, [pc, #112]	; (200002ac <graphic_read+0x84>)
2000023c:	4a1c      	ldr	r2, [pc, #112]	; (200002b0 <graphic_read+0x88>)
2000023e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
20000240:	2001      	movs	r0, #1
20000242:	f7ff ff4e 	bl	200000e2 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
20000246:	2002      	movs	r0, #2
20000248:	f7ff ff4b 	bl	200000e2 <graphic_ctrl_bit_set>
	select_cotroller(controller);
2000024c:	1dfb      	adds	r3, r7, #7
2000024e:	781b      	ldrb	r3, [r3, #0]
20000250:	0018      	movs	r0, r3
20000252:	f7ff ff7b 	bl	2000014c <select_cotroller>
	delay_500ns();
20000256:	f7ff ff3b 	bl	200000d0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000025a:	2040      	movs	r0, #64	; 0x40
2000025c:	f7ff ff41 	bl	200000e2 <graphic_ctrl_bit_set>
	delay_500ns();
20000260:	f7ff ff36 	bl	200000d0 <delay_500ns>
	unsigned char RV = *GPIO_IDR_HIGH;
20000264:	4a13      	ldr	r2, [pc, #76]	; (200002b4 <graphic_read+0x8c>)
20000266:	230f      	movs	r3, #15
20000268:	18fb      	adds	r3, r7, r3
2000026a:	7812      	ldrb	r2, [r2, #0]
2000026c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000026e:	2040      	movs	r0, #64	; 0x40
20000270:	f7ff ff52 	bl	20000118 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x55555555;
20000274:	4b0d      	ldr	r3, [pc, #52]	; (200002ac <graphic_read+0x84>)
20000276:	4a10      	ldr	r2, [pc, #64]	; (200002b8 <graphic_read+0x90>)
20000278:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1) {
2000027a:	1dfb      	adds	r3, r7, #7
2000027c:	781b      	ldrb	r3, [r3, #0]
2000027e:	2b08      	cmp	r3, #8
20000280:	d104      	bne.n	2000028c <graphic_read+0x64>
		select_cotroller(B_CS1);
20000282:	2008      	movs	r0, #8
20000284:	f7ff ff62 	bl	2000014c <select_cotroller>
		graphic_wait_ready();
20000288:	f7ff ff95 	bl	200001b6 <graphic_wait_ready>
	}
	if(controller == B_CS2) {
2000028c:	1dfb      	adds	r3, r7, #7
2000028e:	781b      	ldrb	r3, [r3, #0]
20000290:	2b10      	cmp	r3, #16
20000292:	d104      	bne.n	2000029e <graphic_read+0x76>
		select_cotroller(B_CS2);
20000294:	2010      	movs	r0, #16
20000296:	f7ff ff59 	bl	2000014c <select_cotroller>
		graphic_wait_ready();
2000029a:	f7ff ff8c 	bl	200001b6 <graphic_wait_ready>
	}
	return RV;
2000029e:	230f      	movs	r3, #15
200002a0:	18fb      	adds	r3, r7, r3
200002a2:	781b      	ldrb	r3, [r3, #0]
}
200002a4:	0018      	movs	r0, r3
200002a6:	46bd      	mov	sp, r7
200002a8:	b004      	add	sp, #16
200002aa:	bd80      	pop	{r7, pc}
200002ac:	40021000 	andmi	r1, r2, r0
200002b0:	00005555 	andeq	r5, r0, r5, asr r5
200002b4:	40021011 	andmi	r1, r2, r1, lsl r0
200002b8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002bc <graphic_write>:

void graphic_write(unsigned char value, unsigned char controller) {
200002bc:	b580      	push	{r7, lr}
200002be:	b082      	sub	sp, #8
200002c0:	af00      	add	r7, sp, #0
200002c2:	0002      	movs	r2, r0
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	701a      	strb	r2, [r3, #0]
200002c8:	1dbb      	adds	r3, r7, #6
200002ca:	1c0a      	adds	r2, r1, #0
200002cc:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_HIGH = value;
200002ce:	4a1a      	ldr	r2, [pc, #104]	; (20000338 <graphic_write+0x7c>)
200002d0:	1dfb      	adds	r3, r7, #7
200002d2:	781b      	ldrb	r3, [r3, #0]
200002d4:	7013      	strb	r3, [r2, #0]
	select_cotroller(controller);
200002d6:	1dbb      	adds	r3, r7, #6
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	0018      	movs	r0, r3
200002dc:	f7ff ff36 	bl	2000014c <select_cotroller>
	delay_500ns();
200002e0:	f7ff fef6 	bl	200000d0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002e4:	2040      	movs	r0, #64	; 0x40
200002e6:	f7ff fefc 	bl	200000e2 <graphic_ctrl_bit_set>
	delay_500ns();
200002ea:	f7ff fef1 	bl	200000d0 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002ee:	2040      	movs	r0, #64	; 0x40
200002f0:	f7ff ff12 	bl	20000118 <graphic_ctrl_bit_clear>
	
	//Kanske inte ska vara så här för this statement
	if(controller & B_CS1) {
200002f4:	1dbb      	adds	r3, r7, #6
200002f6:	781b      	ldrb	r3, [r3, #0]
200002f8:	2208      	movs	r2, #8
200002fa:	4013      	ands	r3, r2
200002fc:	d004      	beq.n	20000308 <graphic_write+0x4c>
		select_cotroller(B_CS1);
200002fe:	2008      	movs	r0, #8
20000300:	f7ff ff24 	bl	2000014c <select_cotroller>
		graphic_wait_ready();
20000304:	f7ff ff57 	bl	200001b6 <graphic_wait_ready>
	}
	
	if(controller & B_CS2) {
20000308:	1dbb      	adds	r3, r7, #6
2000030a:	781b      	ldrb	r3, [r3, #0]
2000030c:	2210      	movs	r2, #16
2000030e:	4013      	ands	r3, r2
20000310:	d004      	beq.n	2000031c <graphic_write+0x60>
		select_cotroller(B_CS2);
20000312:	2010      	movs	r0, #16
20000314:	f7ff ff1a 	bl	2000014c <select_cotroller>
		graphic_wait_ready();
20000318:	f7ff ff4d 	bl	200001b6 <graphic_wait_ready>
	}
	
	*GPIO_ODR_HIGH = 0;
2000031c:	4b06      	ldr	r3, [pc, #24]	; (20000338 <graphic_write+0x7c>)
2000031e:	2200      	movs	r2, #0
20000320:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000322:	2040      	movs	r0, #64	; 0x40
20000324:	f7ff fedd 	bl	200000e2 <graphic_ctrl_bit_set>
	select_cotroller(0);
20000328:	2000      	movs	r0, #0
2000032a:	f7ff ff0f 	bl	2000014c <select_cotroller>
}
2000032e:	46c0      	nop			; (mov r8, r8)
20000330:	46bd      	mov	sp, r7
20000332:	b002      	add	sp, #8
20000334:	bd80      	pop	{r7, pc}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	40021015 	andmi	r1, r2, r5, lsl r0

2000033c <graphic_write_command>:

void graphic_write_command(unsigned char command, unsigned char controller) {
2000033c:	b580      	push	{r7, lr}
2000033e:	b082      	sub	sp, #8
20000340:	af00      	add	r7, sp, #0
20000342:	0002      	movs	r2, r0
20000344:	1dfb      	adds	r3, r7, #7
20000346:	701a      	strb	r2, [r3, #0]
20000348:	1dbb      	adds	r3, r7, #6
2000034a:	1c0a      	adds	r2, r1, #0
2000034c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000034e:	2040      	movs	r0, #64	; 0x40
20000350:	f7ff fee2 	bl	20000118 <graphic_ctrl_bit_clear>
	select_cotroller(controller);
20000354:	1dbb      	adds	r3, r7, #6
20000356:	781b      	ldrb	r3, [r3, #0]
20000358:	0018      	movs	r0, r3
2000035a:	f7ff fef7 	bl	2000014c <select_cotroller>
	graphic_ctrl_bit_clear(B_RS);
2000035e:	2001      	movs	r0, #1
20000360:	f7ff feda 	bl	20000118 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
20000364:	2002      	movs	r0, #2
20000366:	f7ff fed7 	bl	20000118 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
2000036a:	1dbb      	adds	r3, r7, #6
2000036c:	781a      	ldrb	r2, [r3, #0]
2000036e:	1dfb      	adds	r3, r7, #7
20000370:	781b      	ldrb	r3, [r3, #0]
20000372:	0011      	movs	r1, r2
20000374:	0018      	movs	r0, r3
20000376:	f7ff ffa1 	bl	200002bc <graphic_write>
}
2000037a:	46c0      	nop			; (mov r8, r8)
2000037c:	46bd      	mov	sp, r7
2000037e:	b002      	add	sp, #8
20000380:	bd80      	pop	{r7, pc}

20000382 <graphic_write_data>:

void graphic_write_data(unsigned char data, unsigned char controller) {
20000382:	b580      	push	{r7, lr}
20000384:	b082      	sub	sp, #8
20000386:	af00      	add	r7, sp, #0
20000388:	0002      	movs	r2, r0
2000038a:	1dfb      	adds	r3, r7, #7
2000038c:	701a      	strb	r2, [r3, #0]
2000038e:	1dbb      	adds	r3, r7, #6
20000390:	1c0a      	adds	r2, r1, #0
20000392:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000394:	2040      	movs	r0, #64	; 0x40
20000396:	f7ff fea4 	bl	200000e2 <graphic_ctrl_bit_set>
	select_cotroller(controller);
2000039a:	1dbb      	adds	r3, r7, #6
2000039c:	781b      	ldrb	r3, [r3, #0]
2000039e:	0018      	movs	r0, r3
200003a0:	f7ff fed4 	bl	2000014c <select_cotroller>
	graphic_ctrl_bit_set(B_RS);
200003a4:	2001      	movs	r0, #1
200003a6:	f7ff fe9c 	bl	200000e2 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003aa:	2002      	movs	r0, #2
200003ac:	f7ff feb4 	bl	20000118 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003b0:	1dbb      	adds	r3, r7, #6
200003b2:	781a      	ldrb	r2, [r3, #0]
200003b4:	1dfb      	adds	r3, r7, #7
200003b6:	781b      	ldrb	r3, [r3, #0]
200003b8:	0011      	movs	r1, r2
200003ba:	0018      	movs	r0, r3
200003bc:	f7ff ff7e 	bl	200002bc <graphic_write>
}
200003c0:	46c0      	nop			; (mov r8, r8)
200003c2:	46bd      	mov	sp, r7
200003c4:	b002      	add	sp, #8
200003c6:	bd80      	pop	{r7, pc}

200003c8 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char controller) {
200003c8:	b580      	push	{r7, lr}
200003ca:	b082      	sub	sp, #8
200003cc:	af00      	add	r7, sp, #0
200003ce:	0002      	movs	r2, r0
200003d0:	1dfb      	adds	r3, r7, #7
200003d2:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
200003d4:	1dfb      	adds	r3, r7, #7
200003d6:	781b      	ldrb	r3, [r3, #0]
200003d8:	0018      	movs	r0, r3
200003da:	f7ff ff25 	bl	20000228 <graphic_read>
	return graphic_read(controller);
200003de:	1dfb      	adds	r3, r7, #7
200003e0:	781b      	ldrb	r3, [r3, #0]
200003e2:	0018      	movs	r0, r3
200003e4:	f7ff ff20 	bl	20000228 <graphic_read>
200003e8:	0003      	movs	r3, r0
}
200003ea:	0018      	movs	r0, r3
200003ec:	46bd      	mov	sp, r7
200003ee:	b002      	add	sp, #8
200003f0:	bd80      	pop	{r7, pc}

200003f2 <graphic_initalize>:

void graphic_initalize(void) {
200003f2:	b580      	push	{r7, lr}
200003f4:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200003f6:	2040      	movs	r0, #64	; 0x40
200003f8:	f7ff fe73 	bl	200000e2 <graphic_ctrl_bit_set>
	delay_mikro(10);
200003fc:	200a      	movs	r0, #10
200003fe:	f7ff fe45 	bl	2000008c <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000402:	2078      	movs	r0, #120	; 0x78
20000404:	f7ff fe88 	bl	20000118 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000408:	201e      	movs	r0, #30
2000040a:	f7ff fe55 	bl	200000b8 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
2000040e:	2020      	movs	r0, #32
20000410:	f7ff fe67 	bl	200000e2 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000414:	2118      	movs	r1, #24
20000416:	203e      	movs	r0, #62	; 0x3e
20000418:	f7ff ff90 	bl	2000033c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
2000041c:	2118      	movs	r1, #24
2000041e:	203f      	movs	r0, #63	; 0x3f
20000420:	f7ff ff8c 	bl	2000033c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000424:	2118      	movs	r1, #24
20000426:	20c0      	movs	r0, #192	; 0xc0
20000428:	f7ff ff88 	bl	2000033c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000042c:	2118      	movs	r1, #24
2000042e:	2040      	movs	r0, #64	; 0x40
20000430:	f7ff ff84 	bl	2000033c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000434:	2118      	movs	r1, #24
20000436:	20b8      	movs	r0, #184	; 0xb8
20000438:	f7ff ff80 	bl	2000033c <graphic_write_command>
	select_cotroller(0);
2000043c:	2000      	movs	r0, #0
2000043e:	f7ff fe85 	bl	2000014c <select_cotroller>
}
20000442:	46c0      	nop			; (mov r8, r8)
20000444:	46bd      	mov	sp, r7
20000446:	bd80      	pop	{r7, pc}

20000448 <graphic_clear_screen>:

void graphic_clear_screen(void) {
20000448:	b580      	push	{r7, lr}
2000044a:	b082      	sub	sp, #8
2000044c:	af00      	add	r7, sp, #0
	for(int page = 0; page < 7; page++) {
2000044e:	2300      	movs	r3, #0
20000450:	607b      	str	r3, [r7, #4]
20000452:	e01e      	b.n	20000492 <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000454:	687b      	ldr	r3, [r7, #4]
20000456:	b25b      	sxtb	r3, r3
20000458:	2248      	movs	r2, #72	; 0x48
2000045a:	4252      	negs	r2, r2
2000045c:	4313      	orrs	r3, r2
2000045e:	b25b      	sxtb	r3, r3
20000460:	b2db      	uxtb	r3, r3
20000462:	2118      	movs	r1, #24
20000464:	0018      	movs	r0, r3
20000466:	f7ff ff69 	bl	2000033c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
2000046a:	2118      	movs	r1, #24
2000046c:	2040      	movs	r0, #64	; 0x40
2000046e:	f7ff ff65 	bl	2000033c <graphic_write_command>
		for(int add = 0; add < 63; add++) {
20000472:	2300      	movs	r3, #0
20000474:	603b      	str	r3, [r7, #0]
20000476:	e006      	b.n	20000486 <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
20000478:	2118      	movs	r1, #24
2000047a:	2000      	movs	r0, #0
2000047c:	f7ff ff81 	bl	20000382 <graphic_write_data>
		for(int add = 0; add < 63; add++) {
20000480:	683b      	ldr	r3, [r7, #0]
20000482:	3301      	adds	r3, #1
20000484:	603b      	str	r3, [r7, #0]
20000486:	683b      	ldr	r3, [r7, #0]
20000488:	2b3e      	cmp	r3, #62	; 0x3e
2000048a:	ddf5      	ble.n	20000478 <graphic_clear_screen+0x30>
	for(int page = 0; page < 7; page++) {
2000048c:	687b      	ldr	r3, [r7, #4]
2000048e:	3301      	adds	r3, #1
20000490:	607b      	str	r3, [r7, #4]
20000492:	687b      	ldr	r3, [r7, #4]
20000494:	2b06      	cmp	r3, #6
20000496:	dddd      	ble.n	20000454 <graphic_clear_screen+0xc>
		}
	}
}
20000498:	46c0      	nop			; (mov r8, r8)
2000049a:	46bd      	mov	sp, r7
2000049c:	b002      	add	sp, #8
2000049e:	bd80      	pop	{r7, pc}

200004a0 <main>:

void main(void) {
200004a0:	b580      	push	{r7, lr}
200004a2:	af00      	add	r7, sp, #0
	init_app();
200004a4:	f7ff fdb4 	bl	20000010 <init_app>
	graphic_initalize();
200004a8:	f7ff ffa3 	bl	200003f2 <graphic_initalize>
  #ifndef SIMULATOR
	graphic_clear_screen();
  #endif
	graphic_write_command(LCD_SET_ADD | 10, B_CS1 | B_CS2);
200004ac:	2118      	movs	r1, #24
200004ae:	204a      	movs	r0, #74	; 0x4a
200004b0:	f7ff ff44 	bl	2000033c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | 1, B_CS1 | B_CS2);
200004b4:	2118      	movs	r1, #24
200004b6:	20b9      	movs	r0, #185	; 0xb9
200004b8:	f7ff ff40 	bl	2000033c <graphic_write_command>
	graphic_write(0xFF, B_CS1 | B_CS2);
200004bc:	2118      	movs	r1, #24
200004be:	20ff      	movs	r0, #255	; 0xff
200004c0:	f7ff fefc 	bl	200002bc <graphic_write>
}
200004c4:	46c0      	nop			; (mov r8, r8)
200004c6:	46bd      	mov	sp, r7
200004c8:	bd80      	pop	{r7, pc}
200004ca:	46c0      	nop			; (mov r8, r8)

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000011c 	andeq	r0, r0, ip, lsl r1
  10:	00007e0c 	andeq	r7, r0, ip, lsl #28
  14:	00001800 	andeq	r1, r0, r0, lsl #16
	...
  20:	01060200 	mrseq	r0, LR_usr
  24:	24010000 	strcs	r0, [r1], #-0
  28:	0000002c 	andeq	r0, r0, ip, lsr #32
  2c:	0e080103 	adfeqe	f0, f0, f3
  30:	04000001 	streq	r0, [r0], #-1
  34:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
  38:	04a0e501 	strteq	lr, [r0], #1281	; 0x501
  3c:	002a2000 	eoreq	r2, sl, r0
  40:	9c010000 	stcls	0, cr0, [r1], {-0}
  44:	0001ec05 	andeq	lr, r1, r5, lsl #24
  48:	48db0100 	ldmmi	fp, {r8}^
  4c:	58200004 	stmdapl	r0!, {r2}
  50:	01000000 	mrseq	r0, (UNDEF: 0)
  54:	00008a9c 	muleq	r0, ip, sl
  58:	044e0600 	strbeq	r0, [lr], #-1536	; 0xfffffa00
  5c:	004a2000 	subeq	r2, sl, r0
  60:	cf070000 	svcgt	0x00070000
  64:	01000001 	tsteq	r0, r1
  68:	00008adc 	ldrdeq	r8, [r0], -ip
  6c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
  70:	00047206 	andeq	r7, r4, r6, lsl #4
  74:	00001a20 	andeq	r1, r0, r0, lsr #20
  78:	64610800 	strbtvs	r0, [r1], #-2048	; 0xfffff800
  7c:	df010064 	svcle	0x00010064
  80:	0000008a 	andeq	r0, r0, sl, lsl #1
  84:	00709102 	rsbseq	r9, r0, r2, lsl #2
  88:	04090000 	streq	r0, [r9], #-0
  8c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
  90:	01d40400 	bicseq	r0, r4, r0, lsl #8
  94:	cd010000 	stcgt	0, cr0, [r1, #-0]
  98:	200003f2 	strdcs	r0, [r0], -r2
  9c:	00000056 	andeq	r0, r0, r6, asr r0
  a0:	370a9c01 	strcc	r9, [sl, -r1, lsl #24]
  a4:	01000000 	mrseq	r0, (UNDEF: 0)
  a8:	00002cc8 	andeq	r2, r0, r8, asr #25
  ac:	0003c800 	andeq	ip, r3, r0, lsl #16
  b0:	00002a20 	andeq	r2, r0, r0, lsr #20
  b4:	ca9c0100 	bgt	fe7004bc <main+0xde70001c>
  b8:	0b000000 	bleq	c0 <startup-0x1fffff40>
  bc:	0000021a 	andeq	r0, r0, sl, lsl r2
  c0:	002cc801 	eoreq	ip, ip, r1, lsl #16
  c4:	91020000 	mrsls	r0, (UNDEF: 2)
  c8:	ea050077 	b	1402ac <startup-0x1febfd54>
  cc:	01000000 	mrseq	r0, (UNDEF: 0)
  d0:	000382c0 	andeq	r8, r3, r0, asr #5
  d4:	00004620 	andeq	r4, r0, r0, lsr #12
  d8:	fc9c0100 	ldc2	1, cr0, [ip], {0}
  dc:	0b000000 	bleq	e4 <startup-0x1fffff1c>
  e0:	00000044 	andeq	r0, r0, r4, asr #32
  e4:	002cc001 	eoreq	ip, ip, r1
  e8:	91020000 	mrsls	r0, (UNDEF: 2)
  ec:	021a0b77 	andseq	r0, sl, #121856	; 0x1dc00
  f0:	c0010000 	andgt	r0, r1, r0
  f4:	0000002c 	andeq	r0, r0, ip, lsr #32
  f8:	00769102 	rsbseq	r9, r6, r2, lsl #2
  fc:	00001505 	andeq	r1, r0, r5, lsl #10
 100:	3cb80100 	ldfccs	f0, [r8]
 104:	46200003 	strtmi	r0, [r0], -r3
 108:	01000000 	mrseq	r0, (UNDEF: 0)
 10c:	00012e9c 	muleq	r1, ip, lr
 110:	00230b00 	eoreq	r0, r3, r0, lsl #22
 114:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
 118:	0000002c 	andeq	r0, r0, ip, lsr #32
 11c:	0b779102 	bleq	1de452c <startup-0x1e21bad4>
 120:	0000021a 	andeq	r0, r0, sl, lsl r2
 124:	002cb801 	eoreq	fp, ip, r1, lsl #16
 128:	91020000 	mrsls	r0, (UNDEF: 2)
 12c:	b9050076 	stmdblt	r5, {r1, r2, r4, r5, r6}
 130:	01000001 	tsteq	r0, r1
 134:	0002bca0 	andeq	fp, r2, r0, lsr #25
 138:	00008020 	andeq	r8, r0, r0, lsr #32
 13c:	609c0100 	addsvs	r0, ip, r0, lsl #2
 140:	0b000001 	bleq	14c <startup-0x1ffffeb4>
 144:	000001e6 	andeq	r0, r0, r6, ror #3
 148:	002ca001 	eoreq	sl, ip, r1
 14c:	91020000 	mrsls	r0, (UNDEF: 2)
 150:	021a0b77 	andseq	r0, sl, #121856	; 0x1dc00
 154:	a0010000 	andge	r0, r1, r0
 158:	0000002c 	andeq	r0, r0, ip, lsr #32
 15c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 160:	0000490a 	andeq	r4, r0, sl, lsl #18
 164:	2c890100 	stfcss	f0, [r9], {0}
 168:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
 16c:	94200002 	strtls	r0, [r0], #-2
 170:	01000000 	mrseq	r0, (UNDEF: 0)
 174:	0001959c 	muleq	r1, ip, r5
 178:	021a0b00 	andseq	r0, sl, #0, 22
 17c:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
 180:	0000002c 	andeq	r0, r0, ip, lsr #32
 184:	086f9102 	stmdaeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 188:	01005652 	tsteq	r0, r2, asr r6
 18c:	00002c92 	muleq	r0, r2, ip
 190:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 194:	00d70c00 	sbcseq	r0, r7, r0, lsl #24
 198:	75010000 	strvc	r0, [r1, #-0]
 19c:	200001b6 			; <UNDEFINED> instruction: 0x200001b6
 1a0:	00000072 	andeq	r0, r0, r2, ror r0
 1a4:	01bd9c01 			; <UNDEFINED> instruction: 0x01bd9c01
 1a8:	000d0000 	andeq	r0, sp, r0
 1ac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 1b0:	80010069 	andhi	r0, r1, r9, rrx
 1b4:	0000002c 	andeq	r0, r0, ip, lsr #32
 1b8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 1bc:	00560500 	subseq	r0, r6, r0, lsl #10
 1c0:	65010000 	strvs	r0, [r1, #-0]
 1c4:	2000014c 	andcs	r0, r0, ip, asr #2
 1c8:	0000006a 	andeq	r0, r0, sl, rrx
 1cc:	01e19c01 	mvneq	r9, r1, lsl #24
 1d0:	1a0b0000 	bne	2c01d8 <startup-0x1fd3fe28>
 1d4:	01000002 	tsteq	r0, r2
 1d8:	00002165 	andeq	r2, r0, r5, ror #2
 1dc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1e0:	00670e00 	rsbeq	r0, r7, r0, lsl #28
 1e4:	61010000 	mrsvs	r0, (UNDEF: 1)
 1e8:	20000118 	andcs	r0, r0, r8, lsl r1
 1ec:	00000034 	andeq	r0, r0, r4, lsr r0
 1f0:	02039c01 	andeq	r9, r3, #256	; 0x100
 1f4:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
 1f8:	21610100 	cmncs	r1, r0, lsl #2
 1fc:	02000000 	andeq	r0, r0, #0
 200:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
 204:	00000000 	andeq	r0, r0, r0
 208:	00e25d01 	rsceq	r5, r2, r1, lsl #26
 20c:	00362000 	eorseq	r2, r6, r0
 210:	9c010000 	stcls	0, cr0, [r1], {-0}
 214:	00000225 	andeq	r0, r0, r5, lsr #4
 218:	0100780f 	tsteq	r0, pc, lsl #16
 21c:	0000215d 	andeq	r2, r0, sp, asr r1
 220:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 224:	00cb0400 	sbceq	r0, fp, r0, lsl #8
 228:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 22c:	200000d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 230:	00000012 	andeq	r0, r0, r2, lsl r0
 234:	01059c01 	tsteq	r5, r1, lsl #24
 238:	01000002 	tsteq	r0, r2
 23c:	0000b850 	andeq	fp, r0, r0, asr r8
 240:	00001820 	andeq	r1, r0, r0, lsr #16
 244:	599c0100 	ldmibpl	ip, {r8}
 248:	0f000002 	svceq	0x00000002
 24c:	0100736d 	tsteq	r0, sp, ror #6
 250:	00025950 	andeq	r5, r2, r0, asr r9
 254:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 258:	07040300 	streq	r0, [r4, -r0, lsl #6]
 25c:	0000020d 	andeq	r0, r0, sp, lsl #4
 260:	00002b05 	andeq	r2, r0, r5, lsl #22
 264:	8c470100 	stfhie	f0, [r7], {-0}
 268:	2c200000 	stccs	0, cr0, [r0], #-0
 26c:	01000000 	mrseq	r0, (UNDEF: 0)
 270:	0002839c 	muleq	r2, ip, r3
 274:	73750f00 	cmnvc	r5, #0, 30
 278:	59470100 	stmdbpl	r7, {r8}^
 27c:	02000002 	andeq	r0, r0, #2
 280:	10007491 	mulne	r0, r1, r4
 284:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
 288:	00483c01 	subeq	r3, r8, r1, lsl #24
 28c:	00442000 	subeq	r2, r4, r0
 290:	9c010000 	stcls	0, cr0, [r1], {-0}
 294:	0000fd10 	andeq	pc, r0, r0, lsl sp	; <UNPREDICTABLE>
 298:	10320100 	eorsne	r0, r2, r0, lsl #2
 29c:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
 2a0:	01000000 	mrseq	r0, (UNDEF: 0)
 2a4:	01c7109c 			; <UNDEFINED> instruction: 0x01c7109c
 2a8:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
 2ac:	20000000 	andcs	r0, r0, r0
 2b0:	0000000c 	andeq	r0, r0, ip
 2b4:	Address 0x000002b4 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00160200 	andseq	r0, r6, r0, lsl #4
  14:	0b3a0e03 	bleq	e83828 <startup-0x1f17c7d8>
  18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	002e0400 	eoreq	r0, lr, r0, lsl #8
  2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	01111927 	tsteq	r1, r7, lsr #18
  38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  3c:	00194296 	mulseq	r9, r6, r2
  40:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
  44:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  48:	0b3b0b3a 	bleq	ec2d38 <startup-0x1f13d2c8>
  4c:	01111927 	tsteq	r1, r7, lsr #18
  50:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  54:	01194296 			; <UNDEFINED> instruction: 0x01194296
  58:	06000013 			; <UNDEFINED> instruction: 0x06000013
  5c:	0111010b 	tsteq	r1, fp, lsl #2
  60:	00000612 	andeq	r0, r0, r2, lsl r6
  64:	03003407 	movweq	r3, #1031	; 0x407
  68:	3b0b3a0e 	blcc	2ce8a8 <startup-0x1fd31758>
  6c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  70:	08000018 	stmdaeq	r0, {r3, r4}
  74:	08030034 	stmdaeq	r3, {r2, r4, r5}
  78:	0b3b0b3a 	bleq	ec2d68 <startup-0x1f13d298>
  7c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  80:	24090000 	strcs	r0, [r9], #-0
  84:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  88:	0008030b 	andeq	r0, r8, fp, lsl #6
  8c:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
  90:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  94:	0b3b0b3a 	bleq	ec2d84 <startup-0x1f13d27c>
  98:	13491927 	movtne	r1, #39207	; 0x9927
  9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  a0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  a4:	00130119 	andseq	r0, r3, r9, lsl r1
  a8:	00050b00 	andeq	r0, r5, r0, lsl #22
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	00001802 	andeq	r1, r0, r2, lsl #16
  b8:	3f012e0c 	svccc	0x00012e0c
  bc:	3a0e0319 	bcc	380d28 <startup-0x1fc7f2d8>
  c0:	110b3b0b 	tstne	fp, fp, lsl #22
  c4:	40061201 	andmi	r1, r6, r1, lsl #4
  c8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  cc:	00001301 	andeq	r1, r0, r1, lsl #6
  d0:	55010b0d 	strpl	r0, [r1, #-2829]	; 0xfffff4f3
  d4:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
  d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  dc:	0b3a0e03 	bleq	e838f0 <startup-0x1f17c710>
  e0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  ec:	00130119 	andseq	r0, r3, r9, lsl r1
  f0:	00050f00 	andeq	r0, r5, r0, lsl #30
  f4:	0b3a0803 	bleq	e82108 <startup-0x1f17def8>
  f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  fc:	00001802 	andeq	r1, r0, r2, lsl #16
 100:	3f002e10 	svccc	0x00002e10
 104:	3a0e0319 	bcc	380d70 <startup-0x1fc7f290>
 108:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 10c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 110:	97184006 	ldrls	r4, [r8, -r6]
 114:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200001d8 	ldrdcs	r0, [r0], -r8
   4:	20000200 	andcs	r0, r0, r0, lsl #4
   8:	20000202 	andcs	r0, r0, r2, lsl #4
   c:	20000204 	andcs	r0, r0, r4, lsl #4
	...
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	200004ca 	andcs	r0, r0, sl, asr #9
  20:	20000000 	andcs	r0, r0, r0
  24:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000013e 	andeq	r0, r0, lr, lsr r1
   4:	00570002 	subseq	r0, r7, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	672f6574 			; <UNDEFINED> instruction: 0x672f6574
  44:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  48:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  4c:	616c7073 	smcvs	50947	; 0xc703
  50:	73000079 	movwvc	r0, #121	; 0x79
  54:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  58:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  5c:	00000100 	andeq	r0, r0, r0, lsl #2
  60:	02050000 	andeq	r0, r5, #0
  64:	20000000 	andcs	r0, r0, r0
  68:	13012803 	movwne	r2, #6147	; 0x1803
  6c:	0003025e 	andeq	r0, r3, lr, asr r2
  70:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
  74:	00001002 	andeq	r1, r0, r2
  78:	01310320 	teqeq	r1, r0, lsr #6
  7c:	3d3d3f30 	ldccc	15, cr3, [sp, #-192]!	; 0xffffff40
  80:	3d2fd83d 	stccc	8, cr13, [pc, #-244]!	; ffffff94 <main+0xdffffaf4>
  84:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
  88:	06010402 	streq	r0, [r1], -r2, lsl #8
  8c:	3d690620 	stclcc	6, cr0, [r9, #-128]!	; 0xffffff80
  90:	2f214ba0 	svccs	0x00214ba0
  94:	5e2a2f2f 	cdppl	15, 2, cr2, cr10, cr15, {1}
  98:	4c4e4c4c 	mcrrmi	12, 4, r4, lr, cr12
  9c:	3e2f2f2f 	cdpcc	15, 2, cr2, cr15, cr15, {1}
  a0:	6768e567 	strbvs	lr, [r8, -r7, ror #10]!
  a4:	4b6768d7 	blmi	19da408 <startup-0x1e625bf8>
  a8:	3c0b033d 	stccc	3, cr0, [fp], {61}	; 0x3d
  ac:	4b207603 	blmi	81d8c0 <startup-0x1f7e2740>
  b0:	7903443d 	stmdbvc	r3, {r0, r2, r3, r4, r5, sl, lr}
  b4:	413d4b20 	teqmi	sp, r0, lsr #22
  b8:	3e3d4b1c 	vmovcc.32	r4, d13[1]
  bc:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
  c0:	3d303d3d 	ldccc	13, cr3, [r0, #-244]!	; 0xffffff0c
  c4:	4b2f3d2f 	blmi	bcf588 <startup-0x1f430a78>
  c8:	27667a03 	strbcs	r7, [r6, -r3, lsl #20]!
  cc:	bc3d3d23 	ldclt	13, cr3, [sp], #-140	; 0xffffff74
  d0:	3d3d3d67 	ldccc	13, cr3, [sp, #-412]!	; 0xfffffe64
  d4:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
  d8:	3d3d592f 			; <UNDEFINED> instruction: 0x3d3d592f
  dc:	4b303d4b 	blmi	c0f610 <startup-0x1f3f09f0>
  e0:	bc3d303d 	ldclt	0, cr3, [sp], #-244	; 0xffffff0c
  e4:	2f594b91 	svccs	0x00594b91
  e8:	593f2f3d 	ldmdbpl	pc!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
  ec:	3d59313d 	ldfcce	f3, [r9, #-244]	; 0xffffff0c
  f0:	3d3d3d31 	ldccc	13, cr3, [sp, #-196]!	; 0xffffff3c
  f4:	593d9176 	ldmdbpl	sp!, {r1, r2, r4, r5, r6, r8, ip, pc}
  f8:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
  fc:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 100:	674c833d 	smlaldxvs	r8, ip, sp, r3
 104:	2f4c6759 	svccs	0x004c6759
 108:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 10c:	4b4b4b3d 	blmi	12d2e08 <startup-0x1ed2d1f8>
 110:	3e3d4b4b 	vsubcc.f64	d4, d13, d11
 114:	4bad3d3d 	blmi	feb4f610 <main+0xdeb4f170>
 118:	03040200 	movweq	r0, #16896	; 0x4200
 11c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 120:	02004903 	andeq	r4, r0, #49152	; 0xc000
 124:	3c060104 	stfccs	f0, [r6], {4}
 128:	02040200 	andeq	r0, r4, #0, 4
 12c:	02003906 	andeq	r3, r0, #98304	; 0x18000
 130:	3c060104 	stfccs	f0, [r6], {4}
 134:	2f4c4306 	svccs	0x004c4306
 138:	4b4b322f 	blmi	12cc9fc <startup-0x1ed33604>
 13c:	0003024b 	andeq	r0, r3, fp, asr #4
 140:	Address 0x00000140 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	70617267 	rsbvc	r7, r1, r7, ror #4
   4:	5f636968 	svcpl	0x00636968
   8:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
   c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  10:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
  14:	61726700 	cmnvs	r2, r0, lsl #14
  18:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  1c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  20:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  24:	616d6d6f 	cmnvs	sp, pc, ror #26
  28:	6400646e 	strvs	r6, [r0], #-1134	; 0xfffffb92
  2c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  30:	6b696d5f 	blvs	1a5b5b4 <startup-0x1e5a4a4c>
  34:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
  38:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  3c:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
  40:	5f646165 	svcpl	0x00646165
  44:	61746164 	cmnvs	r4, r4, ror #2
  48:	61726700 	cmnvs	r2, r0, lsl #14
  4c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  50:	6165725f 	cmnvs	r5, pc, asr r2
  54:	65730064 	ldrbvs	r0, [r3, #-100]!	; 0xffffff9c
  58:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  5c:	746f635f 	strbtvc	r6, [pc], #-863	; 64 <startup-0x1fffff9c>
  60:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  64:	67007265 	strvs	r7, [r0, -r5, ror #4]
  68:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  6c:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
  70:	5f6c7274 	svcpl	0x006c7274
  74:	5f746962 	svcpl	0x00746962
  78:	61656c63 	cmnvs	r5, r3, ror #24
  7c:	3a430072 	bcc	10c024c <startup-0x1ef3fdb4>
  80:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  84:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
  88:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
  8c:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
  90:	6f746b73 	svcvs	0x00746b73
  94:	41442f70 	hvcmi	17136	; 0x42f0
  98:	37313054 			; <UNDEFINED> instruction: 0x37313054
  9c:	646f432f 	strbtvs	r4, [pc], #-815	; a4 <startup-0x1fffff5c>
  a0:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  a4:	72672f65 	rsbvc	r2, r7, #404	; 0x194
  a8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  ac:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
  b0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  b4:	6174732f 	cmnvs	r4, pc, lsr #6
  b8:	70757472 	rsbsvc	r7, r5, r2, ror r4
  bc:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
  c0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  c4:	3035325f 	eorscc	r3, r5, pc, asr r2
  c8:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
  cc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  d0:	3030355f 	eorscc	r3, r0, pc, asr r5
  d4:	6700736e 	strvs	r7, [r0, -lr, ror #6]
  d8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  dc:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  e0:	5f746961 	svcpl	0x00746961
  e4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  e8:	72670079 	rsbvc	r0, r7, #121	; 0x79
  ec:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  f0:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  f4:	5f657469 	svcpl	0x00657469
  f8:	61746164 	cmnvs	r4, r4, ror #2
  fc:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 100:	70615f74 	rsbvc	r5, r1, r4, ror pc
 104:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
 108:	5f38746e 	svcpl	0x0038746e
 10c:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
 110:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 114:	63206465 			; <UNDEFINED> instruction: 0x63206465
 118:	00726168 	rsbseq	r6, r2, r8, ror #2
 11c:	20554e47 	subscs	r4, r5, r7, asr #28
 120:	20393943 	eorscs	r3, r9, r3, asr #18
 124:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
 128:	30322031 	eorscc	r2, r2, r1, lsr r0
 12c:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
 130:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
 134:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
 138:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 13c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 140:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
 144:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 148:	362d6465 	strtcc	r6, [sp], -r5, ror #8
 14c:	6172622d 	cmnvs	r2, sp, lsr #4
 150:	2068636e 	rsbcs	r6, r8, lr, ror #6
 154:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 158:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 15c:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
 160:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
 164:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 168:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 16c:	616d2d20 	cmnvs	sp, r0, lsr #26
 170:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 174:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 178:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 17c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 180:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 184:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 188:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 18c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 190:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 194:	616d2d20 	cmnvs	sp, r0, lsr #26
 198:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 19c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 1a0:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 1a4:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 1a8:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 1ac:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 1b0:	00393963 	eorseq	r3, r9, r3, ror #18
 1b4:	6e69616d 	powvsez	f6, f1, #5.0
 1b8:	61726700 	cmnvs	r2, r0, lsl #14
 1bc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1c0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1c4:	73006574 	movwvc	r6, #1396	; 0x574
 1c8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 1cc:	70007075 	andvc	r7, r0, r5, ror r0
 1d0:	00656761 	rsbeq	r6, r5, r1, ror #14
 1d4:	70617267 	rsbvc	r7, r1, r7, ror #4
 1d8:	5f636968 	svcpl	0x00636968
 1dc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 1e0:	7a696c61 	bvc	1a5b36c <startup-0x1e5a4c94>
 1e4:	61760065 	cmnvs	r6, r5, rrx
 1e8:	0065756c 	rsbeq	r7, r5, ip, ror #10
 1ec:	70617267 	rsbvc	r7, r1, r7, ror #4
 1f0:	5f636968 	svcpl	0x00636968
 1f4:	61656c63 	cmnvs	r5, r3, ror #24
 1f8:	63735f72 	cmnvs	r3, #456	; 0x1c8
 1fc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 200:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 204:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 14a <startup-0x1ffffeb6>	; <UNPREDICTABLE>
 208:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 20c:	736e7500 	cmnvc	lr, #0, 10
 210:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 214:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 218:	6f630074 	svcvs	0x00630074
 21c:	6f72746e 	svcvs	0x0072746e
 220:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000038 	andeq	r0, r0, r8, lsr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000048 	andcs	r0, r0, r8, asr #32
  48:	00000044 	andeq	r0, r0, r4, asr #32
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	2000008c 	andcs	r0, r0, ip, lsl #1
  64:	0000002c 	andeq	r0, r0, ip, lsr #32
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	100e4101 	andne	r4, lr, r1, lsl #2
  74:	00070d41 	andeq	r0, r7, r1, asr #26
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000b8 	strhcs	r0, [r0], -r8
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	100e4101 	andne	r4, lr, r1, lsl #2
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	00000018 	andeq	r0, r0, r8, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  a4:	00000012 	andeq	r0, r0, r2, lsl r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	200000e2 	andcs	r0, r0, r2, ror #1
  c0:	00000036 	andeq	r0, r0, r6, lsr r0
  c4:	40080e41 	andmi	r0, r8, r1, asr #28
  c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  cc:	100e4101 	andne	r4, lr, r1, lsl #2
  d0:	00070d41 	andeq	r0, r7, r1, asr #26
  d4:	0000001c 	andeq	r0, r0, ip, lsl r0
  d8:	00000000 	andeq	r0, r0, r0
  dc:	20000118 	andcs	r0, r0, r8, lsl r1
  e0:	00000034 	andeq	r0, r0, r4, lsr r0
  e4:	40080e41 	andmi	r0, r8, r1, asr #28
  e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  ec:	100e4101 	andne	r4, lr, r1, lsl #2
  f0:	00070d41 	andeq	r0, r7, r1, asr #26
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	00000000 	andeq	r0, r0, r0
  fc:	2000014c 	andcs	r0, r0, ip, asr #2
 100:	0000006a 	andeq	r0, r0, sl, rrx
 104:	40080e41 	andmi	r0, r8, r1, asr #28
 108:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 10c:	100e4101 	andne	r4, lr, r1, lsl #2
 110:	00070d41 	andeq	r0, r7, r1, asr #26
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	200001b6 			; <UNDEFINED> instruction: 0x200001b6
 120:	00000072 	andeq	r0, r0, r2, ror r0
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	100e4101 	andne	r4, lr, r1, lsl #2
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000000 	andeq	r0, r0, r0
 13c:	20000228 	andcs	r0, r0, r8, lsr #4
 140:	00000094 	muleq	r0, r4, r0
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	180e4101 	stmdane	lr, {r0, r8, lr}
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000000 	andeq	r0, r0, r0
 15c:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
 160:	00000080 	andeq	r0, r0, r0, lsl #1
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	100e4101 	andne	r4, lr, r1, lsl #2
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000000 	andeq	r0, r0, r0
 17c:	2000033c 	andcs	r0, r0, ip, lsr r3
 180:	00000046 	andeq	r0, r0, r6, asr #32
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	100e4101 	andne	r4, lr, r1, lsl #2
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000000 	andeq	r0, r0, r0
 19c:	20000382 	andcs	r0, r0, r2, lsl #7
 1a0:	00000046 	andeq	r0, r0, r6, asr #32
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	100e4101 	andne	r4, lr, r1, lsl #2
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	200003c8 	andcs	r0, r0, r8, asr #7
 1c0:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	100e4101 	andne	r4, lr, r1, lsl #2
 1d0:	00070d41 	andeq	r0, r7, r1, asr #26
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	200003f2 	strdcs	r0, [r0], -r2
 1e0:	00000056 	andeq	r0, r0, r6, asr r0
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000448 	andcs	r0, r0, r8, asr #8
 1fc:	00000058 	andeq	r0, r0, r8, asr r0
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	00000018 	andeq	r0, r0, r8, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	200004a0 	andcs	r0, r0, r0, lsr #9
 21c:	0000002a 	andeq	r0, r0, sl, lsr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	070d4101 	streq	r4, [sp, -r1, lsl #2]
