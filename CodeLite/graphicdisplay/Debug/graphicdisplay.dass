
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f810 	bl	20000028 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*GPIO_MODER = 0x55555555;
20000014:	4b02      	ldr	r3, [pc, #8]	; (20000020 <init_app+0x10>)
20000016:	4a03      	ldr	r2, [pc, #12]	; (20000024 <init_app+0x14>)
20000018:	601a      	str	r2, [r3, #0]
}
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	46bd      	mov	sp, r7
2000001e:	bd80      	pop	{r7, pc}
20000020:	40021000 	andmi	r1, r2, r0
20000024:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000028 <main>:


void main(void) {
20000028:	b580      	push	{r7, lr}
2000002a:	b082      	sub	sp, #8
2000002c:	af00      	add	r7, sp, #0
	unsigned char i;
	init_app();
2000002e:	f7ff ffef 	bl	20000010 <init_app>
	graphic_initalize();
20000032:	f000 fa2b 	bl	2000048c <graphic_initalize>
  #ifndef SIMULATOR
	graphic_clear_screen();
  #endif
  
	for(i = 0; i < 128; i++) {
20000036:	1dfb      	adds	r3, r7, #7
20000038:	2200      	movs	r2, #0
2000003a:	701a      	strb	r2, [r3, #0]
2000003c:	e00b      	b.n	20000056 <main+0x2e>
		pixel(i, 10, 1);
2000003e:	1dfb      	adds	r3, r7, #7
20000040:	781b      	ldrb	r3, [r3, #0]
20000042:	2201      	movs	r2, #1
20000044:	210a      	movs	r1, #10
20000046:	0018      	movs	r0, r3
20000048:	f000 fa77 	bl	2000053a <pixel>
	for(i = 0; i < 128; i++) {
2000004c:	1dfb      	adds	r3, r7, #7
2000004e:	781a      	ldrb	r2, [r3, #0]
20000050:	1dfb      	adds	r3, r7, #7
20000052:	3201      	adds	r2, #1
20000054:	701a      	strb	r2, [r3, #0]
20000056:	1dfb      	adds	r3, r7, #7
20000058:	781b      	ldrb	r3, [r3, #0]
2000005a:	b25b      	sxtb	r3, r3
2000005c:	2b00      	cmp	r3, #0
2000005e:	daee      	bge.n	2000003e <main+0x16>
	}
	for(i = 0; i < 64; i++) {
20000060:	1dfb      	adds	r3, r7, #7
20000062:	2200      	movs	r2, #0
20000064:	701a      	strb	r2, [r3, #0]
20000066:	e00b      	b.n	20000080 <main+0x58>
		pixel(10, i, 1);
20000068:	1dfb      	adds	r3, r7, #7
2000006a:	781b      	ldrb	r3, [r3, #0]
2000006c:	2201      	movs	r2, #1
2000006e:	0019      	movs	r1, r3
20000070:	200a      	movs	r0, #10
20000072:	f000 fa62 	bl	2000053a <pixel>
	for(i = 0; i < 64; i++) {
20000076:	1dfb      	adds	r3, r7, #7
20000078:	781a      	ldrb	r2, [r3, #0]
2000007a:	1dfb      	adds	r3, r7, #7
2000007c:	3201      	adds	r2, #1
2000007e:	701a      	strb	r2, [r3, #0]
20000080:	1dfb      	adds	r3, r7, #7
20000082:	781b      	ldrb	r3, [r3, #0]
20000084:	2b3f      	cmp	r3, #63	; 0x3f
20000086:	d9ef      	bls.n	20000068 <main+0x40>
	}
	delay_milli(50);
20000088:	2032      	movs	r0, #50	; 0x32
2000008a:	f000 f865 	bl	20000158 <delay_milli>
	for(i = 0; i < 128; i++) {
2000008e:	1dfb      	adds	r3, r7, #7
20000090:	2200      	movs	r2, #0
20000092:	701a      	strb	r2, [r3, #0]
20000094:	e00b      	b.n	200000ae <main+0x86>
		pixel(i, 10, 0);
20000096:	1dfb      	adds	r3, r7, #7
20000098:	781b      	ldrb	r3, [r3, #0]
2000009a:	2200      	movs	r2, #0
2000009c:	210a      	movs	r1, #10
2000009e:	0018      	movs	r0, r3
200000a0:	f000 fa4b 	bl	2000053a <pixel>
	for(i = 0; i < 128; i++) {
200000a4:	1dfb      	adds	r3, r7, #7
200000a6:	781a      	ldrb	r2, [r3, #0]
200000a8:	1dfb      	adds	r3, r7, #7
200000aa:	3201      	adds	r2, #1
200000ac:	701a      	strb	r2, [r3, #0]
200000ae:	1dfb      	adds	r3, r7, #7
200000b0:	781b      	ldrb	r3, [r3, #0]
200000b2:	b25b      	sxtb	r3, r3
200000b4:	2b00      	cmp	r3, #0
200000b6:	daee      	bge.n	20000096 <main+0x6e>
	}
	for(i = 0; i < 64; i++) {
200000b8:	1dfb      	adds	r3, r7, #7
200000ba:	2200      	movs	r2, #0
200000bc:	701a      	strb	r2, [r3, #0]
200000be:	e00b      	b.n	200000d8 <main+0xb0>
		pixel(10, i, 0);
200000c0:	1dfb      	adds	r3, r7, #7
200000c2:	781b      	ldrb	r3, [r3, #0]
200000c4:	2200      	movs	r2, #0
200000c6:	0019      	movs	r1, r3
200000c8:	200a      	movs	r0, #10
200000ca:	f000 fa36 	bl	2000053a <pixel>
	for(i = 0; i < 64; i++) {
200000ce:	1dfb      	adds	r3, r7, #7
200000d0:	781a      	ldrb	r2, [r3, #0]
200000d2:	1dfb      	adds	r3, r7, #7
200000d4:	3201      	adds	r2, #1
200000d6:	701a      	strb	r2, [r3, #0]
200000d8:	1dfb      	adds	r3, r7, #7
200000da:	781b      	ldrb	r3, [r3, #0]
200000dc:	2b3f      	cmp	r3, #63	; 0x3f
200000de:	d9ef      	bls.n	200000c0 <main+0x98>
	}

}
200000e0:	46c0      	nop			; (mov r8, r8)
200000e2:	46bd      	mov	sp, r7
200000e4:	b002      	add	sp, #8
200000e6:	bd80      	pop	{r7, pc}

200000e8 <delay_250ns>:
#include "timer.h"


void delay_250ns(void) {
200000e8:	b580      	push	{r7, lr}
200000ea:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
200000ec:	4b0c      	ldr	r3, [pc, #48]	; (20000120 <delay_250ns+0x38>)
200000ee:	2200      	movs	r2, #0
200000f0:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
200000f2:	4b0c      	ldr	r3, [pc, #48]	; (20000124 <delay_250ns+0x3c>)
200000f4:	2231      	movs	r2, #49	; 0x31
200000f6:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200000f8:	4b0b      	ldr	r3, [pc, #44]	; (20000128 <delay_250ns+0x40>)
200000fa:	2200      	movs	r2, #0
200000fc:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200000fe:	4b08      	ldr	r3, [pc, #32]	; (20000120 <delay_250ns+0x38>)
20000100:	2205      	movs	r2, #5
20000102:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
20000104:	46c0      	nop			; (mov r8, r8)
20000106:	4b06      	ldr	r3, [pc, #24]	; (20000120 <delay_250ns+0x38>)
20000108:	681a      	ldr	r2, [r3, #0]
2000010a:	2380      	movs	r3, #128	; 0x80
2000010c:	025b      	lsls	r3, r3, #9
2000010e:	4013      	ands	r3, r2
20000110:	d0f9      	beq.n	20000106 <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
20000112:	4b03      	ldr	r3, [pc, #12]	; (20000120 <delay_250ns+0x38>)
20000114:	2200      	movs	r2, #0
20000116:	601a      	str	r2, [r3, #0]
}
20000118:	46c0      	nop			; (mov r8, r8)
2000011a:	46bd      	mov	sp, r7
2000011c:	bd80      	pop	{r7, pc}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	e000e010 	and	lr, r0, r0, lsl r0
20000124:	e000e014 	and	lr, r0, r4, lsl r0
20000128:	e000e018 	and	lr, r0, r8, lsl r0

2000012c <delay_mikro>:

void delay_mikro(unsigned int us) {
2000012c:	b580      	push	{r7, lr}
2000012e:	b082      	sub	sp, #8
20000130:	af00      	add	r7, sp, #0
20000132:	6078      	str	r0, [r7, #4]
	while(us--) {
20000134:	e007      	b.n	20000146 <delay_mikro+0x1a>
		delay_250ns();
20000136:	f7ff ffd7 	bl	200000e8 <delay_250ns>
		delay_250ns();
2000013a:	f7ff ffd5 	bl	200000e8 <delay_250ns>
		delay_250ns();
2000013e:	f7ff ffd3 	bl	200000e8 <delay_250ns>
		delay_250ns();
20000142:	f7ff ffd1 	bl	200000e8 <delay_250ns>
	while(us--) {
20000146:	687b      	ldr	r3, [r7, #4]
20000148:	1e5a      	subs	r2, r3, #1
2000014a:	607a      	str	r2, [r7, #4]
2000014c:	2b00      	cmp	r3, #0
2000014e:	d1f2      	bne.n	20000136 <delay_mikro+0xa>
	}
}
20000150:	46c0      	nop			; (mov r8, r8)
20000152:	46bd      	mov	sp, r7
20000154:	b002      	add	sp, #8
20000156:	bd80      	pop	{r7, pc}

20000158 <delay_milli>:

void delay_milli(unsigned int ms) {
20000158:	b580      	push	{r7, lr}
2000015a:	b082      	sub	sp, #8
2000015c:	af00      	add	r7, sp, #0
2000015e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_mikro(ms);
20000160:	687b      	ldr	r3, [r7, #4]
20000162:	0018      	movs	r0, r3
20000164:	f7ff ffe2 	bl	2000012c <delay_mikro>
	#else
		delay_mikro(1000 * ms);
	#endif
}
20000168:	46c0      	nop			; (mov r8, r8)
2000016a:	46bd      	mov	sp, r7
2000016c:	b002      	add	sp, #8
2000016e:	bd80      	pop	{r7, pc}

20000170 <delay_500ns>:

void delay_500ns(void) {
20000170:	b580      	push	{r7, lr}
20000172:	af00      	add	r7, sp, #0
	delay_250ns();
20000174:	f7ff ffb8 	bl	200000e8 <delay_250ns>
	delay_250ns();
20000178:	f7ff ffb6 	bl	200000e8 <delay_250ns>
}
2000017c:	46c0      	nop			; (mov r8, r8)
2000017e:	46bd      	mov	sp, r7
20000180:	bd80      	pop	{r7, pc}
20000182:	46c0      	nop			; (mov r8, r8)

20000184 <graphic_ctrl_bit_set>:
#include "graphic.h"

void graphic_ctrl_bit_set(uint8_t x) {
20000184:	b580      	push	{r7, lr}
20000186:	b082      	sub	sp, #8
20000188:	af00      	add	r7, sp, #0
2000018a:	0002      	movs	r2, r0
2000018c:	1dfb      	adds	r3, r7, #7
2000018e:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW |= (x & ~B_SELECT);
20000190:	4909      	ldr	r1, [pc, #36]	; (200001b8 <graphic_ctrl_bit_set+0x34>)
20000192:	4b09      	ldr	r3, [pc, #36]	; (200001b8 <graphic_ctrl_bit_set+0x34>)
20000194:	781b      	ldrb	r3, [r3, #0]
20000196:	b2db      	uxtb	r3, r3
20000198:	b25a      	sxtb	r2, r3
2000019a:	1dfb      	adds	r3, r7, #7
2000019c:	781b      	ldrb	r3, [r3, #0]
2000019e:	b25b      	sxtb	r3, r3
200001a0:	2004      	movs	r0, #4
200001a2:	4383      	bics	r3, r0
200001a4:	b25b      	sxtb	r3, r3
200001a6:	4313      	orrs	r3, r2
200001a8:	b25b      	sxtb	r3, r3
200001aa:	b2db      	uxtb	r3, r3
200001ac:	700b      	strb	r3, [r1, #0]
}
200001ae:	46c0      	nop			; (mov r8, r8)
200001b0:	46bd      	mov	sp, r7
200001b2:	b002      	add	sp, #8
200001b4:	bd80      	pop	{r7, pc}
200001b6:	46c0      	nop			; (mov r8, r8)
200001b8:	40021014 	andmi	r1, r2, r4, lsl r0

200001bc <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x) {
200001bc:	b580      	push	{r7, lr}
200001be:	b082      	sub	sp, #8
200001c0:	af00      	add	r7, sp, #0
200001c2:	0002      	movs	r2, r0
200001c4:	1dfb      	adds	r3, r7, #7
200001c6:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW &= ~x;
200001c8:	4908      	ldr	r1, [pc, #32]	; (200001ec <graphic_ctrl_bit_clear+0x30>)
200001ca:	4b08      	ldr	r3, [pc, #32]	; (200001ec <graphic_ctrl_bit_clear+0x30>)
200001cc:	781b      	ldrb	r3, [r3, #0]
200001ce:	b2db      	uxtb	r3, r3
200001d0:	b25b      	sxtb	r3, r3
200001d2:	1dfa      	adds	r2, r7, #7
200001d4:	7812      	ldrb	r2, [r2, #0]
200001d6:	b252      	sxtb	r2, r2
200001d8:	43d2      	mvns	r2, r2
200001da:	b252      	sxtb	r2, r2
200001dc:	4013      	ands	r3, r2
200001de:	b25b      	sxtb	r3, r3
200001e0:	b2db      	uxtb	r3, r3
200001e2:	700b      	strb	r3, [r1, #0]
}
200001e4:	46c0      	nop			; (mov r8, r8)
200001e6:	46bd      	mov	sp, r7
200001e8:	b002      	add	sp, #8
200001ea:	bd80      	pop	{r7, pc}
200001ec:	40021014 	andmi	r1, r2, r4, lsl r0

200001f0 <select_cotroller>:

void select_cotroller(uint8_t controller) {
200001f0:	b580      	push	{r7, lr}
200001f2:	b082      	sub	sp, #8
200001f4:	af00      	add	r7, sp, #0
200001f6:	0002      	movs	r2, r0
200001f8:	1dfb      	adds	r3, r7, #7
200001fa:	701a      	strb	r2, [r3, #0]
	if(controller == 0) {
200001fc:	1dfb      	adds	r3, r7, #7
200001fe:	781b      	ldrb	r3, [r3, #0]
20000200:	2b00      	cmp	r3, #0
20000202:	d106      	bne.n	20000212 <select_cotroller+0x22>
		graphic_ctrl_bit_clear(B_CS1);
20000204:	2008      	movs	r0, #8
20000206:	f7ff ffd9 	bl	200001bc <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_clear(B_CS2);
2000020a:	2010      	movs	r0, #16
2000020c:	f7ff ffd6 	bl	200001bc <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_clear(B_CS2);
	} else if(controller == B_CS2) {
		graphic_ctrl_bit_clear(B_CS1);
		graphic_ctrl_bit_set(B_CS2);
	}
}
20000210:	e01f      	b.n	20000252 <select_cotroller+0x62>
	} else if(controller == (B_CS1 | B_CS2)) {
20000212:	1dfb      	adds	r3, r7, #7
20000214:	781b      	ldrb	r3, [r3, #0]
20000216:	2b18      	cmp	r3, #24
20000218:	d106      	bne.n	20000228 <select_cotroller+0x38>
		graphic_ctrl_bit_set(B_CS1);
2000021a:	2008      	movs	r0, #8
2000021c:	f7ff ffb2 	bl	20000184 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_set(B_CS2);
20000220:	2010      	movs	r0, #16
20000222:	f7ff ffaf 	bl	20000184 <graphic_ctrl_bit_set>
}
20000226:	e014      	b.n	20000252 <select_cotroller+0x62>
	} else if(controller == B_CS1) {
20000228:	1dfb      	adds	r3, r7, #7
2000022a:	781b      	ldrb	r3, [r3, #0]
2000022c:	2b08      	cmp	r3, #8
2000022e:	d106      	bne.n	2000023e <select_cotroller+0x4e>
		graphic_ctrl_bit_set(B_CS1);
20000230:	2008      	movs	r0, #8
20000232:	f7ff ffa7 	bl	20000184 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_clear(B_CS2);
20000236:	2010      	movs	r0, #16
20000238:	f7ff ffc0 	bl	200001bc <graphic_ctrl_bit_clear>
}
2000023c:	e009      	b.n	20000252 <select_cotroller+0x62>
	} else if(controller == B_CS2) {
2000023e:	1dfb      	adds	r3, r7, #7
20000240:	781b      	ldrb	r3, [r3, #0]
20000242:	2b10      	cmp	r3, #16
20000244:	d105      	bne.n	20000252 <select_cotroller+0x62>
		graphic_ctrl_bit_clear(B_CS1);
20000246:	2008      	movs	r0, #8
20000248:	f7ff ffb8 	bl	200001bc <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_set(B_CS2);
2000024c:	2010      	movs	r0, #16
2000024e:	f7ff ff99 	bl	20000184 <graphic_ctrl_bit_set>
}
20000252:	46c0      	nop			; (mov r8, r8)
20000254:	46bd      	mov	sp, r7
20000256:	b002      	add	sp, #8
20000258:	bd80      	pop	{r7, pc}

2000025a <graphic_wait_ready>:

void graphic_wait_ready() {
2000025a:	b580      	push	{r7, lr}
2000025c:	b082      	sub	sp, #8
2000025e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
20000260:	2040      	movs	r0, #64	; 0x40
20000262:	f7ff ffab 	bl	200001bc <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
20000266:	4b15      	ldr	r3, [pc, #84]	; (200002bc <graphic_wait_ready+0x62>)
20000268:	4a15      	ldr	r2, [pc, #84]	; (200002c0 <graphic_wait_ready+0x66>)
2000026a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
2000026c:	2001      	movs	r0, #1
2000026e:	f7ff ffa5 	bl	200001bc <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000272:	2002      	movs	r0, #2
20000274:	f7ff ff86 	bl	20000184 <graphic_ctrl_bit_set>
	delay_500ns();
20000278:	f7ff ff7a 	bl	20000170 <delay_500ns>
	while(1) { // Wait for display not to be busy
		graphic_ctrl_bit_set(B_E);
2000027c:	2040      	movs	r0, #64	; 0x40
2000027e:	f7ff ff81 	bl	20000184 <graphic_ctrl_bit_set>
		delay_500ns();
20000282:	f7ff ff75 	bl	20000170 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
20000286:	2040      	movs	r0, #64	; 0x40
20000288:	f7ff ff98 	bl	200001bc <graphic_ctrl_bit_clear>
		delay_500ns();		
2000028c:	f7ff ff70 	bl	20000170 <delay_500ns>
		unsigned char i = *GPIO_IDR_HIGH;
20000290:	4a0c      	ldr	r2, [pc, #48]	; (200002c4 <graphic_wait_ready+0x6a>)
20000292:	1dfb      	adds	r3, r7, #7
20000294:	7812      	ldrb	r2, [r2, #0]
20000296:	701a      	strb	r2, [r3, #0]
		if((*GPIO_IDR_HIGH & LCD_BUSY) == 0) {
20000298:	4b0a      	ldr	r3, [pc, #40]	; (200002c4 <graphic_wait_ready+0x6a>)
2000029a:	781b      	ldrb	r3, [r3, #0]
2000029c:	b2db      	uxtb	r3, r3
2000029e:	b25b      	sxtb	r3, r3
200002a0:	2b00      	cmp	r3, #0
200002a2:	da00      	bge.n	200002a6 <graphic_wait_ready+0x4c>
	while(1) { // Wait for display not to be busy
200002a4:	e7ea      	b.n	2000027c <graphic_wait_ready+0x22>
			break;
200002a6:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
200002a8:	2040      	movs	r0, #64	; 0x40
200002aa:	f7ff ff6b 	bl	20000184 <graphic_ctrl_bit_set>
	*GPIO_MODER = 0x55555555;
200002ae:	4b03      	ldr	r3, [pc, #12]	; (200002bc <graphic_wait_ready+0x62>)
200002b0:	4a05      	ldr	r2, [pc, #20]	; (200002c8 <graphic_wait_ready+0x6e>)
200002b2:	601a      	str	r2, [r3, #0]
}
200002b4:	46c0      	nop			; (mov r8, r8)
200002b6:	46bd      	mov	sp, r7
200002b8:	b002      	add	sp, #8
200002ba:	bd80      	pop	{r7, pc}
200002bc:	40021000 	andmi	r1, r2, r0
200002c0:	00005555 	andeq	r5, r0, r5, asr r5
200002c4:	40021011 	andmi	r1, r2, r1, lsl r0
200002c8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002cc <graphic_read>:

unsigned char graphic_read(unsigned char controller) {
200002cc:	b580      	push	{r7, lr}
200002ce:	b084      	sub	sp, #16
200002d0:	af00      	add	r7, sp, #0
200002d2:	0002      	movs	r2, r0
200002d4:	1dfb      	adds	r3, r7, #7
200002d6:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200002d8:	2040      	movs	r0, #64	; 0x40
200002da:	f7ff ff6f 	bl	200001bc <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
200002de:	4b1b      	ldr	r3, [pc, #108]	; (2000034c <graphic_read+0x80>)
200002e0:	4a1b      	ldr	r2, [pc, #108]	; (20000350 <graphic_read+0x84>)
200002e2:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
200002e4:	2003      	movs	r0, #3
200002e6:	f7ff ff4d 	bl	20000184 <graphic_ctrl_bit_set>
	select_cotroller(controller);
200002ea:	1dfb      	adds	r3, r7, #7
200002ec:	781b      	ldrb	r3, [r3, #0]
200002ee:	0018      	movs	r0, r3
200002f0:	f7ff ff7e 	bl	200001f0 <select_cotroller>
	delay_500ns();
200002f4:	f7ff ff3c 	bl	20000170 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002f8:	2040      	movs	r0, #64	; 0x40
200002fa:	f7ff ff43 	bl	20000184 <graphic_ctrl_bit_set>
	delay_500ns();
200002fe:	f7ff ff37 	bl	20000170 <delay_500ns>
	unsigned char RV = *GPIO_IDR_HIGH;
20000302:	4a14      	ldr	r2, [pc, #80]	; (20000354 <graphic_read+0x88>)
20000304:	230f      	movs	r3, #15
20000306:	18fb      	adds	r3, r7, r3
20000308:	7812      	ldrb	r2, [r2, #0]
2000030a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000030c:	2040      	movs	r0, #64	; 0x40
2000030e:	f7ff ff55 	bl	200001bc <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x55555555;
20000312:	4b0e      	ldr	r3, [pc, #56]	; (2000034c <graphic_read+0x80>)
20000314:	4a10      	ldr	r2, [pc, #64]	; (20000358 <graphic_read+0x8c>)
20000316:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1) {
20000318:	1dfb      	adds	r3, r7, #7
2000031a:	781b      	ldrb	r3, [r3, #0]
2000031c:	2b08      	cmp	r3, #8
2000031e:	d104      	bne.n	2000032a <graphic_read+0x5e>
		select_cotroller(B_CS1);
20000320:	2008      	movs	r0, #8
20000322:	f7ff ff65 	bl	200001f0 <select_cotroller>
		graphic_wait_ready();
20000326:	f7ff ff98 	bl	2000025a <graphic_wait_ready>
	}
	if(controller == B_CS2) {
2000032a:	1dfb      	adds	r3, r7, #7
2000032c:	781b      	ldrb	r3, [r3, #0]
2000032e:	2b10      	cmp	r3, #16
20000330:	d104      	bne.n	2000033c <graphic_read+0x70>
		select_cotroller(B_CS2);
20000332:	2010      	movs	r0, #16
20000334:	f7ff ff5c 	bl	200001f0 <select_cotroller>
		graphic_wait_ready();
20000338:	f7ff ff8f 	bl	2000025a <graphic_wait_ready>
	}
	return RV;
2000033c:	230f      	movs	r3, #15
2000033e:	18fb      	adds	r3, r7, r3
20000340:	781b      	ldrb	r3, [r3, #0]
}
20000342:	0018      	movs	r0, r3
20000344:	46bd      	mov	sp, r7
20000346:	b004      	add	sp, #16
20000348:	bd80      	pop	{r7, pc}
2000034a:	46c0      	nop			; (mov r8, r8)
2000034c:	40021000 	andmi	r1, r2, r0
20000350:	00005555 	andeq	r5, r0, r5, asr r5
20000354:	40021011 	andmi	r1, r2, r1, lsl r0
20000358:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000035c <graphic_write>:

void graphic_write(unsigned char value, unsigned char controller) {
2000035c:	b580      	push	{r7, lr}
2000035e:	b082      	sub	sp, #8
20000360:	af00      	add	r7, sp, #0
20000362:	0002      	movs	r2, r0
20000364:	1dfb      	adds	r3, r7, #7
20000366:	701a      	strb	r2, [r3, #0]
20000368:	1dbb      	adds	r3, r7, #6
2000036a:	1c0a      	adds	r2, r1, #0
2000036c:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_HIGH = value;
2000036e:	4a1a      	ldr	r2, [pc, #104]	; (200003d8 <graphic_write+0x7c>)
20000370:	1dfb      	adds	r3, r7, #7
20000372:	781b      	ldrb	r3, [r3, #0]
20000374:	7013      	strb	r3, [r2, #0]
	select_cotroller(controller);
20000376:	1dbb      	adds	r3, r7, #6
20000378:	781b      	ldrb	r3, [r3, #0]
2000037a:	0018      	movs	r0, r3
2000037c:	f7ff ff38 	bl	200001f0 <select_cotroller>
	delay_500ns();
20000380:	f7ff fef6 	bl	20000170 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000384:	2040      	movs	r0, #64	; 0x40
20000386:	f7ff fefd 	bl	20000184 <graphic_ctrl_bit_set>
	delay_500ns();
2000038a:	f7ff fef1 	bl	20000170 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000038e:	2040      	movs	r0, #64	; 0x40
20000390:	f7ff ff14 	bl	200001bc <graphic_ctrl_bit_clear>
	
	//Kanske inte ska vara så här för this statement
	if(controller & B_CS1) {
20000394:	1dbb      	adds	r3, r7, #6
20000396:	781b      	ldrb	r3, [r3, #0]
20000398:	2208      	movs	r2, #8
2000039a:	4013      	ands	r3, r2
2000039c:	d004      	beq.n	200003a8 <graphic_write+0x4c>
		select_cotroller(B_CS1);
2000039e:	2008      	movs	r0, #8
200003a0:	f7ff ff26 	bl	200001f0 <select_cotroller>
		graphic_wait_ready();
200003a4:	f7ff ff59 	bl	2000025a <graphic_wait_ready>
	}
	
	if(controller & B_CS2) {
200003a8:	1dbb      	adds	r3, r7, #6
200003aa:	781b      	ldrb	r3, [r3, #0]
200003ac:	2210      	movs	r2, #16
200003ae:	4013      	ands	r3, r2
200003b0:	d004      	beq.n	200003bc <graphic_write+0x60>
		select_cotroller(B_CS2);
200003b2:	2010      	movs	r0, #16
200003b4:	f7ff ff1c 	bl	200001f0 <select_cotroller>
		graphic_wait_ready();
200003b8:	f7ff ff4f 	bl	2000025a <graphic_wait_ready>
	}
	
	*GPIO_ODR_HIGH = 0;
200003bc:	4b06      	ldr	r3, [pc, #24]	; (200003d8 <graphic_write+0x7c>)
200003be:	2200      	movs	r2, #0
200003c0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
200003c2:	2040      	movs	r0, #64	; 0x40
200003c4:	f7ff fede 	bl	20000184 <graphic_ctrl_bit_set>
	select_cotroller(0);
200003c8:	2000      	movs	r0, #0
200003ca:	f7ff ff11 	bl	200001f0 <select_cotroller>
}
200003ce:	46c0      	nop			; (mov r8, r8)
200003d0:	46bd      	mov	sp, r7
200003d2:	b002      	add	sp, #8
200003d4:	bd80      	pop	{r7, pc}
200003d6:	46c0      	nop			; (mov r8, r8)
200003d8:	40021015 	andmi	r1, r2, r5, lsl r0

200003dc <graphic_write_command>:

void graphic_write_command(unsigned char command, unsigned char controller) {
200003dc:	b580      	push	{r7, lr}
200003de:	b082      	sub	sp, #8
200003e0:	af00      	add	r7, sp, #0
200003e2:	0002      	movs	r2, r0
200003e4:	1dfb      	adds	r3, r7, #7
200003e6:	701a      	strb	r2, [r3, #0]
200003e8:	1dbb      	adds	r3, r7, #6
200003ea:	1c0a      	adds	r2, r1, #0
200003ec:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003ee:	2040      	movs	r0, #64	; 0x40
200003f0:	f7ff fee4 	bl	200001bc <graphic_ctrl_bit_clear>
	select_cotroller(controller);
200003f4:	1dbb      	adds	r3, r7, #6
200003f6:	781b      	ldrb	r3, [r3, #0]
200003f8:	0018      	movs	r0, r3
200003fa:	f7ff fef9 	bl	200001f0 <select_cotroller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200003fe:	2003      	movs	r0, #3
20000400:	f7ff fedc 	bl	200001bc <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000404:	1dbb      	adds	r3, r7, #6
20000406:	781a      	ldrb	r2, [r3, #0]
20000408:	1dfb      	adds	r3, r7, #7
2000040a:	781b      	ldrb	r3, [r3, #0]
2000040c:	0011      	movs	r1, r2
2000040e:	0018      	movs	r0, r3
20000410:	f7ff ffa4 	bl	2000035c <graphic_write>
}
20000414:	46c0      	nop			; (mov r8, r8)
20000416:	46bd      	mov	sp, r7
20000418:	b002      	add	sp, #8
2000041a:	bd80      	pop	{r7, pc}

2000041c <graphic_write_data>:

void graphic_write_data(unsigned char data, unsigned char controller) {
2000041c:	b580      	push	{r7, lr}
2000041e:	b082      	sub	sp, #8
20000420:	af00      	add	r7, sp, #0
20000422:	0002      	movs	r2, r0
20000424:	1dfb      	adds	r3, r7, #7
20000426:	701a      	strb	r2, [r3, #0]
20000428:	1dbb      	adds	r3, r7, #6
2000042a:	1c0a      	adds	r2, r1, #0
2000042c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000042e:	2040      	movs	r0, #64	; 0x40
20000430:	f7ff fec4 	bl	200001bc <graphic_ctrl_bit_clear>
	select_cotroller(controller);
20000434:	1dbb      	adds	r3, r7, #6
20000436:	781b      	ldrb	r3, [r3, #0]
20000438:	0018      	movs	r0, r3
2000043a:	f7ff fed9 	bl	200001f0 <select_cotroller>
	graphic_ctrl_bit_set(B_RS);
2000043e:	2001      	movs	r0, #1
20000440:	f7ff fea0 	bl	20000184 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000444:	2002      	movs	r0, #2
20000446:	f7ff feb9 	bl	200001bc <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000044a:	1dbb      	adds	r3, r7, #6
2000044c:	781a      	ldrb	r2, [r3, #0]
2000044e:	1dfb      	adds	r3, r7, #7
20000450:	781b      	ldrb	r3, [r3, #0]
20000452:	0011      	movs	r1, r2
20000454:	0018      	movs	r0, r3
20000456:	f7ff ff81 	bl	2000035c <graphic_write>
}
2000045a:	46c0      	nop			; (mov r8, r8)
2000045c:	46bd      	mov	sp, r7
2000045e:	b002      	add	sp, #8
20000460:	bd80      	pop	{r7, pc}

20000462 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char controller) {
20000462:	b580      	push	{r7, lr}
20000464:	b082      	sub	sp, #8
20000466:	af00      	add	r7, sp, #0
20000468:	0002      	movs	r2, r0
2000046a:	1dfb      	adds	r3, r7, #7
2000046c:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
2000046e:	1dfb      	adds	r3, r7, #7
20000470:	781b      	ldrb	r3, [r3, #0]
20000472:	0018      	movs	r0, r3
20000474:	f7ff ff2a 	bl	200002cc <graphic_read>
	return graphic_read(controller);
20000478:	1dfb      	adds	r3, r7, #7
2000047a:	781b      	ldrb	r3, [r3, #0]
2000047c:	0018      	movs	r0, r3
2000047e:	f7ff ff25 	bl	200002cc <graphic_read>
20000482:	0003      	movs	r3, r0
}
20000484:	0018      	movs	r0, r3
20000486:	46bd      	mov	sp, r7
20000488:	b002      	add	sp, #8
2000048a:	bd80      	pop	{r7, pc}

2000048c <graphic_initalize>:

void graphic_initalize(void) {
2000048c:	b580      	push	{r7, lr}
2000048e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000490:	2040      	movs	r0, #64	; 0x40
20000492:	f7ff fe77 	bl	20000184 <graphic_ctrl_bit_set>
	delay_mikro(10);
20000496:	200a      	movs	r0, #10
20000498:	f7ff fe48 	bl	2000012c <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000049c:	2078      	movs	r0, #120	; 0x78
2000049e:	f7ff fe8d 	bl	200001bc <graphic_ctrl_bit_clear>
	delay_milli(30);
200004a2:	201e      	movs	r0, #30
200004a4:	f7ff fe58 	bl	20000158 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200004a8:	2020      	movs	r0, #32
200004aa:	f7ff fe6b 	bl	20000184 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200004ae:	2118      	movs	r1, #24
200004b0:	203e      	movs	r0, #62	; 0x3e
200004b2:	f7ff ff93 	bl	200003dc <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200004b6:	2118      	movs	r1, #24
200004b8:	203f      	movs	r0, #63	; 0x3f
200004ba:	f7ff ff8f 	bl	200003dc <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
200004be:	2118      	movs	r1, #24
200004c0:	20c0      	movs	r0, #192	; 0xc0
200004c2:	f7ff ff8b 	bl	200003dc <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200004c6:	2118      	movs	r1, #24
200004c8:	2040      	movs	r0, #64	; 0x40
200004ca:	f7ff ff87 	bl	200003dc <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
200004ce:	2118      	movs	r1, #24
200004d0:	20b8      	movs	r0, #184	; 0xb8
200004d2:	f7ff ff83 	bl	200003dc <graphic_write_command>
	select_cotroller(0);
200004d6:	2000      	movs	r0, #0
200004d8:	f7ff fe8a 	bl	200001f0 <select_cotroller>
}
200004dc:	46c0      	nop			; (mov r8, r8)
200004de:	46bd      	mov	sp, r7
200004e0:	bd80      	pop	{r7, pc}

200004e2 <graphic_clear_screen>:

void graphic_clear_screen(void) {
200004e2:	b580      	push	{r7, lr}
200004e4:	b082      	sub	sp, #8
200004e6:	af00      	add	r7, sp, #0
	for(int page = 0; page <= 7; page++) {
200004e8:	2300      	movs	r3, #0
200004ea:	607b      	str	r3, [r7, #4]
200004ec:	e01e      	b.n	2000052c <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
200004ee:	687b      	ldr	r3, [r7, #4]
200004f0:	b25b      	sxtb	r3, r3
200004f2:	2248      	movs	r2, #72	; 0x48
200004f4:	4252      	negs	r2, r2
200004f6:	4313      	orrs	r3, r2
200004f8:	b25b      	sxtb	r3, r3
200004fa:	b2db      	uxtb	r3, r3
200004fc:	2118      	movs	r1, #24
200004fe:	0018      	movs	r0, r3
20000500:	f7ff ff6c 	bl	200003dc <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000504:	2118      	movs	r1, #24
20000506:	2040      	movs	r0, #64	; 0x40
20000508:	f7ff ff68 	bl	200003dc <graphic_write_command>
		for(int add = 0; add <= 63; add++) {
2000050c:	2300      	movs	r3, #0
2000050e:	603b      	str	r3, [r7, #0]
20000510:	e006      	b.n	20000520 <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
20000512:	2118      	movs	r1, #24
20000514:	2000      	movs	r0, #0
20000516:	f7ff ff81 	bl	2000041c <graphic_write_data>
		for(int add = 0; add <= 63; add++) {
2000051a:	683b      	ldr	r3, [r7, #0]
2000051c:	3301      	adds	r3, #1
2000051e:	603b      	str	r3, [r7, #0]
20000520:	683b      	ldr	r3, [r7, #0]
20000522:	2b3f      	cmp	r3, #63	; 0x3f
20000524:	ddf5      	ble.n	20000512 <graphic_clear_screen+0x30>
	for(int page = 0; page <= 7; page++) {
20000526:	687b      	ldr	r3, [r7, #4]
20000528:	3301      	adds	r3, #1
2000052a:	607b      	str	r3, [r7, #4]
2000052c:	687b      	ldr	r3, [r7, #4]
2000052e:	2b07      	cmp	r3, #7
20000530:	dddd      	ble.n	200004ee <graphic_clear_screen+0xc>
		}
	}
}
20000532:	46c0      	nop			; (mov r8, r8)
20000534:	46bd      	mov	sp, r7
20000536:	b002      	add	sp, #8
20000538:	bd80      	pop	{r7, pc}

2000053a <pixel>:


void pixel(unsigned char x, unsigned char y, unsigned char set) {
2000053a:	b590      	push	{r4, r7, lr}
2000053c:	b085      	sub	sp, #20
2000053e:	af00      	add	r7, sp, #0
20000540:	0004      	movs	r4, r0
20000542:	0008      	movs	r0, r1
20000544:	0011      	movs	r1, r2
20000546:	1dfb      	adds	r3, r7, #7
20000548:	1c22      	adds	r2, r4, #0
2000054a:	701a      	strb	r2, [r3, #0]
2000054c:	1dbb      	adds	r3, r7, #6
2000054e:	1c02      	adds	r2, r0, #0
20000550:	701a      	strb	r2, [r3, #0]
20000552:	1d7b      	adds	r3, r7, #5
20000554:	1c0a      	adds	r2, r1, #0
20000556:	701a      	strb	r2, [r3, #0]
	if(x < 0 || y < 0) return;
	if(x > 127 || y > 63) return;
20000558:	1dfb      	adds	r3, r7, #7
2000055a:	781b      	ldrb	r3, [r3, #0]
2000055c:	b25b      	sxtb	r3, r3
2000055e:	2b00      	cmp	r3, #0
20000560:	da00      	bge.n	20000564 <pixel+0x2a>
20000562:	e0ae      	b.n	200006c2 <pixel+0x188>
20000564:	1dbb      	adds	r3, r7, #6
20000566:	781b      	ldrb	r3, [r3, #0]
20000568:	2b3f      	cmp	r3, #63	; 0x3f
2000056a:	d900      	bls.n	2000056e <pixel+0x34>
2000056c:	e0a9      	b.n	200006c2 <pixel+0x188>
	unsigned char mask;
	unsigned char index = y / 8;
2000056e:	230d      	movs	r3, #13
20000570:	18fb      	adds	r3, r7, r3
20000572:	1dba      	adds	r2, r7, #6
20000574:	7812      	ldrb	r2, [r2, #0]
20000576:	08d2      	lsrs	r2, r2, #3
20000578:	701a      	strb	r2, [r3, #0]
	
	switch(y % 8) {
2000057a:	1dbb      	adds	r3, r7, #6
2000057c:	781b      	ldrb	r3, [r3, #0]
2000057e:	2207      	movs	r2, #7
20000580:	4013      	ands	r3, r2
20000582:	2b07      	cmp	r3, #7
20000584:	d82c      	bhi.n	200005e0 <pixel+0xa6>
20000586:	009a      	lsls	r2, r3, #2
20000588:	4b50      	ldr	r3, [pc, #320]	; (200006cc <pixel+0x192>)
2000058a:	18d3      	adds	r3, r2, r3
2000058c:	681b      	ldr	r3, [r3, #0]
2000058e:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000590:	230f      	movs	r3, #15
20000592:	18fb      	adds	r3, r7, r3
20000594:	2201      	movs	r2, #1
20000596:	701a      	strb	r2, [r3, #0]
20000598:	e022      	b.n	200005e0 <pixel+0xa6>
		case 1: mask = 2; break;
2000059a:	230f      	movs	r3, #15
2000059c:	18fb      	adds	r3, r7, r3
2000059e:	2202      	movs	r2, #2
200005a0:	701a      	strb	r2, [r3, #0]
200005a2:	e01d      	b.n	200005e0 <pixel+0xa6>
		case 2: mask = 4; break;
200005a4:	230f      	movs	r3, #15
200005a6:	18fb      	adds	r3, r7, r3
200005a8:	2204      	movs	r2, #4
200005aa:	701a      	strb	r2, [r3, #0]
200005ac:	e018      	b.n	200005e0 <pixel+0xa6>
		case 3: mask = 8; break;
200005ae:	230f      	movs	r3, #15
200005b0:	18fb      	adds	r3, r7, r3
200005b2:	2208      	movs	r2, #8
200005b4:	701a      	strb	r2, [r3, #0]
200005b6:	e013      	b.n	200005e0 <pixel+0xa6>
		case 4: mask = 16; break;
200005b8:	230f      	movs	r3, #15
200005ba:	18fb      	adds	r3, r7, r3
200005bc:	2210      	movs	r2, #16
200005be:	701a      	strb	r2, [r3, #0]
200005c0:	e00e      	b.n	200005e0 <pixel+0xa6>
		case 5: mask = 32; break;
200005c2:	230f      	movs	r3, #15
200005c4:	18fb      	adds	r3, r7, r3
200005c6:	2220      	movs	r2, #32
200005c8:	701a      	strb	r2, [r3, #0]
200005ca:	e009      	b.n	200005e0 <pixel+0xa6>
		case 6: mask = 64; break;
200005cc:	230f      	movs	r3, #15
200005ce:	18fb      	adds	r3, r7, r3
200005d0:	2240      	movs	r2, #64	; 0x40
200005d2:	701a      	strb	r2, [r3, #0]
200005d4:	e004      	b.n	200005e0 <pixel+0xa6>
		case 7: mask = 128; break;
200005d6:	230f      	movs	r3, #15
200005d8:	18fb      	adds	r3, r7, r3
200005da:	2280      	movs	r2, #128	; 0x80
200005dc:	701a      	strb	r2, [r3, #0]
200005de:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0) {
200005e0:	1d7b      	adds	r3, r7, #5
200005e2:	781b      	ldrb	r3, [r3, #0]
200005e4:	2b00      	cmp	r3, #0
200005e6:	d106      	bne.n	200005f6 <pixel+0xbc>
		mask = ~mask;
200005e8:	230f      	movs	r3, #15
200005ea:	18fb      	adds	r3, r7, r3
200005ec:	220f      	movs	r2, #15
200005ee:	18ba      	adds	r2, r7, r2
200005f0:	7812      	ldrb	r2, [r2, #0]
200005f2:	43d2      	mvns	r2, r2
200005f4:	701a      	strb	r2, [r3, #0]
	}
	
	unsigned char controller;
	if(x > 63) {
200005f6:	1dfb      	adds	r3, r7, #7
200005f8:	781b      	ldrb	r3, [r3, #0]
200005fa:	2b3f      	cmp	r3, #63	; 0x3f
200005fc:	d909      	bls.n	20000612 <pixel+0xd8>
		controller = B_CS2;
200005fe:	230e      	movs	r3, #14
20000600:	18fb      	adds	r3, r7, r3
20000602:	2210      	movs	r2, #16
20000604:	701a      	strb	r2, [r3, #0]
		x = x - 64;
20000606:	1dfb      	adds	r3, r7, #7
20000608:	1dfa      	adds	r2, r7, #7
2000060a:	7812      	ldrb	r2, [r2, #0]
2000060c:	3a40      	subs	r2, #64	; 0x40
2000060e:	701a      	strb	r2, [r3, #0]
20000610:	e003      	b.n	2000061a <pixel+0xe0>
	} else {
		controller = B_CS1;
20000612:	230e      	movs	r3, #14
20000614:	18fb      	adds	r3, r7, r3
20000616:	2208      	movs	r2, #8
20000618:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x, controller);
2000061a:	1dfb      	adds	r3, r7, #7
2000061c:	781b      	ldrb	r3, [r3, #0]
2000061e:	2240      	movs	r2, #64	; 0x40
20000620:	4313      	orrs	r3, r2
20000622:	b2da      	uxtb	r2, r3
20000624:	230e      	movs	r3, #14
20000626:	18fb      	adds	r3, r7, r3
20000628:	781b      	ldrb	r3, [r3, #0]
2000062a:	0019      	movs	r1, r3
2000062c:	0010      	movs	r0, r2
2000062e:	f7ff fed5 	bl	200003dc <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000632:	230d      	movs	r3, #13
20000634:	18fb      	adds	r3, r7, r3
20000636:	781b      	ldrb	r3, [r3, #0]
20000638:	2248      	movs	r2, #72	; 0x48
2000063a:	4252      	negs	r2, r2
2000063c:	4313      	orrs	r3, r2
2000063e:	b2da      	uxtb	r2, r3
20000640:	230e      	movs	r3, #14
20000642:	18fb      	adds	r3, r7, r3
20000644:	781b      	ldrb	r3, [r3, #0]
20000646:	0019      	movs	r1, r3
20000648:	0010      	movs	r0, r2
2000064a:	f7ff fec7 	bl	200003dc <graphic_write_command>
	unsigned char temp = graphic_read_data(controller);
2000064e:	230c      	movs	r3, #12
20000650:	18fc      	adds	r4, r7, r3
20000652:	230e      	movs	r3, #14
20000654:	18fb      	adds	r3, r7, r3
20000656:	781b      	ldrb	r3, [r3, #0]
20000658:	0018      	movs	r0, r3
2000065a:	f7ff ff02 	bl	20000462 <graphic_read_data>
2000065e:	0003      	movs	r3, r0
20000660:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000662:	1dfb      	adds	r3, r7, #7
20000664:	781b      	ldrb	r3, [r3, #0]
20000666:	2240      	movs	r2, #64	; 0x40
20000668:	4313      	orrs	r3, r2
2000066a:	b2da      	uxtb	r2, r3
2000066c:	230e      	movs	r3, #14
2000066e:	18fb      	adds	r3, r7, r3
20000670:	781b      	ldrb	r3, [r3, #0]
20000672:	0019      	movs	r1, r3
20000674:	0010      	movs	r0, r2
20000676:	f7ff feb1 	bl	200003dc <graphic_write_command>
	
	if(set) {
2000067a:	1d7b      	adds	r3, r7, #5
2000067c:	781b      	ldrb	r3, [r3, #0]
2000067e:	2b00      	cmp	r3, #0
20000680:	d00a      	beq.n	20000698 <pixel+0x15e>
		mask = mask | temp;
20000682:	230f      	movs	r3, #15
20000684:	18fb      	adds	r3, r7, r3
20000686:	220f      	movs	r2, #15
20000688:	18b9      	adds	r1, r7, r2
2000068a:	220c      	movs	r2, #12
2000068c:	18ba      	adds	r2, r7, r2
2000068e:	7809      	ldrb	r1, [r1, #0]
20000690:	7812      	ldrb	r2, [r2, #0]
20000692:	430a      	orrs	r2, r1
20000694:	701a      	strb	r2, [r3, #0]
20000696:	e009      	b.n	200006ac <pixel+0x172>
	} else {
		mask = mask & temp;
20000698:	230f      	movs	r3, #15
2000069a:	18fb      	adds	r3, r7, r3
2000069c:	220f      	movs	r2, #15
2000069e:	18ba      	adds	r2, r7, r2
200006a0:	210c      	movs	r1, #12
200006a2:	1879      	adds	r1, r7, r1
200006a4:	7812      	ldrb	r2, [r2, #0]
200006a6:	7809      	ldrb	r1, [r1, #0]
200006a8:	400a      	ands	r2, r1
200006aa:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
200006ac:	230e      	movs	r3, #14
200006ae:	18fb      	adds	r3, r7, r3
200006b0:	781a      	ldrb	r2, [r3, #0]
200006b2:	230f      	movs	r3, #15
200006b4:	18fb      	adds	r3, r7, r3
200006b6:	781b      	ldrb	r3, [r3, #0]
200006b8:	0011      	movs	r1, r2
200006ba:	0018      	movs	r0, r3
200006bc:	f7ff feae 	bl	2000041c <graphic_write_data>
200006c0:	e000      	b.n	200006c4 <pixel+0x18a>
	if(x > 127 || y > 63) return;
200006c2:	46c0      	nop			; (mov r8, r8)
	
200006c4:	46bd      	mov	sp, r7
200006c6:	b005      	add	sp, #20
200006c8:	bd90      	pop	{r4, r7, pc}
200006ca:	46c0      	nop			; (mov r8, r8)
200006cc:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200006d0:	20000590 	mulcs	r0, r0, r5
200006d4:	2000059a 	mulcs	r0, sl, r5
200006d8:	200005a4 	andcs	r0, r0, r4, lsr #11
200006dc:	200005ae 	andcs	r0, r0, lr, lsr #11
200006e0:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
200006e4:	200005c2 	andcs	r0, r0, r2, asr #11
200006e8:	200005cc 	andcs	r0, r0, ip, asr #11
200006ec:	200005d6 	ldrdcs	r0, [r0], -r6

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000069 	andeq	r0, r0, r9, rrx
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000060 	andeq	r0, r0, r0, rrx
  10:	00000e0c 	andeq	r0, r0, ip, lsl #28
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	00000000 	andeq	r0, r0, r0
  28:	0000f803 	andeq	pc, r0, r3, lsl #16
  2c:	28170100 	ldmdacs	r7, {r8}
  30:	c0200000 	eorgt	r0, r0, r0
  34:	01000000 	mrseq	r0, (UNDEF: 0)
  38:	00004a9c 	muleq	r0, ip, sl
  3c:	00690400 	rsbeq	r0, r9, r0, lsl #8
  40:	00211801 	eoreq	r1, r1, r1, lsl #16
  44:	91020000 	mrsls	r0, (UNDEF: 2)
  48:	4f050077 	svcmi	0x00050077
  4c:	01000000 	mrseq	r0, (UNDEF: 0)
  50:	00001012 	andeq	r1, r0, r2, lsl r0
  54:	00001820 	andeq	r1, r0, r0, lsr #16
  58:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
  5c:	00000058 	andeq	r0, r0, r8, asr r0
  60:	00000801 	andeq	r0, r0, r1, lsl #16
  64:	000c2000 	andeq	r2, ip, r0
  68:	9c010000 	stcls	0, cr0, [r1], {-0}
  6c:	00008d00 	andeq	r8, r0, r0, lsl #26
  70:	5e000400 	cfcpyspl	mvf0, mvf0
  74:	04000000 	streq	r0, [r0], #-0
  78:	00006001 	andeq	r6, r0, r1
  7c:	01160c00 	tsteq	r6, r0, lsl #24
  80:	00e80000 	rsceq	r0, r8, r0
  84:	009a2000 	addseq	r2, sl, r0
  88:	00ce0000 	sbceq	r0, lr, r0
  8c:	61020000 	mrsvs	r0, (UNDEF: 2)
  90:	01000001 	tsteq	r0, r1
  94:	00017020 	andeq	r7, r1, r0, lsr #32
  98:	00001220 	andeq	r1, r0, r0, lsr #4
  9c:	039c0100 	orrseq	r0, ip, #0, 2
  a0:	000000fd 	strdeq	r0, [r0], -sp
  a4:	01581801 	cmpeq	r8, r1, lsl #16
  a8:	00182000 	andseq	r2, r8, r0
  ac:	9c010000 	stcls	0, cr0, [r1], {-0}
  b0:	00000055 	andeq	r0, r0, r5, asr r0
  b4:	00736d04 	rsbseq	r6, r3, r4, lsl #26
  b8:	00551801 	subseq	r1, r5, r1, lsl #16
  bc:	91020000 	mrsls	r0, (UNDEF: 2)
  c0:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
  c4:	00010907 	andeq	r0, r1, r7, lsl #18
  c8:	01550300 	cmpeq	r5, r0, lsl #6
  cc:	0f010000 	svceq	0x00010000
  d0:	2000012c 	andcs	r0, r0, ip, lsr #2
  d4:	0000002c 	andeq	r0, r0, ip, lsr #32
  d8:	007f9c01 	rsbseq	r9, pc, r1, lsl #24
  dc:	75040000 	strvc	r0, [r4, #-0]
  e0:	0f010073 	svceq	0x00010073
  e4:	00000055 	andeq	r0, r0, r5, asr r0
  e8:	00749102 	rsbseq	r9, r4, r2, lsl #2
  ec:	00016d06 	andeq	r6, r1, r6, lsl #26
  f0:	e8040100 	stmda	r4, {r8}
  f4:	44200000 	strtmi	r0, [r0], #-0
  f8:	01000000 	mrseq	r0, (UNDEF: 0)
  fc:	02d3009c 	sbcseq	r0, r3, #156	; 0x9c
 100:	00040000 	andeq	r0, r4, r0
 104:	000000d4 	ldrdeq	r0, [r0], -r4
 108:	00600104 	rsbeq	r0, r0, r4, lsl #2
 10c:	020c0000 	andeq	r0, ip, #0
 110:	84000002 	strhi	r0, [r0], #-2
 114:	4c200001 	stcmi	0, cr0, [r0], #-4
 118:	57000005 	strpl	r0, [r0, -r5]
 11c:	02000001 	andeq	r0, r0, #1
 120:	000001fa 	strdeq	r0, [r0], -sl
 124:	002c2002 	eoreq	r2, ip, r2
 128:	01030000 	mrseq	r0, (UNDEF: 3)
 12c:	00000008 	andeq	r0, r0, r8
 130:	01a10400 			; <UNDEFINED> instruction: 0x01a10400
 134:	8a010000 	bhi	4013c <startup-0x1ffbfec4>
 138:	2000053a 	andcs	r0, r0, sl, lsr r5
 13c:	00000196 	muleq	r0, r6, r1
 140:	00a79c01 	adceq	r9, r7, r1, lsl #24
 144:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
 148:	2c8a0100 	stfcss	f0, [sl], {0}
 14c:	02000000 	andeq	r0, r0, #0
 150:	79056791 	stmdbvc	r5, {r0, r4, r7, r8, r9, sl, sp, lr}
 154:	2c8a0100 	stfcss	f0, [sl], {0}
 158:	02000000 	andeq	r0, r0, #0
 15c:	73056691 	movwvc	r6, #22161	; 0x5691
 160:	01007465 	tsteq	r0, r5, ror #8
 164:	00002c8a 	andeq	r2, r0, sl, lsl #25
 168:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
 16c:	0001f506 	andeq	pc, r1, r6, lsl #10
 170:	2c8d0100 	stfcss	f0, [sp], {0}
 174:	02000000 	andeq	r0, r0, #0
 178:	56066f91 			; <UNDEFINED> instruction: 0x56066f91
 17c:	01000002 	tsteq	r0, r2
 180:	00002c8e 	andeq	r2, r0, lr, lsl #25
 184:	6d910200 	lfmvs	f0, 4, [r1]
 188:	0002b006 	andeq	fp, r2, r6
 18c:	2c9f0100 	ldfcss	f0, [pc], {0}
 190:	02000000 	andeq	r0, r0, #0
 194:	51066e91 			; <UNDEFINED> instruction: 0x51066e91
 198:	01000002 	tsteq	r0, r2
 19c:	00002ca9 	andeq	r2, r0, r9, lsr #25
 1a0:	6c910200 	lfmvs	f0, 4, [r1], {0}
 1a4:	029b0400 	addseq	r0, fp, #0, 8
 1a8:	7f010000 	svcvc	0x00010000
 1ac:	200004e2 	andcs	r0, r0, r2, ror #9
 1b0:	00000058 	andeq	r0, r0, r8, asr r0
 1b4:	00ed9c01 	rsceq	r9, sp, r1, lsl #24
 1b8:	e8070000 	stmda	r7, {}	; <UNPREDICTABLE>
 1bc:	4a200004 	bmi	8001d4 <startup-0x1f7ffe2c>
 1c0:	06000000 	streq	r0, [r0], -r0
 1c4:	0000027e 	andeq	r0, r0, lr, ror r2
 1c8:	00ed8001 	rsceq	r8, sp, r1
 1cc:	91020000 	mrsls	r0, (UNDEF: 2)
 1d0:	050c0774 	streq	r0, [ip, #-1908]	; 0xfffff88c
 1d4:	001a2000 	andseq	r2, sl, r0
 1d8:	61080000 	mrsvs	r0, (UNDEF: 8)
 1dc:	01006464 	tsteq	r0, r4, ror #8
 1e0:	0000ed83 	andeq	lr, r0, r3, lsl #27
 1e4:	70910200 	addsvc	r0, r1, r0, lsl #4
 1e8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 1ec:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 1f0:	83040074 	movwhi	r0, #16500	; 0x4074
 1f4:	01000002 	tsteq	r0, r2
 1f8:	00048c71 	andeq	r8, r4, r1, ror ip
 1fc:	00005620 	andeq	r5, r0, r0, lsr #12
 200:	289c0100 	ldmcs	ip, {r8}
 204:	0a000001 	beq	210 <startup-0x1ffffdf0>
 208:	00000155 	andeq	r0, r0, r5, asr r1
 20c:	00ed7301 	rsceq	r7, sp, r1, lsl #6
 210:	011a0000 	tsteq	sl, r0
 214:	000b0000 	andeq	r0, fp, r0
 218:	0000fd0c 	andeq	pc, r0, ip, lsl #26
 21c:	ed750100 	ldfe	f0, [r5, #-0]
 220:	0b000000 	bleq	228 <startup-0x1ffffdd8>
 224:	8f0d0000 	svchi	0x000d0000
 228:	01000001 	tsteq	r0, r1
 22c:	00002c6c 	andeq	r2, r0, ip, ror #24
 230:	00046200 	andeq	r6, r4, r0, lsl #4
 234:	00002a20 	andeq	r2, r0, r0, lsr #20
 238:	509c0100 	addspl	r0, ip, r0, lsl #2
 23c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 240:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 244:	002c6c01 	eoreq	r6, ip, r1, lsl #24
 248:	91020000 	mrsls	r0, (UNDEF: 2)
 24c:	e2040077 	and	r0, r4, #119	; 0x77
 250:	01000001 	tsteq	r0, r1
 254:	00041c64 	andeq	r1, r4, r4, ror #24
 258:	00004620 	andeq	r4, r0, r0, lsr #12
 25c:	829c0100 	addshi	r0, ip, #0, 2
 260:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 264:	0000019c 	muleq	r0, ip, r1
 268:	002c6401 	eoreq	r6, ip, r1, lsl #8
 26c:	91020000 	mrsls	r0, (UNDEF: 2)
 270:	02b00e77 	adcseq	r0, r0, #1904	; 0x770
 274:	64010000 	strvs	r0, [r1], #-0
 278:	0000002c 	andeq	r0, r0, ip, lsr #32
 27c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 280:	00017904 	andeq	r7, r1, r4, lsl #18
 284:	dc5d0100 	ldflee	f0, [sp], {-0}
 288:	40200003 	eormi	r0, r0, r3
 28c:	01000000 	mrseq	r0, (UNDEF: 0)
 290:	0001b49c 	muleq	r1, ip, r4
 294:	01870e00 	orreq	r0, r7, r0, lsl #28
 298:	5d010000 	stcpl	0, cr0, [r1, #-0]
 29c:	0000002c 	andeq	r0, r0, ip, lsr #32
 2a0:	0e779102 	expeqs	f1, f2
 2a4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 2a8:	002c5d01 	eoreq	r5, ip, r1, lsl #26
 2ac:	91020000 	mrsls	r0, (UNDEF: 2)
 2b0:	43040076 	movwmi	r0, #16502	; 0x4076
 2b4:	01000002 	tsteq	r0, r2
 2b8:	00035c45 	andeq	r5, r3, r5, asr #24
 2bc:	00008020 	andeq	r8, r0, r0, lsr #32
 2c0:	f39c0100 	vaddw.u16	q0, q6, d0
 2c4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 2c8:	00000295 	muleq	r0, r5, r2
 2cc:	002c4501 	eoreq	r4, ip, r1, lsl #10
 2d0:	91020000 	mrsls	r0, (UNDEF: 2)
 2d4:	02b00e77 	adcseq	r0, r0, #1904	; 0x770
 2d8:	45010000 	strmi	r0, [r1, #-0]
 2dc:	0000002c 	andeq	r0, r0, ip, lsr #32
 2e0:	0c769102 	ldfeqp	f1, [r6], #-8
 2e4:	00000161 	andeq	r0, r0, r1, ror #2
 2e8:	00ed2001 	rsceq	r2, sp, r1
 2ec:	000b0000 	andeq	r0, fp, r0
 2f0:	025c0d00 	subseq	r0, ip, #0, 26
 2f4:	2f010000 	svccs	0x00010000
 2f8:	0000002c 	andeq	r0, r0, ip, lsr #32
 2fc:	200002cc 	andcs	r0, r0, ip, asr #5
 300:	00000090 	muleq	r0, r0, r0
 304:	02399c01 	eorseq	r9, r9, #256	; 0x100
 308:	b00e0000 	andlt	r0, lr, r0
 30c:	01000002 	tsteq	r0, r2
 310:	00002c2f 	andeq	r2, r0, pc, lsr #24
 314:	6f910200 	svcvs	0x00910200
 318:	0001610a 	andeq	r6, r1, sl, lsl #2
 31c:	ed200100 	stfs	f0, [r0, #-0]
 320:	2b000000 	blcs	328 <startup-0x1ffffcd8>
 324:	0b000002 	bleq	334 <startup-0x1ffffccc>
 328:	56520800 	ldrbpl	r0, [r2], -r0, lsl #16
 32c:	2c370100 	ldfcss	f0, [r7], #-0
 330:	02000000 	andeq	r0, r0, #0
 334:	04007791 	streq	r7, [r0], #-1937	; 0xfffff86f
 338:	000001cf 	andeq	r0, r0, pc, asr #3
 33c:	025a1b01 	subseq	r1, sl, #1024	; 0x400
 340:	00722000 	rsbseq	r2, r2, r0
 344:	9c010000 	stcls	0, cr0, [r1], {-0}
 348:	00000272 	andeq	r0, r0, r2, ror r2
 34c:	0001610a 	andeq	r6, r1, sl, lsl #2
 350:	ed200100 	stfs	f0, [r0, #-0]
 354:	5f000000 	svcpl	0x00000000
 358:	0b000002 	bleq	368 <startup-0x1ffffc98>
 35c:	00180f00 	andseq	r0, r8, r0, lsl #30
 360:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
 364:	2c260100 	stfcss	f0, [r6], #-0
 368:	02000000 	andeq	r0, r0, #0
 36c:	00007791 	muleq	r0, r1, r7
 370:	0001a704 	andeq	sl, r1, r4, lsl #14
 374:	f00b0100 			; <UNDEFINED> instruction: 0xf00b0100
 378:	6a200001 	bvs	800384 <startup-0x1f7ffc7c>
 37c:	01000000 	mrseq	r0, (UNDEF: 0)
 380:	0002969c 	muleq	r2, ip, r6
 384:	02b00e00 	adcseq	r0, r0, #0, 28
 388:	0b010000 	bleq	40390 <startup-0x1ffbfc70>
 38c:	00000021 	andeq	r0, r0, r1, lsr #32
 390:	00779102 	rsbseq	r9, r7, r2, lsl #2
 394:	0001b810 	andeq	fp, r1, r0, lsl r8
 398:	bc070100 	stflts	f0, [r7], {-0}
 39c:	34200001 	strtcc	r0, [r0], #-1
 3a0:	01000000 	mrseq	r0, (UNDEF: 0)
 3a4:	0002b89c 	muleq	r2, ip, r8
 3a8:	00780500 	rsbseq	r0, r8, r0, lsl #10
 3ac:	00210701 	eoreq	r0, r1, r1, lsl #14
 3b0:	91020000 	mrsls	r0, (UNDEF: 2)
 3b4:	69110077 	ldmdbvs	r1, {r0, r1, r2, r4, r5, r6}
 3b8:	01000002 	tsteq	r0, r2
 3bc:	00018403 	andeq	r8, r1, r3, lsl #8
 3c0:	00003820 	andeq	r3, r0, r0, lsr #16
 3c4:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
 3c8:	03010078 	movweq	r0, #4216	; 0x1078
 3cc:	00000021 	andeq	r0, r0, r1, lsr #32
 3d0:	00779102 	rsbseq	r9, r7, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	3f012e03 	svccc	0x00012e03
  20:	3a0e0319 	bcc	380c8c <startup-0x1fc7f374>
  24:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  28:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  2c:	96184006 	ldrls	r4, [r8], -r6
  30:	13011942 	movwne	r1, #6466	; 0x1942
  34:	34040000 	strcc	r0, [r4], #-0
  38:	3a080300 	bcc	200c40 <startup-0x1fdff3c0>
  3c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  40:	00180213 	andseq	r0, r8, r3, lsl r2
  44:	002e0500 	eoreq	r0, lr, r0, lsl #10
  48:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	01111927 	tsteq	r1, r7, lsr #18
  54:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  58:	00194297 	mulseq	r9, r7, r2
  5c:	11010000 	mrsne	r0, (UNDEF: 1)
  60:	130e2501 	movwne	r2, #58625	; 0xe501
  64:	110e030b 	tstne	lr, fp, lsl #6
  68:	10061201 	andne	r1, r6, r1, lsl #4
  6c:	02000017 	andeq	r0, r0, #23
  70:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  74:	0b3a0e03 	bleq	e83888 <startup-0x1f17c778>
  78:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  80:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  84:	03000019 	movweq	r0, #25
  88:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  8c:	0b3a0e03 	bleq	e838a0 <startup-0x1f17c760>
  90:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  94:	06120111 			; <UNDEFINED> instruction: 0x06120111
  98:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  9c:	00130119 	andseq	r0, r3, r9, lsl r1
  a0:	00050400 	andeq	r0, r5, r0, lsl #8
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  ac:	00001802 	andeq	r1, r0, r2, lsl #16
  b0:	0b002405 	bleq	90cc <startup-0x1fff6f34>
  b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  b8:	0600000e 	streq	r0, [r0], -lr
  bc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  c0:	0b3a0e03 	bleq	e838d4 <startup-0x1f17c72c>
  c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  cc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  d0:	00000019 	andeq	r0, r0, r9, lsl r0
  d4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  d8:	030b130e 	movweq	r1, #45838	; 0xb30e
  dc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
  e0:	00171006 	andseq	r1, r7, r6
  e4:	00160200 	andseq	r0, r6, r0, lsl #4
  e8:	0b3a0e03 	bleq	e838fc <startup-0x1f17c704>
  ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  f0:	24030000 	strcs	r0, [r3], #-0
  f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  f8:	000e030b 	andeq	r0, lr, fp, lsl #6
  fc:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
 100:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 104:	0b3b0b3a 	bleq	ec2df4 <startup-0x1f13d20c>
 108:	01111927 	tsteq	r1, r7, lsr #18
 10c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 110:	01194296 			; <UNDEFINED> instruction: 0x01194296
 114:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 118:	08030005 	stmdaeq	r3, {r0, r2}
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 124:	34060000 	strcc	r0, [r6], #-0
 128:	3a0e0300 	bcc	380d30 <startup-0x1fc7f2d0>
 12c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 130:	00180213 	andseq	r0, r8, r3, lsl r2
 134:	010b0700 	tsteq	fp, r0, lsl #14
 138:	06120111 			; <UNDEFINED> instruction: 0x06120111
 13c:	34080000 	strcc	r0, [r8], #-0
 140:	3a080300 	bcc	200d48 <startup-0x1fdff2b8>
 144:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 148:	00180213 	andseq	r0, r8, r3, lsl r2
 14c:	00240900 	eoreq	r0, r4, r0, lsl #18
 150:	0b3e0b0b 	bleq	f82d84 <startup-0x1f07d27c>
 154:	00000803 	andeq	r0, r0, r3, lsl #16
 158:	3f012e0a 	svccc	0x00012e0a
 15c:	3a0e0319 	bcc	380dc8 <startup-0x1fc7f238>
 160:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 164:	01193c13 	tsteq	r9, r3, lsl ip
 168:	0b000013 	bleq	1bc <startup-0x1ffffe44>
 16c:	00000018 	andeq	r0, r0, r8, lsl r0
 170:	3f012e0c 	svccc	0x00012e0c
 174:	3a0e0319 	bcc	380de0 <startup-0x1fc7f220>
 178:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 17c:	00193c13 	andseq	r3, r9, r3, lsl ip
 180:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 184:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 188:	0b3b0b3a 	bleq	ec2e78 <startup-0x1f13d188>
 18c:	13491927 	movtne	r1, #39207	; 0x9927
 190:	06120111 			; <UNDEFINED> instruction: 0x06120111
 194:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 198:	00130119 	andseq	r0, r3, r9, lsl r1
 19c:	00050e00 	andeq	r0, r5, r0, lsl #28
 1a0:	0b3a0e03 	bleq	e839b4 <startup-0x1f17c64c>
 1a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1a8:	00001802 	andeq	r1, r0, r2, lsl #16
 1ac:	55010b0f 	strpl	r0, [r1, #-2831]	; 0xfffff4f1
 1b0:	10000017 	andne	r0, r0, r7, lsl r0
 1b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1b8:	0b3a0e03 	bleq	e839cc <startup-0x1f17c634>
 1bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1c4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1c8:	00130119 	andseq	r0, r3, r9, lsl r1
 1cc:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 1d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1d4:	0b3b0b3a 	bleq	ec2ec4 <startup-0x1f13d13c>
 1d8:	01111927 	tsteq	r1, r7, lsr #18
 1dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1e0:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000d8 	ldrdeq	r0, [r0], -r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	006d0002 	rsbeq	r0, sp, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200000e8 	andcs	r0, r0, r8, ror #1
  3c:	0000009a 	muleq	r0, sl, r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00fe0002 	rscseq	r0, lr, r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000184 	andcs	r0, r0, r4, lsl #3
  5c:	0000054c 	andeq	r0, r0, ip, asr #10
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000e8 	andcs	r0, r0, r8, ror #1
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
  18:	000000f8 	strdeq	r0, [r0], -r8
  1c:	00000120 	andeq	r0, r0, r0, lsr #2
  20:	00000122 	andeq	r0, r0, r2, lsr #2
  24:	00000124 	andeq	r0, r0, r4, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000ca 	andeq	r0, r0, sl, asr #1
   4:	00570002 	subseq	r0, r7, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	672f6574 			; <UNDEFINED> instruction: 0x672f6574
  44:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  48:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  4c:	616c7073 	smcvs	50947	; 0xc703
  50:	73000079 	movwvc	r0, #121	; 0x79
  54:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  58:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  5c:	00000100 	andeq	r0, r0, r0, lsl #2
  60:	02050000 	andeq	r0, r5, #0
  64:	20000000 	andcs	r0, r0, r0
  68:	025e131a 	subseq	r1, lr, #1744830464	; 0x68000000
  6c:	01010003 	tsteq	r1, r3
  70:	10020500 	andne	r0, r2, r0, lsl #10
  74:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  78:	3d2f0111 	stfccs	f0, [pc, #-68]!	; 3c <startup-0x1fffffc4>
  7c:	332f3e77 			; <UNDEFINED> instruction: 0x332f3e77
  80:	03040200 	movweq	r0, #16896	; 0x4200
  84:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
  88:	02007303 	andeq	r7, r0, #201326592	; 0xc000000
  8c:	58060104 	stmdapl	r6, {r2, r8}
  90:	02005b06 	andeq	r5, r0, #6144	; 0x1800
  94:	004b0304 	subeq	r0, fp, r4, lsl #6
  98:	73030402 	movwvc	r0, #13314	; 0x3402
  9c:	01040200 	mrseq	r0, R12_usr
  a0:	4d065806 	stcmi	8, cr5, [r6, #-24]	; 0xffffffe8
  a4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
  a8:	02004b03 	andeq	r4, r0, #3072	; 0xc00
  ac:	00730304 	rsbseq	r0, r3, r4, lsl #6
  b0:	06010402 	streq	r0, [r1], -r2, lsl #8
  b4:	005b0658 	subseq	r0, fp, r8, asr r6
  b8:	4b030402 	blmi	c10c8 <startup-0x1ff3ef38>
  bc:	03040200 	movweq	r0, #16896	; 0x4200
  c0:	04020073 	streq	r0, [r2], #-115	; 0xffffff8d
  c4:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
  c8:	0004024e 	andeq	r0, r4, lr, asr #4
  cc:	00850101 	addeq	r0, r5, r1, lsl #2
  d0:	00020000 	andeq	r0, r2, r0
  d4:	00000055 	andeq	r0, r0, r5, asr r0
  d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  dc:	0101000d 	tsteq	r1, sp
  e0:	00000101 	andeq	r0, r0, r1, lsl #2
  e4:	00000100 	andeq	r0, r0, r0, lsl #2
  e8:	2f3a4301 	svccs	0x003a4301
  ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  f0:	61482f73 	hvcvs	33523	; 0x82f3
  f4:	7375706d 	cmnvc	r5, #109	; 0x6d
  f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
 100:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 104:	2f373130 	svccs	0x00373130
 108:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 10c:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 110:	6172672f 	cmnvs	r2, pc, lsr #14
 114:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 118:	70736964 	rsbsvc	r6, r3, r4, ror #18
 11c:	0079616c 	rsbseq	r6, r9, ip, ror #2
 120:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 124:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
 128:	00000100 	andeq	r0, r0, r0, lsl #2
 12c:	02050000 	andeq	r0, r5, #0
 130:	200000e8 	andcs	r0, r0, r8, ror #1
 134:	3d3d2f15 	ldccc	15, cr2, [sp, #-84]!	; 0xffffffac
 138:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 13c:	20060104 	andcs	r0, r6, r4, lsl #2
 140:	a03d6906 	eorsge	r6, sp, r6, lsl #18
 144:	2f2f214b 	svccs	0x002f214b
 148:	4c5e2a2f 	mrrcmi	10, 2, r2, lr, cr15
 14c:	2f4c4e4c 	svccs	0x004c4e4c
 150:	03022f2f 	movweq	r2, #12079	; 0x2f2f
 154:	32010100 	andcc	r0, r1, #0, 2
 158:	02000001 	andeq	r0, r0, #1
 15c:	00006400 	andeq	r6, r0, r0, lsl #8
 160:	fb010200 	blx	4096a <startup-0x1ffbf696>
 164:	01000d0e 	tsteq	r0, lr, lsl #26
 168:	00010101 	andeq	r0, r1, r1, lsl #2
 16c:	00010000 	andeq	r0, r1, r0
 170:	3a430100 	bcc	10c0578 <startup-0x1ef3fa88>
 174:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 178:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 17c:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 180:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 184:	6f746b73 	svcvs	0x00746b73
 188:	41442f70 	hvcmi	17136	; 0x42f0
 18c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 190:	646f432f 	strbtvs	r4, [pc], #-815	; 198 <startup-0x1ffffe68>
 194:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 198:	72672f65 	rsbvc	r2, r7, #404	; 0x194
 19c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1a0:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 1a4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1a8:	72670000 	rsbvc	r0, r7, #0
 1ac:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1b0:	00632e63 	rsbeq	r2, r3, r3, ror #28
 1b4:	67000001 	strvs	r0, [r0, -r1]
 1b8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1bc:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
 1c0:	00000100 	andeq	r0, r0, r0, lsl #2
 1c4:	02050000 	andeq	r0, r5, #0
 1c8:	20000184 	andcs	r0, r0, r4, lsl #3
 1cc:	76e56714 	usatvc	r6, #5, r4, lsl #14
 1d0:	6768d767 	strbvs	sp, [r8, -r7, ror #14]!
 1d4:	0b033d4b 	bleq	cf708 <startup-0x1ff308f8>
 1d8:	2076033c 	rsbscs	r0, r6, ip, lsr r3
 1dc:	03443d4b 	movteq	r3, #19787	; 0x4d4b
 1e0:	3d4b2079 	stclcc	0, cr2, [fp, #-484]	; 0xfffffe1c
 1e4:	3d4b1c41 	stclcc	12, cr1, [fp, #-260]	; 0xfffffefc
 1e8:	3d3d4c3e 	ldccc	12, cr4, [sp, #-248]!	; 0xffffff08
 1ec:	303d3d3d 	eorscc	r3, sp, sp, lsr sp
 1f0:	2f3d2f3d 	svccs	0x003d2f3d
 1f4:	667a034b 	ldrbtvs	r0, [sl], -fp, asr #6
 1f8:	3d3d2327 	ldccc	3, cr2, [sp, #-156]!	; 0xffffff64
 1fc:	3d3d67bc 	ldccc	7, cr6, [sp, #-752]!	; 0xfffffd10
 200:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 204:	3d3d592f 			; <UNDEFINED> instruction: 0x3d3d592f
 208:	4b303d4b 	blmi	c0f73c <startup-0x1f3f08c4>
 20c:	ca3d303d 	bgt	f4c308 <startup-0x1f0b3cf8>
 210:	2f594b91 	svccs	0x00594b91
 214:	593f2f3d 	ldmdbpl	pc!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
 218:	3d59313d 	ldfcce	f3, [r9, #-244]	; 0xffffff0c
 21c:	3d3d3d31 	ldccc	13, cr3, [sp, #-196]!	; 0xffffff3c
 220:	593d9176 	ldmdbpl	sp!, {r1, r2, r4, r5, r6, r8, ip, pc}
 224:	914c833d 	cmpls	ip, sp, lsr r3
 228:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 22c:	59674c83 	stmdbpl	r7!, {r0, r1, r7, sl, fp, lr}^
 230:	3d2f4c67 	stccc	12, cr4, [pc, #-412]!	; 9c <startup-0x1fffff64>
 234:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 238:	4b4b4b4b 	blmi	12d2f6c <startup-0x1ed2d094>
 23c:	3d3e3d4b 	ldccc	13, cr3, [lr, #-300]!	; 0xfffffed4
 240:	004bad3d 	subeq	sl, fp, sp, lsr sp
 244:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 248:	03040200 	movweq	r0, #16896	; 0x4200
 24c:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 250:	003c0601 	eorseq	r0, ip, r1, lsl #12
 254:	06020402 	streq	r0, [r2], -r2, lsl #8
 258:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
 25c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 260:	00e64d43 	rsceq	r4, r6, r3, asr #26
 264:	06010402 	streq	r0, [r1], -r2, lsl #8
 268:	685a0666 	ldmdavs	sl, {r1, r2, r5, r6, r9, sl}^
 26c:	595959ad 	ldmdbpl	r9, {r0, r2, r3, r5, r7, r8, fp, ip, lr}^
 270:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 274:	4b784b5b 	blmi	1e12fe8 <startup-0x1e1ed018>
 278:	bb4d684b 	bllt	135a3ac <startup-0x1eca5c54>
 27c:	4bbc9fd7 	blmi	fef281e0 <pixel+0xdef27ca6>
 280:	5a03a1ae 	bpl	e8940 <startup-0x1ff176c0>
 284:	202803ac 	eorcs	r0, r8, ip, lsr #7
 288:	01000602 	tsteq	r0, r2, lsl #12
 28c:	Address 0x0000028c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
   4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
   8:	61686320 	cmnvs	r8, r0, lsr #6
   c:	3a430072 	bcc	10c01dc <startup-0x1ef3fe24>
  10:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  14:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
  18:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
  1c:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
  20:	6f746b73 	svcvs	0x00746b73
  24:	41442f70 	hvcmi	17136	; 0x42f0
  28:	37313054 			; <UNDEFINED> instruction: 0x37313054
  2c:	646f432f 	strbtvs	r4, [pc], #-815	; 34 <startup-0x1fffffcc>
  30:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  34:	72672f65 	rsbvc	r2, r7, #404	; 0x194
  38:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  3c:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
  40:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  44:	6174732f 	cmnvs	r4, pc, lsr #6
  48:	70757472 	rsbsvc	r7, r5, r2, ror r4
  4c:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
  50:	5f74696e 	svcpl	0x0074696e
  54:	00707061 	rsbseq	r7, r0, r1, rrx
  58:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  5c:	00707574 	rsbseq	r7, r0, r4, ror r5
  60:	20554e47 	subscs	r4, r5, r7, asr #28
  64:	20393943 	eorscs	r3, r9, r3, asr #18
  68:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
  6c:	30322031 	eorscc	r2, r2, r1, lsr r0
  70:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  74:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  78:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  7c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  80:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  84:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  88:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  8c:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  90:	6172622d 	cmnvs	r2, sp, lsr #4
  94:	2068636e 	rsbcs	r6, r8, lr, ror #6
  98:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  9c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  a0:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  a4:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  a8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  ac:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  b0:	616d2d20 	cmnvs	sp, r0, lsr #26
  b4:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  b8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  bc:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  c0:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  c4:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  c8:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  cc:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  d0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  d4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  d8:	616d2d20 	cmnvs	sp, r0, lsr #26
  dc:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  e0:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  e4:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  e8:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  ec:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  f0:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  f4:	00393963 	eorseq	r3, r9, r3, ror #18
  f8:	6e69616d 	powvsez	f6, f1, #5.0
  fc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 100:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 46 <startup-0x1fffffba>	; <UNPREDICTABLE>
 104:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 108:	736e7500 	cmnvc	lr, #0, 10
 10c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 110:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 114:	3a430074 	bcc	10c02ec <startup-0x1ef3fd14>
 118:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 11c:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 120:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 124:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 128:	6f746b73 	svcvs	0x00746b73
 12c:	41442f70 	hvcmi	17136	; 0x42f0
 130:	37313054 			; <UNDEFINED> instruction: 0x37313054
 134:	646f432f 	strbtvs	r4, [pc], #-815	; 13c <startup-0x1ffffec4>
 138:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 13c:	72672f65 	rsbvc	r2, r7, #404	; 0x194
 140:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 144:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 148:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 14c:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
 150:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
 154:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 158:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 9e <startup-0x1fffff62>	; <UNPREDICTABLE>
 15c:	6f726b69 	svcvs	0x00726b69
 160:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 164:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff80b <pixel+0xdffff2d1>
 168:	736e3030 	cmnvc	lr, #48	; 0x30
 16c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 170:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 174:	736e3035 	cmnvc	lr, #53	; 0x35
 178:	61726700 	cmnvs	r2, r0, lsl #14
 17c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 180:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 184:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 188:	616d6d6f 	cmnvs	sp, pc, ror #26
 18c:	6700646e 	strvs	r6, [r0, -lr, ror #8]
 190:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 194:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 198:	5f646165 	svcpl	0x00646165
 19c:	61746164 	cmnvs	r4, r4, ror #2
 1a0:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 1a4:	73006c65 	movwvc	r6, #3173	; 0xc65
 1a8:	63656c65 	cmnvs	r5, #25856	; 0x6500
 1ac:	6f635f74 	svcvs	0x00635f74
 1b0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; ffffffe8 <pixel+0xdffffaae>
 1b4:	0072656c 	rsbseq	r6, r2, ip, ror #10
 1b8:	70617267 	rsbvc	r7, r1, r7, ror #4
 1bc:	5f636968 	svcpl	0x00636968
 1c0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 1c4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 1c8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 1cc:	67007261 	strvs	r7, [r0, -r1, ror #4]
 1d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1d4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 1d8:	5f746961 	svcpl	0x00746961
 1dc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 1e0:	72670079 	rsbvc	r0, r7, #121	; 0x79
 1e4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1e8:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 1ec:	5f657469 	svcpl	0x00657469
 1f0:	61746164 	cmnvs	r4, r4, ror #2
 1f4:	73616d00 	cmnvc	r1, #0, 26
 1f8:	6975006b 	ldmdbvs	r5!, {r0, r1, r3, r5, r6}^
 1fc:	5f38746e 	svcpl	0x0038746e
 200:	3a430074 	bcc	10c03d8 <startup-0x1ef3fc28>
 204:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 208:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 20c:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 210:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 214:	6f746b73 	svcvs	0x00746b73
 218:	41442f70 	hvcmi	17136	; 0x42f0
 21c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 220:	646f432f 	strbtvs	r4, [pc], #-815	; 228 <startup-0x1ffffdd8>
 224:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 228:	72672f65 	rsbvc	r2, r7, #404	; 0x194
 22c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 230:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 234:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 238:	6172672f 	cmnvs	r2, pc, lsr #14
 23c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 240:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 244:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 248:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 24c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 250:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 254:	6e690070 	mcrvs	0, 3, r0, cr9, cr0, {3}
 258:	00786564 	rsbseq	r6, r8, r4, ror #10
 25c:	70617267 	rsbvc	r7, r1, r7, ror #4
 260:	5f636968 	svcpl	0x00636968
 264:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 268:	61726700 	cmnvs	r2, r0, lsl #14
 26c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 270:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 274:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 278:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 27c:	61700074 	cmnvs	r0, r4, ror r0
 280:	67006567 	strvs	r6, [r0, -r7, ror #10]
 284:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 288:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 28c:	6174696e 	cmnvs	r4, lr, ror #18
 290:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 294:	6c617600 	stclvs	6, cr7, [r1], #-0
 298:	67006575 	smlsdxvs	r0, r5, r5, r6
 29c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2a0:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2a4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2a8:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 2ac:	006e6565 	rsbeq	r6, lr, r5, ror #10
 2b0:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 2b4:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 2b8:	Address 0x000002b8 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	000000c0 	andeq	r0, r0, r0, asr #1
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	100e4101 	andne	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	200000e8 	andcs	r0, r0, r8, ror #1
  78:	00000044 	andeq	r0, r0, r4, asr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0000005c 	andeq	r0, r0, ip, asr r0
  90:	2000012c 	andcs	r0, r0, ip, lsr #2
  94:	0000002c 	andeq	r0, r0, ip, lsr #32
  98:	40080e41 	andmi	r0, r8, r1, asr #28
  9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a0:	100e4101 	andne	r4, lr, r1, lsl #2
  a4:	00070d41 	andeq	r0, r7, r1, asr #26
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0000005c 	andeq	r0, r0, ip, asr r0
  b0:	20000158 	andcs	r0, r0, r8, asr r1
  b4:	00000018 	andeq	r0, r0, r8, lsl r0
  b8:	40080e41 	andmi	r0, r8, r1, asr #28
  bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c0:	100e4101 	andne	r4, lr, r1, lsl #2
  c4:	00070d41 	andeq	r0, r7, r1, asr #26
  c8:	00000018 	andeq	r0, r0, r8, lsl r0
  cc:	0000005c 	andeq	r0, r0, ip, asr r0
  d0:	20000170 	andcs	r0, r0, r0, ror r1
  d4:	00000012 	andeq	r0, r0, r2, lsl r0
  d8:	40080e41 	andmi	r0, r8, r1, asr #28
  dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  e4:	0000000c 	andeq	r0, r0, ip
  e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  ec:	7c020001 	stcvc	0, cr0, [r2], {1}
  f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	000000e4 	andeq	r0, r0, r4, ror #1
  fc:	20000184 	andcs	r0, r0, r4, lsl #3
 100:	00000038 	andeq	r0, r0, r8, lsr r0
 104:	40080e41 	andmi	r0, r8, r1, asr #28
 108:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 10c:	100e4101 	andne	r4, lr, r1, lsl #2
 110:	00070d41 	andeq	r0, r7, r1, asr #26
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	000000e4 	andeq	r0, r0, r4, ror #1
 11c:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
 120:	00000034 	andeq	r0, r0, r4, lsr r0
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	100e4101 	andne	r4, lr, r1, lsl #2
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	000000e4 	andeq	r0, r0, r4, ror #1
 13c:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 140:	0000006a 	andeq	r0, r0, sl, rrx
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	000000e4 	andeq	r0, r0, r4, ror #1
 15c:	2000025a 	andcs	r0, r0, sl, asr r2
 160:	00000072 	andeq	r0, r0, r2, ror r0
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	100e4101 	andne	r4, lr, r1, lsl #2
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	000000e4 	andeq	r0, r0, r4, ror #1
 17c:	200002cc 	andcs	r0, r0, ip, asr #5
 180:	00000090 	muleq	r0, r0, r0
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	180e4101 	stmdane	lr, {r0, r8, lr}
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	000000e4 	andeq	r0, r0, r4, ror #1
 19c:	2000035c 	andcs	r0, r0, ip, asr r3
 1a0:	00000080 	andeq	r0, r0, r0, lsl #1
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	100e4101 	andne	r4, lr, r1, lsl #2
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	000000e4 	andeq	r0, r0, r4, ror #1
 1bc:	200003dc 	ldrdcs	r0, [r0], -ip
 1c0:	00000040 	andeq	r0, r0, r0, asr #32
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	100e4101 	andne	r4, lr, r1, lsl #2
 1d0:	00070d41 	andeq	r0, r7, r1, asr #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	000000e4 	andeq	r0, r0, r4, ror #1
 1dc:	2000041c 	andcs	r0, r0, ip, lsl r4
 1e0:	00000046 	andeq	r0, r0, r6, asr #32
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	100e4101 	andne	r4, lr, r1, lsl #2
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	000000e4 	andeq	r0, r0, r4, ror #1
 1fc:	20000462 	andcs	r0, r0, r2, ror #8
 200:	0000002a 	andeq	r0, r0, sl, lsr #32
 204:	40080e41 	andmi	r0, r8, r1, asr #28
 208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 20c:	100e4101 	andne	r4, lr, r1, lsl #2
 210:	00070d41 	andeq	r0, r7, r1, asr #26
 214:	00000018 	andeq	r0, r0, r8, lsl r0
 218:	000000e4 	andeq	r0, r0, r4, ror #1
 21c:	2000048c 	andcs	r0, r0, ip, lsl #9
 220:	00000056 	andeq	r0, r0, r6, asr r0
 224:	40080e41 	andmi	r0, r8, r1, asr #28
 228:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 22c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	000000e4 	andeq	r0, r0, r4, ror #1
 238:	200004e2 	andcs	r0, r0, r2, ror #9
 23c:	00000058 	andeq	r0, r0, r8, asr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	100e4101 	andne	r4, lr, r1, lsl #2
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	00000020 	andeq	r0, r0, r0, lsr #32
 254:	000000e4 	andeq	r0, r0, r4, ror #1
 258:	2000053a 	andcs	r0, r0, sl, lsr r5
 25c:	00000196 	muleq	r0, r6, r1
 260:	400c0e41 	andmi	r0, ip, r1, asr #28
 264:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 268:	018e4002 	orreq	r4, lr, r2
 26c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 270:	0000070d 	andeq	r0, r0, sp, lsl #14
