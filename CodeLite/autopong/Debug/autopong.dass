
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fb5e 	bl	200006c4 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <graphic_ctrl_bit_set>:
#include "graphic.h"

void graphic_ctrl_bit_set(uint8_t x) {
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW |= (x & ~B_SELECT);
2000001c:	4909      	ldr	r1, [pc, #36]	; (20000044 <graphic_ctrl_bit_set+0x34>)
2000001e:	4b09      	ldr	r3, [pc, #36]	; (20000044 <graphic_ctrl_bit_set+0x34>)
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	b2db      	uxtb	r3, r3
20000024:	b25a      	sxtb	r2, r3
20000026:	1dfb      	adds	r3, r7, #7
20000028:	781b      	ldrb	r3, [r3, #0]
2000002a:	b25b      	sxtb	r3, r3
2000002c:	2004      	movs	r0, #4
2000002e:	4383      	bics	r3, r0
20000030:	b25b      	sxtb	r3, r3
20000032:	4313      	orrs	r3, r2
20000034:	b25b      	sxtb	r3, r3
20000036:	b2db      	uxtb	r3, r3
20000038:	700b      	strb	r3, [r1, #0]
}
2000003a:	46c0      	nop			; (mov r8, r8)
2000003c:	46bd      	mov	sp, r7
2000003e:	b002      	add	sp, #8
20000040:	bd80      	pop	{r7, pc}
20000042:	46c0      	nop			; (mov r8, r8)
20000044:	40021014 	andmi	r1, r2, r4, lsl r0

20000048 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x) {
20000048:	b580      	push	{r7, lr}
2000004a:	b082      	sub	sp, #8
2000004c:	af00      	add	r7, sp, #0
2000004e:	0002      	movs	r2, r0
20000050:	1dfb      	adds	r3, r7, #7
20000052:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW &= ~x;
20000054:	4908      	ldr	r1, [pc, #32]	; (20000078 <graphic_ctrl_bit_clear+0x30>)
20000056:	4b08      	ldr	r3, [pc, #32]	; (20000078 <graphic_ctrl_bit_clear+0x30>)
20000058:	781b      	ldrb	r3, [r3, #0]
2000005a:	b2db      	uxtb	r3, r3
2000005c:	b25b      	sxtb	r3, r3
2000005e:	1dfa      	adds	r2, r7, #7
20000060:	7812      	ldrb	r2, [r2, #0]
20000062:	b252      	sxtb	r2, r2
20000064:	43d2      	mvns	r2, r2
20000066:	b252      	sxtb	r2, r2
20000068:	4013      	ands	r3, r2
2000006a:	b25b      	sxtb	r3, r3
2000006c:	b2db      	uxtb	r3, r3
2000006e:	700b      	strb	r3, [r1, #0]
}
20000070:	46c0      	nop			; (mov r8, r8)
20000072:	46bd      	mov	sp, r7
20000074:	b002      	add	sp, #8
20000076:	bd80      	pop	{r7, pc}
20000078:	40021014 	andmi	r1, r2, r4, lsl r0

2000007c <select_cotroller>:

void select_cotroller(uint8_t controller) {
2000007c:	b580      	push	{r7, lr}
2000007e:	b082      	sub	sp, #8
20000080:	af00      	add	r7, sp, #0
20000082:	0002      	movs	r2, r0
20000084:	1dfb      	adds	r3, r7, #7
20000086:	701a      	strb	r2, [r3, #0]
	if(controller == 0) {
20000088:	1dfb      	adds	r3, r7, #7
2000008a:	781b      	ldrb	r3, [r3, #0]
2000008c:	2b00      	cmp	r3, #0
2000008e:	d106      	bne.n	2000009e <select_cotroller+0x22>
		graphic_ctrl_bit_clear(B_CS1);
20000090:	2008      	movs	r0, #8
20000092:	f7ff ffd9 	bl	20000048 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_clear(B_CS2);
20000096:	2010      	movs	r0, #16
20000098:	f7ff ffd6 	bl	20000048 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_clear(B_CS2);
	} else if(controller == B_CS2) {
		graphic_ctrl_bit_clear(B_CS1);
		graphic_ctrl_bit_set(B_CS2);
	}
}
2000009c:	e01f      	b.n	200000de <select_cotroller+0x62>
	} else if(controller == (B_CS1 | B_CS2)) {
2000009e:	1dfb      	adds	r3, r7, #7
200000a0:	781b      	ldrb	r3, [r3, #0]
200000a2:	2b18      	cmp	r3, #24
200000a4:	d106      	bne.n	200000b4 <select_cotroller+0x38>
		graphic_ctrl_bit_set(B_CS1);
200000a6:	2008      	movs	r0, #8
200000a8:	f7ff ffb2 	bl	20000010 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_set(B_CS2);
200000ac:	2010      	movs	r0, #16
200000ae:	f7ff ffaf 	bl	20000010 <graphic_ctrl_bit_set>
}
200000b2:	e014      	b.n	200000de <select_cotroller+0x62>
	} else if(controller == B_CS1) {
200000b4:	1dfb      	adds	r3, r7, #7
200000b6:	781b      	ldrb	r3, [r3, #0]
200000b8:	2b08      	cmp	r3, #8
200000ba:	d106      	bne.n	200000ca <select_cotroller+0x4e>
		graphic_ctrl_bit_set(B_CS1);
200000bc:	2008      	movs	r0, #8
200000be:	f7ff ffa7 	bl	20000010 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_clear(B_CS2);
200000c2:	2010      	movs	r0, #16
200000c4:	f7ff ffc0 	bl	20000048 <graphic_ctrl_bit_clear>
}
200000c8:	e009      	b.n	200000de <select_cotroller+0x62>
	} else if(controller == B_CS2) {
200000ca:	1dfb      	adds	r3, r7, #7
200000cc:	781b      	ldrb	r3, [r3, #0]
200000ce:	2b10      	cmp	r3, #16
200000d0:	d105      	bne.n	200000de <select_cotroller+0x62>
		graphic_ctrl_bit_clear(B_CS1);
200000d2:	2008      	movs	r0, #8
200000d4:	f7ff ffb8 	bl	20000048 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_set(B_CS2);
200000d8:	2010      	movs	r0, #16
200000da:	f7ff ff99 	bl	20000010 <graphic_ctrl_bit_set>
}
200000de:	46c0      	nop			; (mov r8, r8)
200000e0:	46bd      	mov	sp, r7
200000e2:	b002      	add	sp, #8
200000e4:	bd80      	pop	{r7, pc}

200000e6 <graphic_wait_ready>:

void graphic_wait_ready() {
200000e6:	b580      	push	{r7, lr}
200000e8:	b082      	sub	sp, #8
200000ea:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200000ec:	2040      	movs	r0, #64	; 0x40
200000ee:	f7ff ffab 	bl	20000048 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
200000f2:	4b15      	ldr	r3, [pc, #84]	; (20000148 <graphic_wait_ready+0x62>)
200000f4:	4a15      	ldr	r2, [pc, #84]	; (2000014c <graphic_wait_ready+0x66>)
200000f6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200000f8:	2001      	movs	r0, #1
200000fa:	f7ff ffa5 	bl	20000048 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200000fe:	2002      	movs	r0, #2
20000100:	f7ff ff86 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
20000104:	f000 fb3c 	bl	20000780 <delay_500ns>
	while(1) { // Wait for display not to be busy
		graphic_ctrl_bit_set(B_E);
20000108:	2040      	movs	r0, #64	; 0x40
2000010a:	f7ff ff81 	bl	20000010 <graphic_ctrl_bit_set>
		delay_500ns();
2000010e:	f000 fb37 	bl	20000780 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
20000112:	2040      	movs	r0, #64	; 0x40
20000114:	f7ff ff98 	bl	20000048 <graphic_ctrl_bit_clear>
		delay_500ns();		
20000118:	f000 fb32 	bl	20000780 <delay_500ns>
		unsigned char i = *GPIO_IDR_HIGH;
2000011c:	4a0c      	ldr	r2, [pc, #48]	; (20000150 <graphic_wait_ready+0x6a>)
2000011e:	1dfb      	adds	r3, r7, #7
20000120:	7812      	ldrb	r2, [r2, #0]
20000122:	701a      	strb	r2, [r3, #0]
		if((*GPIO_IDR_HIGH & LCD_BUSY) == 0) {
20000124:	4b0a      	ldr	r3, [pc, #40]	; (20000150 <graphic_wait_ready+0x6a>)
20000126:	781b      	ldrb	r3, [r3, #0]
20000128:	b2db      	uxtb	r3, r3
2000012a:	b25b      	sxtb	r3, r3
2000012c:	2b00      	cmp	r3, #0
2000012e:	da00      	bge.n	20000132 <graphic_wait_ready+0x4c>
	while(1) { // Wait for display not to be busy
20000130:	e7ea      	b.n	20000108 <graphic_wait_ready+0x22>
			break;
20000132:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
20000134:	2040      	movs	r0, #64	; 0x40
20000136:	f7ff ff6b 	bl	20000010 <graphic_ctrl_bit_set>
	*GPIO_MODER = 0x55555555;
2000013a:	4b03      	ldr	r3, [pc, #12]	; (20000148 <graphic_wait_ready+0x62>)
2000013c:	4a05      	ldr	r2, [pc, #20]	; (20000154 <graphic_wait_ready+0x6e>)
2000013e:	601a      	str	r2, [r3, #0]
}
20000140:	46c0      	nop			; (mov r8, r8)
20000142:	46bd      	mov	sp, r7
20000144:	b002      	add	sp, #8
20000146:	bd80      	pop	{r7, pc}
20000148:	40021000 	andmi	r1, r2, r0
2000014c:	00005555 	andeq	r5, r0, r5, asr r5
20000150:	40021011 	andmi	r1, r2, r1, lsl r0
20000154:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000158 <graphic_read>:

unsigned char graphic_read(unsigned char controller) {
20000158:	b580      	push	{r7, lr}
2000015a:	b084      	sub	sp, #16
2000015c:	af00      	add	r7, sp, #0
2000015e:	0002      	movs	r2, r0
20000160:	1dfb      	adds	r3, r7, #7
20000162:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000164:	2040      	movs	r0, #64	; 0x40
20000166:	f7ff ff6f 	bl	20000048 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
2000016a:	4b1b      	ldr	r3, [pc, #108]	; (200001d8 <graphic_read+0x80>)
2000016c:	4a1b      	ldr	r2, [pc, #108]	; (200001dc <graphic_read+0x84>)
2000016e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000170:	2003      	movs	r0, #3
20000172:	f7ff ff4d 	bl	20000010 <graphic_ctrl_bit_set>
	select_cotroller(controller);
20000176:	1dfb      	adds	r3, r7, #7
20000178:	781b      	ldrb	r3, [r3, #0]
2000017a:	0018      	movs	r0, r3
2000017c:	f7ff ff7e 	bl	2000007c <select_cotroller>
	delay_500ns();
20000180:	f000 fafe 	bl	20000780 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000184:	2040      	movs	r0, #64	; 0x40
20000186:	f7ff ff43 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
2000018a:	f000 faf9 	bl	20000780 <delay_500ns>
	unsigned char RV = *GPIO_IDR_HIGH;
2000018e:	4a14      	ldr	r2, [pc, #80]	; (200001e0 <graphic_read+0x88>)
20000190:	230f      	movs	r3, #15
20000192:	18fb      	adds	r3, r7, r3
20000194:	7812      	ldrb	r2, [r2, #0]
20000196:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000198:	2040      	movs	r0, #64	; 0x40
2000019a:	f7ff ff55 	bl	20000048 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x55555555;
2000019e:	4b0e      	ldr	r3, [pc, #56]	; (200001d8 <graphic_read+0x80>)
200001a0:	4a10      	ldr	r2, [pc, #64]	; (200001e4 <graphic_read+0x8c>)
200001a2:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1) {
200001a4:	1dfb      	adds	r3, r7, #7
200001a6:	781b      	ldrb	r3, [r3, #0]
200001a8:	2b08      	cmp	r3, #8
200001aa:	d104      	bne.n	200001b6 <graphic_read+0x5e>
		select_cotroller(B_CS1);
200001ac:	2008      	movs	r0, #8
200001ae:	f7ff ff65 	bl	2000007c <select_cotroller>
		graphic_wait_ready();
200001b2:	f7ff ff98 	bl	200000e6 <graphic_wait_ready>
	}
	if(controller == B_CS2) {
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	781b      	ldrb	r3, [r3, #0]
200001ba:	2b10      	cmp	r3, #16
200001bc:	d104      	bne.n	200001c8 <graphic_read+0x70>
		select_cotroller(B_CS2);
200001be:	2010      	movs	r0, #16
200001c0:	f7ff ff5c 	bl	2000007c <select_cotroller>
		graphic_wait_ready();
200001c4:	f7ff ff8f 	bl	200000e6 <graphic_wait_ready>
	}
	return RV;
200001c8:	230f      	movs	r3, #15
200001ca:	18fb      	adds	r3, r7, r3
200001cc:	781b      	ldrb	r3, [r3, #0]
}
200001ce:	0018      	movs	r0, r3
200001d0:	46bd      	mov	sp, r7
200001d2:	b004      	add	sp, #16
200001d4:	bd80      	pop	{r7, pc}
200001d6:	46c0      	nop			; (mov r8, r8)
200001d8:	40021000 	andmi	r1, r2, r0
200001dc:	00005555 	andeq	r5, r0, r5, asr r5
200001e0:	40021011 	andmi	r1, r2, r1, lsl r0
200001e4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001e8 <graphic_write>:

void graphic_write(unsigned char value, unsigned char controller) {
200001e8:	b580      	push	{r7, lr}
200001ea:	b082      	sub	sp, #8
200001ec:	af00      	add	r7, sp, #0
200001ee:	0002      	movs	r2, r0
200001f0:	1dfb      	adds	r3, r7, #7
200001f2:	701a      	strb	r2, [r3, #0]
200001f4:	1dbb      	adds	r3, r7, #6
200001f6:	1c0a      	adds	r2, r1, #0
200001f8:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_HIGH = value;
200001fa:	4a1a      	ldr	r2, [pc, #104]	; (20000264 <graphic_write+0x7c>)
200001fc:	1dfb      	adds	r3, r7, #7
200001fe:	781b      	ldrb	r3, [r3, #0]
20000200:	7013      	strb	r3, [r2, #0]
	select_cotroller(controller);
20000202:	1dbb      	adds	r3, r7, #6
20000204:	781b      	ldrb	r3, [r3, #0]
20000206:	0018      	movs	r0, r3
20000208:	f7ff ff38 	bl	2000007c <select_cotroller>
	delay_500ns();
2000020c:	f000 fab8 	bl	20000780 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000210:	2040      	movs	r0, #64	; 0x40
20000212:	f7ff fefd 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
20000216:	f000 fab3 	bl	20000780 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000021a:	2040      	movs	r0, #64	; 0x40
2000021c:	f7ff ff14 	bl	20000048 <graphic_ctrl_bit_clear>
	
	//Kanske inte ska vara så här för this statement
	if(controller & B_CS1) {
20000220:	1dbb      	adds	r3, r7, #6
20000222:	781b      	ldrb	r3, [r3, #0]
20000224:	2208      	movs	r2, #8
20000226:	4013      	ands	r3, r2
20000228:	d004      	beq.n	20000234 <graphic_write+0x4c>
		select_cotroller(B_CS1);
2000022a:	2008      	movs	r0, #8
2000022c:	f7ff ff26 	bl	2000007c <select_cotroller>
		graphic_wait_ready();
20000230:	f7ff ff59 	bl	200000e6 <graphic_wait_ready>
	}
	
	if(controller & B_CS2) {
20000234:	1dbb      	adds	r3, r7, #6
20000236:	781b      	ldrb	r3, [r3, #0]
20000238:	2210      	movs	r2, #16
2000023a:	4013      	ands	r3, r2
2000023c:	d004      	beq.n	20000248 <graphic_write+0x60>
		select_cotroller(B_CS2);
2000023e:	2010      	movs	r0, #16
20000240:	f7ff ff1c 	bl	2000007c <select_cotroller>
		graphic_wait_ready();
20000244:	f7ff ff4f 	bl	200000e6 <graphic_wait_ready>
	}
	
	*GPIO_ODR_HIGH = 0;
20000248:	4b06      	ldr	r3, [pc, #24]	; (20000264 <graphic_write+0x7c>)
2000024a:	2200      	movs	r2, #0
2000024c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
2000024e:	2040      	movs	r0, #64	; 0x40
20000250:	f7ff fede 	bl	20000010 <graphic_ctrl_bit_set>
	select_cotroller(0);
20000254:	2000      	movs	r0, #0
20000256:	f7ff ff11 	bl	2000007c <select_cotroller>
}
2000025a:	46c0      	nop			; (mov r8, r8)
2000025c:	46bd      	mov	sp, r7
2000025e:	b002      	add	sp, #8
20000260:	bd80      	pop	{r7, pc}
20000262:	46c0      	nop			; (mov r8, r8)
20000264:	40021015 	andmi	r1, r2, r5, lsl r0

20000268 <graphic_write_command>:

void graphic_write_command(unsigned char command, unsigned char controller) {
20000268:	b580      	push	{r7, lr}
2000026a:	b082      	sub	sp, #8
2000026c:	af00      	add	r7, sp, #0
2000026e:	0002      	movs	r2, r0
20000270:	1dfb      	adds	r3, r7, #7
20000272:	701a      	strb	r2, [r3, #0]
20000274:	1dbb      	adds	r3, r7, #6
20000276:	1c0a      	adds	r2, r1, #0
20000278:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000027a:	2040      	movs	r0, #64	; 0x40
2000027c:	f7ff fee4 	bl	20000048 <graphic_ctrl_bit_clear>
	select_cotroller(controller);
20000280:	1dbb      	adds	r3, r7, #6
20000282:	781b      	ldrb	r3, [r3, #0]
20000284:	0018      	movs	r0, r3
20000286:	f7ff fef9 	bl	2000007c <select_cotroller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000028a:	2003      	movs	r0, #3
2000028c:	f7ff fedc 	bl	20000048 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000290:	1dbb      	adds	r3, r7, #6
20000292:	781a      	ldrb	r2, [r3, #0]
20000294:	1dfb      	adds	r3, r7, #7
20000296:	781b      	ldrb	r3, [r3, #0]
20000298:	0011      	movs	r1, r2
2000029a:	0018      	movs	r0, r3
2000029c:	f7ff ffa4 	bl	200001e8 <graphic_write>
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b002      	add	sp, #8
200002a6:	bd80      	pop	{r7, pc}

200002a8 <graphic_write_data>:

void graphic_write_data(unsigned char data, unsigned char controller) {
200002a8:	b580      	push	{r7, lr}
200002aa:	b082      	sub	sp, #8
200002ac:	af00      	add	r7, sp, #0
200002ae:	0002      	movs	r2, r0
200002b0:	1dfb      	adds	r3, r7, #7
200002b2:	701a      	strb	r2, [r3, #0]
200002b4:	1dbb      	adds	r3, r7, #6
200002b6:	1c0a      	adds	r2, r1, #0
200002b8:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200002ba:	2040      	movs	r0, #64	; 0x40
200002bc:	f7ff fec4 	bl	20000048 <graphic_ctrl_bit_clear>
	select_cotroller(controller);
200002c0:	1dbb      	adds	r3, r7, #6
200002c2:	781b      	ldrb	r3, [r3, #0]
200002c4:	0018      	movs	r0, r3
200002c6:	f7ff fed9 	bl	2000007c <select_cotroller>
	graphic_ctrl_bit_set(B_RS);
200002ca:	2001      	movs	r0, #1
200002cc:	f7ff fea0 	bl	20000010 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200002d0:	2002      	movs	r0, #2
200002d2:	f7ff feb9 	bl	20000048 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200002d6:	1dbb      	adds	r3, r7, #6
200002d8:	781a      	ldrb	r2, [r3, #0]
200002da:	1dfb      	adds	r3, r7, #7
200002dc:	781b      	ldrb	r3, [r3, #0]
200002de:	0011      	movs	r1, r2
200002e0:	0018      	movs	r0, r3
200002e2:	f7ff ff81 	bl	200001e8 <graphic_write>
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}

200002ee <graphic_read_data>:

unsigned char graphic_read_data(unsigned char controller) {
200002ee:	b580      	push	{r7, lr}
200002f0:	b082      	sub	sp, #8
200002f2:	af00      	add	r7, sp, #0
200002f4:	0002      	movs	r2, r0
200002f6:	1dfb      	adds	r3, r7, #7
200002f8:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
200002fa:	1dfb      	adds	r3, r7, #7
200002fc:	781b      	ldrb	r3, [r3, #0]
200002fe:	0018      	movs	r0, r3
20000300:	f7ff ff2a 	bl	20000158 <graphic_read>
	return graphic_read(controller);
20000304:	1dfb      	adds	r3, r7, #7
20000306:	781b      	ldrb	r3, [r3, #0]
20000308:	0018      	movs	r0, r3
2000030a:	f7ff ff25 	bl	20000158 <graphic_read>
2000030e:	0003      	movs	r3, r0
}
20000310:	0018      	movs	r0, r3
20000312:	46bd      	mov	sp, r7
20000314:	b002      	add	sp, #8
20000316:	bd80      	pop	{r7, pc}

20000318 <graphic_initalize>:

void graphic_initalize(void) {
20000318:	b580      	push	{r7, lr}
2000031a:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000031c:	2040      	movs	r0, #64	; 0x40
2000031e:	f7ff fe77 	bl	20000010 <graphic_ctrl_bit_set>
	delay_mikro(10);
20000322:	200a      	movs	r0, #10
20000324:	f000 fa0a 	bl	2000073c <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000328:	2078      	movs	r0, #120	; 0x78
2000032a:	f7ff fe8d 	bl	20000048 <graphic_ctrl_bit_clear>
	delay_milli(30);
2000032e:	201e      	movs	r0, #30
20000330:	f000 fa1a 	bl	20000768 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000334:	2020      	movs	r0, #32
20000336:	f7ff fe6b 	bl	20000010 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000033a:	2118      	movs	r1, #24
2000033c:	203e      	movs	r0, #62	; 0x3e
2000033e:	f7ff ff93 	bl	20000268 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000342:	2118      	movs	r1, #24
20000344:	203f      	movs	r0, #63	; 0x3f
20000346:	f7ff ff8f 	bl	20000268 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000034a:	2118      	movs	r1, #24
2000034c:	20c0      	movs	r0, #192	; 0xc0
2000034e:	f7ff ff8b 	bl	20000268 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000352:	2118      	movs	r1, #24
20000354:	2040      	movs	r0, #64	; 0x40
20000356:	f7ff ff87 	bl	20000268 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
2000035a:	2118      	movs	r1, #24
2000035c:	20b8      	movs	r0, #184	; 0xb8
2000035e:	f7ff ff83 	bl	20000268 <graphic_write_command>
	select_cotroller(0);
20000362:	2000      	movs	r0, #0
20000364:	f7ff fe8a 	bl	2000007c <select_cotroller>
}
20000368:	46c0      	nop			; (mov r8, r8)
2000036a:	46bd      	mov	sp, r7
2000036c:	bd80      	pop	{r7, pc}

2000036e <graphic_clear_screen>:

void graphic_clear_screen(void) {
2000036e:	b580      	push	{r7, lr}
20000370:	b082      	sub	sp, #8
20000372:	af00      	add	r7, sp, #0
	for(int page = 0; page <= 7; page++) {
20000374:	2300      	movs	r3, #0
20000376:	607b      	str	r3, [r7, #4]
20000378:	e01e      	b.n	200003b8 <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
2000037a:	687b      	ldr	r3, [r7, #4]
2000037c:	b25b      	sxtb	r3, r3
2000037e:	2248      	movs	r2, #72	; 0x48
20000380:	4252      	negs	r2, r2
20000382:	4313      	orrs	r3, r2
20000384:	b25b      	sxtb	r3, r3
20000386:	b2db      	uxtb	r3, r3
20000388:	2118      	movs	r1, #24
2000038a:	0018      	movs	r0, r3
2000038c:	f7ff ff6c 	bl	20000268 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000390:	2118      	movs	r1, #24
20000392:	2040      	movs	r0, #64	; 0x40
20000394:	f7ff ff68 	bl	20000268 <graphic_write_command>
		for(int add = 0; add <= 63; add++) {
20000398:	2300      	movs	r3, #0
2000039a:	603b      	str	r3, [r7, #0]
2000039c:	e006      	b.n	200003ac <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
2000039e:	2118      	movs	r1, #24
200003a0:	2000      	movs	r0, #0
200003a2:	f7ff ff81 	bl	200002a8 <graphic_write_data>
		for(int add = 0; add <= 63; add++) {
200003a6:	683b      	ldr	r3, [r7, #0]
200003a8:	3301      	adds	r3, #1
200003aa:	603b      	str	r3, [r7, #0]
200003ac:	683b      	ldr	r3, [r7, #0]
200003ae:	2b3f      	cmp	r3, #63	; 0x3f
200003b0:	ddf5      	ble.n	2000039e <graphic_clear_screen+0x30>
	for(int page = 0; page <= 7; page++) {
200003b2:	687b      	ldr	r3, [r7, #4]
200003b4:	3301      	adds	r3, #1
200003b6:	607b      	str	r3, [r7, #4]
200003b8:	687b      	ldr	r3, [r7, #4]
200003ba:	2b07      	cmp	r3, #7
200003bc:	dddd      	ble.n	2000037a <graphic_clear_screen+0xc>
		}
	}
}
200003be:	46c0      	nop			; (mov r8, r8)
200003c0:	46bd      	mov	sp, r7
200003c2:	b002      	add	sp, #8
200003c4:	bd80      	pop	{r7, pc}

200003c6 <pixel>:


void pixel(unsigned char x, unsigned char y, unsigned char set) {
200003c6:	b590      	push	{r4, r7, lr}
200003c8:	b085      	sub	sp, #20
200003ca:	af00      	add	r7, sp, #0
200003cc:	0004      	movs	r4, r0
200003ce:	0008      	movs	r0, r1
200003d0:	0011      	movs	r1, r2
200003d2:	1dfb      	adds	r3, r7, #7
200003d4:	1c22      	adds	r2, r4, #0
200003d6:	701a      	strb	r2, [r3, #0]
200003d8:	1dbb      	adds	r3, r7, #6
200003da:	1c02      	adds	r2, r0, #0
200003dc:	701a      	strb	r2, [r3, #0]
200003de:	1d7b      	adds	r3, r7, #5
200003e0:	1c0a      	adds	r2, r1, #0
200003e2:	701a      	strb	r2, [r3, #0]
	if(x < 0 || y < 0) return;
	if(x > 127 || y > 63) return;
200003e4:	1dfb      	adds	r3, r7, #7
200003e6:	781b      	ldrb	r3, [r3, #0]
200003e8:	b25b      	sxtb	r3, r3
200003ea:	2b00      	cmp	r3, #0
200003ec:	da00      	bge.n	200003f0 <pixel+0x2a>
200003ee:	e0ae      	b.n	2000054e <pixel+0x188>
200003f0:	1dbb      	adds	r3, r7, #6
200003f2:	781b      	ldrb	r3, [r3, #0]
200003f4:	2b3f      	cmp	r3, #63	; 0x3f
200003f6:	d900      	bls.n	200003fa <pixel+0x34>
200003f8:	e0a9      	b.n	2000054e <pixel+0x188>
	unsigned char mask;
	unsigned char index = y / 8;
200003fa:	230d      	movs	r3, #13
200003fc:	18fb      	adds	r3, r7, r3
200003fe:	1dba      	adds	r2, r7, #6
20000400:	7812      	ldrb	r2, [r2, #0]
20000402:	08d2      	lsrs	r2, r2, #3
20000404:	701a      	strb	r2, [r3, #0]
	
	switch(y % 8) {
20000406:	1dbb      	adds	r3, r7, #6
20000408:	781b      	ldrb	r3, [r3, #0]
2000040a:	2207      	movs	r2, #7
2000040c:	4013      	ands	r3, r2
2000040e:	2b07      	cmp	r3, #7
20000410:	d82c      	bhi.n	2000046c <pixel+0xa6>
20000412:	009a      	lsls	r2, r3, #2
20000414:	4b50      	ldr	r3, [pc, #320]	; (20000558 <pixel+0x192>)
20000416:	18d3      	adds	r3, r2, r3
20000418:	681b      	ldr	r3, [r3, #0]
2000041a:	469f      	mov	pc, r3
		case 0: mask = 1; break;
2000041c:	230f      	movs	r3, #15
2000041e:	18fb      	adds	r3, r7, r3
20000420:	2201      	movs	r2, #1
20000422:	701a      	strb	r2, [r3, #0]
20000424:	e022      	b.n	2000046c <pixel+0xa6>
		case 1: mask = 2; break;
20000426:	230f      	movs	r3, #15
20000428:	18fb      	adds	r3, r7, r3
2000042a:	2202      	movs	r2, #2
2000042c:	701a      	strb	r2, [r3, #0]
2000042e:	e01d      	b.n	2000046c <pixel+0xa6>
		case 2: mask = 4; break;
20000430:	230f      	movs	r3, #15
20000432:	18fb      	adds	r3, r7, r3
20000434:	2204      	movs	r2, #4
20000436:	701a      	strb	r2, [r3, #0]
20000438:	e018      	b.n	2000046c <pixel+0xa6>
		case 3: mask = 8; break;
2000043a:	230f      	movs	r3, #15
2000043c:	18fb      	adds	r3, r7, r3
2000043e:	2208      	movs	r2, #8
20000440:	701a      	strb	r2, [r3, #0]
20000442:	e013      	b.n	2000046c <pixel+0xa6>
		case 4: mask = 16; break;
20000444:	230f      	movs	r3, #15
20000446:	18fb      	adds	r3, r7, r3
20000448:	2210      	movs	r2, #16
2000044a:	701a      	strb	r2, [r3, #0]
2000044c:	e00e      	b.n	2000046c <pixel+0xa6>
		case 5: mask = 32; break;
2000044e:	230f      	movs	r3, #15
20000450:	18fb      	adds	r3, r7, r3
20000452:	2220      	movs	r2, #32
20000454:	701a      	strb	r2, [r3, #0]
20000456:	e009      	b.n	2000046c <pixel+0xa6>
		case 6: mask = 64; break;
20000458:	230f      	movs	r3, #15
2000045a:	18fb      	adds	r3, r7, r3
2000045c:	2240      	movs	r2, #64	; 0x40
2000045e:	701a      	strb	r2, [r3, #0]
20000460:	e004      	b.n	2000046c <pixel+0xa6>
		case 7: mask = 128; break;
20000462:	230f      	movs	r3, #15
20000464:	18fb      	adds	r3, r7, r3
20000466:	2280      	movs	r2, #128	; 0x80
20000468:	701a      	strb	r2, [r3, #0]
2000046a:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0) {
2000046c:	1d7b      	adds	r3, r7, #5
2000046e:	781b      	ldrb	r3, [r3, #0]
20000470:	2b00      	cmp	r3, #0
20000472:	d106      	bne.n	20000482 <pixel+0xbc>
		mask = ~mask;
20000474:	230f      	movs	r3, #15
20000476:	18fb      	adds	r3, r7, r3
20000478:	220f      	movs	r2, #15
2000047a:	18ba      	adds	r2, r7, r2
2000047c:	7812      	ldrb	r2, [r2, #0]
2000047e:	43d2      	mvns	r2, r2
20000480:	701a      	strb	r2, [r3, #0]
	}
	
	unsigned char controller;
	if(x > 63) {
20000482:	1dfb      	adds	r3, r7, #7
20000484:	781b      	ldrb	r3, [r3, #0]
20000486:	2b3f      	cmp	r3, #63	; 0x3f
20000488:	d909      	bls.n	2000049e <pixel+0xd8>
		controller = B_CS2;
2000048a:	230e      	movs	r3, #14
2000048c:	18fb      	adds	r3, r7, r3
2000048e:	2210      	movs	r2, #16
20000490:	701a      	strb	r2, [r3, #0]
		x = x - 64;
20000492:	1dfb      	adds	r3, r7, #7
20000494:	1dfa      	adds	r2, r7, #7
20000496:	7812      	ldrb	r2, [r2, #0]
20000498:	3a40      	subs	r2, #64	; 0x40
2000049a:	701a      	strb	r2, [r3, #0]
2000049c:	e003      	b.n	200004a6 <pixel+0xe0>
	} else {
		controller = B_CS1;
2000049e:	230e      	movs	r3, #14
200004a0:	18fb      	adds	r3, r7, r3
200004a2:	2208      	movs	r2, #8
200004a4:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x, controller);
200004a6:	1dfb      	adds	r3, r7, #7
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	2240      	movs	r2, #64	; 0x40
200004ac:	4313      	orrs	r3, r2
200004ae:	b2da      	uxtb	r2, r3
200004b0:	230e      	movs	r3, #14
200004b2:	18fb      	adds	r3, r7, r3
200004b4:	781b      	ldrb	r3, [r3, #0]
200004b6:	0019      	movs	r1, r3
200004b8:	0010      	movs	r0, r2
200004ba:	f7ff fed5 	bl	20000268 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200004be:	230d      	movs	r3, #13
200004c0:	18fb      	adds	r3, r7, r3
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	2248      	movs	r2, #72	; 0x48
200004c6:	4252      	negs	r2, r2
200004c8:	4313      	orrs	r3, r2
200004ca:	b2da      	uxtb	r2, r3
200004cc:	230e      	movs	r3, #14
200004ce:	18fb      	adds	r3, r7, r3
200004d0:	781b      	ldrb	r3, [r3, #0]
200004d2:	0019      	movs	r1, r3
200004d4:	0010      	movs	r0, r2
200004d6:	f7ff fec7 	bl	20000268 <graphic_write_command>
	unsigned char temp = graphic_read_data(controller);
200004da:	230c      	movs	r3, #12
200004dc:	18fc      	adds	r4, r7, r3
200004de:	230e      	movs	r3, #14
200004e0:	18fb      	adds	r3, r7, r3
200004e2:	781b      	ldrb	r3, [r3, #0]
200004e4:	0018      	movs	r0, r3
200004e6:	f7ff ff02 	bl	200002ee <graphic_read_data>
200004ea:	0003      	movs	r3, r0
200004ec:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
200004ee:	1dfb      	adds	r3, r7, #7
200004f0:	781b      	ldrb	r3, [r3, #0]
200004f2:	2240      	movs	r2, #64	; 0x40
200004f4:	4313      	orrs	r3, r2
200004f6:	b2da      	uxtb	r2, r3
200004f8:	230e      	movs	r3, #14
200004fa:	18fb      	adds	r3, r7, r3
200004fc:	781b      	ldrb	r3, [r3, #0]
200004fe:	0019      	movs	r1, r3
20000500:	0010      	movs	r0, r2
20000502:	f7ff feb1 	bl	20000268 <graphic_write_command>
	
	if(set) {
20000506:	1d7b      	adds	r3, r7, #5
20000508:	781b      	ldrb	r3, [r3, #0]
2000050a:	2b00      	cmp	r3, #0
2000050c:	d00a      	beq.n	20000524 <pixel+0x15e>
		mask = mask | temp;
2000050e:	230f      	movs	r3, #15
20000510:	18fb      	adds	r3, r7, r3
20000512:	220f      	movs	r2, #15
20000514:	18b9      	adds	r1, r7, r2
20000516:	220c      	movs	r2, #12
20000518:	18ba      	adds	r2, r7, r2
2000051a:	7809      	ldrb	r1, [r1, #0]
2000051c:	7812      	ldrb	r2, [r2, #0]
2000051e:	430a      	orrs	r2, r1
20000520:	701a      	strb	r2, [r3, #0]
20000522:	e009      	b.n	20000538 <pixel+0x172>
	} else {
		mask = mask & temp;
20000524:	230f      	movs	r3, #15
20000526:	18fb      	adds	r3, r7, r3
20000528:	220f      	movs	r2, #15
2000052a:	18ba      	adds	r2, r7, r2
2000052c:	210c      	movs	r1, #12
2000052e:	1879      	adds	r1, r7, r1
20000530:	7812      	ldrb	r2, [r2, #0]
20000532:	7809      	ldrb	r1, [r1, #0]
20000534:	400a      	ands	r2, r1
20000536:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
20000538:	230e      	movs	r3, #14
2000053a:	18fb      	adds	r3, r7, r3
2000053c:	781a      	ldrb	r2, [r3, #0]
2000053e:	230f      	movs	r3, #15
20000540:	18fb      	adds	r3, r7, r3
20000542:	781b      	ldrb	r3, [r3, #0]
20000544:	0011      	movs	r1, r2
20000546:	0018      	movs	r0, r3
20000548:	f7ff feae 	bl	200002a8 <graphic_write_data>
2000054c:	e000      	b.n	20000550 <pixel+0x18a>
	if(x > 127 || y > 63) return;
2000054e:	46c0      	nop			; (mov r8, r8)
	
20000550:	46bd      	mov	sp, r7
20000552:	b005      	add	sp, #20
20000554:	bd90      	pop	{r4, r7, pc}
20000556:	46c0      	nop			; (mov r8, r8)
20000558:	200007ec 	andcs	r0, r0, ip, ror #15

2000055c <draw_object>:
#include "object.h"
#include "graphic.h"

void draw_object(POBJECT this) {
2000055c:	b580      	push	{r7, lr}
2000055e:	b084      	sub	sp, #16
20000560:	af00      	add	r7, sp, #0
20000562:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
20000564:	2300      	movs	r3, #0
20000566:	60fb      	str	r3, [r7, #12]
20000568:	e020      	b.n	200005ac <draw_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 1);
2000056a:	687b      	ldr	r3, [r7, #4]
2000056c:	681a      	ldr	r2, [r3, #0]
2000056e:	68fb      	ldr	r3, [r7, #12]
20000570:	3304      	adds	r3, #4
20000572:	005b      	lsls	r3, r3, #1
20000574:	18d3      	adds	r3, r2, r3
20000576:	3304      	adds	r3, #4
20000578:	781a      	ldrb	r2, [r3, #0]
2000057a:	687b      	ldr	r3, [r7, #4]
2000057c:	68db      	ldr	r3, [r3, #12]
2000057e:	b2db      	uxtb	r3, r3
20000580:	18d3      	adds	r3, r2, r3
20000582:	b2d8      	uxtb	r0, r3
20000584:	687b      	ldr	r3, [r7, #4]
20000586:	681a      	ldr	r2, [r3, #0]
20000588:	68fb      	ldr	r3, [r7, #12]
2000058a:	3304      	adds	r3, #4
2000058c:	005b      	lsls	r3, r3, #1
2000058e:	18d3      	adds	r3, r2, r3
20000590:	3305      	adds	r3, #5
20000592:	781a      	ldrb	r2, [r3, #0]
20000594:	687b      	ldr	r3, [r7, #4]
20000596:	691b      	ldr	r3, [r3, #16]
20000598:	b2db      	uxtb	r3, r3
2000059a:	18d3      	adds	r3, r2, r3
2000059c:	b2db      	uxtb	r3, r3
2000059e:	2201      	movs	r2, #1
200005a0:	0019      	movs	r1, r3
200005a2:	f7ff ff10 	bl	200003c6 <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
200005a6:	68fb      	ldr	r3, [r7, #12]
200005a8:	3301      	adds	r3, #1
200005aa:	60fb      	str	r3, [r7, #12]
200005ac:	68fb      	ldr	r3, [r7, #12]
200005ae:	2b13      	cmp	r3, #19
200005b0:	dddb      	ble.n	2000056a <draw_object+0xe>
	}
}
200005b2:	46c0      	nop			; (mov r8, r8)
200005b4:	46bd      	mov	sp, r7
200005b6:	b004      	add	sp, #16
200005b8:	bd80      	pop	{r7, pc}

200005ba <clear_object>:
void clear_object(POBJECT this) {
200005ba:	b580      	push	{r7, lr}
200005bc:	b084      	sub	sp, #16
200005be:	af00      	add	r7, sp, #0
200005c0:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
200005c2:	2300      	movs	r3, #0
200005c4:	60fb      	str	r3, [r7, #12]
200005c6:	e020      	b.n	2000060a <clear_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 0);
200005c8:	687b      	ldr	r3, [r7, #4]
200005ca:	681a      	ldr	r2, [r3, #0]
200005cc:	68fb      	ldr	r3, [r7, #12]
200005ce:	3304      	adds	r3, #4
200005d0:	005b      	lsls	r3, r3, #1
200005d2:	18d3      	adds	r3, r2, r3
200005d4:	3304      	adds	r3, #4
200005d6:	781a      	ldrb	r2, [r3, #0]
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	68db      	ldr	r3, [r3, #12]
200005dc:	b2db      	uxtb	r3, r3
200005de:	18d3      	adds	r3, r2, r3
200005e0:	b2d8      	uxtb	r0, r3
200005e2:	687b      	ldr	r3, [r7, #4]
200005e4:	681a      	ldr	r2, [r3, #0]
200005e6:	68fb      	ldr	r3, [r7, #12]
200005e8:	3304      	adds	r3, #4
200005ea:	005b      	lsls	r3, r3, #1
200005ec:	18d3      	adds	r3, r2, r3
200005ee:	3305      	adds	r3, #5
200005f0:	781a      	ldrb	r2, [r3, #0]
200005f2:	687b      	ldr	r3, [r7, #4]
200005f4:	691b      	ldr	r3, [r3, #16]
200005f6:	b2db      	uxtb	r3, r3
200005f8:	18d3      	adds	r3, r2, r3
200005fa:	b2db      	uxtb	r3, r3
200005fc:	2200      	movs	r2, #0
200005fe:	0019      	movs	r1, r3
20000600:	f7ff fee1 	bl	200003c6 <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
20000604:	68fb      	ldr	r3, [r7, #12]
20000606:	3301      	adds	r3, #1
20000608:	60fb      	str	r3, [r7, #12]
2000060a:	68fb      	ldr	r3, [r7, #12]
2000060c:	2b13      	cmp	r3, #19
2000060e:	dddb      	ble.n	200005c8 <clear_object+0xe>
	}
}
20000610:	46c0      	nop			; (mov r8, r8)
20000612:	46bd      	mov	sp, r7
20000614:	b004      	add	sp, #16
20000616:	bd80      	pop	{r7, pc}

20000618 <move_object>:
void move_object(POBJECT this) {
20000618:	b580      	push	{r7, lr}
2000061a:	b082      	sub	sp, #8
2000061c:	af00      	add	r7, sp, #0
2000061e:	6078      	str	r0, [r7, #4]
	clear_object(this);
20000620:	687b      	ldr	r3, [r7, #4]
20000622:	0018      	movs	r0, r3
20000624:	f7ff ffc9 	bl	200005ba <clear_object>
	
	this->posX += this->dirX;
20000628:	687b      	ldr	r3, [r7, #4]
2000062a:	68da      	ldr	r2, [r3, #12]
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	685b      	ldr	r3, [r3, #4]
20000630:	18d2      	adds	r2, r2, r3
20000632:	687b      	ldr	r3, [r7, #4]
20000634:	60da      	str	r2, [r3, #12]
	this->posY += this->dirY;
20000636:	687b      	ldr	r3, [r7, #4]
20000638:	691a      	ldr	r2, [r3, #16]
2000063a:	687b      	ldr	r3, [r7, #4]
2000063c:	689b      	ldr	r3, [r3, #8]
2000063e:	18d2      	adds	r2, r2, r3
20000640:	687b      	ldr	r3, [r7, #4]
20000642:	611a      	str	r2, [r3, #16]
	
	if((this->posX < 0) ||  this->posX > 127 ) {
20000644:	687b      	ldr	r3, [r7, #4]
20000646:	68db      	ldr	r3, [r3, #12]
20000648:	2b00      	cmp	r3, #0
2000064a:	db03      	blt.n	20000654 <move_object+0x3c>
2000064c:	687b      	ldr	r3, [r7, #4]
2000064e:	68db      	ldr	r3, [r3, #12]
20000650:	2b7f      	cmp	r3, #127	; 0x7f
20000652:	dd04      	ble.n	2000065e <move_object+0x46>
		this->dirX = -this->dirX;
20000654:	687b      	ldr	r3, [r7, #4]
20000656:	685b      	ldr	r3, [r3, #4]
20000658:	425a      	negs	r2, r3
2000065a:	687b      	ldr	r3, [r7, #4]
2000065c:	605a      	str	r2, [r3, #4]
	}
	if((this->posY < 0) ||  this->posY > 63 ) {
2000065e:	687b      	ldr	r3, [r7, #4]
20000660:	691b      	ldr	r3, [r3, #16]
20000662:	2b00      	cmp	r3, #0
20000664:	db03      	blt.n	2000066e <move_object+0x56>
20000666:	687b      	ldr	r3, [r7, #4]
20000668:	691b      	ldr	r3, [r3, #16]
2000066a:	2b3f      	cmp	r3, #63	; 0x3f
2000066c:	dd04      	ble.n	20000678 <move_object+0x60>
		this->dirY = -this->dirY;
2000066e:	687b      	ldr	r3, [r7, #4]
20000670:	689b      	ldr	r3, [r3, #8]
20000672:	425a      	negs	r2, r3
20000674:	687b      	ldr	r3, [r7, #4]
20000676:	609a      	str	r2, [r3, #8]
	}
	this->draw(this);
20000678:	687b      	ldr	r3, [r7, #4]
2000067a:	695b      	ldr	r3, [r3, #20]
2000067c:	687a      	ldr	r2, [r7, #4]
2000067e:	0010      	movs	r0, r2
20000680:	4798      	blx	r3
}
20000682:	46c0      	nop			; (mov r8, r8)
20000684:	46bd      	mov	sp, r7
20000686:	b002      	add	sp, #8
20000688:	bd80      	pop	{r7, pc}

2000068a <set_object_speed>:

void set_object_speed(POBJECT this, int x, int y) {
2000068a:	b580      	push	{r7, lr}
2000068c:	b084      	sub	sp, #16
2000068e:	af00      	add	r7, sp, #0
20000690:	60f8      	str	r0, [r7, #12]
20000692:	60b9      	str	r1, [r7, #8]
20000694:	607a      	str	r2, [r7, #4]
	this->dirX = x;
20000696:	68fb      	ldr	r3, [r7, #12]
20000698:	68ba      	ldr	r2, [r7, #8]
2000069a:	605a      	str	r2, [r3, #4]
	this->dirY = y;
2000069c:	68fb      	ldr	r3, [r7, #12]
2000069e:	687a      	ldr	r2, [r7, #4]
200006a0:	609a      	str	r2, [r3, #8]
200006a2:	46c0      	nop			; (mov r8, r8)
200006a4:	46bd      	mov	sp, r7
200006a6:	b004      	add	sp, #16
200006a8:	bd80      	pop	{r7, pc}
	...

200006ac <init_app>:

void init_app(void) {
200006ac:	b580      	push	{r7, lr}
200006ae:	af00      	add	r7, sp, #0
	*GPIO_MODER = 0x55555555;
200006b0:	4b02      	ldr	r3, [pc, #8]	; (200006bc <init_app+0x10>)
200006b2:	4a03      	ldr	r2, [pc, #12]	; (200006c0 <init_app+0x14>)
200006b4:	601a      	str	r2, [r3, #0]
}
200006b6:	46c0      	nop			; (mov r8, r8)
200006b8:	46bd      	mov	sp, r7
200006ba:	bd80      	pop	{r7, pc}
200006bc:	40021000 	andmi	r1, r2, r0
200006c0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200006c4 <main>:

extern OBJECT ball;

void main(void) {
200006c4:	b580      	push	{r7, lr}
200006c6:	b082      	sub	sp, #8
200006c8:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
200006ca:	4b0a      	ldr	r3, [pc, #40]	; (200006f4 <main+0x30>)
200006cc:	607b      	str	r3, [r7, #4]
	init_app();
200006ce:	f7ff ffed 	bl	200006ac <init_app>
	graphic_initalize();
200006d2:	f7ff fe21 	bl	20000318 <graphic_initalize>
  #ifndef SIMULATOR
	graphic_clear_screen();
  #endif
  
	p->set_speed(p, 16, 16);
200006d6:	687b      	ldr	r3, [r7, #4]
200006d8:	6a1b      	ldr	r3, [r3, #32]
200006da:	6878      	ldr	r0, [r7, #4]
200006dc:	2210      	movs	r2, #16
200006de:	2110      	movs	r1, #16
200006e0:	4798      	blx	r3
	while(1) {
		p->move(p);
200006e2:	687b      	ldr	r3, [r7, #4]
200006e4:	69db      	ldr	r3, [r3, #28]
200006e6:	687a      	ldr	r2, [r7, #4]
200006e8:	0010      	movs	r0, r2
200006ea:	4798      	blx	r3
		delay_milli(40);
200006ec:	2028      	movs	r0, #40	; 0x28
200006ee:	f000 f83b 	bl	20000768 <delay_milli>
		p->move(p);
200006f2:	e7f6      	b.n	200006e2 <main+0x1e>
200006f4:	200007c8 	andcs	r0, r0, r8, asr #15

200006f8 <delay_250ns>:
#include "timer.h"


void delay_250ns(void) {
200006f8:	b580      	push	{r7, lr}
200006fa:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
200006fc:	4b0c      	ldr	r3, [pc, #48]	; (20000730 <delay_250ns+0x38>)
200006fe:	2200      	movs	r2, #0
20000700:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
20000702:	4b0c      	ldr	r3, [pc, #48]	; (20000734 <delay_250ns+0x3c>)
20000704:	2231      	movs	r2, #49	; 0x31
20000706:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000708:	4b0b      	ldr	r3, [pc, #44]	; (20000738 <delay_250ns+0x40>)
2000070a:	2200      	movs	r2, #0
2000070c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000070e:	4b08      	ldr	r3, [pc, #32]	; (20000730 <delay_250ns+0x38>)
20000710:	2205      	movs	r2, #5
20000712:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
20000714:	46c0      	nop			; (mov r8, r8)
20000716:	4b06      	ldr	r3, [pc, #24]	; (20000730 <delay_250ns+0x38>)
20000718:	681a      	ldr	r2, [r3, #0]
2000071a:	2380      	movs	r3, #128	; 0x80
2000071c:	025b      	lsls	r3, r3, #9
2000071e:	4013      	ands	r3, r2
20000720:	d0f9      	beq.n	20000716 <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
20000722:	4b03      	ldr	r3, [pc, #12]	; (20000730 <delay_250ns+0x38>)
20000724:	2200      	movs	r2, #0
20000726:	601a      	str	r2, [r3, #0]
}
20000728:	46c0      	nop			; (mov r8, r8)
2000072a:	46bd      	mov	sp, r7
2000072c:	bd80      	pop	{r7, pc}
2000072e:	46c0      	nop			; (mov r8, r8)
20000730:	e000e010 	and	lr, r0, r0, lsl r0
20000734:	e000e014 	and	lr, r0, r4, lsl r0
20000738:	e000e018 	and	lr, r0, r8, lsl r0

2000073c <delay_mikro>:

void delay_mikro(unsigned int us) {
2000073c:	b580      	push	{r7, lr}
2000073e:	b082      	sub	sp, #8
20000740:	af00      	add	r7, sp, #0
20000742:	6078      	str	r0, [r7, #4]
	while(us--) {
20000744:	e007      	b.n	20000756 <delay_mikro+0x1a>
		delay_250ns();
20000746:	f7ff ffd7 	bl	200006f8 <delay_250ns>
		delay_250ns();
2000074a:	f7ff ffd5 	bl	200006f8 <delay_250ns>
		delay_250ns();
2000074e:	f7ff ffd3 	bl	200006f8 <delay_250ns>
		delay_250ns();
20000752:	f7ff ffd1 	bl	200006f8 <delay_250ns>
	while(us--) {
20000756:	687b      	ldr	r3, [r7, #4]
20000758:	1e5a      	subs	r2, r3, #1
2000075a:	607a      	str	r2, [r7, #4]
2000075c:	2b00      	cmp	r3, #0
2000075e:	d1f2      	bne.n	20000746 <delay_mikro+0xa>
	}
}
20000760:	46c0      	nop			; (mov r8, r8)
20000762:	46bd      	mov	sp, r7
20000764:	b002      	add	sp, #8
20000766:	bd80      	pop	{r7, pc}

20000768 <delay_milli>:

void delay_milli(unsigned int ms) {
20000768:	b580      	push	{r7, lr}
2000076a:	b082      	sub	sp, #8
2000076c:	af00      	add	r7, sp, #0
2000076e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_mikro(ms);
20000770:	687b      	ldr	r3, [r7, #4]
20000772:	0018      	movs	r0, r3
20000774:	f7ff ffe2 	bl	2000073c <delay_mikro>
	#else
		delay_mikro(1000 * ms);
	#endif
}
20000778:	46c0      	nop			; (mov r8, r8)
2000077a:	46bd      	mov	sp, r7
2000077c:	b002      	add	sp, #8
2000077e:	bd80      	pop	{r7, pc}

20000780 <delay_500ns>:

void delay_500ns(void) {
20000780:	b580      	push	{r7, lr}
20000782:	af00      	add	r7, sp, #0
	delay_250ns();
20000784:	f7ff ffb8 	bl	200006f8 <delay_250ns>
	delay_250ns();
20000788:	f7ff ffb6 	bl	200006f8 <delay_250ns>
}
2000078c:	46c0      	nop			; (mov r8, r8)
2000078e:	46bd      	mov	sp, r7
20000790:	bd80      	pop	{r7, pc}
20000792:	46c0      	nop			; (mov r8, r8)

20000794 <ball_geometry>:
20000794:	0000000c 	andeq	r0, r0, ip
20000798:	00000004 	andeq	r0, r0, r4
2000079c:	00000004 	andeq	r0, r0, r4
200007a0:	02000100 	andeq	r0, r0, #0, 2
200007a4:	01010001 	tsteq	r1, r1
200007a8:	03010201 	movweq	r0, #4609	; 0x1201
200007ac:	01020002 	tsteq	r2, r2
200007b0:	03020202 	movweq	r0, #8706	; 0x2202
200007b4:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200007c8 <ball>:
200007c8:	20000794 	mulcs	r0, r4, r7
	...
200007d4:	00000001 	andeq	r0, r0, r1
200007d8:	00000001 	andeq	r0, r0, r1
200007dc:	2000055d 	andcs	r0, r0, sp, asr r5
200007e0:	200005bb 			; <UNDEFINED> instruction: 0x200005bb
200007e4:	20000619 	andcs	r0, r0, r9, lsl r6
200007e8:	2000068b 	andcs	r0, r0, fp, lsl #13
200007ec:	2000041c 	andcs	r0, r0, ip, lsl r4
200007f0:	20000426 	andcs	r0, r0, r6, lsr #8
200007f4:	20000430 	andcs	r0, r0, r0, lsr r4
200007f8:	2000043a 	andcs	r0, r0, sl, lsr r4
200007fc:	20000444 	andcs	r0, r0, r4, asr #8
20000800:	2000044e 	andcs	r0, r0, lr, asr #8
20000804:	20000458 	andcs	r0, r0, r8, asr r4
20000808:	20000462 	andcs	r0, r0, r2, ror #8

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000019e 	muleq	r0, lr, r1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000085 	andeq	r0, r0, r5, lsl #1
  10:	0000250c 	andeq	r2, r0, ip, lsl #10
  14:	00000000 	andeq	r0, r0, r0
  18:	005d0200 	subseq	r0, sp, r0, lsl #4
  1c:	01020000 	mrseq	r0, (UNDEF: 2)
  20:	00003a05 	andeq	r3, r0, r5, lsl #20
  24:	00780300 	rsbseq	r0, r8, r0, lsl #6
  28:	003a0601 	eorseq	r0, sl, r1, lsl #12
  2c:	03000000 	movweq	r0, #0
  30:	07010079 	smlsdxeq	r1, r9, r0, r0
  34:	0000003a 	andeq	r0, r0, sl, lsr r0
  38:	01040001 	tsteq	r4, r1
  3c:	00007708 	andeq	r7, r0, r8, lsl #14
  40:	01530500 	cmpeq	r3, r0, lsl #10
  44:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
  48:	00000019 	andeq	r0, r0, r9, lsl r0
  4c:	00012702 	andeq	r2, r1, r2, lsl #14
  50:	0b013400 	bleq	4d058 <startup-0x1ffb2fa8>
  54:	00000088 	andeq	r0, r0, r8, lsl #1
  58:	00014906 	andeq	r4, r1, r6, lsl #18
  5c:	880c0100 	stmdahi	ip, {r8}
  60:	00000000 	andeq	r0, r0, r0
  64:	00000a06 	andeq	r0, r0, r6, lsl #20
  68:	880d0100 	stmdahi	sp, {r8}
  6c:	04000000 	streq	r0, [r0], #-0
  70:	00001006 	andeq	r1, r0, r6
  74:	880e0100 	stmdahi	lr, {r8}
  78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  7c:	00787003 	rsbseq	r7, r8, r3
  80:	008f0f01 	addeq	r0, pc, r1, lsl #30
  84:	000c0000 	andeq	r0, ip, r0
  88:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  8c:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  90:	00000041 	andeq	r0, r0, r1, asr #32
  94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
  98:	00009f09 	andeq	r9, r0, r9, lsl #30
  9c:	04001300 	streq	r1, [r0], #-768	; 0xfffffd00
  a0:	01360704 	teqeq	r6, r4, lsl #14
  a4:	1e050000 	cdpne	0, 0, cr0, cr5, cr0, {0}
  a8:	01000001 	tsteq	r0, r1
  ac:	00004c10 	andeq	r4, r0, r0, lsl ip
  b0:	011d0500 	tsteq	sp, r0, lsl #10
  b4:	10010000 	andne	r0, r1, r0
  b8:	000000bc 	strheq	r0, [r0], -ip
  bc:	004c040a 	subeq	r0, ip, sl, lsl #8
  c0:	59020000 	stmdbpl	r2, {}	; <UNPREDICTABLE>
  c4:	24000001 	strcs	r0, [r0], #-1
  c8:	013b1201 	teqeq	fp, r1, lsl #4
  cc:	67030000 	strvs	r0, [r3, -r0]
  d0:	01006f65 	tsteq	r0, r5, ror #30
  d4:	0000b113 	andeq	fp, r0, r3, lsl r1
  d8:	44060000 	strmi	r0, [r6], #-0
  dc:	01000001 	tsteq	r0, r1
  e0:	00008814 	andeq	r8, r0, r4, lsl r8
  e4:	00060400 	andeq	r0, r6, r0, lsl #8
  e8:	01000000 	mrseq	r0, (UNDEF: 0)
  ec:	00008814 	andeq	r8, r0, r4, lsl r8
  f0:	3f060800 	svccc	0x00060800
  f4:	01000001 	tsteq	r0, r1
  f8:	00008815 	andeq	r8, r0, r5, lsl r8
  fc:	05060c00 	streq	r0, [r6, #-3072]	; 0xfffff400
 100:	01000000 	mrseq	r0, (UNDEF: 0)
 104:	00008815 	andeq	r8, r0, r5, lsl r8
 108:	16061000 	strne	r1, [r6], -r0
 10c:	01000000 	mrseq	r0, (UNDEF: 0)
 110:	00014c16 	andeq	r4, r1, r6, lsl ip
 114:	ba061400 	blt	18511c <startup-0x1fe7aee4>
 118:	01000001 	tsteq	r0, r1
 11c:	00014c17 	andeq	r4, r1, r7, lsl ip
 120:	72061800 	andvc	r1, r6, #0, 16
 124:	01000000 	mrseq	r0, (UNDEF: 0)
 128:	00014c18 	andeq	r4, r1, r8, lsl ip
 12c:	1b061c00 	blne	187134 <startup-0x1fe78ecc>
 130:	01000000 	mrseq	r0, (UNDEF: 0)
 134:	00016719 	andeq	r6, r1, r9, lsl r7
 138:	0b002000 	bleq	8140 <startup-0x1fff7ec0>
 13c:	00000146 	andeq	r0, r0, r6, asr #2
 140:	0001460c 	andeq	r4, r1, ip, lsl #12
 144:	040a0000 	streq	r0, [sl], #-0
 148:	000000c2 	andeq	r0, r0, r2, asr #1
 14c:	013b040a 	teqeq	fp, sl, lsl #8
 150:	670b0000 	strvs	r0, [fp, -r0]
 154:	0c000001 	stceq	0, cr0, [r0], {1}
 158:	00000146 	andeq	r0, r0, r6, asr #2
 15c:	0000880c 	andeq	r8, r0, ip, lsl #16
 160:	00880c00 	addeq	r0, r8, r0, lsl #24
 164:	0a000000 	beq	16c <startup-0x1ffffe94>
 168:	00015204 	andeq	r5, r1, r4, lsl #4
 16c:	03340500 	teqeq	r4, #0, 10
 170:	1a010000 	bne	40178 <startup-0x1ffbfe88>
 174:	000000c2 	andeq	r0, r0, r2, asr #1
 178:	0001310d 	andeq	r3, r1, sp, lsl #2
 17c:	6d050200 	sfmvs	f0, 4, [r5, #-0]
 180:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 184:	00000064 	andeq	r0, r0, r4, rrx
 188:	00a60303 	adceq	r0, r6, r3, lsl #6
 18c:	03050000 	movweq	r0, #20480	; 0x5000
 190:	20000794 	mulcs	r0, r4, r7
 194:	0001780f 	andeq	r7, r1, pc, lsl #16
 198:	050e0300 	streq	r0, [lr, #-768]	; 0xfffffd00
 19c:	0007c803 	andeq	ip, r7, r3, lsl #16
 1a0:	02d30020 	sbcseq	r0, r3, #32
 1a4:	00040000 	andeq	r0, r4, r0
 1a8:	000000b8 	strheq	r0, [r0], -r8
 1ac:	00850104 	addeq	r0, r5, r4, lsl #2
 1b0:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
 1b4:	10000002 	andne	r0, r0, r2
 1b8:	4c200000 	stcmi	0, cr0, [r0], #-0
 1bc:	6e000005 	cdpvs	0, 0, cr0, cr0, cr5, {0}
 1c0:	02000000 	andeq	r0, r0, #0
 1c4:	000001f7 	strdeq	r0, [r0], -r7
 1c8:	002c2002 	eoreq	r2, ip, r2
 1cc:	01030000 	mrseq	r0, (UNDEF: 3)
 1d0:	00007708 	andeq	r7, r0, r8, lsl #14
 1d4:	01920400 	orrseq	r0, r2, r0, lsl #8
 1d8:	8a010000 	bhi	401e0 <startup-0x1ffbfe20>
 1dc:	200003c6 	andcs	r0, r0, r6, asr #7
 1e0:	00000196 	muleq	r0, r6, r1
 1e4:	00a79c01 	adceq	r9, r7, r1, lsl #24
 1e8:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
 1ec:	2c8a0100 	stfcss	f0, [sl], {0}
 1f0:	02000000 	andeq	r0, r0, #0
 1f4:	79056791 	stmdbvc	r5, {r0, r4, r7, r8, r9, sl, sp, lr}
 1f8:	2c8a0100 	stfcss	f0, [sl], {0}
 1fc:	02000000 	andeq	r0, r0, #0
 200:	73056691 	movwvc	r6, #22161	; 0x5691
 204:	01007465 	tsteq	r0, r5, ror #8
 208:	00002c8a 	andeq	r2, r0, sl, lsl #25
 20c:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
 210:	0001f206 	andeq	pc, r1, r6, lsl #4
 214:	2c8d0100 	stfcss	f0, [sp], {0}
 218:	02000000 	andeq	r0, r0, #0
 21c:	12066f91 	andne	r6, r6, #580	; 0x244
 220:	01000002 	tsteq	r0, r2
 224:	00002c8e 	andeq	r2, r0, lr, lsl #25
 228:	6d910200 	lfmvs	f0, 4, [r1]
 22c:	0002b306 	andeq	fp, r2, r6, lsl #6
 230:	2c9f0100 	ldfcss	f0, [pc], {0}
 234:	02000000 	andeq	r0, r0, #0
 238:	0d066e91 	stceq	14, cr6, [r6, #-580]	; 0xfffffdbc
 23c:	01000002 	tsteq	r0, r2
 240:	00002ca9 	andeq	r2, r0, r9, lsr #25
 244:	6c910200 	lfmvs	f0, 4, [r1], {0}
 248:	02570400 	subseq	r0, r7, #0, 8
 24c:	7f010000 	svcvc	0x00010000
 250:	2000036e 	andcs	r0, r0, lr, ror #6
 254:	00000058 	andeq	r0, r0, r8, asr r0
 258:	00ed9c01 	rsceq	r9, sp, r1, lsl #24
 25c:	74070000 	strvc	r0, [r7], #-0
 260:	4a200003 	bmi	800274 <startup-0x1f7ffd8c>
 264:	06000000 	streq	r0, [r0], -r0
 268:	0000023a 	andeq	r0, r0, sl, lsr r2
 26c:	00ed8001 	rsceq	r8, sp, r1
 270:	91020000 	mrsls	r0, (UNDEF: 2)
 274:	03980774 	orrseq	r0, r8, #116, 14	; 0x1d00000
 278:	001a2000 	andseq	r2, sl, r0
 27c:	61080000 	mrsvs	r0, (UNDEF: 8)
 280:	01006464 	tsteq	r0, r4, ror #8
 284:	0000ed83 	andeq	lr, r0, r3, lsl #27
 288:	70910200 	addsvc	r0, r1, r0, lsl #4
 28c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 290:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 294:	3f040074 	svccc	0x00040074
 298:	01000002 	tsteq	r0, r2
 29c:	00031871 	andeq	r1, r3, r1, ror r8
 2a0:	00005620 	andeq	r5, r0, r0, lsr #12
 2a4:	289c0100 	ldmcs	ip, {r8}
 2a8:	0a000001 	beq	2b4 <startup-0x1ffffd4c>
 2ac:	00000174 	andeq	r0, r0, r4, ror r1
 2b0:	00ed7301 	rsceq	r7, sp, r1, lsl #6
 2b4:	011a0000 	tsteq	sl, r0
 2b8:	000b0000 	andeq	r0, fp, r0
 2bc:	00026c0c 	andeq	r6, r2, ip, lsl #24
 2c0:	ed750100 	ldfe	f0, [r5, #-0]
 2c4:	0b000000 	bleq	2cc <startup-0x1ffffd34>
 2c8:	800d0000 	andhi	r0, sp, r0
 2cc:	01000001 	tsteq	r0, r1
 2d0:	00002c6c 	andeq	r2, r0, ip, ror #24
 2d4:	0002ee00 	andeq	lr, r2, r0, lsl #28
 2d8:	00002a20 	andeq	r2, r0, r0, lsr #20
 2dc:	509c0100 	addspl	r0, ip, r0, lsl #2
 2e0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 2e4:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
 2e8:	002c6c01 	eoreq	r6, ip, r1, lsl #24
 2ec:	91020000 	mrsls	r0, (UNDEF: 2)
 2f0:	df040077 	svcle	0x00040077
 2f4:	01000001 	tsteq	r0, r1
 2f8:	0002a864 	andeq	sl, r2, r4, ror #16
 2fc:	00004620 	andeq	r4, r0, r0, lsr #12
 300:	829c0100 	addshi	r0, ip, #0, 2
 304:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 308:	0000018d 	andeq	r0, r0, sp, lsl #3
 30c:	002c6401 	eoreq	r6, ip, r1, lsl #8
 310:	91020000 	mrsls	r0, (UNDEF: 2)
 314:	02b30e77 	adcseq	r0, r3, #1904	; 0x770
 318:	64010000 	strvs	r0, [r1], #-0
 31c:	0000002c 	andeq	r0, r0, ip, lsr #32
 320:	00769102 	rsbseq	r9, r6, r2, lsl #2
 324:	00015e04 	andeq	r5, r1, r4, lsl #28
 328:	685d0100 	ldmdavs	sp, {r8}^
 32c:	40200002 	eormi	r0, r0, r2
 330:	01000000 	mrseq	r0, (UNDEF: 0)
 334:	0001b49c 	muleq	r1, ip, r4
 338:	016c0e00 	cmneq	ip, r0, lsl #28
 33c:	5d010000 	stcpl	0, cr0, [r1, #-0]
 340:	0000002c 	andeq	r0, r0, ip, lsr #32
 344:	0e779102 	expeqs	f1, f2
 348:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
 34c:	002c5d01 	eoreq	r5, ip, r1, lsl #26
 350:	91020000 	mrsls	r0, (UNDEF: 2)
 354:	ff040076 			; <UNDEFINED> instruction: 0xff040076
 358:	01000001 	tsteq	r0, r1
 35c:	0001e845 	andeq	lr, r1, r5, asr #16
 360:	00008020 	andeq	r8, r0, r0, lsr #32
 364:	f39c0100 	vaddw.u16	q0, q6, d0
 368:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 36c:	00000251 	andeq	r0, r0, r1, asr r2
 370:	002c4501 	eoreq	r4, ip, r1, lsl #10
 374:	91020000 	mrsls	r0, (UNDEF: 2)
 378:	02b30e77 	adcseq	r0, r3, #1904	; 0x770
 37c:	45010000 	strmi	r0, [r1, #-0]
 380:	0000002c 	andeq	r0, r0, ip, lsr #32
 384:	0c769102 	ldfeqp	f1, [r6], #-8
 388:	000001c0 	andeq	r0, r0, r0, asr #3
 38c:	00ed2001 	rsceq	r2, sp, r1
 390:	000b0000 	andeq	r0, fp, r0
 394:	02180d00 	andseq	r0, r8, #0, 26
 398:	2f010000 	svccs	0x00010000
 39c:	0000002c 	andeq	r0, r0, ip, lsr #32
 3a0:	20000158 	andcs	r0, r0, r8, asr r1
 3a4:	00000090 	muleq	r0, r0, r0
 3a8:	02399c01 	eorseq	r9, r9, #256	; 0x100
 3ac:	b30e0000 	movwlt	r0, #57344	; 0xe000
 3b0:	01000002 	tsteq	r0, r2
 3b4:	00002c2f 	andeq	r2, r0, pc, lsr #24
 3b8:	6f910200 	svcvs	0x00910200
 3bc:	0001c00a 	andeq	ip, r1, sl
 3c0:	ed200100 	stfs	f0, [r0, #-0]
 3c4:	2b000000 	blcs	3cc <startup-0x1ffffc34>
 3c8:	0b000002 	bleq	3d8 <startup-0x1ffffc28>
 3cc:	56520800 	ldrbpl	r0, [r2], -r0, lsl #16
 3d0:	2c370100 	ldfcss	f0, [r7], #-0
 3d4:	02000000 	andeq	r0, r0, #0
 3d8:	04007791 	streq	r7, [r0], #-1937	; 0xfffff86f
 3dc:	000001cc 	andeq	r0, r0, ip, asr #3
 3e0:	00e61b01 	rsceq	r1, r6, r1, lsl #22
 3e4:	00722000 	rsbseq	r2, r2, r0
 3e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 3ec:	00000272 	andeq	r0, r0, r2, ror r2
 3f0:	0001c00a 	andeq	ip, r1, sl
 3f4:	ed200100 	stfs	f0, [r0, #-0]
 3f8:	5f000000 	svcpl	0x00000000
 3fc:	0b000002 	bleq	40c <startup-0x1ffffbf4>
 400:	00000f00 	andeq	r0, r0, r0, lsl #30
 404:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
 408:	2c260100 	stfcss	f0, [r6], #-0
 40c:	02000000 	andeq	r0, r0, #0
 410:	00007791 	muleq	r0, r1, r7
 414:	00019804 	andeq	r9, r1, r4, lsl #16
 418:	7c0b0100 	stfvcs	f0, [fp], {-0}
 41c:	6a200000 	bvs	800424 <startup-0x1f7ffbdc>
 420:	01000000 	mrseq	r0, (UNDEF: 0)
 424:	0002969c 	muleq	r2, ip, r6
 428:	02b30e00 	adcseq	r0, r3, #0, 28
 42c:	0b010000 	bleq	40434 <startup-0x1ffbfbcc>
 430:	00000021 	andeq	r0, r0, r1, lsr #32
 434:	00779102 	rsbseq	r9, r7, r2, lsl #2
 438:	0001a910 	andeq	sl, r1, r0, lsl r9
 43c:	48070100 	stmdami	r7, {r8}
 440:	34200000 	strtcc	r0, [r0], #-0
 444:	01000000 	mrseq	r0, (UNDEF: 0)
 448:	0002b89c 	muleq	r2, ip, r8
 44c:	00780500 	rsbseq	r0, r8, r0, lsl #10
 450:	00210701 	eoreq	r0, r1, r1, lsl #14
 454:	91020000 	mrsls	r0, (UNDEF: 2)
 458:	25110077 	ldrcs	r0, [r1, #-119]	; 0xffffff89
 45c:	01000002 	tsteq	r0, r2
 460:	00001003 	andeq	r1, r0, r3
 464:	00003820 	andeq	r3, r0, r0, lsr #16
 468:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
 46c:	03010078 	movweq	r0, #4216	; 0x1078
 470:	00000021 	andeq	r0, r0, r1, lsr #32
 474:	00779102 	rsbseq	r9, r7, r2, lsl #2
 478:	00024200 	andeq	r4, r2, r0, lsl #4
 47c:	ca000400 	bgt	1484 <startup-0x1fffeb7c>
 480:	04000001 	streq	r0, [r0], #-1
 484:	00008501 	andeq	r8, r0, r1, lsl #10
 488:	02be0c00 	adcseq	r0, lr, #0, 24
 48c:	055c0000 	ldrbeq	r0, [ip, #-0]
 490:	014e2000 	mrseq	r2, (UNDEF: 78)
 494:	019e0000 	orrseq	r0, lr, r0
 498:	5d020000 	stcpl	0, cr0, [r2, #-0]
 49c:	02000000 	andeq	r0, r0, #0
 4a0:	00420502 	subeq	r0, r2, r2, lsl #10
 4a4:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
 4a8:	42060200 	andmi	r0, r6, #0, 4
 4ac:	00000000 	andeq	r0, r0, r0
 4b0:	02007903 	andeq	r7, r0, #49152	; 0xc000
 4b4:	00004207 	andeq	r4, r0, r7, lsl #4
 4b8:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
 4bc:	00770801 	rsbseq	r0, r7, r1, lsl #16
 4c0:	53050000 	movwpl	r0, #20480	; 0x5000
 4c4:	02000001 	andeq	r0, r0, #1
 4c8:	00002108 	andeq	r2, r0, r8, lsl #2
 4cc:	01270200 			; <UNDEFINED> instruction: 0x01270200
 4d0:	02340000 	eorseq	r0, r4, #0
 4d4:	0000900b 	andeq	r9, r0, fp
 4d8:	01490600 	cmpeq	r9, r0, lsl #12
 4dc:	0c020000 	stceq	0, cr0, [r2], {-0}
 4e0:	00000090 	muleq	r0, r0, r0
 4e4:	000a0600 	andeq	r0, sl, r0, lsl #12
 4e8:	0d020000 	stceq	0, cr0, [r2, #-0]
 4ec:	00000090 	muleq	r0, r0, r0
 4f0:	00100604 	andseq	r0, r0, r4, lsl #12
 4f4:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
 4f8:	00000090 	muleq	r0, r0, r0
 4fc:	78700308 	ldmdavc	r0!, {r3, r8, r9}^
 500:	970f0200 	strls	r0, [pc, -r0, lsl #4]
 504:	0c000000 	stceq	0, cr0, [r0], {-0}
 508:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
 50c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 510:	00004908 	andeq	r4, r0, r8, lsl #18
 514:	0000a700 	andeq	sl, r0, r0, lsl #14
 518:	00a70900 	adceq	r0, r7, r0, lsl #18
 51c:	00130000 	andseq	r0, r3, r0
 520:	36070404 	strcc	r0, [r7], -r4, lsl #8
 524:	05000001 	streq	r0, [r0, #-1]
 528:	0000011d 	andeq	r0, r0, sp, lsl r1
 52c:	00b91002 	adcseq	r1, r9, r2
 530:	040a0000 	streq	r0, [sl], #-0
 534:	00000054 	andeq	r0, r0, r4, asr r0
 538:	00015902 	andeq	r5, r1, r2, lsl #18
 53c:	12022400 	andne	r2, r2, #0, 8
 540:	00000138 	andeq	r0, r0, r8, lsr r1
 544:	6f656703 	svcvs	0x00656703
 548:	ae130200 	cdpge	2, 1, cr0, cr3, cr0, {0}
 54c:	00000000 	andeq	r0, r0, r0
 550:	00014406 	andeq	r4, r1, r6, lsl #8
 554:	90140200 	andsls	r0, r4, r0, lsl #4
 558:	04000000 	streq	r0, [r0], #-0
 55c:	00000006 	andeq	r0, r0, r6
 560:	90140200 	andsls	r0, r4, r0, lsl #4
 564:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 568:	00013f06 	andeq	r3, r1, r6, lsl #30
 56c:	90150200 	andsls	r0, r5, r0, lsl #4
 570:	0c000000 	stceq	0, cr0, [r0], {-0}
 574:	00000506 	andeq	r0, r0, r6, lsl #10
 578:	90150200 	andsls	r0, r5, r0, lsl #4
 57c:	10000000 	andne	r0, r0, r0
 580:	00001606 	andeq	r1, r0, r6, lsl #12
 584:	49160200 	ldmdbmi	r6, {r9}
 588:	14000001 	strne	r0, [r0], #-1
 58c:	0001ba06 	andeq	fp, r1, r6, lsl #20
 590:	49170200 	ldmdbmi	r7, {r9}
 594:	18000001 	stmdane	r0, {r0}
 598:	00007206 	andeq	r7, r0, r6, lsl #4
 59c:	49180200 	ldmdbmi	r8, {r9}
 5a0:	1c000001 	stcne	0, cr0, [r0], {1}
 5a4:	00001b06 	andeq	r1, r0, r6, lsl #22
 5a8:	64190200 	ldrvs	r0, [r9], #-512	; 0xfffffe00
 5ac:	20000001 	andcs	r0, r0, r1
 5b0:	01430b00 	cmpeq	r3, r0, lsl #22
 5b4:	430c0000 	movwmi	r0, #49152	; 0xc000
 5b8:	00000001 	andeq	r0, r0, r1
 5bc:	00bf040a 	adcseq	r0, pc, sl, lsl #8
 5c0:	040a0000 	streq	r0, [sl], #-0
 5c4:	00000138 	andeq	r0, r0, r8, lsr r1
 5c8:	0001640b 	andeq	r6, r1, fp, lsl #8
 5cc:	01430c00 	cmpeq	r3, r0, lsl #24
 5d0:	900c0000 	andls	r0, ip, r0
 5d4:	0c000000 	stceq	0, cr0, [r0], {-0}
 5d8:	00000090 	muleq	r0, r0, r0
 5dc:	4f040a00 	svcmi	0x00040a00
 5e0:	05000001 	streq	r0, [r0, #-1]
 5e4:	00000333 	andeq	r0, r0, r3, lsr r3
 5e8:	01431a02 	cmpeq	r3, r2, lsl #20
 5ec:	f80d0000 			; <UNDEFINED> instruction: 0xf80d0000
 5f0:	01000002 	tsteq	r0, r2
 5f4:	00068a1d 	andeq	r8, r6, sp, lsl sl
 5f8:	00002020 	andeq	r2, r0, r0, lsr #32
 5fc:	b19c0100 	orrslt	r0, ip, r0, lsl #2
 600:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 604:	00000316 	andeq	r0, r0, r6, lsl r3
 608:	016a1d01 	cmneq	sl, r1, lsl #26
 60c:	91020000 	mrsls	r0, (UNDEF: 2)
 610:	00780f74 	rsbseq	r0, r8, r4, ror pc
 614:	00901d01 	addseq	r1, r0, r1, lsl #26
 618:	91020000 	mrsls	r0, (UNDEF: 2)
 61c:	00790f70 	rsbseq	r0, r9, r0, ror pc
 620:	00901d01 	addseq	r1, r0, r1, lsl #26
 624:	91020000 	mrsls	r0, (UNDEF: 2)
 628:	2710006c 	ldrcs	r0, [r0, -ip, rrx]
 62c:	01000003 	tsteq	r0, r3
 630:	0006180e 	andeq	r1, r6, lr, lsl #16
 634:	00007220 	andeq	r7, r0, r0, lsr #4
 638:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
 63c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 640:	00000316 	andeq	r0, r0, r6, lsl r3
 644:	016a0e01 	cmneq	sl, r1, lsl #28
 648:	91020000 	mrsls	r0, (UNDEF: 2)
 64c:	09100074 	ldmdbeq	r0, {r2, r4, r5, r6}
 650:	01000003 	tsteq	r0, r3
 654:	0005ba09 	andeq	fp, r5, r9, lsl #20
 658:	00005e20 	andeq	r5, r0, r0, lsr #28
 65c:	0f9c0100 	svceq	0x009c0100
 660:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 664:	00000316 	andeq	r0, r0, r6, lsl r3
 668:	016a0901 	cmneq	sl, r1, lsl #18
 66c:	91020000 	mrsls	r0, (UNDEF: 2)
 670:	05c2116c 	strbeq	r1, [r2, #364]	; 0x16c
 674:	004e2000 	subeq	r2, lr, r0
 678:	69120000 	ldmdbvs	r2, {}	; <UNPREDICTABLE>
 67c:	900a0100 	andls	r0, sl, r0, lsl #2
 680:	02000000 	andeq	r0, r0, #0
 684:	00007491 	muleq	r0, r1, r4
 688:	00031b13 	andeq	r1, r3, r3, lsl fp
 68c:	5c040100 	stfpls	f0, [r4], {-0}
 690:	5e200005 	cdppl	0, 2, cr0, cr0, cr5, {0}
 694:	01000000 	mrseq	r0, (UNDEF: 0)
 698:	03160e9c 	tsteq	r6, #156, 28	; 0x9c0
 69c:	04010000 	streq	r0, [r1], #-0
 6a0:	0000016a 	andeq	r0, r0, sl, ror #2
 6a4:	116c9102 	cmnne	ip, r2, lsl #2
 6a8:	20000564 	andcs	r0, r0, r4, ror #10
 6ac:	0000004e 	andeq	r0, r0, lr, asr #32
 6b0:	01006912 	tsteq	r0, r2, lsl r9
 6b4:	00009005 	andeq	r9, r0, r5
 6b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 6bc:	cc000000 	stcgt	0, cr0, [r0], {-0}
 6c0:	04000001 	streq	r0, [r0], #-1
 6c4:	0002d900 	andeq	sp, r2, r0, lsl #18
 6c8:	85010400 	strhi	r0, [r1, #-1024]	; 0xfffffc00
 6cc:	0c000000 	stceq	0, cr0, [r0], {-0}
 6d0:	00000344 	andeq	r0, r0, r4, asr #6
 6d4:	00000018 	andeq	r0, r0, r8, lsl r0
 6d8:	00000000 	andeq	r0, r0, r0
 6dc:	00000256 	andeq	r0, r0, r6, asr r2
 6e0:	77080102 	strvc	r0, [r8, -r2, lsl #2]
 6e4:	03000000 	movweq	r0, #0
 6e8:	0000005d 	andeq	r0, r0, sp, asr r0
 6ec:	49050202 	stmdbmi	r5, {r1, r9}
 6f0:	04000000 	streq	r0, [r0], #-0
 6f4:	06020078 			; <UNDEFINED> instruction: 0x06020078
 6f8:	00000021 	andeq	r0, r0, r1, lsr #32
 6fc:	00790400 	rsbseq	r0, r9, r0, lsl #8
 700:	00210702 	eoreq	r0, r1, r2, lsl #14
 704:	00010000 	andeq	r0, r1, r0
 708:	00015305 	andeq	r5, r1, r5, lsl #6
 70c:	28080200 	stmdacs	r8, {r9}
 710:	03000000 	movweq	r0, #0
 714:	00000127 	andeq	r0, r0, r7, lsr #2
 718:	900b0234 	andls	r0, fp, r4, lsr r2
 71c:	06000000 	streq	r0, [r0], -r0
 720:	00000149 	andeq	r0, r0, r9, asr #2
 724:	00900c02 	addseq	r0, r0, r2, lsl #24
 728:	06000000 	streq	r0, [r0], -r0
 72c:	0000000a 	andeq	r0, r0, sl
 730:	00900d02 	addseq	r0, r0, r2, lsl #26
 734:	06040000 	streq	r0, [r4], -r0
 738:	00000010 	andeq	r0, r0, r0, lsl r0
 73c:	00900e02 	addseq	r0, r0, r2, lsl #28
 740:	04080000 	streq	r0, [r8], #-0
 744:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 748:	0000970f 	andeq	r9, r0, pc, lsl #14
 74c:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 750:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 754:	49080074 	stmdbmi	r8, {r2, r4, r5, r6}
 758:	a7000000 	strge	r0, [r0, -r0]
 75c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 760:	000000a7 	andeq	r0, r0, r7, lsr #1
 764:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 768:	00013607 	andeq	r3, r1, r7, lsl #12
 76c:	011d0500 	tsteq	sp, r0, lsl #10
 770:	10020000 	andne	r0, r2, r0
 774:	000000b9 	strheq	r0, [r0], -r9
 778:	0054040a 	subseq	r0, r4, sl, lsl #8
 77c:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
 780:	24000001 	strcs	r0, [r0], #-1
 784:	01381202 	teqeq	r8, r2, lsl #4
 788:	67040000 	strvs	r0, [r4, -r0]
 78c:	02006f65 	andeq	r6, r0, #404	; 0x194
 790:	0000ae13 	andeq	sl, r0, r3, lsl lr
 794:	44060000 	strmi	r0, [r6], #-0
 798:	02000001 	andeq	r0, r0, #1
 79c:	00009014 	andeq	r9, r0, r4, lsl r0
 7a0:	00060400 	andeq	r0, r6, r0, lsl #8
 7a4:	02000000 	andeq	r0, r0, #0
 7a8:	00009014 	andeq	r9, r0, r4, lsl r0
 7ac:	3f060800 	svccc	0x00060800
 7b0:	02000001 	andeq	r0, r0, #1
 7b4:	00009015 	andeq	r9, r0, r5, lsl r0
 7b8:	05060c00 	streq	r0, [r6, #-3072]	; 0xfffff400
 7bc:	02000000 	andeq	r0, r0, #0
 7c0:	00009015 	andeq	r9, r0, r5, lsl r0
 7c4:	16061000 	strne	r1, [r6], -r0
 7c8:	02000000 	andeq	r0, r0, #0
 7cc:	00014916 	andeq	r4, r1, r6, lsl r9
 7d0:	ba061400 	blt	1857d8 <startup-0x1fe7a828>
 7d4:	02000001 	andeq	r0, r0, #1
 7d8:	00014917 	andeq	r4, r1, r7, lsl r9
 7dc:	72061800 	andvc	r1, r6, #0, 16
 7e0:	02000000 	andeq	r0, r0, #0
 7e4:	00014918 	andeq	r4, r1, r8, lsl r9
 7e8:	1b061c00 	blne	1877f0 <startup-0x1fe78810>
 7ec:	02000000 	andeq	r0, r0, #0
 7f0:	00016419 	andeq	r6, r1, r9, lsl r4
 7f4:	0b002000 	bleq	87fc <startup-0x1fff7804>
 7f8:	00000143 	andeq	r0, r0, r3, asr #2
 7fc:	0001430c 	andeq	r4, r1, ip, lsl #6
 800:	040a0000 	streq	r0, [sl], #-0
 804:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
 808:	0138040a 	teqeq	r8, sl, lsl #8
 80c:	640b0000 	strvs	r0, [fp], #-0
 810:	0c000001 	stceq	0, cr0, [r0], {1}
 814:	00000143 	andeq	r0, r0, r3, asr #2
 818:	0000900c 	andeq	r9, r0, ip
 81c:	00900c00 	addseq	r0, r0, r0, lsl #24
 820:	0a000000 	beq	828 <startup-0x1ffff7d8>
 824:	00014f04 	andeq	r4, r1, r4, lsl #30
 828:	03340500 	teqeq	r4, #0, 10
 82c:	1a020000 	bne	80834 <startup-0x1ff7f7cc>
 830:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
 834:	00033305 	andeq	r3, r3, r5, lsl #6
 838:	431a0200 	tstmi	sl, #0, 4
 83c:	0d000001 	stceq	0, cr0, [r0, #-4]
 840:	00000131 	andeq	r0, r0, r1, lsr r1
 844:	016a0503 	cmneq	sl, r3, lsl #10
 848:	870e0000 	strhi	r0, [lr, -r0]
 84c:	01000003 	tsteq	r0, r3
 850:	0006c419 	andeq	ip, r6, r9, lsl r4
 854:	00003420 	andeq	r3, r0, r0, lsr #8
 858:	ad9c0100 	ldfges	f0, [ip]
 85c:	0f000001 	svceq	0x00000001
 860:	1a010070 	bne	40a28 <startup-0x1ffbf5d8>
 864:	00000175 	andeq	r0, r0, r5, ror r1
 868:	00749102 	rsbseq	r9, r4, r2, lsl #2
 86c:	00033b10 	andeq	r3, r3, r0, lsl fp
 870:	ac130100 	ldfges	f0, [r3], {-0}
 874:	18200006 	stmdane	r0!, {r1, r2}
 878:	01000000 	mrseq	r0, (UNDEF: 0)
 87c:	037f109c 	cmneq	pc, #156	; 0x9c
 880:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 884:	20000000 	andcs	r0, r0, r0
 888:	0000000c 	andeq	r0, r0, ip
 88c:	8d009c01 	stchi	12, cr9, [r0, #-4]
 890:	04000000 	streq	r0, [r0], #-0
 894:	0003b800 	andeq	fp, r3, r0, lsl #16
 898:	85010400 	strhi	r0, [r1, #-1024]	; 0xfffffc00
 89c:	0c000000 	stceq	0, cr0, [r0], {-0}
 8a0:	00000399 	muleq	r0, r9, r3
 8a4:	200006f8 	strdcs	r0, [r0], -r8
 8a8:	0000009a 	muleq	r0, sl, r0
 8ac:	000002fd 	strdeq	r0, [r0], -sp
 8b0:	0001c002 	andeq	ip, r1, r2
 8b4:	80200100 	eorhi	r0, r0, r0, lsl #2
 8b8:	12200007 	eorne	r0, r0, #7
 8bc:	01000000 	mrseq	r0, (UNDEF: 0)
 8c0:	026c039c 	rsbeq	r0, ip, #156, 6	; 0x70000002
 8c4:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
 8c8:	20000768 	andcs	r0, r0, r8, ror #14
 8cc:	00000018 	andeq	r0, r0, r8, lsl r0
 8d0:	00559c01 	subseq	r9, r5, r1, lsl #24
 8d4:	6d040000 	stcvs	0, cr0, [r4, #-0]
 8d8:	18010073 	stmdane	r1, {r0, r1, r4, r5, r6}
 8dc:	00000055 	andeq	r0, r0, r5, asr r0
 8e0:	00749102 	rsbseq	r9, r4, r2, lsl #2
 8e4:	8c070405 	cfstrshi	mvf0, [r7], {5}
 8e8:	03000003 	movweq	r0, #3
 8ec:	00000174 	andeq	r0, r0, r4, ror r1
 8f0:	073c0f01 	ldreq	r0, [ip, -r1, lsl #30]!
 8f4:	002c2000 	eoreq	r2, ip, r0
 8f8:	9c010000 	stcls	0, cr0, [r1], {-0}
 8fc:	0000007f 	andeq	r0, r0, pc, ror r0
 900:	00737504 	rsbseq	r7, r3, r4, lsl #10
 904:	00550f01 	subseq	r0, r5, r1, lsl #30
 908:	91020000 	mrsls	r0, (UNDEF: 2)
 90c:	d2060074 	andle	r0, r6, #116	; 0x74
 910:	01000003 	tsteq	r0, r3
 914:	0006f804 	andeq	pc, r6, r4, lsl #16
 918:	00004420 	andeq	r4, r0, r0, lsr #8
 91c:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	0017100e 	andseq	r1, r7, lr
   c:	01130200 	tsteq	r3, r0, lsl #4
  10:	0b0b0e03 	bleq	2c3824 <startup-0x1fd3c7dc>
  14:	0b3b0b3a 	bleq	ec2d04 <startup-0x1f13d2fc>
  18:	00001301 	andeq	r1, r0, r1, lsl #6
  1c:	03000d03 	movweq	r0, #3331	; 0xd03
  20:	3b0b3a08 	blcc	2ce848 <startup-0x1fd317b8>
  24:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  28:	0400000b 	streq	r0, [r0], #-11
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	0e030b3e 	vmoveq.16	d3[0], r0
  34:	16050000 	strne	r0, [r5], -r0
  38:	3a0e0300 	bcc	380c40 <startup-0x1fc7f3c0>
  3c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  40:	06000013 			; <UNDEFINED> instruction: 0x06000013
  44:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  48:	0b3b0b3a 	bleq	ec2d38 <startup-0x1f13d2c8>
  4c:	0b381349 	bleq	e04d78 <startup-0x1f1fb288>
  50:	24070000 	strcs	r0, [r7], #-0
  54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  58:	0008030b 	andeq	r0, r8, fp, lsl #6
  5c:	01010800 	tsteq	r1, r0, lsl #16
  60:	13011349 	movwne	r1, #4937	; 0x1349
  64:	21090000 	mrscs	r0, (UNDEF: 9)
  68:	2f134900 	svccs	0x00134900
  6c:	0a00000b 	beq	a0 <startup-0x1fffff60>
  70:	0b0b000f 	bleq	2c00b4 <startup-0x1fd3ff4c>
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  7c:	00130119 	andseq	r0, r3, r9, lsl r1
  80:	00050c00 	andeq	r0, r5, r0, lsl #24
  84:	00001349 	andeq	r1, r0, r9, asr #6
  88:	0300340d 	movweq	r3, #1037	; 0x40d
  8c:	3b0b3a0e 	blcc	2ce8cc <startup-0x1fd31734>
  90:	3f13490b 	svccc	0x0013490b
  94:	00193c19 	andseq	r3, r9, r9, lsl ip
  98:	00340e00 	eorseq	r0, r4, r0, lsl #28
  9c:	0b3a0e03 	bleq	e838b0 <startup-0x1f17c750>
  a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  a8:	340f0000 	strcc	r0, [pc], #-0	; b0 <startup-0x1fffff50>
  ac:	3a134700 	bcc	4d1cb4 <startup-0x1fb2e34c>
  b0:	020b3b0b 	andeq	r3, fp, #11264	; 0x2c00
  b4:	00000018 	andeq	r0, r0, r8, lsl r0
  b8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  bc:	030b130e 	movweq	r1, #45838	; 0xb30e
  c0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
  c4:	00171006 	andseq	r1, r7, r6
  c8:	00160200 	andseq	r0, r6, r0, lsl #4
  cc:	0b3a0e03 	bleq	e838e0 <startup-0x1f17c720>
  d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d4:	24030000 	strcs	r0, [r3], #-0
  d8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  dc:	000e030b 	andeq	r0, lr, fp, lsl #6
  e0:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
  e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e8:	0b3b0b3a 	bleq	ec2dd8 <startup-0x1f13d228>
  ec:	01111927 	tsteq	r1, r7, lsr #18
  f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  f4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  f8:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
  fc:	08030005 	stmdaeq	r3, {r0, r2}
 100:	0b3b0b3a 	bleq	ec2df0 <startup-0x1f13d210>
 104:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 108:	34060000 	strcc	r0, [r6], #-0
 10c:	3a0e0300 	bcc	380d14 <startup-0x1fc7f2ec>
 110:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 114:	00180213 	andseq	r0, r8, r3, lsl r2
 118:	010b0700 	tsteq	fp, r0, lsl #14
 11c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 120:	34080000 	strcc	r0, [r8], #-0
 124:	3a080300 	bcc	200d2c <startup-0x1fdff2d4>
 128:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 12c:	00180213 	andseq	r0, r8, r3, lsl r2
 130:	00240900 	eoreq	r0, r4, r0, lsl #18
 134:	0b3e0b0b 	bleq	f82d68 <startup-0x1f07d298>
 138:	00000803 	andeq	r0, r0, r3, lsl #16
 13c:	3f012e0a 	svccc	0x00012e0a
 140:	3a0e0319 	bcc	380dac <startup-0x1fc7f254>
 144:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 148:	01193c13 	tsteq	r9, r3, lsl ip
 14c:	0b000013 	bleq	1a0 <startup-0x1ffffe60>
 150:	00000018 	andeq	r0, r0, r8, lsl r0
 154:	3f012e0c 	svccc	0x00012e0c
 158:	3a0e0319 	bcc	380dc4 <startup-0x1fc7f23c>
 15c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 160:	00193c13 	andseq	r3, r9, r3, lsl ip
 164:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 168:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 16c:	0b3b0b3a 	bleq	ec2e5c <startup-0x1f13d1a4>
 170:	13491927 	movtne	r1, #39207	; 0x9927
 174:	06120111 			; <UNDEFINED> instruction: 0x06120111
 178:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 17c:	00130119 	andseq	r0, r3, r9, lsl r1
 180:	00050e00 	andeq	r0, r5, r0, lsl #28
 184:	0b3a0e03 	bleq	e83998 <startup-0x1f17c668>
 188:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 18c:	00001802 	andeq	r1, r0, r2, lsl #16
 190:	55010b0f 	strpl	r0, [r1, #-2831]	; 0xfffff4f1
 194:	10000017 	andne	r0, r0, r7, lsl r0
 198:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1ac:	00130119 	andseq	r0, r3, r9, lsl r1
 1b0:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 1b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1b8:	0b3b0b3a 	bleq	ec2ea8 <startup-0x1f13d158>
 1bc:	01111927 	tsteq	r1, r7, lsr #18
 1c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1c4:	00194297 	mulseq	r9, r7, r2
 1c8:	11010000 	mrsne	r0, (UNDEF: 1)
 1cc:	130e2501 	movwne	r2, #58625	; 0xe501
 1d0:	110e030b 	tstne	lr, fp, lsl #6
 1d4:	10061201 	andne	r1, r6, r1, lsl #4
 1d8:	02000017 	andeq	r0, r0, #23
 1dc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 1e0:	0b3a0b0b 	bleq	e82e14 <startup-0x1f17d1ec>
 1e4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 1e8:	0d030000 	stceq	0, cr0, [r3, #-0]
 1ec:	3a080300 	bcc	200df4 <startup-0x1fdff20c>
 1f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1f4:	000b3813 	andeq	r3, fp, r3, lsl r8
 1f8:	00240400 	eoreq	r0, r4, r0, lsl #8
 1fc:	0b3e0b0b 	bleq	f82e30 <startup-0x1f07d1d0>
 200:	00000e03 	andeq	r0, r0, r3, lsl #28
 204:	03001605 	movweq	r1, #1541	; 0x605
 208:	3b0b3a0e 	blcc	2cea48 <startup-0x1fd315b8>
 20c:	0013490b 	andseq	r4, r3, fp, lsl #18
 210:	000d0600 	andeq	r0, sp, r0, lsl #12
 214:	0b3a0e03 	bleq	e83a28 <startup-0x1f17c5d8>
 218:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 21c:	00000b38 	andeq	r0, r0, r8, lsr fp
 220:	0b002407 	bleq	9244 <startup-0x1fff6dbc>
 224:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 228:	08000008 	stmdaeq	r0, {r3}
 22c:	13490101 	movtne	r0, #37121	; 0x9101
 230:	00001301 	andeq	r1, r0, r1, lsl #6
 234:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 238:	000b2f13 	andeq	r2, fp, r3, lsl pc
 23c:	000f0a00 	andeq	r0, pc, r0, lsl #20
 240:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 244:	150b0000 	strne	r0, [fp, #-0]
 248:	01192701 	tsteq	r9, r1, lsl #14
 24c:	0c000013 	stceq	0, cr0, [r0], {19}
 250:	13490005 	movtne	r0, #36869	; 0x9005
 254:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 258:	03193f01 	tsteq	r9, #1, 30
 25c:	3b0b3a0e 	blcc	2cea9c <startup-0x1fd31564>
 260:	1119270b 	tstne	r9, fp, lsl #14
 264:	40061201 	andmi	r1, r6, r1, lsl #4
 268:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 26c:	00001301 	andeq	r1, r0, r1, lsl #6
 270:	0300050e 	movweq	r0, #1294	; 0x50e
 274:	3b0b3a0e 	blcc	2ceab4 <startup-0x1fd3154c>
 278:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 27c:	0f000018 	svceq	0x00000018
 280:	08030005 	stmdaeq	r3, {r0, r2}
 284:	0b3b0b3a 	bleq	ec2f74 <startup-0x1f13d08c>
 288:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 28c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 290:	03193f01 	tsteq	r9, #1, 30
 294:	3b0b3a0e 	blcc	2cead4 <startup-0x1fd3152c>
 298:	1119270b 	tstne	r9, fp, lsl #14
 29c:	40061201 	andmi	r1, r6, r1, lsl #4
 2a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2a4:	00001301 	andeq	r1, r0, r1, lsl #6
 2a8:	11010b11 	tstne	r1, r1, lsl fp
 2ac:	00061201 	andeq	r1, r6, r1, lsl #4
 2b0:	00341200 	eorseq	r1, r4, r0, lsl #4
 2b4:	0b3a0803 	bleq	e822c8 <startup-0x1f17dd38>
 2b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2bc:	00001802 	andeq	r1, r0, r2, lsl #16
 2c0:	3f012e13 	svccc	0x00012e13
 2c4:	3a0e0319 	bcc	380f30 <startup-0x1fc7f0d0>
 2c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2d0:	96184006 	ldrls	r4, [r8], -r6
 2d4:	00001942 	andeq	r1, r0, r2, asr #18
 2d8:	01110100 	tsteq	r1, r0, lsl #2
 2dc:	0b130e25 	bleq	4c3b78 <startup-0x1fb3c488>
 2e0:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
 2e4:	17100111 			; <UNDEFINED> instruction: 0x17100111
 2e8:	24020000 	strcs	r0, [r2], #-0
 2ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2f0:	000e030b 	andeq	r0, lr, fp, lsl #6
 2f4:	01130300 	tsteq	r3, r0, lsl #6
 2f8:	0b0b0e03 	bleq	2c3b0c <startup-0x1fd3c4f4>
 2fc:	0b3b0b3a 	bleq	ec2fec <startup-0x1f13d014>
 300:	00001301 	andeq	r1, r0, r1, lsl #6
 304:	03000d04 	movweq	r0, #3332	; 0xd04
 308:	3b0b3a08 	blcc	2ceb30 <startup-0x1fd314d0>
 30c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 310:	0500000b 	streq	r0, [r0, #-11]
 314:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 318:	0b3b0b3a 	bleq	ec3008 <startup-0x1f13cff8>
 31c:	00001349 	andeq	r1, r0, r9, asr #6
 320:	03000d06 	movweq	r0, #3334	; 0xd06
 324:	3b0b3a0e 	blcc	2ceb64 <startup-0x1fd3149c>
 328:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 32c:	0700000b 	streq	r0, [r0, -fp]
 330:	0b0b0024 	bleq	2c03c8 <startup-0x1fd3fc38>
 334:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 338:	01080000 	mrseq	r0, (UNDEF: 8)
 33c:	01134901 	tsteq	r3, r1, lsl #18
 340:	09000013 	stmdbeq	r0, {r0, r1, r4}
 344:	13490021 	movtne	r0, #36897	; 0x9021
 348:	00000b2f 	andeq	r0, r0, pc, lsr #22
 34c:	0b000f0a 	bleq	3f7c <startup-0x1fffc084>
 350:	0013490b 	andseq	r4, r3, fp, lsl #18
 354:	01150b00 	tsteq	r5, r0, lsl #22
 358:	13011927 	movwne	r1, #6439	; 0x1927
 35c:	050c0000 	streq	r0, [ip, #-0]
 360:	00134900 	andseq	r4, r3, r0, lsl #18
 364:	00340d00 	eorseq	r0, r4, r0, lsl #26
 368:	0b3a0e03 	bleq	e83b7c <startup-0x1f17c484>
 36c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 370:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 374:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 378:	03193f01 	tsteq	r9, #1, 30
 37c:	3b0b3a0e 	blcc	2cebbc <startup-0x1fd31444>
 380:	1119270b 	tstne	r9, fp, lsl #14
 384:	40061201 	andmi	r1, r6, r1, lsl #4
 388:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 38c:	00001301 	andeq	r1, r0, r1, lsl #6
 390:	0300340f 	movweq	r3, #1039	; 0x40f
 394:	3b0b3a08 	blcc	2cebbc <startup-0x1fd31444>
 398:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 39c:	10000018 	andne	r0, r0, r8, lsl r0
 3a0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 3a4:	0b3a0e03 	bleq	e83bb8 <startup-0x1f17c448>
 3a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3b0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3b4:	00000019 	andeq	r0, r0, r9, lsl r0
 3b8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 3bc:	030b130e 	movweq	r1, #45838	; 0xb30e
 3c0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3c4:	00171006 	andseq	r1, r7, r6
 3c8:	002e0200 	eoreq	r0, lr, r0, lsl #4
 3cc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3d0:	0b3b0b3a 	bleq	ec30c0 <startup-0x1f13cf40>
 3d4:	01111927 	tsteq	r1, r7, lsr #18
 3d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3dc:	00194296 	mulseq	r9, r6, r2
 3e0:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
 3e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3e8:	0b3b0b3a 	bleq	ec30d8 <startup-0x1f13cf28>
 3ec:	01111927 	tsteq	r1, r7, lsr #18
 3f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3f4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 3f8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 3fc:	08030005 	stmdaeq	r3, {r0, r2}
 400:	0b3b0b3a 	bleq	ec30f0 <startup-0x1f13cf10>
 404:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 408:	24050000 	strcs	r0, [r5], #-0
 40c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 410:	000e030b 	andeq	r0, lr, fp, lsl #6
 414:	002e0600 	eoreq	r0, lr, r0, lsl #12
 418:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 41c:	0b3b0b3a 	bleq	ec310c <startup-0x1f13cef4>
 420:	01111927 	tsteq	r1, r7, lsr #18
 424:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 428:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000014 	andeq	r0, r0, r4, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
  18:	0000001c 	andeq	r0, r0, ip, lsl r0
  1c:	01a20002 			; <UNDEFINED> instruction: 0x01a20002
  20:	00040000 	andeq	r0, r4, r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000054c 	andeq	r0, r0, ip, asr #10
	...
  38:	0000001c 	andeq	r0, r0, ip, lsl r0
  3c:	04790002 	ldrbteq	r0, [r9], #-2
  40:	00040000 	andeq	r0, r4, r0
  44:	00000000 	andeq	r0, r0, r0
  48:	2000055c 	andcs	r0, r0, ip, asr r5
  4c:	0000014e 	andeq	r0, r0, lr, asr #2
	...
  58:	00000024 	andeq	r0, r0, r4, lsr #32
  5c:	06bf0002 	ldrteq	r0, [pc], r2
  60:	00040000 	andeq	r0, r4, r0
  64:	00000000 	andeq	r0, r0, r0
  68:	200006ac 	andcs	r0, r0, ip, lsr #13
  6c:	0000004c 	andeq	r0, r0, ip, asr #32
  70:	20000000 	andcs	r0, r0, r0
  74:	0000000c 	andeq	r0, r0, ip
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	088f0002 	stmeq	pc, {r1}	; <UNPREDICTABLE>
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	200006f8 	strdcs	r0, [r0], -r8
  94:	0000009a 	muleq	r0, sl, r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000006a 	andeq	r0, r0, sl, rrx
   4:	00640002 	rsbeq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	612f6574 			; <UNDEFINED> instruction: 0x612f6574
  44:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
  48:	00676e6f 	rsbeq	r6, r7, pc, ror #28
  4c:	6a626f00 	bvs	189bc54 <startup-0x1e7643ac>
  50:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
  54:	00010068 	andeq	r0, r1, r8, rrx
  58:	6c616200 	sfmvs	f6, 2, [r1], #-0
  5c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
  60:	62000001 	andvs	r0, r0, #1
  64:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
  68:	00010063 	andeq	r0, r1, r3, rrx
  6c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
  70:	00020000 	andeq	r0, r2, r0
  74:	0000005e 	andeq	r0, r0, lr, asr r0
  78:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  7c:	0101000d 	tsteq	r1, sp
  80:	00000101 	andeq	r0, r0, r1, lsl #2
  84:	00000100 	andeq	r0, r0, r0, lsl #2
  88:	2f3a4301 	svccs	0x003a4301
  8c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  90:	61482f73 	hvcvs	33523	; 0x82f3
  94:	7375706d 	cmnvc	r5, #109	; 0x6d
  98:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  9c:	706f746b 	rsbvc	r7, pc, fp, ror #8
  a0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  a4:	2f373130 	svccs	0x00373130
  a8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  ac:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  b0:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
  b4:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
  b8:	67000067 	strvs	r0, [r0, -r7, rrx]
  bc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  c0:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
  c4:	00000100 	andeq	r0, r0, r0, lsl #2
  c8:	70617267 	rsbvc	r7, r1, r7, ror #4
  cc:	2e636968 	vnmulcs.f16	s13, s6, s17	; <UNPREDICTABLE>
  d0:	00010068 	andeq	r0, r1, r8, rrx
  d4:	05000000 	streq	r0, [r0, #-0]
  d8:	00001002 	andeq	r1, r0, r2
  dc:	e5671420 	strb	r1, [r7, #-1056]!	; 0xfffffbe0
  e0:	68d76776 	ldmvs	r7, {r1, r2, r4, r5, r6, r8, r9, sl, sp, lr}^
  e4:	033d4b67 	teqeq	sp, #105472	; 0x19c00
  e8:	76033c0b 	strvc	r3, [r3], -fp, lsl #24
  ec:	443d4b20 	ldrtmi	r4, [sp], #-2848	; 0xfffff4e0
  f0:	4b207903 	blmi	81e504 <startup-0x1f7e1afc>
  f4:	4b1c413d 	blmi	7105f0 <startup-0x1f8efa10>
  f8:	3d4c3e3d 	stclcc	14, cr3, [ip, #-244]	; 0xffffff0c
  fc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 100:	3d2f3d30 	stccc	13, cr3, [pc, #-192]!	; 48 <startup-0x1fffffb8>
 104:	7a034b2f 	bvc	d2dc8 <startup-0x1ff2d238>
 108:	3d232766 	stccc	7, cr2, [r3, #-408]!	; 0xfffffe68
 10c:	3d67bc3d 	stclcc	12, cr11, [r7, #-244]!	; 0xffffff0c
 110:	2f593d3d 	svccs	0x00593d3d
 114:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
 118:	303d4b3d 	eorscc	r4, sp, sp, lsr fp
 11c:	3d303d4b 	ldccc	13, cr3, [r0, #-300]!	; 0xfffffed4
 120:	594b91ca 	stmdbpl	fp, {r1, r3, r6, r7, r8, ip, pc}^
 124:	3f2f3d2f 	svccc	0x002f3d2f
 128:	59313d59 	ldmdbpl	r1!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 12c:	3d3d313d 	ldfccs	f3, [sp, #-244]!	; 0xffffff0c
 130:	3d91763d 	ldccc	6, cr7, [r1, #244]	; 0xf4
 134:	4c833d59 	stcmi	13, cr3, [r3], {89}	; 0x59
 138:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 13c:	674c833d 	smlaldxvs	r8, ip, sp, r3
 140:	2f4c6759 	svccs	0x004c6759
 144:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 148:	4b4b4b3d 	blmi	12d2e44 <startup-0x1ed2d1bc>
 14c:	3e3d4b4b 	vsubcc.f64	d4, d13, d11
 150:	4bad3d3d 	blmi	feb4f64c <ball+0xdeb4ee84>
 154:	03040200 	movweq	r0, #16896	; 0x4200
 158:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 15c:	02004903 	andeq	r4, r0, #49152	; 0xc000
 160:	3c060104 	stfccs	f0, [r6], {4}
 164:	02040200 	andeq	r0, r4, #0, 4
 168:	02003906 	andeq	r3, r0, #98304	; 0x18000
 16c:	3c060104 	stfccs	f0, [r6], {4}
 170:	e64d4306 	strb	r4, [sp], -r6, lsl #6
 174:	01040200 	mrseq	r0, R12_usr
 178:	5a066606 	bpl	199998 <startup-0x1fe66668>
 17c:	5959ad68 	ldmdbpl	r9, {r3, r5, r6, r8, sl, fp, sp, pc}^
 180:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 184:	784b5b59 	stmdavc	fp, {r0, r3, r4, r6, r8, r9, fp, ip, lr}^
 188:	4d684b4b 	fstmdbxmi	r8!, {d20-d56}	;@ Deprecated
 18c:	bc9fd7bb 	ldclt	7, cr13, [pc], {187}	; 0xbb
 190:	03a1ae4b 			; <UNDEFINED> instruction: 0x03a1ae4b
 194:	2803ac5a 	stmdacs	r3, {r1, r3, r4, r6, sl, fp, sp, pc}
 198:	00060220 	andeq	r0, r6, r0, lsr #4
 19c:	00b40101 	adcseq	r0, r4, r1, lsl #2
 1a0:	00020000 	andeq	r0, r2, r0
 1a4:	0000005c 	andeq	r0, r0, ip, asr r0
 1a8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 1ac:	0101000d 	tsteq	r1, sp
 1b0:	00000101 	andeq	r0, r0, r1, lsl #2
 1b4:	00000100 	andeq	r0, r0, r0, lsl #2
 1b8:	2f3a4301 	svccs	0x003a4301
 1bc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1c0:	61482f73 	hvcvs	33523	; 0x82f3
 1c4:	7375706d 	cmnvc	r5, #109	; 0x6d
 1c8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1cc:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1d0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 1d4:	2f373130 	svccs	0x00373130
 1d8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 1dc:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 1e0:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
 1e4:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
 1e8:	6f000067 	svcvs	0x00000067
 1ec:	63656a62 	cmnvs	r5, #401408	; 0x62000
 1f0:	00632e74 	rsbeq	r2, r3, r4, ror lr
 1f4:	6f000001 	svcvs	0x00000001
 1f8:	63656a62 	cmnvs	r5, #401408	; 0x62000
 1fc:	00682e74 	rsbeq	r2, r8, r4, ror lr
 200:	00000001 	andeq	r0, r0, r1
 204:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
 208:	15200005 	strne	r0, [r0, #-5]!
 20c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 210:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 214:	c7080304 	strgt	r0, [r8, -r4, lsl #6]
 218:	01040200 	mrseq	r0, R12_usr
 21c:	3f063c06 	svccc	0x00063c06
 220:	02004b4b 	andeq	r4, r0, #76800	; 0x12c00
 224:	003d0304 	eorseq	r0, sp, r4, lsl #6
 228:	08030402 	stmdaeq	r3, {r1, sl}
 22c:	040200c7 	streq	r0, [r2], #-199	; 0xffffff39
 230:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 234:	4c4b4b3f 	vmovmi	d31, r4, fp
 238:	02007675 	andeq	r7, r0, #122683392	; 0x7500000
 23c:	4a060104 	bmi	180654 <startup-0x1fe7f9ac>
 240:	005a4b06 	subseq	r4, sl, r6, lsl #22
 244:	06010402 	streq	r0, [r1], -r2, lsl #8
 248:	5a4b064a 	bpl	12c1b78 <startup-0x1ed3e488>
 24c:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
 250:	0004023d 	andeq	r0, r4, sp, lsr r2
 254:	00a30101 	adceq	r0, r3, r1, lsl #2
 258:	00020000 	andeq	r0, r2, r0
 25c:	00000067 	andeq	r0, r0, r7, rrx
 260:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 264:	0101000d 	tsteq	r1, sp
 268:	00000101 	andeq	r0, r0, r1, lsl #2
 26c:	00000100 	andeq	r0, r0, r0, lsl #2
 270:	2f3a4301 	svccs	0x003a4301
 274:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 278:	61482f73 	hvcvs	33523	; 0x82f3
 27c:	7375706d 	cmnvc	r5, #109	; 0x6d
 280:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 284:	706f746b 	rsbvc	r7, pc, fp, ror #8
 288:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 28c:	2f373130 	svccs	0x00373130
 290:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 294:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 298:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
 29c:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
 2a0:	73000067 	movwvc	r0, #103	; 0x67
 2a4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 2a8:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 2ac:	00000100 	andeq	r0, r0, r0, lsl #2
 2b0:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 2b4:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 2b8:	00000100 	andeq	r0, r0, r0, lsl #2
 2bc:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 2c0:	0100682e 	tsteq	r0, lr, lsr #16
 2c4:	00000000 	andeq	r0, r0, r0
 2c8:	00000205 	andeq	r0, r0, r5, lsl #4
 2cc:	09032000 	stmdbeq	r3, {sp}
 2d0:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
 2d4:	01010003 	tsteq	r1, r3
 2d8:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
 2dc:	03200006 			; <UNDEFINED> instruction: 0x03200006
 2e0:	3d2f0112 	stfccs	f0, [pc, #-72]!	; 2a0 <startup-0x1ffffd60>
 2e4:	2f2f3d78 	svccs	0x002f3d78
 2e8:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
 2ec:	02006801 	andeq	r6, r0, #65536	; 0x10000
 2f0:	00590104 	subseq	r0, r9, r4, lsl #2
 2f4:	3b010402 	blcc	41304 <startup-0x1ffbecfc>
 2f8:	01000302 	tsteq	r0, r2, lsl #6
 2fc:	00007f01 	andeq	r7, r0, r1, lsl #30
 300:	4f000200 	svcmi	0x00000200
 304:	02000000 	andeq	r0, r0, #0
 308:	0d0efb01 	vstreq	d15, [lr, #-4]
 30c:	01010100 	mrseq	r0, (UNDEF: 17)
 310:	00000001 	andeq	r0, r0, r1
 314:	01000001 	tsteq	r0, r1
 318:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff8dd <ball+0xdffff115>
 31c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 320:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 324:	2f737570 	svccs	0x00737570
 328:	6b736544 	blvs	1cd9840 <startup-0x1e3267c0>
 32c:	2f706f74 	svccs	0x00706f74
 330:	30544144 	subscc	r4, r4, r4, asr #2
 334:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 338:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 33c:	2f657469 	svccs	0x00657469
 340:	6f747561 	svcvs	0x00747561
 344:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 348:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 34c:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 350:	00010063 	andeq	r0, r1, r3, rrx
 354:	05000000 	streq	r0, [r0, #-0]
 358:	0006f802 	andeq	pc, r6, r2, lsl #16
 35c:	3d2f1520 	cfstr32cc	mvfx1, [pc, #-128]!	; 2e4 <startup-0x1ffffd1c>
 360:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 364:	06010402 	streq	r0, [r1], -r2, lsl #8
 368:	3d690620 	stclcc	6, cr0, [r9, #-128]!	; 0xffffff80
 36c:	2f214ba0 	svccs	0x00214ba0
 370:	5e2a2f2f 	cdppl	15, 2, cr2, cr10, cr15, {1}
 374:	4c4e4c4c 	mcrrmi	12, 4, r4, lr, cr12
 378:	022f2f2f 	eoreq	r2, pc, #47, 30	; 0xbc
 37c:	01010003 	tsteq	r1, r3

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	59726964 	ldmdbpl	r2!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	736f7000 	cmnvc	pc, #0
   8:	69730059 	ldmdbvs	r3!, {r0, r3, r4, r6}^
   c:	0058657a 	subseq	r6, r8, sl, ror r5
  10:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  14:	72640059 	rsbvc	r0, r4, #89	; 0x59
  18:	73007761 	movwvc	r7, #1889	; 0x761
  1c:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
  20:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  24:	2f3a4300 	svccs	0x003a4300
  28:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  2c:	61482f73 	hvcvs	33523	; 0x82f3
  30:	7375706d 	cmnvc	r5, #109	; 0x6d
  34:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  38:	706f746b 	rsbvc	r7, pc, fp, ror #8
  3c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  40:	2f373130 	svccs	0x00373130
  44:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  48:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  4c:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
  50:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
  54:	61622f67 	cmnvs	r2, r7, ror #30
  58:	632e6c6c 			; <UNDEFINED> instruction: 0x632e6c6c
  5c:	6f507400 	svcvs	0x00507400
  60:	00746e69 	rsbseq	r6, r4, r9, ror #28
  64:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
  68:	6f65675f 	svcvs	0x0065675f
  6c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  70:	6f6d0079 	svcvs	0x006d0079
  74:	75006576 	strvc	r6, [r0, #-1398]	; 0xfffffa8a
  78:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  7c:	2064656e 	rsbcs	r6, r4, lr, ror #10
  80:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  84:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  88:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  8c:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
  90:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  94:	30373130 	eorscc	r3, r7, r0, lsr r1
  98:	20353132 	eorscs	r3, r5, r2, lsr r1
  9c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  a0:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  a4:	415b2029 	cmpmi	fp, r9, lsr #32
  a8:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff35e <ball+0xdfffeb96>
  ac:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  b0:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  b4:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
  b8:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  bc:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  c0:	6f697369 	svcvs	0x00697369
  c4:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
  c8:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
  cc:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  d0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  d4:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  d8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  dc:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  e0:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  e4:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  e8:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  ec:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  f0:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  f4:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  f8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  fc:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 100:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 104:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 108:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 10c:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 110:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 114:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 118:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 11c:	45475000 	strbmi	r5, [r7, #-0]
 120:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 124:	74005952 	strvc	r5, [r0], #-2386	; 0xfffff6ae
 128:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; 14 <startup-0x1fffffec>
 12c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 130:	6c616200 	sfmvs	f6, 2, [r1], #-0
 134:	6973006c 	ldmdbvs	r3!, {r2, r3, r5, r6}^
 138:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 13c:	70006570 	andvc	r6, r0, r0, ror r5
 140:	0058736f 	subseq	r7, r8, pc, ror #6
 144:	58726964 	ldmdapl	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 148:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 14c:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
 150:	50007374 	andpl	r7, r0, r4, ror r3
 154:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 158:	624f7400 	subvs	r7, pc, #0, 8
 15c:	7267006a 	rsbvc	r0, r7, #106	; 0x6a
 160:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 164:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 168:	5f657469 	svcpl	0x00657469
 16c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 170:	00646e61 	rsbeq	r6, r4, r1, ror #28
 174:	616c6564 	cmnvs	ip, r4, ror #10
 178:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 17c:	006f726b 	rsbeq	r7, pc, fp, ror #4
 180:	70617267 	rsbvc	r7, r1, r7, ror #4
 184:	5f636968 	svcpl	0x00636968
 188:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 18c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 190:	69700061 	ldmdbvs	r0!, {r0, r5, r6}^
 194:	006c6578 	rsbeq	r6, ip, r8, ror r5
 198:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 19c:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 1a0:	6f72746f 	svcvs	0x0072746f
 1a4:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 1a8:	61726700 	cmnvs	r2, r0, lsl #14
 1ac:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1b0:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 1b4:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b8:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 1bc:	00726165 	rsbseq	r6, r2, r5, ror #2
 1c0:	616c6564 	cmnvs	ip, r4, ror #10
 1c4:	30355f79 	eorscc	r5, r5, r9, ror pc
 1c8:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 1cc:	70617267 	rsbvc	r7, r1, r7, ror #4
 1d0:	5f636968 	svcpl	0x00636968
 1d4:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 1d8:	6165725f 	cmnvs	r5, pc, asr r2
 1dc:	67007964 	strvs	r7, [r0, -r4, ror #18]
 1e0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1e4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 1e8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1ec:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 1f0:	616d0061 	cmnvs	sp, r1, rrx
 1f4:	75006b73 	strvc	r6, [r0, #-2931]	; 0xfffff48d
 1f8:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 1fc:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
 200:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 204:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 208:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 20c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 210:	6e690070 	mcrvs	0, 3, r0, cr9, cr0, {3}
 214:	00786564 	rsbseq	r6, r8, r4, ror #10
 218:	70617267 	rsbvc	r7, r1, r7, ror #4
 21c:	5f636968 	svcpl	0x00636968
 220:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 224:	61726700 	cmnvs	r2, r0, lsl #14
 228:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 22c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 230:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 234:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 238:	61700074 	cmnvs	r0, r4, ror r0
 23c:	67006567 	strvs	r6, [r0, -r7, ror #10]
 240:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 244:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 248:	6174696e 	cmnvs	r4, lr, ror #18
 24c:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 250:	6c617600 	stclvs	6, cr7, [r1], #-0
 254:	67006575 	smlsdxvs	r0, r5, r5, r6
 258:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 25c:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 260:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 264:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 268:	006e6565 	rsbeq	r6, lr, r5, ror #10
 26c:	616c6564 	cmnvs	ip, r4, ror #10
 270:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 274:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 278:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff83d <ball+0xdffff075>
 27c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 280:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 284:	2f737570 	svccs	0x00737570
 288:	6b736544 	blvs	1cd97a0 <startup-0x1e326860>
 28c:	2f706f74 	svccs	0x00706f74
 290:	30544144 	subscc	r4, r4, r4, asr #2
 294:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 298:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 29c:	2f657469 	svccs	0x00657469
 2a0:	6f747561 	svcvs	0x00747561
 2a4:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 2a8:	6172672f 	cmnvs	r2, pc, lsr #14
 2ac:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2b0:	6300632e 	movwvs	r6, #814	; 0x32e
 2b4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 2b8:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 2bc:	3a430072 	bcc	10c048c <startup-0x1ef3fb74>
 2c0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 2c4:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 2c8:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 2cc:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 2d0:	6f746b73 	svcvs	0x00746b73
 2d4:	41442f70 	hvcmi	17136	; 0x42f0
 2d8:	37313054 			; <UNDEFINED> instruction: 0x37313054
 2dc:	646f432f 	strbtvs	r4, [pc], #-815	; 2e4 <startup-0x1ffffd1c>
 2e0:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 2e4:	75612f65 	strbvc	r2, [r1, #-3941]!	; 0xfffff09b
 2e8:	6f706f74 	svcvs	0x00706f74
 2ec:	6f2f676e 	svcvs	0x002f676e
 2f0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2f4:	00632e74 	rsbeq	r2, r3, r4, ror lr
 2f8:	5f746573 	svcpl	0x00746573
 2fc:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 300:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 304:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 308:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 30c:	6f5f7261 	svcvs	0x005f7261
 310:	63656a62 	cmnvs	r5, #401408	; 0x62000
 314:	68740074 	ldmdavs	r4!, {r2, r4, r5, r6}^
 318:	64007369 	strvs	r7, [r0], #-873	; 0xfffffc97
 31c:	5f776172 	svcpl	0x00776172
 320:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 324:	6d007463 	cfstrsvs	mvf7, [r0, #-396]	; 0xfffffe74
 328:	5f65766f 	svcpl	0x0065766f
 32c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 330:	50007463 	andpl	r7, r0, r3, ror #8
 334:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 338:	69005443 	stmdbvs	r0, {r0, r1, r6, sl, ip, lr}
 33c:	5f74696e 	svcpl	0x0074696e
 340:	00707061 	rsbseq	r7, r0, r1, rrx
 344:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff909 <ball+0xdffff141>
 348:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 34c:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 350:	2f737570 	svccs	0x00737570
 354:	6b736544 	blvs	1cd986c <startup-0x1e326794>
 358:	2f706f74 	svccs	0x00706f74
 35c:	30544144 	subscc	r4, r4, r4, asr #2
 360:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 364:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 368:	2f657469 	svccs	0x00657469
 36c:	6f747561 	svcvs	0x00747561
 370:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 374:	6174732f 	cmnvs	r4, pc, lsr #6
 378:	70757472 	rsbsvc	r7, r5, r2, ror r4
 37c:	7300632e 	movwvc	r6, #814	; 0x32e
 380:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 384:	6d007075 	stcvs	0, cr7, [r0, #-468]	; 0xfffffe2c
 388:	006e6961 	rsbeq	r6, lr, r1, ror #18
 38c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 390:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 394:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 398:	2f3a4300 	svccs	0x003a4300
 39c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 3a0:	61482f73 	hvcvs	33523	; 0x82f3
 3a4:	7375706d 	cmnvc	r5, #109	; 0x6d
 3a8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 3ac:	706f746b 	rsbvc	r7, pc, fp, ror #8
 3b0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 3b4:	2f373130 	svccs	0x00373130
 3b8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 3bc:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 3c0:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
 3c4:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
 3c8:	69742f67 	ldmdbvs	r4!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp}^
 3cc:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 3d0:	65640063 	strbvs	r0, [r4, #-99]!	; 0xffffff9d
 3d4:	5f79616c 	svcpl	0x0079616c
 3d8:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 3dc:	Address 0x000003dc is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	000000f8 	strdeq	r0, [r0], -r8
   4:	00000120 	andeq	r0, r0, r0, lsr #2
   8:	00000122 	andeq	r0, r0, r2, lsr #2
   c:	00000124 	andeq	r0, r0, r4, lsr #2
	...
  18:	200006ac 	andcs	r0, r0, ip, lsr #13
  1c:	200006f8 	strdcs	r0, [r0], -r8
  20:	20000000 	andcs	r0, r0, r0
  24:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000038 	andeq	r0, r0, r8, lsr r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000048 	andcs	r0, r0, r8, asr #32
  3c:	00000034 	andeq	r0, r0, r4, lsr r0
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	2000007c 	andcs	r0, r0, ip, ror r0
  5c:	0000006a 	andeq	r0, r0, sl, rrx
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	100e4101 	andne	r4, lr, r1, lsl #2
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000e6 	andcs	r0, r0, r6, ror #1
  7c:	00000072 	andeq	r0, r0, r2, ror r0
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	100e4101 	andne	r4, lr, r1, lsl #2
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000158 	andcs	r0, r0, r8, asr r1
  9c:	00000090 	muleq	r0, r0, r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001e8 	andcs	r0, r0, r8, ror #3
  bc:	00000080 	andeq	r0, r0, r0, lsl #1
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000268 	andcs	r0, r0, r8, ror #4
  dc:	00000040 	andeq	r0, r0, r0, asr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200002a8 	andcs	r0, r0, r8, lsr #5
  fc:	00000046 	andeq	r0, r0, r6, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	200002ee 	andcs	r0, r0, lr, ror #5
 11c:	0000002a 	andeq	r0, r0, sl, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	00000018 	andeq	r0, r0, r8, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000318 	andcs	r0, r0, r8, lsl r3
 13c:	00000056 	andeq	r0, r0, r6, asr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	00000000 	andeq	r0, r0, r0
 154:	2000036e 	andcs	r0, r0, lr, ror #6
 158:	00000058 	andeq	r0, r0, r8, asr r0
 15c:	40080e41 	andmi	r0, r8, r1, asr #28
 160:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 164:	100e4101 	andne	r4, lr, r1, lsl #2
 168:	00070d41 	andeq	r0, r7, r1, asr #26
 16c:	00000020 	andeq	r0, r0, r0, lsr #32
 170:	00000000 	andeq	r0, r0, r0
 174:	200003c6 	andcs	r0, r0, r6, asr #7
 178:	00000196 	muleq	r0, r6, r1
 17c:	400c0e41 	andmi	r0, ip, r1, asr #28
 180:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 184:	018e4002 	orreq	r4, lr, r2
 188:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 18c:	0000070d 	andeq	r0, r0, sp, lsl #14
 190:	0000000c 	andeq	r0, r0, ip
 194:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 198:	7c020001 	stcvc	0, cr0, [r2], {1}
 19c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000190 	muleq	r0, r0, r1
 1a8:	2000055c 	andcs	r0, r0, ip, asr r5
 1ac:	0000005e 	andeq	r0, r0, lr, asr r0
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	00000190 	muleq	r0, r0, r1
 1c8:	200005ba 			; <UNDEFINED> instruction: 0x200005ba
 1cc:	0000005e 	andeq	r0, r0, lr, asr r0
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1dc:	00070d41 	andeq	r0, r7, r1, asr #26
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	00000190 	muleq	r0, r0, r1
 1e8:	20000618 	andcs	r0, r0, r8, lsl r6
 1ec:	00000072 	andeq	r0, r0, r2, ror r0
 1f0:	40080e41 	andmi	r0, r8, r1, asr #28
 1f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f8:	100e4101 	andne	r4, lr, r1, lsl #2
 1fc:	00070d41 	andeq	r0, r7, r1, asr #26
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	00000190 	muleq	r0, r0, r1
 208:	2000068a 	andcs	r0, r0, sl, lsl #13
 20c:	00000020 	andeq	r0, r0, r0, lsr #32
 210:	40080e41 	andmi	r0, r8, r1, asr #28
 214:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 218:	180e4101 	stmdane	lr, {r0, r8, lr}
 21c:	00070d41 	andeq	r0, r7, r1, asr #26
 220:	0000000c 	andeq	r0, r0, ip
 224:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 228:	7c020001 	stcvc	0, cr0, [r2], {1}
 22c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 230:	0000000c 	andeq	r0, r0, ip
 234:	00000220 	andeq	r0, r0, r0, lsr #4
 238:	20000000 	andcs	r0, r0, r0
 23c:	0000000c 	andeq	r0, r0, ip
 240:	00000018 	andeq	r0, r0, r8, lsl r0
 244:	00000220 	andeq	r0, r0, r0, lsr #4
 248:	200006ac 	andcs	r0, r0, ip, lsr #13
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
 250:	40080e41 	andmi	r0, r8, r1, asr #28
 254:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 258:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	00000220 	andeq	r0, r0, r0, lsr #4
 264:	200006c4 	andcs	r0, r0, r4, asr #13
 268:	00000034 	andeq	r0, r0, r4, lsr r0
 26c:	40080e41 	andmi	r0, r8, r1, asr #28
 270:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 274:	100e4101 	andne	r4, lr, r1, lsl #2
 278:	00070d41 	andeq	r0, r7, r1, asr #26
 27c:	0000000c 	andeq	r0, r0, ip
 280:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 284:	7c020001 	stcvc	0, cr0, [r2], {1}
 288:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 28c:	00000018 	andeq	r0, r0, r8, lsl r0
 290:	0000027c 	andeq	r0, r0, ip, ror r2
 294:	200006f8 	strdcs	r0, [r0], -r8
 298:	00000044 	andeq	r0, r0, r4, asr #32
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	0000027c 	andeq	r0, r0, ip, ror r2
 2b0:	2000073c 	andcs	r0, r0, ip, lsr r7
 2b4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2b8:	40080e41 	andmi	r0, r8, r1, asr #28
 2bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c0:	100e4101 	andne	r4, lr, r1, lsl #2
 2c4:	00070d41 	andeq	r0, r7, r1, asr #26
 2c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2cc:	0000027c 	andeq	r0, r0, ip, ror r2
 2d0:	20000768 	andcs	r0, r0, r8, ror #14
 2d4:	00000018 	andeq	r0, r0, r8, lsl r0
 2d8:	40080e41 	andmi	r0, r8, r1, asr #28
 2dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e0:	100e4101 	andne	r4, lr, r1, lsl #2
 2e4:	00070d41 	andeq	r0, r7, r1, asr #26
 2e8:	00000018 	andeq	r0, r0, r8, lsl r0
 2ec:	0000027c 	andeq	r0, r0, ip, ror r2
 2f0:	20000780 	andcs	r0, r0, r0, lsl #15
 2f4:	00000012 	andeq	r0, r0, r2, lsl r0
 2f8:	40080e41 	andmi	r0, r8, r1, asr #28
 2fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 300:	070d4101 	streq	r4, [sp, -r1, lsl #2]
