
./Debug/real_pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f828 	bl	20000058 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	// Setup display
	*GPIO_E_MODER = 0x55555555;
20000014:	4b0b      	ldr	r3, [pc, #44]	; (20000044 <init_app+0x34>)
20000016:	4a0c      	ldr	r2, [pc, #48]	; (20000048 <init_app+0x38>)
20000018:	601a      	str	r2, [r3, #0]
	
	// Setup for keypad
	*GPIO_D_MODER = 0x55000000;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <init_app+0x3c>)
2000001c:	22aa      	movs	r2, #170	; 0xaa
2000001e:	05d2      	lsls	r2, r2, #23
20000020:	601a      	str	r2, [r3, #0]
	*GPIO_D_OTYPER &= 0x0000FFFF;   
20000022:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <init_app+0x40>)
20000024:	4a0a      	ldr	r2, [pc, #40]	; (20000050 <init_app+0x40>)
20000026:	8812      	ldrh	r2, [r2, #0]
20000028:	b292      	uxth	r2, r2
2000002a:	801a      	strh	r2, [r3, #0]
	*GPIO_D_OTYPER |= 0x00000000;     
2000002c:	4b08      	ldr	r3, [pc, #32]	; (20000050 <init_app+0x40>)
2000002e:	4a08      	ldr	r2, [pc, #32]	; (20000050 <init_app+0x40>)
20000030:	8812      	ldrh	r2, [r2, #0]
20000032:	b292      	uxth	r2, r2
20000034:	801a      	strh	r2, [r3, #0]
	*GPIO_D_PUPDR = 0x00AA0000;    
20000036:	4b07      	ldr	r3, [pc, #28]	; (20000054 <init_app+0x44>)
20000038:	22aa      	movs	r2, #170	; 0xaa
2000003a:	0412      	lsls	r2, r2, #16
2000003c:	601a      	str	r2, [r3, #0]
}
2000003e:	46c0      	nop			; (mov r8, r8)
20000040:	46bd      	mov	sp, r7
20000042:	bd80      	pop	{r7, pc}
20000044:	40021000 	andmi	r1, r2, r0
20000048:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000004c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000050:	40020c04 	andmi	r0, r2, r4, lsl #24
20000054:	40020c0c 	andmi	r0, r2, ip, lsl #24

20000058 <main>:

extern OBJECT ball;
extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void main(void) {
20000058:	b580      	push	{r7, lr}
2000005a:	b086      	sub	sp, #24
2000005c:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
2000005e:	4b37      	ldr	r3, [pc, #220]	; (2000013c <main+0xe4>)
20000060:	613b      	str	r3, [r7, #16]
	POBJECT pl = &leftPaddle;
20000062:	4b37      	ldr	r3, [pc, #220]	; (20000140 <main+0xe8>)
20000064:	60fb      	str	r3, [r7, #12]
	POBJECT pr = &rightPaddle;
20000066:	4b37      	ldr	r3, [pc, #220]	; (20000144 <main+0xec>)
20000068:	60bb      	str	r3, [r7, #8]
	init_app();
2000006a:	f7ff ffd1 	bl	20000010 <init_app>
	graphic_initialize();
2000006e:	f000 fa5d 	bl	2000052c <graphic_initialize>
  #ifndef SIMULATOR
	graphic_clear_screen();
20000072:	f000 fa89 	bl	20000588 <graphic_clear_screen>
  #endif
  
//	p->set_speed(p, 4, 4);
	while(1) {
		// Update from keypad
		unsigned char *pressedKeys = keyb();
20000076:	f000 fcbf 	bl	200009f8 <keyb>
2000007a:	0003      	movs	r3, r0
2000007c:	607b      	str	r3, [r7, #4]
		pl->set_speed(pl,0,0);
2000007e:	68fb      	ldr	r3, [r7, #12]
20000080:	6a1b      	ldr	r3, [r3, #32]
20000082:	68f8      	ldr	r0, [r7, #12]
20000084:	2200      	movs	r2, #0
20000086:	2100      	movs	r1, #0
20000088:	4798      	blx	r3
		pr->set_speed(pr,0,0);
2000008a:	68bb      	ldr	r3, [r7, #8]
2000008c:	6a1b      	ldr	r3, [r3, #32]
2000008e:	68b8      	ldr	r0, [r7, #8]
20000090:	2200      	movs	r2, #0
20000092:	2100      	movs	r1, #0
20000094:	4798      	blx	r3
		for(unsigned char i = 0; i < 4; i++) {
20000096:	2317      	movs	r3, #23
20000098:	18fb      	adds	r3, r7, r3
2000009a:	2200      	movs	r2, #0
2000009c:	701a      	strb	r2, [r3, #0]
2000009e:	e035      	b.n	2000010c <main+0xb4>
			switch(pressedKeys[i]) {
200000a0:	2317      	movs	r3, #23
200000a2:	18fb      	adds	r3, r7, r3
200000a4:	781b      	ldrb	r3, [r3, #0]
200000a6:	687a      	ldr	r2, [r7, #4]
200000a8:	18d3      	adds	r3, r2, r3
200000aa:	781b      	ldrb	r3, [r3, #0]
200000ac:	2b04      	cmp	r3, #4
200000ae:	d010      	beq.n	200000d2 <main+0x7a>
200000b0:	dc02      	bgt.n	200000b8 <main+0x60>
200000b2:	2b01      	cmp	r3, #1
200000b4:	d005      	beq.n	200000c2 <main+0x6a>
200000b6:	e022      	b.n	200000fe <main+0xa6>
200000b8:	2b0c      	cmp	r3, #12
200000ba:	d011      	beq.n	200000e0 <main+0x88>
200000bc:	2b0d      	cmp	r3, #13
200000be:	d017      	beq.n	200000f0 <main+0x98>
200000c0:	e01d      	b.n	200000fe <main+0xa6>
				case 0x01: pl->set_speed(pl,0,-5); break;
200000c2:	68fb      	ldr	r3, [r7, #12]
200000c4:	6a1b      	ldr	r3, [r3, #32]
200000c6:	2205      	movs	r2, #5
200000c8:	4252      	negs	r2, r2
200000ca:	68f8      	ldr	r0, [r7, #12]
200000cc:	2100      	movs	r1, #0
200000ce:	4798      	blx	r3
200000d0:	e015      	b.n	200000fe <main+0xa6>
				case 0x04: pl->set_speed(pl,0,5); break;
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	6a1b      	ldr	r3, [r3, #32]
200000d6:	68f8      	ldr	r0, [r7, #12]
200000d8:	2205      	movs	r2, #5
200000da:	2100      	movs	r1, #0
200000dc:	4798      	blx	r3
200000de:	e00e      	b.n	200000fe <main+0xa6>
				case 0x0C: pr->set_speed(pr,0,-5); break;
200000e0:	68bb      	ldr	r3, [r7, #8]
200000e2:	6a1b      	ldr	r3, [r3, #32]
200000e4:	2205      	movs	r2, #5
200000e6:	4252      	negs	r2, r2
200000e8:	68b8      	ldr	r0, [r7, #8]
200000ea:	2100      	movs	r1, #0
200000ec:	4798      	blx	r3
200000ee:	e006      	b.n	200000fe <main+0xa6>
				case 0x0D: pr->set_speed(pr,0,5); break;
200000f0:	68bb      	ldr	r3, [r7, #8]
200000f2:	6a1b      	ldr	r3, [r3, #32]
200000f4:	68b8      	ldr	r0, [r7, #8]
200000f6:	2205      	movs	r2, #5
200000f8:	2100      	movs	r1, #0
200000fa:	4798      	blx	r3
200000fc:	46c0      	nop			; (mov r8, r8)
		for(unsigned char i = 0; i < 4; i++) {
200000fe:	2317      	movs	r3, #23
20000100:	18fb      	adds	r3, r7, r3
20000102:	781a      	ldrb	r2, [r3, #0]
20000104:	2317      	movs	r3, #23
20000106:	18fb      	adds	r3, r7, r3
20000108:	3201      	adds	r2, #1
2000010a:	701a      	strb	r2, [r3, #0]
2000010c:	2317      	movs	r3, #23
2000010e:	18fb      	adds	r3, r7, r3
20000110:	781b      	ldrb	r3, [r3, #0]
20000112:	2b03      	cmp	r3, #3
20000114:	d9c4      	bls.n	200000a0 <main+0x48>
			}
		}
		p->move(p);
20000116:	693b      	ldr	r3, [r7, #16]
20000118:	69db      	ldr	r3, [r3, #28]
2000011a:	693a      	ldr	r2, [r7, #16]
2000011c:	0010      	movs	r0, r2
2000011e:	4798      	blx	r3
		pl->move(pl);
20000120:	68fb      	ldr	r3, [r7, #12]
20000122:	69db      	ldr	r3, [r3, #28]
20000124:	68fa      	ldr	r2, [r7, #12]
20000126:	0010      	movs	r0, r2
20000128:	4798      	blx	r3
		pr->move(pr);
2000012a:	68bb      	ldr	r3, [r7, #8]
2000012c:	69db      	ldr	r3, [r3, #28]
2000012e:	68ba      	ldr	r2, [r7, #8]
20000130:	0010      	movs	r0, r2
20000132:	4798      	blx	r3
		delay_milli(50);
20000134:	2032      	movs	r0, #50	; 0x32
20000136:	f000 fbc3 	bl	200008c0 <delay_milli>
	while(1) {
2000013a:	e79c      	b.n	20000076 <main+0x1e>
2000013c:	20000b74 	andcs	r0, r0, r4, ror fp
20000140:	20000c6c 	andcs	r0, r0, ip, ror #24
20000144:	20000c90 	mulcs	r0, r0, ip

20000148 <move_ball>:
};

extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void move_ball(POBJECT this) {
20000148:	b580      	push	{r7, lr}
2000014a:	b084      	sub	sp, #16
2000014c:	af00      	add	r7, sp, #0
2000014e:	6078      	str	r0, [r7, #4]
	clear_object(this);
20000150:	687b      	ldr	r3, [r7, #4]
20000152:	0018      	movs	r0, r3
20000154:	f000 fb3d 	bl	200007d2 <clear_object>
	
	this->posX += this->dirX;
20000158:	687b      	ldr	r3, [r7, #4]
2000015a:	68da      	ldr	r2, [r3, #12]
2000015c:	687b      	ldr	r3, [r7, #4]
2000015e:	685b      	ldr	r3, [r3, #4]
20000160:	18d2      	adds	r2, r2, r3
20000162:	687b      	ldr	r3, [r7, #4]
20000164:	60da      	str	r2, [r3, #12]
	this->posY += this->dirY;
20000166:	687b      	ldr	r3, [r7, #4]
20000168:	691a      	ldr	r2, [r3, #16]
2000016a:	687b      	ldr	r3, [r7, #4]
2000016c:	689b      	ldr	r3, [r3, #8]
2000016e:	18d2      	adds	r2, r2, r3
20000170:	687b      	ldr	r3, [r7, #4]
20000172:	611a      	str	r2, [r3, #16]
	
	// Wall collisions
	if((this->posY < 0) ||  this->posY > 63 ) {
20000174:	687b      	ldr	r3, [r7, #4]
20000176:	691b      	ldr	r3, [r3, #16]
20000178:	2b00      	cmp	r3, #0
2000017a:	db03      	blt.n	20000184 <move_ball+0x3c>
2000017c:	687b      	ldr	r3, [r7, #4]
2000017e:	691b      	ldr	r3, [r3, #16]
20000180:	2b3f      	cmp	r3, #63	; 0x3f
20000182:	dd04      	ble.n	2000018e <move_ball+0x46>
		this->dirY = -this->dirY;
20000184:	687b      	ldr	r3, [r7, #4]
20000186:	689b      	ldr	r3, [r3, #8]
20000188:	425a      	negs	r2, r3
2000018a:	687b      	ldr	r3, [r7, #4]
2000018c:	609a      	str	r2, [r3, #8]
	}
	
	// Define left and right paddle
	POBJECT lp = &leftPaddle;
2000018e:	4b23      	ldr	r3, [pc, #140]	; (2000021c <move_ball+0xd4>)
20000190:	60fb      	str	r3, [r7, #12]
	POBJECT rp = &rightPaddle;
20000192:	4b23      	ldr	r3, [pc, #140]	; (20000220 <move_ball+0xd8>)
20000194:	60bb      	str	r3, [r7, #8]
	
	//For left paddle
	if(this->posX <= lp->posX + lp->geo->sizeX) {
20000196:	687b      	ldr	r3, [r7, #4]
20000198:	68da      	ldr	r2, [r3, #12]
2000019a:	68fb      	ldr	r3, [r7, #12]
2000019c:	68d9      	ldr	r1, [r3, #12]
2000019e:	68fb      	ldr	r3, [r7, #12]
200001a0:	681b      	ldr	r3, [r3, #0]
200001a2:	685b      	ldr	r3, [r3, #4]
200001a4:	18cb      	adds	r3, r1, r3
200001a6:	429a      	cmp	r2, r3
200001a8:	dc14      	bgt.n	200001d4 <move_ball+0x8c>
		if((this->posY >= lp->posY) && (this->posY <= lp->posY + lp->geo->sizeY)) {
200001aa:	687b      	ldr	r3, [r7, #4]
200001ac:	691a      	ldr	r2, [r3, #16]
200001ae:	68fb      	ldr	r3, [r7, #12]
200001b0:	691b      	ldr	r3, [r3, #16]
200001b2:	429a      	cmp	r2, r3
200001b4:	db0e      	blt.n	200001d4 <move_ball+0x8c>
200001b6:	687b      	ldr	r3, [r7, #4]
200001b8:	691a      	ldr	r2, [r3, #16]
200001ba:	68fb      	ldr	r3, [r7, #12]
200001bc:	6919      	ldr	r1, [r3, #16]
200001be:	68fb      	ldr	r3, [r7, #12]
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	689b      	ldr	r3, [r3, #8]
200001c4:	18cb      	adds	r3, r1, r3
200001c6:	429a      	cmp	r2, r3
200001c8:	dc04      	bgt.n	200001d4 <move_ball+0x8c>
			this->dirX = -this->dirX;
200001ca:	687b      	ldr	r3, [r7, #4]
200001cc:	685b      	ldr	r3, [r3, #4]
200001ce:	425a      	negs	r2, r3
200001d0:	687b      	ldr	r3, [r7, #4]
200001d2:	605a      	str	r2, [r3, #4]
			// Left player lost
		}
	}
	
	//For right paddle
	if(this->posX >= rp->posX) {
200001d4:	687b      	ldr	r3, [r7, #4]
200001d6:	68da      	ldr	r2, [r3, #12]
200001d8:	68bb      	ldr	r3, [r7, #8]
200001da:	68db      	ldr	r3, [r3, #12]
200001dc:	429a      	cmp	r2, r3
200001de:	db14      	blt.n	2000020a <move_ball+0xc2>
		if((this->posY >= rp->posY) && (this->posY <= rp->posY + rp->geo->sizeY)) {
200001e0:	687b      	ldr	r3, [r7, #4]
200001e2:	691a      	ldr	r2, [r3, #16]
200001e4:	68bb      	ldr	r3, [r7, #8]
200001e6:	691b      	ldr	r3, [r3, #16]
200001e8:	429a      	cmp	r2, r3
200001ea:	db0e      	blt.n	2000020a <move_ball+0xc2>
200001ec:	687b      	ldr	r3, [r7, #4]
200001ee:	691a      	ldr	r2, [r3, #16]
200001f0:	68bb      	ldr	r3, [r7, #8]
200001f2:	6919      	ldr	r1, [r3, #16]
200001f4:	68bb      	ldr	r3, [r7, #8]
200001f6:	681b      	ldr	r3, [r3, #0]
200001f8:	689b      	ldr	r3, [r3, #8]
200001fa:	18cb      	adds	r3, r1, r3
200001fc:	429a      	cmp	r2, r3
200001fe:	dc04      	bgt.n	2000020a <move_ball+0xc2>
			this->dirX = -this->dirX;
20000200:	687b      	ldr	r3, [r7, #4]
20000202:	685b      	ldr	r3, [r3, #4]
20000204:	425a      	negs	r2, r3
20000206:	687b      	ldr	r3, [r7, #4]
20000208:	605a      	str	r2, [r3, #4]
		} else {
			// Right player lost
		}
	}
	
	this->draw(this);
2000020a:	687b      	ldr	r3, [r7, #4]
2000020c:	695b      	ldr	r3, [r3, #20]
2000020e:	687a      	ldr	r2, [r7, #4]
20000210:	0010      	movs	r0, r2
20000212:	4798      	blx	r3
20000214:	46c0      	nop			; (mov r8, r8)
20000216:	46bd      	mov	sp, r7
20000218:	b004      	add	sp, #16
2000021a:	bd80      	pop	{r7, pc}
2000021c:	20000c6c 	andcs	r0, r0, ip, ror #24
20000220:	20000c90 	mulcs	r0, r0, ip

20000224 <graphics_ctrl_bit_set>:
#include "graphic.h"


typedef unsigned char uint8_t;

void graphics_ctrl_bit_set(uint8_t x){
20000224:	b580      	push	{r7, lr}
20000226:	b082      	sub	sp, #8
20000228:	af00      	add	r7, sp, #0
2000022a:	0002      	movs	r2, r0
2000022c:	1dfb      	adds	r3, r7, #7
2000022e:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= (x & ~B_SELECT);
20000230:	4909      	ldr	r1, [pc, #36]	; (20000258 <graphics_ctrl_bit_set+0x34>)
20000232:	4b09      	ldr	r3, [pc, #36]	; (20000258 <graphics_ctrl_bit_set+0x34>)
20000234:	781b      	ldrb	r3, [r3, #0]
20000236:	b2db      	uxtb	r3, r3
20000238:	b25a      	sxtb	r2, r3
2000023a:	1dfb      	adds	r3, r7, #7
2000023c:	781b      	ldrb	r3, [r3, #0]
2000023e:	b25b      	sxtb	r3, r3
20000240:	2004      	movs	r0, #4
20000242:	4383      	bics	r3, r0
20000244:	b25b      	sxtb	r3, r3
20000246:	4313      	orrs	r3, r2
20000248:	b25b      	sxtb	r3, r3
2000024a:	b2db      	uxtb	r3, r3
2000024c:	700b      	strb	r3, [r1, #0]
}
2000024e:	46c0      	nop			; (mov r8, r8)
20000250:	46bd      	mov	sp, r7
20000252:	b002      	add	sp, #8
20000254:	bd80      	pop	{r7, pc}
20000256:	46c0      	nop			; (mov r8, r8)
20000258:	40021014 	andmi	r1, r2, r4, lsl r0

2000025c <graphics_ctrl_bit_clear>:

void graphics_ctrl_bit_clear(uint8_t x){
2000025c:	b580      	push	{r7, lr}
2000025e:	b082      	sub	sp, #8
20000260:	af00      	add	r7, sp, #0
20000262:	0002      	movs	r2, r0
20000264:	1dfb      	adds	r3, r7, #7
20000266:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ~x;
20000268:	4908      	ldr	r1, [pc, #32]	; (2000028c <graphics_ctrl_bit_clear+0x30>)
2000026a:	4b08      	ldr	r3, [pc, #32]	; (2000028c <graphics_ctrl_bit_clear+0x30>)
2000026c:	781b      	ldrb	r3, [r3, #0]
2000026e:	b2db      	uxtb	r3, r3
20000270:	b25b      	sxtb	r3, r3
20000272:	1dfa      	adds	r2, r7, #7
20000274:	7812      	ldrb	r2, [r2, #0]
20000276:	b252      	sxtb	r2, r2
20000278:	43d2      	mvns	r2, r2
2000027a:	b252      	sxtb	r2, r2
2000027c:	4013      	ands	r3, r2
2000027e:	b25b      	sxtb	r3, r3
20000280:	b2db      	uxtb	r3, r3
20000282:	700b      	strb	r3, [r1, #0]
}
20000284:	46c0      	nop			; (mov r8, r8)
20000286:	46bd      	mov	sp, r7
20000288:	b002      	add	sp, #8
2000028a:	bd80      	pop	{r7, pc}
2000028c:	40021014 	andmi	r1, r2, r4, lsl r0

20000290 <select_controller>:

void select_controller(uint8_t controller){
20000290:	b580      	push	{r7, lr}
20000292:	b082      	sub	sp, #8
20000294:	af00      	add	r7, sp, #0
20000296:	0002      	movs	r2, r0
20000298:	1dfb      	adds	r3, r7, #7
2000029a:	701a      	strb	r2, [r3, #0]
    if(controller == 0) {
2000029c:	1dfb      	adds	r3, r7, #7
2000029e:	781b      	ldrb	r3, [r3, #0]
200002a0:	2b00      	cmp	r3, #0
200002a2:	d106      	bne.n	200002b2 <select_controller+0x22>
        graphics_ctrl_bit_clear(B_CS1);
200002a4:	2008      	movs	r0, #8
200002a6:	f7ff ffd9 	bl	2000025c <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
200002aa:	2010      	movs	r0, #16
200002ac:	f7ff ffd6 	bl	2000025c <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
    } else if(controller == B_CS2) {
        graphics_ctrl_bit_clear(B_CS1);
        graphics_ctrl_bit_set(B_CS2);
    }
}
200002b0:	e01f      	b.n	200002f2 <select_controller+0x62>
    } else if(controller == (B_CS1 | B_CS2)) {
200002b2:	1dfb      	adds	r3, r7, #7
200002b4:	781b      	ldrb	r3, [r3, #0]
200002b6:	2b18      	cmp	r3, #24
200002b8:	d106      	bne.n	200002c8 <select_controller+0x38>
        graphics_ctrl_bit_set(B_CS1);
200002ba:	2008      	movs	r0, #8
200002bc:	f7ff ffb2 	bl	20000224 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_set(B_CS2);
200002c0:	2010      	movs	r0, #16
200002c2:	f7ff ffaf 	bl	20000224 <graphics_ctrl_bit_set>
}
200002c6:	e014      	b.n	200002f2 <select_controller+0x62>
    } else if(controller == B_CS1) {
200002c8:	1dfb      	adds	r3, r7, #7
200002ca:	781b      	ldrb	r3, [r3, #0]
200002cc:	2b08      	cmp	r3, #8
200002ce:	d106      	bne.n	200002de <select_controller+0x4e>
        graphics_ctrl_bit_set(B_CS1);
200002d0:	2008      	movs	r0, #8
200002d2:	f7ff ffa7 	bl	20000224 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_clear(B_CS2);
200002d6:	2010      	movs	r0, #16
200002d8:	f7ff ffc0 	bl	2000025c <graphics_ctrl_bit_clear>
}
200002dc:	e009      	b.n	200002f2 <select_controller+0x62>
    } else if(controller == B_CS2) {
200002de:	1dfb      	adds	r3, r7, #7
200002e0:	781b      	ldrb	r3, [r3, #0]
200002e2:	2b10      	cmp	r3, #16
200002e4:	d105      	bne.n	200002f2 <select_controller+0x62>
        graphics_ctrl_bit_clear(B_CS1);
200002e6:	2008      	movs	r0, #8
200002e8:	f7ff ffb8 	bl	2000025c <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_set(B_CS2);
200002ec:	2010      	movs	r0, #16
200002ee:	f7ff ff99 	bl	20000224 <graphics_ctrl_bit_set>
}
200002f2:	46c0      	nop			; (mov r8, r8)
200002f4:	46bd      	mov	sp, r7
200002f6:	b002      	add	sp, #8
200002f8:	bd80      	pop	{r7, pc}

200002fa <graphic_wait_ready>:

void graphic_wait_ready(){
200002fa:	b580      	push	{r7, lr}
200002fc:	b082      	sub	sp, #8
200002fe:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_clear(B_E);
20000300:	2040      	movs	r0, #64	; 0x40
20000302:	f7ff ffab 	bl	2000025c <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000306:	4b15      	ldr	r3, [pc, #84]	; (2000035c <graphic_wait_ready+0x62>)
20000308:	4a15      	ldr	r2, [pc, #84]	; (20000360 <graphic_wait_ready+0x66>)
2000030a:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_RS);
2000030c:	2001      	movs	r0, #1
2000030e:	f7ff ffa5 	bl	2000025c <graphics_ctrl_bit_clear>
    graphics_ctrl_bit_set(B_RW);
20000312:	2002      	movs	r0, #2
20000314:	f7ff ff86 	bl	20000224 <graphics_ctrl_bit_set>
    delay_500ns();
20000318:	f000 fae1 	bl	200008de <delay_500ns>
    
    while(1) { // Wait for display not to be busy
        graphics_ctrl_bit_set(B_E);
2000031c:	2040      	movs	r0, #64	; 0x40
2000031e:	f7ff ff81 	bl	20000224 <graphics_ctrl_bit_set>
        delay_500ns();
20000322:	f000 fadc 	bl	200008de <delay_500ns>
		unsigned char busy = *GPIO_E_IDR_HIGH;
20000326:	4a0f      	ldr	r2, [pc, #60]	; (20000364 <graphic_wait_ready+0x6a>)
20000328:	1dfb      	adds	r3, r7, #7
2000032a:	7812      	ldrb	r2, [r2, #0]
2000032c:	701a      	strb	r2, [r3, #0]
        graphics_ctrl_bit_clear(B_E);
2000032e:	2040      	movs	r0, #64	; 0x40
20000330:	f7ff ff94 	bl	2000025c <graphics_ctrl_bit_clear>
        delay_500ns();
20000334:	f000 fad3 	bl	200008de <delay_500ns>
        //unsigned char i = *GPIO_IDR_HIGH;
        if((busy & LCD_BUSY) == 0) {
20000338:	1dfb      	adds	r3, r7, #7
2000033a:	781b      	ldrb	r3, [r3, #0]
2000033c:	b25b      	sxtb	r3, r3
2000033e:	2b00      	cmp	r3, #0
20000340:	da00      	bge.n	20000344 <graphic_wait_ready+0x4a>
    while(1) { // Wait for display not to be busy
20000342:	e7eb      	b.n	2000031c <graphic_wait_ready+0x22>
            break;
20000344:	46c0      	nop			; (mov r8, r8)
        }
    }
    graphics_ctrl_bit_set(B_E);
20000346:	2040      	movs	r0, #64	; 0x40
20000348:	f7ff ff6c 	bl	20000224 <graphics_ctrl_bit_set>
    *GPIO_E_MODER = 0x55555555;
2000034c:	4b03      	ldr	r3, [pc, #12]	; (2000035c <graphic_wait_ready+0x62>)
2000034e:	4a06      	ldr	r2, [pc, #24]	; (20000368 <graphic_wait_ready+0x6e>)
20000350:	601a      	str	r2, [r3, #0]
    
}
20000352:	46c0      	nop			; (mov r8, r8)
20000354:	46bd      	mov	sp, r7
20000356:	b002      	add	sp, #8
20000358:	bd80      	pop	{r7, pc}
2000035a:	46c0      	nop			; (mov r8, r8)
2000035c:	40021000 	andmi	r1, r2, r0
20000360:	00005555 	andeq	r5, r0, r5, asr r5
20000364:	40021011 	andmi	r1, r2, r1, lsl r0
20000368:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000036c <graphic_read>:

uint8_t graphic_read(uint8_t controller){
2000036c:	b580      	push	{r7, lr}
2000036e:	b084      	sub	sp, #16
20000370:	af00      	add	r7, sp, #0
20000372:	0002      	movs	r2, r0
20000374:	1dfb      	adds	r3, r7, #7
20000376:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
20000378:	2040      	movs	r0, #64	; 0x40
2000037a:	f7ff ff6f 	bl	2000025c <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
2000037e:	4b1b      	ldr	r3, [pc, #108]	; (200003ec <graphic_read+0x80>)
20000380:	4a1b      	ldr	r2, [pc, #108]	; (200003f0 <graphic_read+0x84>)
20000382:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_set(B_RS | B_RW);
20000384:	2003      	movs	r0, #3
20000386:	f7ff ff4d 	bl	20000224 <graphics_ctrl_bit_set>
    select_controller(controller);
2000038a:	1dfb      	adds	r3, r7, #7
2000038c:	781b      	ldrb	r3, [r3, #0]
2000038e:	0018      	movs	r0, r3
20000390:	f7ff ff7e 	bl	20000290 <select_controller>
    delay_500ns();
20000394:	f000 faa3 	bl	200008de <delay_500ns>
    graphics_ctrl_bit_set(B_E);
20000398:	2040      	movs	r0, #64	; 0x40
2000039a:	f7ff ff43 	bl	20000224 <graphics_ctrl_bit_set>
    delay_500ns();
2000039e:	f000 fa9e 	bl	200008de <delay_500ns>
    
    uint8_t RV = *GPIO_E_IDR_HIGH;
200003a2:	4a14      	ldr	r2, [pc, #80]	; (200003f4 <graphic_read+0x88>)
200003a4:	230f      	movs	r3, #15
200003a6:	18fb      	adds	r3, r7, r3
200003a8:	7812      	ldrb	r2, [r2, #0]
200003aa:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200003ac:	2040      	movs	r0, #64	; 0x40
200003ae:	f7ff ff55 	bl	2000025c <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
200003b2:	4b0e      	ldr	r3, [pc, #56]	; (200003ec <graphic_read+0x80>)
200003b4:	4a10      	ldr	r2, [pc, #64]	; (200003f8 <graphic_read+0x8c>)
200003b6:	601a      	str	r2, [r3, #0]
    
    if(controller == B_CS1){
200003b8:	1dfb      	adds	r3, r7, #7
200003ba:	781b      	ldrb	r3, [r3, #0]
200003bc:	2b08      	cmp	r3, #8
200003be:	d104      	bne.n	200003ca <graphic_read+0x5e>
        select_controller(B_CS1);
200003c0:	2008      	movs	r0, #8
200003c2:	f7ff ff65 	bl	20000290 <select_controller>
        graphic_wait_ready();
200003c6:	f7ff ff98 	bl	200002fa <graphic_wait_ready>
    }
    
    if(controller == B_CS2){
200003ca:	1dfb      	adds	r3, r7, #7
200003cc:	781b      	ldrb	r3, [r3, #0]
200003ce:	2b10      	cmp	r3, #16
200003d0:	d104      	bne.n	200003dc <graphic_read+0x70>
        select_controller(B_CS2);
200003d2:	2010      	movs	r0, #16
200003d4:	f7ff ff5c 	bl	20000290 <select_controller>
        graphic_wait_ready();
200003d8:	f7ff ff8f 	bl	200002fa <graphic_wait_ready>
    }
    
    return RV;
200003dc:	230f      	movs	r3, #15
200003de:	18fb      	adds	r3, r7, r3
200003e0:	781b      	ldrb	r3, [r3, #0]
    
}
200003e2:	0018      	movs	r0, r3
200003e4:	46bd      	mov	sp, r7
200003e6:	b004      	add	sp, #16
200003e8:	bd80      	pop	{r7, pc}
200003ea:	46c0      	nop			; (mov r8, r8)
200003ec:	40021000 	andmi	r1, r2, r0
200003f0:	00005555 	andeq	r5, r0, r5, asr r5
200003f4:	40021011 	andmi	r1, r2, r1, lsl r0
200003f8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003fc <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200003fc:	b580      	push	{r7, lr}
200003fe:	b082      	sub	sp, #8
20000400:	af00      	add	r7, sp, #0
20000402:	0002      	movs	r2, r0
20000404:	1dfb      	adds	r3, r7, #7
20000406:	701a      	strb	r2, [r3, #0]
20000408:	1dbb      	adds	r3, r7, #6
2000040a:	1c0a      	adds	r2, r1, #0
2000040c:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
2000040e:	4a1a      	ldr	r2, [pc, #104]	; (20000478 <graphic_write+0x7c>)
20000410:	1dfb      	adds	r3, r7, #7
20000412:	781b      	ldrb	r3, [r3, #0]
20000414:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000416:	1dbb      	adds	r3, r7, #6
20000418:	781b      	ldrb	r3, [r3, #0]
2000041a:	0018      	movs	r0, r3
2000041c:	f7ff ff38 	bl	20000290 <select_controller>
    delay_500ns();
20000420:	f000 fa5d 	bl	200008de <delay_500ns>
    graphics_ctrl_bit_set(B_E);
20000424:	2040      	movs	r0, #64	; 0x40
20000426:	f7ff fefd 	bl	20000224 <graphics_ctrl_bit_set>
    delay_500ns();
2000042a:	f000 fa58 	bl	200008de <delay_500ns>
    graphics_ctrl_bit_clear(B_E);
2000042e:	2040      	movs	r0, #64	; 0x40
20000430:	f7ff ff14 	bl	2000025c <graphics_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000434:	1dbb      	adds	r3, r7, #6
20000436:	781b      	ldrb	r3, [r3, #0]
20000438:	2208      	movs	r2, #8
2000043a:	4013      	ands	r3, r2
2000043c:	d004      	beq.n	20000448 <graphic_write+0x4c>
        select_controller(B_CS1);
2000043e:	2008      	movs	r0, #8
20000440:	f7ff ff26 	bl	20000290 <select_controller>
        graphic_wait_ready();
20000444:	f7ff ff59 	bl	200002fa <graphic_wait_ready>
    }
    
    if(controller & B_CS2){
20000448:	1dbb      	adds	r3, r7, #6
2000044a:	781b      	ldrb	r3, [r3, #0]
2000044c:	2210      	movs	r2, #16
2000044e:	4013      	ands	r3, r2
20000450:	d004      	beq.n	2000045c <graphic_write+0x60>
        select_controller(B_CS2);
20000452:	2010      	movs	r0, #16
20000454:	f7ff ff1c 	bl	20000290 <select_controller>
        graphic_wait_ready();
20000458:	f7ff ff4f 	bl	200002fa <graphic_wait_ready>
    }
    
    *GPIO_E_ODR_HIGH = 0;
2000045c:	4b06      	ldr	r3, [pc, #24]	; (20000478 <graphic_write+0x7c>)
2000045e:	2200      	movs	r2, #0
20000460:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_set(B_E);
20000462:	2040      	movs	r0, #64	; 0x40
20000464:	f7ff fede 	bl	20000224 <graphics_ctrl_bit_set>
    select_controller(0);
20000468:	2000      	movs	r0, #0
2000046a:	f7ff ff11 	bl	20000290 <select_controller>
}
2000046e:	46c0      	nop			; (mov r8, r8)
20000470:	46bd      	mov	sp, r7
20000472:	b002      	add	sp, #8
20000474:	bd80      	pop	{r7, pc}
20000476:	46c0      	nop			; (mov r8, r8)
20000478:	40021015 	andmi	r1, r2, r5, lsl r0

2000047c <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
2000047c:	b580      	push	{r7, lr}
2000047e:	b082      	sub	sp, #8
20000480:	af00      	add	r7, sp, #0
20000482:	0002      	movs	r2, r0
20000484:	1dfb      	adds	r3, r7, #7
20000486:	701a      	strb	r2, [r3, #0]
20000488:	1dbb      	adds	r3, r7, #6
2000048a:	1c0a      	adds	r2, r1, #0
2000048c:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
2000048e:	2040      	movs	r0, #64	; 0x40
20000490:	f7ff fee4 	bl	2000025c <graphics_ctrl_bit_clear>
    select_controller(controller);
20000494:	1dbb      	adds	r3, r7, #6
20000496:	781b      	ldrb	r3, [r3, #0]
20000498:	0018      	movs	r0, r3
2000049a:	f7ff fef9 	bl	20000290 <select_controller>
    graphics_ctrl_bit_clear(B_RS | B_RW);
2000049e:	2003      	movs	r0, #3
200004a0:	f7ff fedc 	bl	2000025c <graphics_ctrl_bit_clear>
    graphic_write(command, controller);
200004a4:	1dbb      	adds	r3, r7, #6
200004a6:	781a      	ldrb	r2, [r3, #0]
200004a8:	1dfb      	adds	r3, r7, #7
200004aa:	781b      	ldrb	r3, [r3, #0]
200004ac:	0011      	movs	r1, r2
200004ae:	0018      	movs	r0, r3
200004b0:	f7ff ffa4 	bl	200003fc <graphic_write>
}
200004b4:	46c0      	nop			; (mov r8, r8)
200004b6:	46bd      	mov	sp, r7
200004b8:	b002      	add	sp, #8
200004ba:	bd80      	pop	{r7, pc}

200004bc <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200004bc:	b580      	push	{r7, lr}
200004be:	b082      	sub	sp, #8
200004c0:	af00      	add	r7, sp, #0
200004c2:	0002      	movs	r2, r0
200004c4:	1dfb      	adds	r3, r7, #7
200004c6:	701a      	strb	r2, [r3, #0]
200004c8:	1dbb      	adds	r3, r7, #6
200004ca:	1c0a      	adds	r2, r1, #0
200004cc:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200004ce:	2040      	movs	r0, #64	; 0x40
200004d0:	f7ff fec4 	bl	2000025c <graphics_ctrl_bit_clear>
    select_controller(controller);
200004d4:	1dbb      	adds	r3, r7, #6
200004d6:	781b      	ldrb	r3, [r3, #0]
200004d8:	0018      	movs	r0, r3
200004da:	f7ff fed9 	bl	20000290 <select_controller>
    graphics_ctrl_bit_set(B_RS);
200004de:	2001      	movs	r0, #1
200004e0:	f7ff fea0 	bl	20000224 <graphics_ctrl_bit_set>
    graphics_ctrl_bit_clear(B_RW);
200004e4:	2002      	movs	r0, #2
200004e6:	f7ff feb9 	bl	2000025c <graphics_ctrl_bit_clear>
    graphic_write(data, controller);
200004ea:	1dbb      	adds	r3, r7, #6
200004ec:	781a      	ldrb	r2, [r3, #0]
200004ee:	1dfb      	adds	r3, r7, #7
200004f0:	781b      	ldrb	r3, [r3, #0]
200004f2:	0011      	movs	r1, r2
200004f4:	0018      	movs	r0, r3
200004f6:	f7ff ff81 	bl	200003fc <graphic_write>
}
200004fa:	46c0      	nop			; (mov r8, r8)
200004fc:	46bd      	mov	sp, r7
200004fe:	b002      	add	sp, #8
20000500:	bd80      	pop	{r7, pc}

20000502 <graphics_read_data>:

uint8_t graphics_read_data(uint8_t controller){
20000502:	b580      	push	{r7, lr}
20000504:	b082      	sub	sp, #8
20000506:	af00      	add	r7, sp, #0
20000508:	0002      	movs	r2, r0
2000050a:	1dfb      	adds	r3, r7, #7
2000050c:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
2000050e:	1dfb      	adds	r3, r7, #7
20000510:	781b      	ldrb	r3, [r3, #0]
20000512:	0018      	movs	r0, r3
20000514:	f7ff ff2a 	bl	2000036c <graphic_read>
    return graphic_read(controller);
20000518:	1dfb      	adds	r3, r7, #7
2000051a:	781b      	ldrb	r3, [r3, #0]
2000051c:	0018      	movs	r0, r3
2000051e:	f7ff ff25 	bl	2000036c <graphic_read>
20000522:	0003      	movs	r3, r0
}
20000524:	0018      	movs	r0, r3
20000526:	46bd      	mov	sp, r7
20000528:	b002      	add	sp, #8
2000052a:	bd80      	pop	{r7, pc}

2000052c <graphic_initialize>:

void graphic_initialize(void){
2000052c:	b580      	push	{r7, lr}
2000052e:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_set(B_E);
20000530:	2040      	movs	r0, #64	; 0x40
20000532:	f7ff fe77 	bl	20000224 <graphics_ctrl_bit_set>
    graphics_ctrl_bit_set(B_SELECT);
20000536:	2004      	movs	r0, #4
20000538:	f7ff fe74 	bl	20000224 <graphics_ctrl_bit_set>
    delay_micro(10);
2000053c:	200a      	movs	r0, #10
2000053e:	f000 f9a9 	bl	20000894 <delay_micro>
    graphics_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000542:	2078      	movs	r0, #120	; 0x78
20000544:	f7ff fe8a 	bl	2000025c <graphics_ctrl_bit_clear>
    delay_milli(30);
20000548:	201e      	movs	r0, #30
2000054a:	f000 f9b9 	bl	200008c0 <delay_milli>
    graphics_ctrl_bit_set(B_RST);
2000054e:	2020      	movs	r0, #32
20000550:	f7ff fe68 	bl	20000224 <graphics_ctrl_bit_set>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000554:	2118      	movs	r1, #24
20000556:	203e      	movs	r0, #62	; 0x3e
20000558:	f7ff ff90 	bl	2000047c <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
2000055c:	2118      	movs	r1, #24
2000055e:	203f      	movs	r0, #63	; 0x3f
20000560:	f7ff ff8c 	bl	2000047c <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000564:	2118      	movs	r1, #24
20000566:	20c0      	movs	r0, #192	; 0xc0
20000568:	f7ff ff88 	bl	2000047c <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000056c:	2118      	movs	r1, #24
2000056e:	2040      	movs	r0, #64	; 0x40
20000570:	f7ff ff84 	bl	2000047c <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000574:	2118      	movs	r1, #24
20000576:	20b8      	movs	r0, #184	; 0xb8
20000578:	f7ff ff80 	bl	2000047c <graphic_write_command>
    select_controller(0);
2000057c:	2000      	movs	r0, #0
2000057e:	f7ff fe87 	bl	20000290 <select_controller>
}
20000582:	46c0      	nop			; (mov r8, r8)
20000584:	46bd      	mov	sp, r7
20000586:	bd80      	pop	{r7, pc}

20000588 <graphic_clear_screen>:

void graphic_clear_screen(void){
20000588:	b580      	push	{r7, lr}
2000058a:	b082      	sub	sp, #8
2000058c:	af00      	add	r7, sp, #0
    for(int page = 0; page < PAGE; page++){
2000058e:	2300      	movs	r3, #0
20000590:	607b      	str	r3, [r7, #4]
20000592:	e01e      	b.n	200005d2 <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20000594:	687b      	ldr	r3, [r7, #4]
20000596:	b25b      	sxtb	r3, r3
20000598:	2248      	movs	r2, #72	; 0x48
2000059a:	4252      	negs	r2, r2
2000059c:	4313      	orrs	r3, r2
2000059e:	b25b      	sxtb	r3, r3
200005a0:	b2db      	uxtb	r3, r3
200005a2:	2118      	movs	r1, #24
200005a4:	0018      	movs	r0, r3
200005a6:	f7ff ff69 	bl	2000047c <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
200005aa:	2118      	movs	r1, #24
200005ac:	2040      	movs	r0, #64	; 0x40
200005ae:	f7ff ff65 	bl	2000047c <graphic_write_command>
        for(int add = 0; add < ADD; add++){
200005b2:	2300      	movs	r3, #0
200005b4:	603b      	str	r3, [r7, #0]
200005b6:	e006      	b.n	200005c6 <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
200005b8:	2118      	movs	r1, #24
200005ba:	2000      	movs	r0, #0
200005bc:	f7ff ff7e 	bl	200004bc <graphic_write_data>
        for(int add = 0; add < ADD; add++){
200005c0:	683b      	ldr	r3, [r7, #0]
200005c2:	3301      	adds	r3, #1
200005c4:	603b      	str	r3, [r7, #0]
200005c6:	683b      	ldr	r3, [r7, #0]
200005c8:	2b3e      	cmp	r3, #62	; 0x3e
200005ca:	ddf5      	ble.n	200005b8 <graphic_clear_screen+0x30>
    for(int page = 0; page < PAGE; page++){
200005cc:	687b      	ldr	r3, [r7, #4]
200005ce:	3301      	adds	r3, #1
200005d0:	607b      	str	r3, [r7, #4]
200005d2:	687b      	ldr	r3, [r7, #4]
200005d4:	2b07      	cmp	r3, #7
200005d6:	dddd      	ble.n	20000594 <graphic_clear_screen+0xc>
        }
    }
    
}
200005d8:	46c0      	nop			; (mov r8, r8)
200005da:	46bd      	mov	sp, r7
200005dc:	b002      	add	sp, #8
200005de:	bd80      	pop	{r7, pc}

200005e0 <pixel>:


void pixel(unsigned char x, unsigned char y, unsigned char set) {
200005e0:	b590      	push	{r4, r7, lr}
200005e2:	b085      	sub	sp, #20
200005e4:	af00      	add	r7, sp, #0
200005e6:	0004      	movs	r4, r0
200005e8:	0008      	movs	r0, r1
200005ea:	0011      	movs	r1, r2
200005ec:	1dfb      	adds	r3, r7, #7
200005ee:	1c22      	adds	r2, r4, #0
200005f0:	701a      	strb	r2, [r3, #0]
200005f2:	1dbb      	adds	r3, r7, #6
200005f4:	1c02      	adds	r2, r0, #0
200005f6:	701a      	strb	r2, [r3, #0]
200005f8:	1d7b      	adds	r3, r7, #5
200005fa:	1c0a      	adds	r2, r1, #0
200005fc:	701a      	strb	r2, [r3, #0]
	if(x < 0 || y < 0) return;
	if(x > 127 || y > 63) return;
200005fe:	1dfb      	adds	r3, r7, #7
20000600:	781b      	ldrb	r3, [r3, #0]
20000602:	b25b      	sxtb	r3, r3
20000604:	2b00      	cmp	r3, #0
20000606:	da00      	bge.n	2000060a <pixel+0x2a>
20000608:	e0ae      	b.n	20000768 <pixel+0x188>
2000060a:	1dbb      	adds	r3, r7, #6
2000060c:	781b      	ldrb	r3, [r3, #0]
2000060e:	2b3f      	cmp	r3, #63	; 0x3f
20000610:	d900      	bls.n	20000614 <pixel+0x34>
20000612:	e0a9      	b.n	20000768 <pixel+0x188>
	unsigned char mask;
	unsigned char index = y / 8;
20000614:	230d      	movs	r3, #13
20000616:	18fb      	adds	r3, r7, r3
20000618:	1dba      	adds	r2, r7, #6
2000061a:	7812      	ldrb	r2, [r2, #0]
2000061c:	08d2      	lsrs	r2, r2, #3
2000061e:	701a      	strb	r2, [r3, #0]
	
	switch(y % 8) {
20000620:	1dbb      	adds	r3, r7, #6
20000622:	781b      	ldrb	r3, [r3, #0]
20000624:	2207      	movs	r2, #7
20000626:	4013      	ands	r3, r2
20000628:	2b07      	cmp	r3, #7
2000062a:	d82c      	bhi.n	20000686 <pixel+0xa6>
2000062c:	009a      	lsls	r2, r3, #2
2000062e:	4b50      	ldr	r3, [pc, #320]	; (20000770 <pixel+0x190>)
20000630:	18d3      	adds	r3, r2, r3
20000632:	681b      	ldr	r3, [r3, #0]
20000634:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000636:	230f      	movs	r3, #15
20000638:	18fb      	adds	r3, r7, r3
2000063a:	2201      	movs	r2, #1
2000063c:	701a      	strb	r2, [r3, #0]
2000063e:	e022      	b.n	20000686 <pixel+0xa6>
		case 1: mask = 2; break;
20000640:	230f      	movs	r3, #15
20000642:	18fb      	adds	r3, r7, r3
20000644:	2202      	movs	r2, #2
20000646:	701a      	strb	r2, [r3, #0]
20000648:	e01d      	b.n	20000686 <pixel+0xa6>
		case 2: mask = 4; break;
2000064a:	230f      	movs	r3, #15
2000064c:	18fb      	adds	r3, r7, r3
2000064e:	2204      	movs	r2, #4
20000650:	701a      	strb	r2, [r3, #0]
20000652:	e018      	b.n	20000686 <pixel+0xa6>
		case 3: mask = 8; break;
20000654:	230f      	movs	r3, #15
20000656:	18fb      	adds	r3, r7, r3
20000658:	2208      	movs	r2, #8
2000065a:	701a      	strb	r2, [r3, #0]
2000065c:	e013      	b.n	20000686 <pixel+0xa6>
		case 4: mask = 16; break;
2000065e:	230f      	movs	r3, #15
20000660:	18fb      	adds	r3, r7, r3
20000662:	2210      	movs	r2, #16
20000664:	701a      	strb	r2, [r3, #0]
20000666:	e00e      	b.n	20000686 <pixel+0xa6>
		case 5: mask = 32; break;
20000668:	230f      	movs	r3, #15
2000066a:	18fb      	adds	r3, r7, r3
2000066c:	2220      	movs	r2, #32
2000066e:	701a      	strb	r2, [r3, #0]
20000670:	e009      	b.n	20000686 <pixel+0xa6>
		case 6: mask = 64; break;
20000672:	230f      	movs	r3, #15
20000674:	18fb      	adds	r3, r7, r3
20000676:	2240      	movs	r2, #64	; 0x40
20000678:	701a      	strb	r2, [r3, #0]
2000067a:	e004      	b.n	20000686 <pixel+0xa6>
		case 7: mask = 128; break;
2000067c:	230f      	movs	r3, #15
2000067e:	18fb      	adds	r3, r7, r3
20000680:	2280      	movs	r2, #128	; 0x80
20000682:	701a      	strb	r2, [r3, #0]
20000684:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0) {
20000686:	1d7b      	adds	r3, r7, #5
20000688:	781b      	ldrb	r3, [r3, #0]
2000068a:	2b00      	cmp	r3, #0
2000068c:	d106      	bne.n	2000069c <pixel+0xbc>
		mask = ~mask;
2000068e:	230f      	movs	r3, #15
20000690:	18fb      	adds	r3, r7, r3
20000692:	220f      	movs	r2, #15
20000694:	18ba      	adds	r2, r7, r2
20000696:	7812      	ldrb	r2, [r2, #0]
20000698:	43d2      	mvns	r2, r2
2000069a:	701a      	strb	r2, [r3, #0]
	}
	
	unsigned char controller;
	if(x > 63) {
2000069c:	1dfb      	adds	r3, r7, #7
2000069e:	781b      	ldrb	r3, [r3, #0]
200006a0:	2b3f      	cmp	r3, #63	; 0x3f
200006a2:	d909      	bls.n	200006b8 <pixel+0xd8>
		controller = B_CS2;
200006a4:	230e      	movs	r3, #14
200006a6:	18fb      	adds	r3, r7, r3
200006a8:	2210      	movs	r2, #16
200006aa:	701a      	strb	r2, [r3, #0]
		x = x - 64;
200006ac:	1dfb      	adds	r3, r7, #7
200006ae:	1dfa      	adds	r2, r7, #7
200006b0:	7812      	ldrb	r2, [r2, #0]
200006b2:	3a40      	subs	r2, #64	; 0x40
200006b4:	701a      	strb	r2, [r3, #0]
200006b6:	e003      	b.n	200006c0 <pixel+0xe0>
	} else {
		controller = B_CS1;
200006b8:	230e      	movs	r3, #14
200006ba:	18fb      	adds	r3, r7, r3
200006bc:	2208      	movs	r2, #8
200006be:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x, controller);
200006c0:	1dfb      	adds	r3, r7, #7
200006c2:	781b      	ldrb	r3, [r3, #0]
200006c4:	2240      	movs	r2, #64	; 0x40
200006c6:	4313      	orrs	r3, r2
200006c8:	b2da      	uxtb	r2, r3
200006ca:	230e      	movs	r3, #14
200006cc:	18fb      	adds	r3, r7, r3
200006ce:	781b      	ldrb	r3, [r3, #0]
200006d0:	0019      	movs	r1, r3
200006d2:	0010      	movs	r0, r2
200006d4:	f7ff fed2 	bl	2000047c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200006d8:	230d      	movs	r3, #13
200006da:	18fb      	adds	r3, r7, r3
200006dc:	781b      	ldrb	r3, [r3, #0]
200006de:	2248      	movs	r2, #72	; 0x48
200006e0:	4252      	negs	r2, r2
200006e2:	4313      	orrs	r3, r2
200006e4:	b2da      	uxtb	r2, r3
200006e6:	230e      	movs	r3, #14
200006e8:	18fb      	adds	r3, r7, r3
200006ea:	781b      	ldrb	r3, [r3, #0]
200006ec:	0019      	movs	r1, r3
200006ee:	0010      	movs	r0, r2
200006f0:	f7ff fec4 	bl	2000047c <graphic_write_command>
	unsigned char temp = graphics_read_data(controller);
200006f4:	230c      	movs	r3, #12
200006f6:	18fc      	adds	r4, r7, r3
200006f8:	230e      	movs	r3, #14
200006fa:	18fb      	adds	r3, r7, r3
200006fc:	781b      	ldrb	r3, [r3, #0]
200006fe:	0018      	movs	r0, r3
20000700:	f7ff feff 	bl	20000502 <graphics_read_data>
20000704:	0003      	movs	r3, r0
20000706:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000708:	1dfb      	adds	r3, r7, #7
2000070a:	781b      	ldrb	r3, [r3, #0]
2000070c:	2240      	movs	r2, #64	; 0x40
2000070e:	4313      	orrs	r3, r2
20000710:	b2da      	uxtb	r2, r3
20000712:	230e      	movs	r3, #14
20000714:	18fb      	adds	r3, r7, r3
20000716:	781b      	ldrb	r3, [r3, #0]
20000718:	0019      	movs	r1, r3
2000071a:	0010      	movs	r0, r2
2000071c:	f7ff feae 	bl	2000047c <graphic_write_command>
	
	if(set) {
20000720:	1d7b      	adds	r3, r7, #5
20000722:	781b      	ldrb	r3, [r3, #0]
20000724:	2b00      	cmp	r3, #0
20000726:	d00a      	beq.n	2000073e <pixel+0x15e>
		mask = mask | temp;
20000728:	230f      	movs	r3, #15
2000072a:	18fb      	adds	r3, r7, r3
2000072c:	220f      	movs	r2, #15
2000072e:	18b9      	adds	r1, r7, r2
20000730:	220c      	movs	r2, #12
20000732:	18ba      	adds	r2, r7, r2
20000734:	7809      	ldrb	r1, [r1, #0]
20000736:	7812      	ldrb	r2, [r2, #0]
20000738:	430a      	orrs	r2, r1
2000073a:	701a      	strb	r2, [r3, #0]
2000073c:	e009      	b.n	20000752 <pixel+0x172>
	} else {
		mask = mask & temp;
2000073e:	230f      	movs	r3, #15
20000740:	18fb      	adds	r3, r7, r3
20000742:	220f      	movs	r2, #15
20000744:	18ba      	adds	r2, r7, r2
20000746:	210c      	movs	r1, #12
20000748:	1879      	adds	r1, r7, r1
2000074a:	7812      	ldrb	r2, [r2, #0]
2000074c:	7809      	ldrb	r1, [r1, #0]
2000074e:	400a      	ands	r2, r1
20000750:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
20000752:	230e      	movs	r3, #14
20000754:	18fb      	adds	r3, r7, r3
20000756:	781a      	ldrb	r2, [r3, #0]
20000758:	230f      	movs	r3, #15
2000075a:	18fb      	adds	r3, r7, r3
2000075c:	781b      	ldrb	r3, [r3, #0]
2000075e:	0011      	movs	r1, r2
20000760:	0018      	movs	r0, r3
20000762:	f7ff feab 	bl	200004bc <graphic_write_data>
20000766:	e000      	b.n	2000076a <pixel+0x18a>
	if(x > 127 || y > 63) return;
20000768:	46c0      	nop			; (mov r8, r8)
	
}
2000076a:	46bd      	mov	sp, r7
2000076c:	b005      	add	sp, #20
2000076e:	bd90      	pop	{r4, r7, pc}
20000770:	20000cb8 			; <UNDEFINED> instruction: 0x20000cb8

20000774 <draw_object>:
#include "object.h"
#include "graphic.h"

void draw_object(POBJECT this) {
20000774:	b580      	push	{r7, lr}
20000776:	b084      	sub	sp, #16
20000778:	af00      	add	r7, sp, #0
2000077a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
2000077c:	2300      	movs	r3, #0
2000077e:	60fb      	str	r3, [r7, #12]
20000780:	e020      	b.n	200007c4 <draw_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 1);
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	681a      	ldr	r2, [r3, #0]
20000786:	68fb      	ldr	r3, [r7, #12]
20000788:	3304      	adds	r3, #4
2000078a:	005b      	lsls	r3, r3, #1
2000078c:	18d3      	adds	r3, r2, r3
2000078e:	3304      	adds	r3, #4
20000790:	781a      	ldrb	r2, [r3, #0]
20000792:	687b      	ldr	r3, [r7, #4]
20000794:	68db      	ldr	r3, [r3, #12]
20000796:	b2db      	uxtb	r3, r3
20000798:	18d3      	adds	r3, r2, r3
2000079a:	b2d8      	uxtb	r0, r3
2000079c:	687b      	ldr	r3, [r7, #4]
2000079e:	681a      	ldr	r2, [r3, #0]
200007a0:	68fb      	ldr	r3, [r7, #12]
200007a2:	3304      	adds	r3, #4
200007a4:	005b      	lsls	r3, r3, #1
200007a6:	18d3      	adds	r3, r2, r3
200007a8:	3305      	adds	r3, #5
200007aa:	781a      	ldrb	r2, [r3, #0]
200007ac:	687b      	ldr	r3, [r7, #4]
200007ae:	691b      	ldr	r3, [r3, #16]
200007b0:	b2db      	uxtb	r3, r3
200007b2:	18d3      	adds	r3, r2, r3
200007b4:	b2db      	uxtb	r3, r3
200007b6:	2201      	movs	r2, #1
200007b8:	0019      	movs	r1, r3
200007ba:	f7ff ff11 	bl	200005e0 <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
200007be:	68fb      	ldr	r3, [r7, #12]
200007c0:	3301      	adds	r3, #1
200007c2:	60fb      	str	r3, [r7, #12]
200007c4:	68fb      	ldr	r3, [r7, #12]
200007c6:	2b63      	cmp	r3, #99	; 0x63
200007c8:	dddb      	ble.n	20000782 <draw_object+0xe>
	}
}
200007ca:	46c0      	nop			; (mov r8, r8)
200007cc:	46bd      	mov	sp, r7
200007ce:	b004      	add	sp, #16
200007d0:	bd80      	pop	{r7, pc}

200007d2 <clear_object>:
void clear_object(POBJECT this) {
200007d2:	b580      	push	{r7, lr}
200007d4:	b084      	sub	sp, #16
200007d6:	af00      	add	r7, sp, #0
200007d8:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
200007da:	2300      	movs	r3, #0
200007dc:	60fb      	str	r3, [r7, #12]
200007de:	e020      	b.n	20000822 <clear_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 0);
200007e0:	687b      	ldr	r3, [r7, #4]
200007e2:	681a      	ldr	r2, [r3, #0]
200007e4:	68fb      	ldr	r3, [r7, #12]
200007e6:	3304      	adds	r3, #4
200007e8:	005b      	lsls	r3, r3, #1
200007ea:	18d3      	adds	r3, r2, r3
200007ec:	3304      	adds	r3, #4
200007ee:	781a      	ldrb	r2, [r3, #0]
200007f0:	687b      	ldr	r3, [r7, #4]
200007f2:	68db      	ldr	r3, [r3, #12]
200007f4:	b2db      	uxtb	r3, r3
200007f6:	18d3      	adds	r3, r2, r3
200007f8:	b2d8      	uxtb	r0, r3
200007fa:	687b      	ldr	r3, [r7, #4]
200007fc:	681a      	ldr	r2, [r3, #0]
200007fe:	68fb      	ldr	r3, [r7, #12]
20000800:	3304      	adds	r3, #4
20000802:	005b      	lsls	r3, r3, #1
20000804:	18d3      	adds	r3, r2, r3
20000806:	3305      	adds	r3, #5
20000808:	781a      	ldrb	r2, [r3, #0]
2000080a:	687b      	ldr	r3, [r7, #4]
2000080c:	691b      	ldr	r3, [r3, #16]
2000080e:	b2db      	uxtb	r3, r3
20000810:	18d3      	adds	r3, r2, r3
20000812:	b2db      	uxtb	r3, r3
20000814:	2200      	movs	r2, #0
20000816:	0019      	movs	r1, r3
20000818:	f7ff fee2 	bl	200005e0 <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
2000081c:	68fb      	ldr	r3, [r7, #12]
2000081e:	3301      	adds	r3, #1
20000820:	60fb      	str	r3, [r7, #12]
20000822:	68fb      	ldr	r3, [r7, #12]
20000824:	2b63      	cmp	r3, #99	; 0x63
20000826:	dddb      	ble.n	200007e0 <clear_object+0xe>
	}
}
20000828:	46c0      	nop			; (mov r8, r8)
2000082a:	46bd      	mov	sp, r7
2000082c:	b004      	add	sp, #16
2000082e:	bd80      	pop	{r7, pc}

20000830 <set_object_speed>:

void set_object_speed(POBJECT this, int x, int y) {
20000830:	b580      	push	{r7, lr}
20000832:	b084      	sub	sp, #16
20000834:	af00      	add	r7, sp, #0
20000836:	60f8      	str	r0, [r7, #12]
20000838:	60b9      	str	r1, [r7, #8]
2000083a:	607a      	str	r2, [r7, #4]
	this->dirX = x;
2000083c:	68fb      	ldr	r3, [r7, #12]
2000083e:	68ba      	ldr	r2, [r7, #8]
20000840:	605a      	str	r2, [r3, #4]
	this->dirY = y;
20000842:	68fb      	ldr	r3, [r7, #12]
20000844:	687a      	ldr	r2, [r7, #4]
20000846:	609a      	str	r2, [r3, #8]
20000848:	46c0      	nop			; (mov r8, r8)
2000084a:	46bd      	mov	sp, r7
2000084c:	b004      	add	sp, #16
2000084e:	bd80      	pop	{r7, pc}

20000850 <delay_250ns>:
#include "timer.h"

void delay_250ns(void) {
20000850:	b580      	push	{r7, lr}
20000852:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000854:	4b0c      	ldr	r3, [pc, #48]	; (20000888 <delay_250ns+0x38>)
20000856:	2200      	movs	r2, #0
20000858:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
2000085a:	4b0c      	ldr	r3, [pc, #48]	; (2000088c <delay_250ns+0x3c>)
2000085c:	2231      	movs	r2, #49	; 0x31
2000085e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000860:	4b0b      	ldr	r3, [pc, #44]	; (20000890 <delay_250ns+0x40>)
20000862:	2200      	movs	r2, #0
20000864:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000866:	4b08      	ldr	r3, [pc, #32]	; (20000888 <delay_250ns+0x38>)
20000868:	2205      	movs	r2, #5
2000086a:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
2000086c:	46c0      	nop			; (mov r8, r8)
2000086e:	4b06      	ldr	r3, [pc, #24]	; (20000888 <delay_250ns+0x38>)
20000870:	681a      	ldr	r2, [r3, #0]
20000872:	2380      	movs	r3, #128	; 0x80
20000874:	025b      	lsls	r3, r3, #9
20000876:	4013      	ands	r3, r2
20000878:	d0f9      	beq.n	2000086e <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
2000087a:	4b03      	ldr	r3, [pc, #12]	; (20000888 <delay_250ns+0x38>)
2000087c:	2200      	movs	r2, #0
2000087e:	601a      	str	r2, [r3, #0]
}
20000880:	46c0      	nop			; (mov r8, r8)
20000882:	46bd      	mov	sp, r7
20000884:	bd80      	pop	{r7, pc}
20000886:	46c0      	nop			; (mov r8, r8)
20000888:	e000e010 	and	lr, r0, r0, lsl r0
2000088c:	e000e014 	and	lr, r0, r4, lsl r0
20000890:	e000e018 	and	lr, r0, r8, lsl r0

20000894 <delay_micro>:

void delay_micro(unsigned int us) {
20000894:	b580      	push	{r7, lr}
20000896:	b082      	sub	sp, #8
20000898:	af00      	add	r7, sp, #0
2000089a:	6078      	str	r0, [r7, #4]
	while(us--) {
2000089c:	e007      	b.n	200008ae <delay_micro+0x1a>
		delay_250ns();
2000089e:	f7ff ffd7 	bl	20000850 <delay_250ns>
		delay_250ns();
200008a2:	f7ff ffd5 	bl	20000850 <delay_250ns>
		delay_250ns();
200008a6:	f7ff ffd3 	bl	20000850 <delay_250ns>
		delay_250ns();
200008aa:	f7ff ffd1 	bl	20000850 <delay_250ns>
	while(us--) {
200008ae:	687b      	ldr	r3, [r7, #4]
200008b0:	1e5a      	subs	r2, r3, #1
200008b2:	607a      	str	r2, [r7, #4]
200008b4:	2b00      	cmp	r3, #0
200008b6:	d1f2      	bne.n	2000089e <delay_micro+0xa>
	}
}
200008b8:	46c0      	nop			; (mov r8, r8)
200008ba:	46bd      	mov	sp, r7
200008bc:	b002      	add	sp, #8
200008be:	bd80      	pop	{r7, pc}

200008c0 <delay_milli>:

void delay_milli(unsigned int ms) {
200008c0:	b580      	push	{r7, lr}
200008c2:	b082      	sub	sp, #8
200008c4:	af00      	add	r7, sp, #0
200008c6:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_micro(ms);
	#else
		delay_micro(1000 * ms);
200008c8:	687b      	ldr	r3, [r7, #4]
200008ca:	22fa      	movs	r2, #250	; 0xfa
200008cc:	0092      	lsls	r2, r2, #2
200008ce:	4353      	muls	r3, r2
200008d0:	0018      	movs	r0, r3
200008d2:	f7ff ffdf 	bl	20000894 <delay_micro>
	#endif
}
200008d6:	46c0      	nop			; (mov r8, r8)
200008d8:	46bd      	mov	sp, r7
200008da:	b002      	add	sp, #8
200008dc:	bd80      	pop	{r7, pc}

200008de <delay_500ns>:

void delay_500ns(void) {
200008de:	b580      	push	{r7, lr}
200008e0:	af00      	add	r7, sp, #0
	delay_250ns();
200008e2:	f7ff ffb5 	bl	20000850 <delay_250ns>
	delay_250ns();
200008e6:	f7ff ffb3 	bl	20000850 <delay_250ns>
}
200008ea:	46c0      	nop			; (mov r8, r8)
200008ec:	46bd      	mov	sp, r7
200008ee:	bd80      	pop	{r7, pc}

200008f0 <move_paddle>:
	clear_object,
	move_paddle,
	set_object_speed
};

void move_paddle(POBJECT this) {
200008f0:	b580      	push	{r7, lr}
200008f2:	b082      	sub	sp, #8
200008f4:	af00      	add	r7, sp, #0
200008f6:	6078      	str	r0, [r7, #4]
	clear_object(this);
200008f8:	687b      	ldr	r3, [r7, #4]
200008fa:	0018      	movs	r0, r3
200008fc:	f7ff ff69 	bl	200007d2 <clear_object>
	
	// Move paddle in y direction only.
	this->posY += this->dirY;
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	691a      	ldr	r2, [r3, #16]
20000904:	687b      	ldr	r3, [r7, #4]
20000906:	689b      	ldr	r3, [r3, #8]
20000908:	18d2      	adds	r2, r2, r3
2000090a:	687b      	ldr	r3, [r7, #4]
2000090c:	611a      	str	r2, [r3, #16]
	
	// Wall collisions todo add width check with paddle.
	if(this->posY < 0) {
2000090e:	687b      	ldr	r3, [r7, #4]
20000910:	691b      	ldr	r3, [r3, #16]
20000912:	2b00      	cmp	r3, #0
20000914:	da03      	bge.n	2000091e <move_paddle+0x2e>
		this->posY = 0;
20000916:	687b      	ldr	r3, [r7, #4]
20000918:	2200      	movs	r2, #0
2000091a:	611a      	str	r2, [r3, #16]
2000091c:	e00e      	b.n	2000093c <move_paddle+0x4c>
	} else if((this->posY + this->geo->sizeY) > 63) {
2000091e:	687b      	ldr	r3, [r7, #4]
20000920:	691a      	ldr	r2, [r3, #16]
20000922:	687b      	ldr	r3, [r7, #4]
20000924:	681b      	ldr	r3, [r3, #0]
20000926:	689b      	ldr	r3, [r3, #8]
20000928:	18d3      	adds	r3, r2, r3
2000092a:	2b3f      	cmp	r3, #63	; 0x3f
2000092c:	dd06      	ble.n	2000093c <move_paddle+0x4c>
		this->posY = (63 - this->geo->sizeY);
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	681b      	ldr	r3, [r3, #0]
20000932:	689b      	ldr	r3, [r3, #8]
20000934:	223f      	movs	r2, #63	; 0x3f
20000936:	1ad2      	subs	r2, r2, r3
20000938:	687b      	ldr	r3, [r7, #4]
2000093a:	611a      	str	r2, [r3, #16]
	}
	
	this->draw(this);
2000093c:	687b      	ldr	r3, [r7, #4]
2000093e:	695b      	ldr	r3, [r3, #20]
20000940:	687a      	ldr	r2, [r7, #4]
20000942:	0010      	movs	r0, r2
20000944:	4798      	blx	r3
20000946:	46c0      	nop			; (mov r8, r8)
20000948:	46bd      	mov	sp, r7
2000094a:	b002      	add	sp, #8
2000094c:	bd80      	pop	{r7, pc}
	...

20000950 <activateRow>:
#include "keypad.h"

void activateRow(unsigned int row) {
20000950:	b580      	push	{r7, lr}
20000952:	b082      	sub	sp, #8
20000954:	af00      	add	r7, sp, #0
20000956:	6078      	str	r0, [r7, #4]
	switch(row) {
20000958:	687b      	ldr	r3, [r7, #4]
2000095a:	2b04      	cmp	r3, #4
2000095c:	d819      	bhi.n	20000992 <activateRow+0x42>
2000095e:	687b      	ldr	r3, [r7, #4]
20000960:	009a      	lsls	r2, r3, #2
20000962:	4b0e      	ldr	r3, [pc, #56]	; (2000099c <activateRow+0x4c>)
20000964:	18d3      	adds	r3, r2, r3
20000966:	681b      	ldr	r3, [r3, #0]
20000968:	469f      	mov	pc, r3
		case 0: *GPIO_D_ODR_HIGH = 0x00; break;
2000096a:	4b0d      	ldr	r3, [pc, #52]	; (200009a0 <activateRow+0x50>)
2000096c:	2200      	movs	r2, #0
2000096e:	701a      	strb	r2, [r3, #0]
20000970:	e00f      	b.n	20000992 <activateRow+0x42>
		case 1: *GPIO_D_ODR_HIGH = 0x10; break;
20000972:	4b0b      	ldr	r3, [pc, #44]	; (200009a0 <activateRow+0x50>)
20000974:	2210      	movs	r2, #16
20000976:	701a      	strb	r2, [r3, #0]
20000978:	e00b      	b.n	20000992 <activateRow+0x42>
		case 2: *GPIO_D_ODR_HIGH = 0x20; break;
2000097a:	4b09      	ldr	r3, [pc, #36]	; (200009a0 <activateRow+0x50>)
2000097c:	2220      	movs	r2, #32
2000097e:	701a      	strb	r2, [r3, #0]
20000980:	e007      	b.n	20000992 <activateRow+0x42>
		case 3: *GPIO_D_ODR_HIGH = 0x40; break;
20000982:	4b07      	ldr	r3, [pc, #28]	; (200009a0 <activateRow+0x50>)
20000984:	2240      	movs	r2, #64	; 0x40
20000986:	701a      	strb	r2, [r3, #0]
20000988:	e003      	b.n	20000992 <activateRow+0x42>
		case 4: *GPIO_D_ODR_HIGH = 0x80; break;
2000098a:	4b05      	ldr	r3, [pc, #20]	; (200009a0 <activateRow+0x50>)
2000098c:	2280      	movs	r2, #128	; 0x80
2000098e:	701a      	strb	r2, [r3, #0]
20000990:	46c0      	nop			; (mov r8, r8)
	}
}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	46bd      	mov	sp, r7
20000996:	b002      	add	sp, #8
20000998:	bd80      	pop	{r7, pc}
2000099a:	46c0      	nop			; (mov r8, r8)
2000099c:	20000cd8 	ldrdcs	r0, [r0], -r8
200009a0:	40020c15 	andmi	r0, r2, r5, lsl ip

200009a4 <readColumn>:

unsigned char readColumn(void) {
200009a4:	b580      	push	{r7, lr}
200009a6:	b082      	sub	sp, #8
200009a8:	af00      	add	r7, sp, #0
	unsigned char idr = *GPIO_D_IDR_HIGH;
200009aa:	4a12      	ldr	r2, [pc, #72]	; (200009f4 <readColumn+0x50>)
200009ac:	1dfb      	adds	r3, r7, #7
200009ae:	7812      	ldrb	r2, [r2, #0]
200009b0:	701a      	strb	r2, [r3, #0]
	if(idr & 0x01) return 1;
200009b2:	1dfb      	adds	r3, r7, #7
200009b4:	781b      	ldrb	r3, [r3, #0]
200009b6:	2201      	movs	r2, #1
200009b8:	4013      	ands	r3, r2
200009ba:	d001      	beq.n	200009c0 <readColumn+0x1c>
200009bc:	2301      	movs	r3, #1
200009be:	e015      	b.n	200009ec <readColumn+0x48>
	if(idr & 0x02) return 2;
200009c0:	1dfb      	adds	r3, r7, #7
200009c2:	781b      	ldrb	r3, [r3, #0]
200009c4:	2202      	movs	r2, #2
200009c6:	4013      	ands	r3, r2
200009c8:	d001      	beq.n	200009ce <readColumn+0x2a>
200009ca:	2302      	movs	r3, #2
200009cc:	e00e      	b.n	200009ec <readColumn+0x48>
	if(idr & 0x04) return 3;
200009ce:	1dfb      	adds	r3, r7, #7
200009d0:	781b      	ldrb	r3, [r3, #0]
200009d2:	2204      	movs	r2, #4
200009d4:	4013      	ands	r3, r2
200009d6:	d001      	beq.n	200009dc <readColumn+0x38>
200009d8:	2303      	movs	r3, #3
200009da:	e007      	b.n	200009ec <readColumn+0x48>
	if(idr & 0x08) return 4;
200009dc:	1dfb      	adds	r3, r7, #7
200009de:	781b      	ldrb	r3, [r3, #0]
200009e0:	2208      	movs	r2, #8
200009e2:	4013      	ands	r3, r2
200009e4:	d001      	beq.n	200009ea <readColumn+0x46>
200009e6:	2304      	movs	r3, #4
200009e8:	e000      	b.n	200009ec <readColumn+0x48>
	return 0;
200009ea:	2300      	movs	r3, #0
}
200009ec:	0018      	movs	r0, r3
200009ee:	46bd      	mov	sp, r7
200009f0:	b002      	add	sp, #8
200009f2:	bd80      	pop	{r7, pc}
200009f4:	40020c11 	andmi	r0, r2, r1, lsl ip

200009f8 <keyb>:

unsigned char * keyb(void) {
200009f8:	b590      	push	{r4, r7, lr}
200009fa:	b087      	sub	sp, #28
200009fc:	af00      	add	r7, sp, #0
	unsigned char keys[] = {0x1,0x2,0x3,0xA,0x4,0x5,0x6,0xB,0x7,0x8,0x9,0xC,0xE,0x0,0xF,0xD};
200009fe:	1d3b      	adds	r3, r7, #4
20000a00:	4a25      	ldr	r2, [pc, #148]	; (20000a98 <keyb+0xa0>)
20000a02:	ca13      	ldmia	r2!, {r0, r1, r4}
20000a04:	c313      	stmia	r3!, {r0, r1, r4}
20000a06:	6812      	ldr	r2, [r2, #0]
20000a08:	601a      	str	r2, [r3, #0]
	static unsigned char returnKeys[4] = {0xFF,0xFF,0xFF,0xFF};
	for(char row = 1; row <= 4; row++) {
20000a0a:	2317      	movs	r3, #23
20000a0c:	18fb      	adds	r3, r7, r3
20000a0e:	2201      	movs	r2, #1
20000a10:	701a      	strb	r2, [r3, #0]
20000a12:	e033      	b.n	20000a7c <keyb+0x84>
		activateRow(row);
20000a14:	2317      	movs	r3, #23
20000a16:	18fb      	adds	r3, r7, r3
20000a18:	781b      	ldrb	r3, [r3, #0]
20000a1a:	0018      	movs	r0, r3
20000a1c:	f7ff ff98 	bl	20000950 <activateRow>
		delay_250ns();
20000a20:	f7ff ff16 	bl	20000850 <delay_250ns>
		char column = readColumn();
20000a24:	2316      	movs	r3, #22
20000a26:	18fc      	adds	r4, r7, r3
20000a28:	f7ff ffbc 	bl	200009a4 <readColumn>
20000a2c:	0003      	movs	r3, r0
20000a2e:	7023      	strb	r3, [r4, #0]
		if(column != 0) {
20000a30:	2316      	movs	r3, #22
20000a32:	18fb      	adds	r3, r7, r3
20000a34:	781b      	ldrb	r3, [r3, #0]
20000a36:	2b00      	cmp	r3, #0
20000a38:	d012      	beq.n	20000a60 <keyb+0x68>
			returnKeys[row-1] = keys[4 * (row - 1) + (column - 1)];
20000a3a:	2317      	movs	r3, #23
20000a3c:	18fb      	adds	r3, r7, r3
20000a3e:	781b      	ldrb	r3, [r3, #0]
20000a40:	3b01      	subs	r3, #1
20000a42:	2217      	movs	r2, #23
20000a44:	18ba      	adds	r2, r7, r2
20000a46:	7812      	ldrb	r2, [r2, #0]
20000a48:	3a01      	subs	r2, #1
20000a4a:	0091      	lsls	r1, r2, #2
20000a4c:	2216      	movs	r2, #22
20000a4e:	18ba      	adds	r2, r7, r2
20000a50:	7812      	ldrb	r2, [r2, #0]
20000a52:	3a01      	subs	r2, #1
20000a54:	188a      	adds	r2, r1, r2
20000a56:	1d39      	adds	r1, r7, #4
20000a58:	5c89      	ldrb	r1, [r1, r2]
20000a5a:	4a10      	ldr	r2, [pc, #64]	; (20000a9c <keyb+0xa4>)
20000a5c:	54d1      	strb	r1, [r2, r3]
20000a5e:	e006      	b.n	20000a6e <keyb+0x76>
		} else {
			returnKeys[row-1] = 0xFF;
20000a60:	2317      	movs	r3, #23
20000a62:	18fb      	adds	r3, r7, r3
20000a64:	781b      	ldrb	r3, [r3, #0]
20000a66:	3b01      	subs	r3, #1
20000a68:	4a0c      	ldr	r2, [pc, #48]	; (20000a9c <keyb+0xa4>)
20000a6a:	21ff      	movs	r1, #255	; 0xff
20000a6c:	54d1      	strb	r1, [r2, r3]
	for(char row = 1; row <= 4; row++) {
20000a6e:	2317      	movs	r3, #23
20000a70:	18fb      	adds	r3, r7, r3
20000a72:	781a      	ldrb	r2, [r3, #0]
20000a74:	2317      	movs	r3, #23
20000a76:	18fb      	adds	r3, r7, r3
20000a78:	3201      	adds	r2, #1
20000a7a:	701a      	strb	r2, [r3, #0]
20000a7c:	2317      	movs	r3, #23
20000a7e:	18fb      	adds	r3, r7, r3
20000a80:	781b      	ldrb	r3, [r3, #0]
20000a82:	2b04      	cmp	r3, #4
20000a84:	d9c6      	bls.n	20000a14 <keyb+0x1c>
		}
	}
	activateRow(0);
20000a86:	2000      	movs	r0, #0
20000a88:	f7ff ff62 	bl	20000950 <activateRow>
	return returnKeys;
20000a8c:	4b03      	ldr	r3, [pc, #12]	; (20000a9c <keyb+0xa4>)
20000a8e:	0018      	movs	r0, r3
20000a90:	46bd      	mov	sp, r7
20000a92:	b007      	add	sp, #28
20000a94:	bd90      	pop	{r4, r7, pc}
20000a96:	46c0      	nop			; (mov r8, r8)
20000a98:	20000cec 	andcs	r0, r0, ip, ror #25
20000a9c:	20000cb4 			; <UNDEFINED> instruction: 0x20000cb4

20000aa0 <ball_geometry>:
20000aa0:	0000000c 	andeq	r0, r0, ip
20000aa4:	00000004 	andeq	r0, r0, r4
20000aa8:	00000004 	andeq	r0, r0, r4
20000aac:	02000100 	andeq	r0, r0, #0, 2
20000ab0:	01010001 	tsteq	r1, r1
20000ab4:	03010201 	movweq	r0, #4609	; 0x1201
20000ab8:	01020002 	tsteq	r2, r2
20000abc:	03020202 	movweq	r0, #8706	; 0x2202
20000ac0:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000b74 <ball>:
20000b74:	20000aa0 	andcs	r0, r0, r0, lsr #21
	...
20000b80:	00000001 	andeq	r0, r0, r1
20000b84:	00000001 	andeq	r0, r0, r1
20000b88:	20000775 	andcs	r0, r0, r5, ror r7
20000b8c:	200007d3 	ldrdcs	r0, [r0], -r3
20000b90:	20000149 	andcs	r0, r0, r9, asr #2
20000b94:	20000831 	andcs	r0, r0, r1, lsr r8

20000b98 <paddle_geometry>:
20000b98:	00000064 	andeq	r0, r0, r4, rrx
20000b9c:	00000004 	andeq	r0, r0, r4
20000ba0:	00000019 	andeq	r0, r0, r9, lsl r0
20000ba4:	00010000 	andeq	r0, r1, r0
20000ba8:	00030002 	andeq	r0, r3, r2
20000bac:	01010100 	mrseq	r0, (UNDEF: 17)
20000bb0:	01030102 	tsteq	r3, r2, lsl #2
20000bb4:	02010200 	andeq	r0, r1, #0, 4
20000bb8:	02030202 	andeq	r0, r3, #536870912	; 0x20000000
20000bbc:	03010300 	movweq	r0, #4864	; 0x1300
20000bc0:	03030302 	movweq	r0, #13058	; 0x3302
20000bc4:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
20000bc8:	04030402 	streq	r0, [r3], #-1026	; 0xfffffbfe
20000bcc:	05010500 	streq	r0, [r1, #-1280]	; 0xfffffb00
20000bd0:	05030502 	streq	r0, [r3, #-1282]	; 0xfffffafe
20000bd4:	06010600 	streq	r0, [r1], -r0, lsl #12
20000bd8:	06030602 	streq	r0, [r3], -r2, lsl #12
20000bdc:	07010700 	streq	r0, [r1, -r0, lsl #14]
20000be0:	07030702 	streq	r0, [r3, -r2, lsl #14]
20000be4:	08010800 	stmdaeq	r1, {fp}
20000be8:	08030802 	stmdaeq	r3, {r1, fp}
20000bec:	09010900 	stmdbeq	r1, {r8, fp}
20000bf0:	09030902 	stmdbeq	r3, {r1, r8, fp}
20000bf4:	0a010a00 	beq	200433fc <returnKeys.4003+0x42748>
20000bf8:	0a030a02 	beq	200c3408 <returnKeys.4003+0xc2754>
20000bfc:	0b010b00 	bleq	20043804 <returnKeys.4003+0x42b50>
20000c00:	0b030b02 	bleq	200c3810 <returnKeys.4003+0xc2b5c>
20000c04:	0c010c00 	stceq	12, cr0, [r1], {-0}
20000c08:	0c030c02 	stceq	12, cr0, [r3], {2}
20000c0c:	0d010d00 	stceq	13, cr0, [r1, #-0]
20000c10:	0d030d02 	stceq	13, cr0, [r3, #-8]
20000c14:	0e010e00 	cdpeq	14, 0, cr0, cr1, cr0, {0}
20000c18:	0e030e02 	cdpeq	14, 0, cr0, cr3, cr2, {0}
20000c1c:	0f010f00 	svceq	0x00010f00
20000c20:	0f030f02 	svceq	0x00030f02
20000c24:	10011000 	andne	r1, r1, r0
20000c28:	10031002 	andne	r1, r3, r2
20000c2c:	11011100 	mrsne	r1, (UNDEF: 17)
20000c30:	11031102 	tstne	r3, r2, lsl #2
20000c34:	12011200 	andne	r1, r1, #0, 4
20000c38:	12031202 	andne	r1, r3, #536870912	; 0x20000000
20000c3c:	13011300 	movwne	r1, #4864	; 0x1300
20000c40:	13031302 	movwne	r1, #13058	; 0x3302
20000c44:	14011400 	strne	r1, [r1], #-1024	; 0xfffffc00
20000c48:	14031402 	strne	r1, [r3], #-1026	; 0xfffffbfe
20000c4c:	15011500 	strne	r1, [r1, #-1280]	; 0xfffffb00
20000c50:	15031502 	strne	r1, [r3, #-1282]	; 0xfffffafe
20000c54:	16011600 	strne	r1, [r1], -r0, lsl #12
20000c58:	16031602 	strne	r1, [r3], -r2, lsl #12
20000c5c:	17011700 	strne	r1, [r1, -r0, lsl #14]
20000c60:	17031702 	strne	r1, [r3, -r2, lsl #14]
20000c64:	18011800 	stmdane	r1, {fp, ip}
20000c68:	18031802 	stmdane	r3, {r1, fp, ip}

20000c6c <leftPaddle>:
20000c6c:	20000b98 	mulcs	r0, r8, fp
	...
20000c78:	00000001 	andeq	r0, r0, r1
20000c7c:	00000020 	andeq	r0, r0, r0, lsr #32
20000c80:	20000775 	andcs	r0, r0, r5, ror r7
20000c84:	200007d3 	ldrdcs	r0, [r0], -r3
20000c88:	200008f1 	strdcs	r0, [r0], -r1
20000c8c:	20000831 	andcs	r0, r0, r1, lsr r8

20000c90 <rightPaddle>:
20000c90:	20000b98 	mulcs	r0, r8, fp
	...
20000c9c:	0000007c 	andeq	r0, r0, ip, ror r0
20000ca0:	00000020 	andeq	r0, r0, r0, lsr #32
20000ca4:	20000775 	andcs	r0, r0, r5, ror r7
20000ca8:	200007d3 	ldrdcs	r0, [r0], -r3
20000cac:	200008f1 	strdcs	r0, [r0], -r1
20000cb0:	20000831 	andcs	r0, r0, r1, lsr r8

20000cb4 <returnKeys.4003>:
20000cb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20000cb8:	20000636 	andcs	r0, r0, r6, lsr r6
20000cbc:	20000640 	andcs	r0, r0, r0, asr #12
20000cc0:	2000064a 	andcs	r0, r0, sl, asr #12
20000cc4:	20000654 	andcs	r0, r0, r4, asr r6
20000cc8:	2000065e 	andcs	r0, r0, lr, asr r6
20000ccc:	20000668 	andcs	r0, r0, r8, ror #12
20000cd0:	20000672 	andcs	r0, r0, r2, ror r6
20000cd4:	2000067c 	andcs	r0, r0, ip, ror r6
20000cd8:	2000096a 	andcs	r0, r0, sl, ror #18
20000cdc:	20000972 	andcs	r0, r0, r2, ror r9
20000ce0:	2000097a 	andcs	r0, r0, sl, ror r9
20000ce4:	20000982 	andcs	r0, r0, r2, lsl #19
20000ce8:	2000098a 	andcs	r0, r0, sl, lsl #19
20000cec:	0a030201 	beq	200c14f8 <returnKeys.4003+0xc0844>
20000cf0:	0b060504 	bleq	20182108 <returnKeys.4003+0x181454>
20000cf4:	0c090807 	stceq	8, cr0, [r9], {7}
20000cf8:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000cc8 <returnKeys.4003+0x14>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000230 	andeq	r0, r0, r0, lsr r2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000087 	andeq	r0, r0, r7, lsl #1
  10:	0000270c 	andeq	r2, r0, ip, lsl #14
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	00000079 	andeq	r0, r0, r9, ror r0
  28:	00006d03 	andeq	r6, r0, r3, lsl #26
  2c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
  30:	00000049 	andeq	r0, r0, r9, asr #32
  34:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
  38:	00002106 	andeq	r2, r0, r6, lsl #2
  3c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
  40:	21070200 	mrscs	r0, (UNDEF: 39)
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	01850500 	orreq	r0, r5, r0, lsl #10
  4c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  50:	00000028 	andeq	r0, r0, r8, lsr #32
  54:	00013203 	andeq	r3, r1, r3, lsl #4
  58:	0b02d400 	bleq	b5060 <startup-0x1ff4afa0>
  5c:	00000090 	muleq	r0, r0, r0
  60:	00017b06 	andeq	r7, r1, r6, lsl #22
  64:	900c0200 	andls	r0, ip, r0, lsl #4
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000a06 	andeq	r0, r0, r6, lsl #20
  70:	900d0200 	andls	r0, sp, r0, lsl #4
  74:	04000000 	streq	r0, [r0], #-0
  78:	00001c06 	andeq	r1, r0, r6, lsl #24
  7c:	900e0200 	andls	r0, lr, r0, lsl #4
  80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  84:	00787004 	rsbseq	r7, r8, r4
  88:	00970f02 	addseq	r0, r7, r2, lsl #30
  8c:	000c0000 	andeq	r0, ip, r0
  90:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  94:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  98:	00000049 	andeq	r0, r0, r9, asr #32
  9c:	000000a7 	andeq	r0, r0, r7, lsr #1
  a0:	0000a709 	andeq	sl, r0, r9, lsl #14
  a4:	02006300 	andeq	r6, r0, #0, 6
  a8:	01680704 	cmneq	r8, r4, lsl #14
  ac:	1f050000 	svcne	0x00050000
  b0:	02000001 	andeq	r0, r0, #1
  b4:	0000b910 	andeq	fp, r0, r0, lsl r9
  b8:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
  bc:	03000000 	movweq	r0, #0
  c0:	0000018b 	andeq	r0, r0, fp, lsl #3
  c4:	38120224 	ldmdacc	r2, {r2, r5, r9}
  c8:	04000001 	streq	r0, [r0], #-1
  cc:	006f6567 	rsbeq	r6, pc, r7, ror #10
  d0:	00ae1302 	adceq	r1, lr, r2, lsl #6
  d4:	06000000 	streq	r0, [r0], -r0
  d8:	00000176 	andeq	r0, r0, r6, ror r1
  dc:	00901402 	addseq	r1, r0, r2, lsl #8
  e0:	06040000 	streq	r0, [r4], -r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	00901402 	addseq	r1, r0, r2, lsl #8
  ec:	06080000 	streq	r0, [r8], -r0
  f0:	00000171 	andeq	r0, r0, r1, ror r1
  f4:	00901502 	addseq	r1, r0, r2, lsl #10
  f8:	060c0000 	streq	r0, [ip], -r0
  fc:	00000005 	andeq	r0, r0, r5
 100:	00901502 	addseq	r1, r0, r2, lsl #10
 104:	06100000 	ldreq	r0, [r0], -r0
 108:	00000022 	andeq	r0, r0, r2, lsr #32
 10c:	01491602 	cmpeq	r9, r2, lsl #12
 110:	06140000 	ldreq	r0, [r4], -r0
 114:	0000020e 	andeq	r0, r0, lr, lsl #4
 118:	01491702 	cmpeq	r9, r2, lsl #14
 11c:	06180000 	ldreq	r0, [r8], -r0
 120:	00000074 	andeq	r0, r0, r4, ror r0
 124:	01491802 	cmpeq	r9, r2, lsl #16
 128:	061c0000 	ldreq	r0, [ip], -r0
 12c:	00000063 	andeq	r0, r0, r3, rrx
 130:	01641902 	cmneq	r4, r2, lsl #18
 134:	00200000 	eoreq	r0, r0, r0
 138:	0001430b 	andeq	r4, r1, fp, lsl #6
 13c:	01430c00 	cmpeq	r3, r0, lsl #24
 140:	0a000000 	beq	148 <startup-0x1ffffeb8>
 144:	0000bf04 	andeq	fp, r0, r4, lsl #30
 148:	38040a00 	stmdacc	r4, {r9, fp}
 14c:	0b000001 	bleq	158 <startup-0x1ffffea8>
 150:	00000164 	andeq	r0, r0, r4, ror #2
 154:	0001430c 	andeq	r4, r1, ip, lsl #6
 158:	00900c00 	addseq	r0, r0, r0, lsl #24
 15c:	900c0000 	andls	r0, ip, r0
 160:	00000000 	andeq	r0, r0, r0
 164:	014f040a 	cmpeq	pc, sl, lsl #8
 168:	61050000 	mrsvs	r0, (UNDEF: 5)
 16c:	02000001 	andeq	r0, r0, #1
 170:	0000bf1a 	andeq	fp, r0, sl, lsl pc
 174:	01600500 	cmneq	r0, r0, lsl #10
 178:	1a020000 	bne	80180 <startup-0x1ff7fe80>
 17c:	00000143 	andeq	r0, r0, r3, asr #2
 180:	0001a80d 	andeq	sl, r1, sp, lsl #16
 184:	6a050300 	bvs	140d8c <startup-0x1febf274>
 188:	0d000001 	stceq	0, cr0, [r0, #-4]
 18c:	00000150 	andeq	r0, r0, r0, asr r1
 190:	016a0404 	cmneq	sl, r4, lsl #8
 194:	100d0000 	andne	r0, sp, r0
 198:	04000000 	streq	r0, [r0], #-0
 19c:	00016a05 	andeq	r6, r1, r5, lsl #20
 1a0:	015b0e00 	cmpeq	fp, r0, lsl #28
 1a4:	25010000 	strcs	r0, [r1, #-0]
 1a8:	20000058 	andcs	r0, r0, r8, asr r0
 1ac:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1b0:	020b9c01 	andeq	r9, fp, #256	; 0x100
 1b4:	700f0000 	andvc	r0, pc, r0
 1b8:	75260100 	strvc	r0, [r6, #-256]!	; 0xffffff00
 1bc:	02000001 	andeq	r0, r0, #1
 1c0:	700f7091 	mulvc	pc, r1, r0	; <UNPREDICTABLE>
 1c4:	2701006c 	strcs	r0, [r1, -ip, rrx]
 1c8:	00000175 	andeq	r0, r0, r5, ror r1
 1cc:	0f6c9102 	svceq	0x006c9102
 1d0:	01007270 	tsteq	r0, r0, ror r2
 1d4:	00017528 	andeq	r7, r1, r8, lsr #10
 1d8:	68910200 	ldmvs	r1, {r9}
 1dc:	00007610 	andeq	r7, r0, r0, lsl r6
 1e0:	0000c420 	andeq	ip, r0, r0, lsr #8
 1e4:	013c1100 	teqeq	ip, r0, lsl #2
 1e8:	32010000 	andcc	r0, r1, #0
 1ec:	0000020b 	andeq	r0, r0, fp, lsl #4
 1f0:	10649102 	rsbne	r9, r4, r2, lsl #2
 1f4:	20000096 	mulcs	r0, r6, r0
 1f8:	00000080 	andeq	r0, r0, r0, lsl #1
 1fc:	0100690f 	tsteq	r0, pc, lsl #18
 200:	00002135 	andeq	r2, r0, r5, lsr r1
 204:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 208:	0a000000 	beq	210 <startup-0x1ffffdf0>
 20c:	00002104 	andeq	r2, r0, r4, lsl #2
 210:	01291200 			; <UNDEFINED> instruction: 0x01291200
 214:	14010000 	strne	r0, [r1], #-0
 218:	20000010 	andcs	r0, r0, r0, lsl r0
 21c:	00000048 	andeq	r0, r0, r8, asr #32
 220:	48129c01 	ldmdami	r2, {r0, sl, fp, ip, pc}
 224:	01000001 	tsteq	r0, r1
 228:	0000000a 	andeq	r0, r0, sl
 22c:	00000c20 	andeq	r0, r0, r0, lsr #24
 230:	009c0100 	addseq	r0, ip, r0, lsl #2
 234:	00000201 	andeq	r0, r0, r1, lsl #4
 238:	00f70004 	rscseq	r0, r7, r4
 23c:	01040000 	mrseq	r0, (UNDEF: 4)
 240:	00000087 	andeq	r0, r0, r7, lsl #1
 244:	0001ad0c 	andeq	sl, r1, ip, lsl #26
 248:	00014800 	andeq	r4, r1, r0, lsl #16
 24c:	0000dc20 	andeq	sp, r0, r0, lsr #24
 250:	0000c800 	andeq	ip, r0, r0, lsl #16
 254:	006d0200 	rsbeq	r0, sp, r0, lsl #4
 258:	02020000 	andeq	r0, r2, #0
 25c:	00004205 	andeq	r4, r0, r5, lsl #4
 260:	00780300 	rsbseq	r0, r8, r0, lsl #6
 264:	00420602 	subeq	r0, r2, r2, lsl #12
 268:	03000000 	movweq	r0, #0
 26c:	07020079 	smlsdxeq	r2, r9, r0, r0
 270:	00000042 	andeq	r0, r0, r2, asr #32
 274:	01040001 	tsteq	r4, r1
 278:	00007908 	andeq	r7, r0, r8, lsl #18
 27c:	01850500 	orreq	r0, r5, r0, lsl #10
 280:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 284:	00000021 	andeq	r0, r0, r1, lsr #32
 288:	00013202 	andeq	r3, r1, r2, lsl #4
 28c:	0b02d400 	bleq	b5294 <startup-0x1ff4ad6c>
 290:	00000090 	muleq	r0, r0, r0
 294:	00017b06 	andeq	r7, r1, r6, lsl #22
 298:	900c0200 	andls	r0, ip, r0, lsl #4
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	00000a06 	andeq	r0, r0, r6, lsl #20
 2a4:	900d0200 	andls	r0, sp, r0, lsl #4
 2a8:	04000000 	streq	r0, [r0], #-0
 2ac:	00001c06 	andeq	r1, r0, r6, lsl #24
 2b0:	900e0200 	andls	r0, lr, r0, lsl #4
 2b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 2b8:	00787003 	rsbseq	r7, r8, r3
 2bc:	00970f02 	addseq	r0, r7, r2, lsl #30
 2c0:	000c0000 	andeq	r0, ip, r0
 2c4:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 2c8:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 2cc:	00000049 	andeq	r0, r0, r9, asr #32
 2d0:	000000a7 	andeq	r0, r0, r7, lsr #1
 2d4:	0000a709 	andeq	sl, r0, r9, lsl #14
 2d8:	04006300 	streq	r6, [r0], #-768	; 0xfffffd00
 2dc:	01680704 	cmneq	r8, r4, lsl #14
 2e0:	20050000 	andcs	r0, r5, r0
 2e4:	02000001 	andeq	r0, r0, #1
 2e8:	00005410 	andeq	r5, r0, r0, lsl r4
 2ec:	011f0500 	tsteq	pc, r0, lsl #10
 2f0:	10020000 	andne	r0, r2, r0
 2f4:	000000c4 	andeq	r0, r0, r4, asr #1
 2f8:	0054040a 	subseq	r0, r4, sl, lsl #8
 2fc:	8b020000 	blhi	80304 <startup-0x1ff7fcfc>
 300:	24000001 	strcs	r0, [r0], #-1
 304:	01431202 	cmpeq	r3, r2, lsl #4
 308:	67030000 	strvs	r0, [r3, -r0]
 30c:	02006f65 	andeq	r6, r0, #404	; 0x194
 310:	0000b913 	andeq	fp, r0, r3, lsl r9
 314:	76060000 	strvc	r0, [r6], -r0
 318:	02000001 	andeq	r0, r0, #1
 31c:	00009014 	andeq	r9, r0, r4, lsl r0
 320:	00060400 	andeq	r0, r6, r0, lsl #8
 324:	02000000 	andeq	r0, r0, #0
 328:	00009014 	andeq	r9, r0, r4, lsl r0
 32c:	71060800 	tstvc	r6, r0, lsl #16
 330:	02000001 	andeq	r0, r0, #1
 334:	00009015 	andeq	r9, r0, r5, lsl r0
 338:	05060c00 	streq	r0, [r6, #-3072]	; 0xfffff400
 33c:	02000000 	andeq	r0, r0, #0
 340:	00009015 	andeq	r9, r0, r5, lsl r0
 344:	22061000 	andcs	r1, r6, #0
 348:	02000000 	andeq	r0, r0, #0
 34c:	00015416 	andeq	r5, r1, r6, lsl r4
 350:	0e061400 	cfcpyseq	mvf1, mvf6
 354:	02000002 	andeq	r0, r0, #2
 358:	00015417 	andeq	r5, r1, r7, lsl r4
 35c:	74061800 	strvc	r1, [r6], #-2048	; 0xfffff800
 360:	02000000 	andeq	r0, r0, #0
 364:	00015418 	andeq	r5, r1, r8, lsl r4
 368:	63061c00 	movwvs	r1, #27648	; 0x6c00
 36c:	02000000 	andeq	r0, r0, #0
 370:	00016f19 	andeq	r6, r1, r9, lsl pc
 374:	0b002000 	bleq	837c <startup-0x1fff7c84>
 378:	0000014e 	andeq	r0, r0, lr, asr #2
 37c:	00014e0c 	andeq	r4, r1, ip, lsl #28
 380:	040a0000 	streq	r0, [sl], #-0
 384:	000000ca 	andeq	r0, r0, sl, asr #1
 388:	0143040a 	cmpeq	r3, sl, lsl #8
 38c:	6f0b0000 	svcvs	0x000b0000
 390:	0c000001 	stceq	0, cr0, [r0], {1}
 394:	0000014e 	andeq	r0, r0, lr, asr #2
 398:	0000900c 	andeq	r9, r0, ip
 39c:	00900c00 	addseq	r0, r0, r0, lsl #24
 3a0:	0a000000 	beq	3a8 <startup-0x1ffffc58>
 3a4:	00015a04 	andeq	r5, r1, r4, lsl #20
 3a8:	01610500 	cmneq	r1, r0, lsl #10
 3ac:	1a020000 	bne	803b4 <startup-0x1ff7fc4c>
 3b0:	000000ca 	andeq	r0, r0, sl, asr #1
 3b4:	00016005 	andeq	r6, r1, r5
 3b8:	4e1a0200 	cdpmi	2, 1, cr0, cr10, cr0, {0}
 3bc:	0d000001 	stceq	0, cr0, [r0, #-4]
 3c0:	000001a8 	andeq	r0, r0, r8, lsr #3
 3c4:	01750503 	cmneq	r5, r3, lsl #10
 3c8:	500d0000 	andpl	r0, sp, r0
 3cc:	04000001 	streq	r0, [r0], #-1
 3d0:	00017504 	andeq	r7, r1, r4, lsl #10
 3d4:	00100d00 	andseq	r0, r0, r0, lsl #26
 3d8:	05040000 	streq	r0, [r4, #-0]
 3dc:	00000175 	andeq	r0, r0, r5, ror r1
 3e0:	0001900e 	andeq	r9, r1, lr
 3e4:	ae040100 	adfges	f0, f4, f0
 3e8:	05000000 	streq	r0, [r0, #-0]
 3ec:	000aa003 	andeq	sl, sl, r3
 3f0:	018b0f20 	orreq	r0, fp, r0, lsr #30
 3f4:	0f010000 	svceq	0x00010000
 3f8:	0b740305 	bleq	1d01014 <startup-0x1e2fefec>
 3fc:	a3102000 	tstge	r0, #0
 400:	01000001 	tsteq	r0, r1
 404:	0001481c 	andeq	r4, r1, ip, lsl r8
 408:	0000dc20 	andeq	sp, r0, r0, lsr #24
 40c:	119c0100 	orrsne	r0, ip, r0, lsl #2
 410:	0000019e 	muleq	r0, lr, r1
 414:	01801c01 	orreq	r1, r0, r1, lsl #24
 418:	91020000 	mrsls	r0, (UNDEF: 2)
 41c:	706c126c 	rsbvc	r1, ip, ip, ror #4
 420:	80280100 	eorhi	r0, r8, r0, lsl #2
 424:	02000001 	andeq	r0, r0, #1
 428:	72127491 	andsvc	r7, r2, #-1862270976	; 0x91000000
 42c:	29010070 	stmdbcs	r1, {r4, r5, r6}
 430:	00000180 	andeq	r0, r0, r0, lsl #3
 434:	00709102 	rsbseq	r9, r0, r2, lsl #2
 438:	00028300 	andeq	r8, r2, r0, lsl #6
 43c:	e9000400 	stmdb	r0, {sl}
 440:	04000001 	streq	r0, [r0], #-1
 444:	00008701 	andeq	r8, r0, r1, lsl #14
 448:	02560c00 	subseq	r0, r6, #0, 24
 44c:	02240000 	eoreq	r0, r4, #0
 450:	05502000 	ldrbeq	r2, [r0, #-0]
 454:	01760000 	cmneq	r6, r0
 458:	97020000 	strls	r0, [r2, -r0]
 45c:	02000002 	andeq	r0, r0, #2
 460:	00002c26 	andeq	r2, r0, r6, lsr #24
 464:	08010300 	stmdaeq	r1, {r8, r9}
 468:	00000079 	andeq	r0, r0, r9, ror r0
 46c:	00021404 	andeq	r1, r2, r4, lsl #8
 470:	e0970100 	adds	r0, r7, r0, lsl #2
 474:	94200005 	strtls	r0, [r0], #-5
 478:	01000001 	tsteq	r0, r1
 47c:	0000a79c 	muleq	r0, ip, r7
 480:	00780500 	rsbseq	r0, r8, r0, lsl #10
 484:	002c9701 	eoreq	r9, ip, r1, lsl #14
 488:	91020000 	mrsls	r0, (UNDEF: 2)
 48c:	00790567 	rsbseq	r0, r9, r7, ror #10
 490:	002c9701 	eoreq	r9, ip, r1, lsl #14
 494:	91020000 	mrsls	r0, (UNDEF: 2)
 498:	65730566 	ldrbvs	r0, [r3, #-1382]!	; 0xfffffa9a
 49c:	97010074 	smlsdxls	r1, r4, r0, r0
 4a0:	0000002c 	andeq	r0, r0, ip, lsr #32
 4a4:	06659102 	strbteq	r9, [r5], -r2, lsl #2
 4a8:	00000292 	muleq	r0, r2, r2
 4ac:	002c9a01 	eoreq	r9, ip, r1, lsl #20
 4b0:	91020000 	mrsls	r0, (UNDEF: 2)
 4b4:	02c9066f 	sbceq	r0, r9, #116391936	; 0x6f00000
 4b8:	9b010000 	blls	404c0 <startup-0x1ffbfb40>
 4bc:	0000002c 	andeq	r0, r0, ip, lsr #32
 4c0:	066d9102 	strbteq	r9, [sp], -r2, lsl #2
 4c4:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
 4c8:	002cac01 	eoreq	sl, ip, r1, lsl #24
 4cc:	91020000 	mrsls	r0, (UNDEF: 2)
 4d0:	02c4066e 	sbceq	r0, r4, #115343360	; 0x6e00000
 4d4:	b6010000 	strlt	r0, [r1], -r0
 4d8:	0000002c 	andeq	r0, r0, ip, lsr #32
 4dc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 4e0:	0002fa04 	andeq	pc, r2, r4, lsl #20
 4e4:	888b0100 	stmhi	fp, {r8}
 4e8:	58200005 	stmdapl	r0!, {r0, r2}
 4ec:	01000000 	mrseq	r0, (UNDEF: 0)
 4f0:	0000ed9c 	muleq	r0, ip, sp
 4f4:	058e0700 	streq	r0, [lr, #1792]	; 0x700
 4f8:	004a2000 	subeq	r2, sl, r0
 4fc:	ef060000 	svc	0x00060000
 500:	01000002 	tsteq	r0, r2
 504:	0000ed8c 	andeq	lr, r0, ip, lsl #27
 508:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 50c:	0005b207 	andeq	fp, r5, r7, lsl #4
 510:	00001a20 	andeq	r1, r0, r0, lsr #20
 514:	64610800 	strbtvs	r0, [r1], #-2048	; 0xfffff800
 518:	8f010064 	svchi	0x00010064
 51c:	000000ed 	andeq	r0, r0, sp, ror #1
 520:	00709102 	rsbseq	r9, r0, r2, lsl #2
 524:	04090000 	streq	r0, [r9], #-0
 528:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 52c:	030f0a00 	movweq	r0, #64000	; 0xfa00
 530:	7c010000 	stcvc	0, cr0, [r1], {-0}
 534:	2000052c 	andcs	r0, r0, ip, lsr #10
 538:	0000005c 	andeq	r0, r0, ip, asr r0
 53c:	300b9c01 	andcc	r9, fp, r1, lsl #24
 540:	01000002 	tsteq	r0, r2
 544:	00002177 	andeq	r2, r0, r7, ror r1
 548:	00050200 	andeq	r0, r5, r0, lsl #4
 54c:	00002a20 	andeq	r2, r0, r0, lsr #20
 550:	2d9c0100 	ldfcss	f0, [ip]
 554:	0c000001 	stceq	0, cr0, [r0], {1}
 558:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
 55c:	00217701 	eoreq	r7, r1, r1, lsl #14
 560:	91020000 	mrsls	r0, (UNDEF: 2)
 564:	dc040077 	stcle	0, cr0, [r4], {119}	; 0x77
 568:	01000002 	tsteq	r0, r2
 56c:	0004bc6f 	andeq	fp, r4, pc, ror #24
 570:	00004620 	andeq	r4, r0, r0, lsr #12
 574:	5f9c0100 	svcpl	0x009c0100
 578:	0c000001 	stceq	0, cr0, [r0], {1}
 57c:	0000023e 	andeq	r0, r0, lr, lsr r2
 580:	00216f01 	eoreq	r6, r1, r1, lsl #30
 584:	91020000 	mrsls	r0, (UNDEF: 2)
 588:	02b90c77 	adcseq	r0, r9, #30464	; 0x7700
 58c:	6f010000 	svcvs	0x00010000
 590:	00000021 	andeq	r0, r0, r1, lsr #32
 594:	00769102 	rsbseq	r9, r6, r2, lsl #2
 598:	0001e604 	andeq	lr, r1, r4, lsl #12
 59c:	7c680100 	stfvce	f0, [r8], #-0
 5a0:	40200004 	eormi	r0, r0, r4
 5a4:	01000000 	mrseq	r0, (UNDEF: 0)
 5a8:	0001919c 	muleq	r1, ip, r1
 5ac:	01f40c00 	mvnseq	r0, r0, lsl #24
 5b0:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
 5b4:	00000021 	andeq	r0, r0, r1, lsr #32
 5b8:	0c779102 	ldfeqp	f1, [r7], #-8
 5bc:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
 5c0:	00216801 	eoreq	r6, r1, r1, lsl #16
 5c4:	91020000 	mrsls	r0, (UNDEF: 2)
 5c8:	a4040076 	strge	r0, [r4], #-118	; 0xffffff8a
 5cc:	01000002 	tsteq	r0, r2
 5d0:	0003fc51 	andeq	pc, r3, r1, asr ip	; <UNPREDICTABLE>
 5d4:	00008020 	andeq	r8, r0, r0, lsr #32
 5d8:	c39c0100 	orrsgt	r0, ip, #0, 2
 5dc:	0c000001 	stceq	0, cr0, [r0], {1}
 5e0:	000002f4 	strdeq	r0, [r0], -r4
 5e4:	00215101 	eoreq	r5, r1, r1, lsl #2
 5e8:	91020000 	mrsls	r0, (UNDEF: 2)
 5ec:	02b90c77 	adcseq	r0, r9, #30464	; 0x7700
 5f0:	51010000 	mrspl	r0, (UNDEF: 1)
 5f4:	00000021 	andeq	r0, r0, r1, lsr #32
 5f8:	00769102 	rsbseq	r9, r6, r2, lsl #2
 5fc:	0002cf0b 	andeq	ip, r2, fp, lsl #30
 600:	21360100 	teqcs	r6, r0, lsl #2
 604:	6c000000 	stcvs	0, cr0, [r0], {-0}
 608:	90200003 	eorls	r0, r0, r3
 60c:	01000000 	mrseq	r0, (UNDEF: 0)
 610:	0001f89c 	muleq	r1, ip, r8
 614:	02b90c00 	adcseq	r0, r9, #0, 24
 618:	36010000 	strcc	r0, [r1], -r0
 61c:	00000021 	andeq	r0, r0, r1, lsr #32
 620:	086f9102 	stmdaeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 624:	01005652 	tsteq	r0, r2, asr r6
 628:	0000213f 	andeq	r2, r0, pc, lsr r1
 62c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 630:	02430400 	subeq	r0, r3, #0, 8
 634:	1f010000 	svcne	0x00010000
 638:	200002fa 	strdcs	r0, [r0], -sl
 63c:	00000072 	andeq	r0, r0, r2, ror r0
 640:	02229c01 	eoreq	r9, r2, #256	; 0x100
 644:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
 648:	06000000 	streq	r0, [r0], -r0
 64c:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
 650:	002c2901 	eoreq	r2, ip, r1, lsl #18
 654:	91020000 	mrsls	r0, (UNDEF: 2)
 658:	04000077 	streq	r0, [r0], #-119	; 0xffffff89
 65c:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
 660:	02900f01 	addseq	r0, r0, #1, 30
 664:	006a2000 	rsbeq	r2, sl, r0
 668:	9c010000 	stcls	0, cr0, [r1], {-0}
 66c:	00000246 	andeq	r0, r0, r6, asr #4
 670:	0002b90c 	andeq	fp, r2, ip, lsl #18
 674:	210f0100 	mrscs	r0, (UNDEF: 31)
 678:	02000000 	andeq	r0, r0, #0
 67c:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
 680:	000001fc 	strdeq	r0, [r0], -ip
 684:	025c0b01 	subseq	r0, ip, #1024	; 0x400
 688:	00342000 	eorseq	r2, r4, r0
 68c:	9c010000 	stcls	0, cr0, [r1], {-0}
 690:	00000268 	andeq	r0, r0, r8, ror #4
 694:	01007805 	tsteq	r0, r5, lsl #16
 698:	0000210b 	andeq	r2, r0, fp, lsl #2
 69c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6a0:	021a0f00 	andseq	r0, sl, #0, 30
 6a4:	07010000 	streq	r0, [r1, -r0]
 6a8:	20000224 	andcs	r0, r0, r4, lsr #4
 6ac:	00000038 	andeq	r0, r0, r8, lsr r0
 6b0:	78059c01 	stmdavc	r5, {r0, sl, fp, ip, pc}
 6b4:	21070100 	mrscs	r0, (UNDEF: 23)
 6b8:	02000000 	andeq	r0, r0, #0
 6bc:	00007791 	muleq	r0, r1, r7
 6c0:	0000021e 	andeq	r0, r0, lr, lsl r2
 6c4:	02ea0004 	rsceq	r0, sl, #4
 6c8:	01040000 	mrseq	r0, (UNDEF: 4)
 6cc:	00000087 	andeq	r0, r0, r7, lsl #1
 6d0:	0003330c 	andeq	r3, r3, ip, lsl #6
 6d4:	00077400 	andeq	r7, r7, r0, lsl #8
 6d8:	0000dc20 	andeq	sp, r0, r0, lsr #24
 6dc:	0002a800 	andeq	sl, r2, r0, lsl #16
 6e0:	006d0200 	rsbeq	r0, sp, r0, lsl #4
 6e4:	02020000 	andeq	r0, r2, #0
 6e8:	00004205 	andeq	r4, r0, r5, lsl #4
 6ec:	00780300 	rsbseq	r0, r8, r0, lsl #6
 6f0:	00420602 	subeq	r0, r2, r2, lsl #12
 6f4:	03000000 	movweq	r0, #0
 6f8:	07020079 	smlsdxeq	r2, r9, r0, r0
 6fc:	00000042 	andeq	r0, r0, r2, asr #32
 700:	01040001 	tsteq	r4, r1
 704:	00007908 	andeq	r7, r0, r8, lsl #18
 708:	01850500 	orreq	r0, r5, r0, lsl #10
 70c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 710:	00000021 	andeq	r0, r0, r1, lsr #32
 714:	00013202 	andeq	r3, r1, r2, lsl #4
 718:	0b02d400 	bleq	b5720 <startup-0x1ff4a8e0>
 71c:	00000090 	muleq	r0, r0, r0
 720:	00017b06 	andeq	r7, r1, r6, lsl #22
 724:	900c0200 	andls	r0, ip, r0, lsl #4
 728:	00000000 	andeq	r0, r0, r0
 72c:	00000a06 	andeq	r0, r0, r6, lsl #20
 730:	900d0200 	andls	r0, sp, r0, lsl #4
 734:	04000000 	streq	r0, [r0], #-0
 738:	00001c06 	andeq	r1, r0, r6, lsl #24
 73c:	900e0200 	andls	r0, lr, r0, lsl #4
 740:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 744:	00787003 	rsbseq	r7, r8, r3
 748:	00970f02 	addseq	r0, r7, r2, lsl #30
 74c:	000c0000 	andeq	r0, ip, r0
 750:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 754:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 758:	00000049 	andeq	r0, r0, r9, asr #32
 75c:	000000a7 	andeq	r0, r0, r7, lsr #1
 760:	0000a709 	andeq	sl, r0, r9, lsl #14
 764:	04006300 	streq	r6, [r0], #-768	; 0xfffffd00
 768:	01680704 	cmneq	r8, r4, lsl #14
 76c:	1f050000 	svcne	0x00050000
 770:	02000001 	andeq	r0, r0, #1
 774:	0000b910 	andeq	fp, r0, r0, lsl r9
 778:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
 77c:	02000000 	andeq	r0, r0, #0
 780:	0000018b 	andeq	r0, r0, fp, lsl #3
 784:	38120224 	ldmdacc	r2, {r2, r5, r9}
 788:	03000001 	movweq	r0, #1
 78c:	006f6567 	rsbeq	r6, pc, r7, ror #10
 790:	00ae1302 	adceq	r1, lr, r2, lsl #6
 794:	06000000 	streq	r0, [r0], -r0
 798:	00000176 	andeq	r0, r0, r6, ror r1
 79c:	00901402 	addseq	r1, r0, r2, lsl #8
 7a0:	06040000 	streq	r0, [r4], -r0
 7a4:	00000000 	andeq	r0, r0, r0
 7a8:	00901402 	addseq	r1, r0, r2, lsl #8
 7ac:	06080000 	streq	r0, [r8], -r0
 7b0:	00000171 	andeq	r0, r0, r1, ror r1
 7b4:	00901502 	addseq	r1, r0, r2, lsl #10
 7b8:	060c0000 	streq	r0, [ip], -r0
 7bc:	00000005 	andeq	r0, r0, r5
 7c0:	00901502 	addseq	r1, r0, r2, lsl #10
 7c4:	06100000 	ldreq	r0, [r0], -r0
 7c8:	00000022 	andeq	r0, r0, r2, lsr #32
 7cc:	01491602 	cmpeq	r9, r2, lsl #12
 7d0:	06140000 	ldreq	r0, [r4], -r0
 7d4:	0000020e 	andeq	r0, r0, lr, lsl #4
 7d8:	01491702 	cmpeq	r9, r2, lsl #14
 7dc:	06180000 	ldreq	r0, [r8], -r0
 7e0:	00000074 	andeq	r0, r0, r4, ror r0
 7e4:	01491802 	cmpeq	r9, r2, lsl #16
 7e8:	061c0000 	ldreq	r0, [ip], -r0
 7ec:	00000063 	andeq	r0, r0, r3, rrx
 7f0:	01641902 	cmneq	r4, r2, lsl #18
 7f4:	00200000 	eoreq	r0, r0, r0
 7f8:	0001430b 	andeq	r4, r1, fp, lsl #6
 7fc:	01430c00 	cmpeq	r3, r0, lsl #24
 800:	0a000000 	beq	808 <startup-0x1ffff7f8>
 804:	0000bf04 	andeq	fp, r0, r4, lsl #30
 808:	38040a00 	stmdacc	r4, {r9, fp}
 80c:	0b000001 	bleq	818 <startup-0x1ffff7e8>
 810:	00000164 	andeq	r0, r0, r4, ror #2
 814:	0001430c 	andeq	r4, r1, ip, lsl #6
 818:	00900c00 	addseq	r0, r0, r0, lsl #24
 81c:	900c0000 	andls	r0, ip, r0
 820:	00000000 	andeq	r0, r0, r0
 824:	014f040a 	cmpeq	pc, sl, lsl #8
 828:	60050000 	andvs	r0, r5, r0
 82c:	02000001 	andeq	r0, r0, #1
 830:	0001431a 	andeq	r4, r1, sl, lsl r3
 834:	03220d00 			; <UNDEFINED> instruction: 0x03220d00
 838:	0f010000 	svceq	0x00010000
 83c:	20000830 	andcs	r0, r0, r0, lsr r8
 840:	00000020 	andeq	r0, r0, r0, lsr #32
 844:	01b19c01 			; <UNDEFINED> instruction: 0x01b19c01
 848:	9e0e0000 	cdpls	0, 0, cr0, cr14, cr0, {0}
 84c:	01000001 	tsteq	r0, r1
 850:	00016a0f 	andeq	r6, r1, pc, lsl #20
 854:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 858:	0100780f 	tsteq	r0, pc, lsl #16
 85c:	0000900f 	andeq	r9, r0, pc
 860:	70910200 	addsvc	r0, r1, r0, lsl #4
 864:	0100790f 	tsteq	r0, pc, lsl #18
 868:	0000900f 	andeq	r9, r0, pc
 86c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 870:	036e1000 	cmneq	lr, #0
 874:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 878:	200007d2 	ldrdcs	r0, [r0], -r2
 87c:	0000005e 	andeq	r0, r0, lr, asr r0
 880:	01eb9c01 	mvneq	r9, r1, lsl #24
 884:	9e0e0000 	cdpls	0, 0, cr0, cr14, cr0, {0}
 888:	01000001 	tsteq	r0, r1
 88c:	00016a09 	andeq	r6, r1, r9, lsl #20
 890:	6c910200 	lfmvs	f0, 4, [r1], {0}
 894:	0007da11 	andeq	sp, r7, r1, lsl sl
 898:	00004e20 	andeq	r4, r0, r0, lsr #28
 89c:	00691200 	rsbeq	r1, r9, r0, lsl #4
 8a0:	00900a01 	addseq	r0, r0, r1, lsl #20
 8a4:	91020000 	mrsls	r0, (UNDEF: 2)
 8a8:	13000074 	movwne	r0, #116	; 0x74
 8ac:	0000037b 	andeq	r0, r0, fp, ror r3
 8b0:	07740401 	ldrbeq	r0, [r4, -r1, lsl #8]!
 8b4:	005e2000 	subseq	r2, lr, r0
 8b8:	9c010000 	stcls	0, cr0, [r1], {-0}
 8bc:	00019e0e 	andeq	r9, r1, lr, lsl #28
 8c0:	6a040100 	bvs	100cc8 <startup-0x1feff338>
 8c4:	02000001 	andeq	r0, r0, #1
 8c8:	7c116c91 	ldcvc	12, cr6, [r1], {145}	; 0x91
 8cc:	4e200007 	cdpmi	0, 2, cr0, cr0, cr7, {0}
 8d0:	12000000 	andne	r0, r0, #0
 8d4:	05010069 	streq	r0, [r1, #-105]	; 0xffffff97
 8d8:	00000090 	muleq	r0, r0, r0
 8dc:	00749102 	rsbseq	r9, r4, r2, lsl #2
 8e0:	008d0000 	addeq	r0, sp, r0
 8e4:	00040000 	andeq	r0, r4, r0
 8e8:	000003f9 	strdeq	r0, [r0], -r9
 8ec:	00870104 	addeq	r0, r7, r4, lsl #2
 8f0:	c40c0000 	strgt	r0, [ip], #-0
 8f4:	50000003 	andpl	r0, r0, r3
 8f8:	a0200008 	eorge	r0, r0, r8
 8fc:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
 900:	02000003 	andeq	r0, r0, #3
 904:	000003a0 	andeq	r0, r0, r0, lsr #7
 908:	08de1f01 	ldmeq	lr, {r0, r8, r9, sl, fp, ip}^
 90c:	00122000 	andseq	r2, r2, r0
 910:	9c010000 	stcls	0, cr0, [r1], {-0}
 914:	00038703 	andeq	r8, r3, r3, lsl #14
 918:	c0170100 	andsgt	r0, r7, r0, lsl #2
 91c:	1e200008 	cdpne	0, 2, cr0, cr0, cr8, {0}
 920:	01000000 	mrseq	r0, (UNDEF: 0)
 924:	0000559c 	muleq	r0, ip, r5
 928:	736d0400 	cmnvc	sp, #0, 8
 92c:	55170100 	ldrpl	r0, [r7, #-256]	; 0xffffff00
 930:	02000000 	andeq	r0, r0, #0
 934:	05007491 	streq	r7, [r0, #-1169]	; 0xfffffb6f
 938:	03930704 	orrseq	r0, r3, #4, 14	; 0x100000
 93c:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
 940:	01000003 	tsteq	r0, r3
 944:	0008940e 	andeq	r9, r8, lr, lsl #8
 948:	00002c20 	andeq	r2, r0, r0, lsr #24
 94c:	7f9c0100 	svcvc	0x009c0100
 950:	04000000 	streq	r0, [r0], #-0
 954:	01007375 	tsteq	r0, r5, ror r3
 958:	0000550e 	andeq	r5, r0, lr, lsl #10
 95c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 960:	03ac0600 			; <UNDEFINED> instruction: 0x03ac0600
 964:	03010000 	movweq	r0, #4096	; 0x1000
 968:	20000850 	andcs	r0, r0, r0, asr r8
 96c:	00000044 	andeq	r0, r0, r4, asr #32
 970:	e9009c01 	stmdb	r0, {r0, sl, fp, ip, pc}
 974:	04000001 	streq	r0, [r0], #-1
 978:	00046f00 	andeq	r6, r4, r0, lsl #30
 97c:	87010400 	strhi	r0, [r1, -r0, lsl #8]
 980:	0c000000 	stceq	0, cr0, [r0], {-0}
 984:	0000041a 	andeq	r0, r0, sl, lsl r4
 988:	200008f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 98c:	0000005e 	andeq	r0, r0, lr, asr r0
 990:	000003cd 	andeq	r0, r0, sp, asr #7
 994:	00006d02 	andeq	r6, r0, r2, lsl #26
 998:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
 99c:	00000042 	andeq	r0, r0, r2, asr #32
 9a0:	02007803 	andeq	r7, r0, #196608	; 0x30000
 9a4:	00004206 	andeq	r4, r0, r6, lsl #4
 9a8:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
 9ac:	42070200 	andmi	r0, r7, #0, 4
 9b0:	01000000 	mrseq	r0, (UNDEF: 0)
 9b4:	08010400 	stmdaeq	r1, {sl}
 9b8:	00000079 	andeq	r0, r0, r9, ror r0
 9bc:	00018505 	andeq	r8, r1, r5, lsl #10
 9c0:	21080200 	mrscs	r0, R8_fiq
 9c4:	02000000 	andeq	r0, r0, #0
 9c8:	00000132 	andeq	r0, r0, r2, lsr r1
 9cc:	900b02d4 	ldrdls	r0, [fp], -r4
 9d0:	06000000 	streq	r0, [r0], -r0
 9d4:	0000017b 	andeq	r0, r0, fp, ror r1
 9d8:	00900c02 	addseq	r0, r0, r2, lsl #24
 9dc:	06000000 	streq	r0, [r0], -r0
 9e0:	0000000a 	andeq	r0, r0, sl
 9e4:	00900d02 	addseq	r0, r0, r2, lsl #26
 9e8:	06040000 	streq	r0, [r4], -r0
 9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f0:	00900e02 	addseq	r0, r0, r2, lsl #28
 9f4:	03080000 	movweq	r0, #32768	; 0x8000
 9f8:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 9fc:	0000970f 	andeq	r9, r0, pc, lsl #14
 a00:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 a04:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 a08:	49080074 	stmdbmi	r8, {r2, r4, r5, r6}
 a0c:	a7000000 	strge	r0, [r0, -r0]
 a10:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 a14:	000000a7 	andeq	r0, r0, r7, lsr #1
 a18:	04040063 	streq	r0, [r4], #-99	; 0xffffff9d
 a1c:	00016807 	andeq	r6, r1, r7, lsl #16
 a20:	01200500 			; <UNDEFINED> instruction: 0x01200500
 a24:	10020000 	andne	r0, r2, r0
 a28:	00000054 	andeq	r0, r0, r4, asr r0
 a2c:	00011f05 	andeq	r1, r1, r5, lsl #30
 a30:	c4100200 	ldrgt	r0, [r0], #-512	; 0xfffffe00
 a34:	0a000000 	beq	a3c <startup-0x1ffff5c4>
 a38:	00005404 	andeq	r5, r0, r4, lsl #8
 a3c:	018b0200 	orreq	r0, fp, r0, lsl #4
 a40:	02240000 	eoreq	r0, r4, #0
 a44:	00014312 	andeq	r4, r1, r2, lsl r3
 a48:	65670300 	strbvs	r0, [r7, #-768]!	; 0xfffffd00
 a4c:	1302006f 	movwne	r0, #8303	; 0x206f
 a50:	000000b9 	strheq	r0, [r0], -r9
 a54:	01760600 	cmneq	r6, r0, lsl #12
 a58:	14020000 	strne	r0, [r2], #-0
 a5c:	00000090 	muleq	r0, r0, r0
 a60:	00000604 	andeq	r0, r0, r4, lsl #12
 a64:	14020000 	strne	r0, [r2], #-0
 a68:	00000090 	muleq	r0, r0, r0
 a6c:	01710608 	cmneq	r1, r8, lsl #12
 a70:	15020000 	strne	r0, [r2, #-0]
 a74:	00000090 	muleq	r0, r0, r0
 a78:	0005060c 	andeq	r0, r5, ip, lsl #12
 a7c:	15020000 	strne	r0, [r2, #-0]
 a80:	00000090 	muleq	r0, r0, r0
 a84:	00220610 	eoreq	r0, r2, r0, lsl r6
 a88:	16020000 	strne	r0, [r2], -r0
 a8c:	00000154 	andeq	r0, r0, r4, asr r1
 a90:	020e0614 	andeq	r0, lr, #20, 12	; 0x1400000
 a94:	17020000 	strne	r0, [r2, -r0]
 a98:	00000154 	andeq	r0, r0, r4, asr r1
 a9c:	00740618 	rsbseq	r0, r4, r8, lsl r6
 aa0:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
 aa4:	00000154 	andeq	r0, r0, r4, asr r1
 aa8:	0063061c 	rsbeq	r0, r3, ip, lsl r6
 aac:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
 ab0:	0000016f 	andeq	r0, r0, pc, ror #2
 ab4:	4e0b0020 	cdpmi	0, 0, cr0, cr11, cr0, {1}
 ab8:	0c000001 	stceq	0, cr0, [r0], {1}
 abc:	0000014e 	andeq	r0, r0, lr, asr #2
 ac0:	ca040a00 	bgt	1032c8 <startup-0x1fefcd38>
 ac4:	0a000000 	beq	acc <startup-0x1ffff534>
 ac8:	00014304 	andeq	r4, r1, r4, lsl #6
 acc:	016f0b00 	cmneq	pc, r0, lsl #22
 ad0:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
 ad4:	0c000001 	stceq	0, cr0, [r0], {1}
 ad8:	00000090 	muleq	r0, r0, r0
 adc:	0000900c 	andeq	r9, r0, ip
 ae0:	040a0000 	streq	r0, [sl], #-0
 ae4:	0000015a 	andeq	r0, r0, sl, asr r1
 ae8:	00016105 	andeq	r6, r1, r5, lsl #2
 aec:	ca1a0200 	bgt	6812f4 <startup-0x1f97ed0c>
 af0:	05000000 	streq	r0, [r0, #-0]
 af4:	00000160 	andeq	r0, r0, r0, ror #2
 af8:	014e1a02 	cmpeq	lr, r2, lsl #20
 afc:	500d0000 	andpl	r0, sp, r0
 b00:	03000001 	movweq	r0, #1
 b04:	00017504 	andeq	r7, r1, r4, lsl #10
 b08:	00100d00 	andseq	r0, r0, r0, lsl #26
 b0c:	05030000 	streq	r0, [r3, #-0]
 b10:	00000175 	andeq	r0, r0, r5, ror r1
 b14:	00040a0e 	andeq	r0, r4, lr, lsl #20
 b18:	ae030100 	adfges	f0, f3, f0
 b1c:	05000000 	streq	r0, [r0, #-0]
 b20:	000b9803 	andeq	r9, fp, r3, lsl #16
 b24:	018b0f20 	orreq	r0, fp, r0, lsr #30
 b28:	23010000 	movwcs	r0, #4096	; 0x1000
 b2c:	0c6c0305 	stcleq	3, cr0, [ip], #-20	; 0xffffffec
 b30:	960f2000 	strls	r2, [pc], -r0
 b34:	01000001 	tsteq	r0, r1
 b38:	9003052d 	andls	r0, r3, sp, lsr #10
 b3c:	1020000c 	eorne	r0, r0, ip
 b40:	000003fe 	strdeq	r0, [r0], -lr
 b44:	08f03701 	ldmeq	r0!, {r0, r8, r9, sl, ip, sp}^
 b48:	005e2000 	subseq	r2, lr, r0
 b4c:	9c010000 	stcls	0, cr0, [r1], {-0}
 b50:	00019e11 	andeq	r9, r1, r1, lsl lr
 b54:	80370100 	eorshi	r0, r7, r0, lsl #2
 b58:	02000001 	andeq	r0, r0, #1
 b5c:	00007491 	muleq	r0, r1, r4
 b60:	0000012d 	andeq	r0, r0, sp, lsr #2
 b64:	05520004 	ldrbeq	r0, [r2, #-4]
 b68:	01040000 	mrseq	r0, (UNDEF: 4)
 b6c:	00000087 	andeq	r0, r0, r7, lsl #1
 b70:	0004700c 	andeq	r7, r4, ip
 b74:	00095000 	andeq	r5, r9, r0
 b78:	00015020 	andeq	r5, r1, r0, lsr #32
 b7c:	00045700 	andeq	r5, r4, r0, lsl #14
 b80:	04550200 	ldrbeq	r0, [r5], #-512	; 0xfffffe00
 b84:	16010000 	strne	r0, [r1], -r0
 b88:	0000009b 	muleq	r0, fp, r0
 b8c:	200009f8 	strdcs	r0, [r0], -r8
 b90:	000000a8 	andeq	r0, r0, r8, lsr #1
 b94:	009b9c01 	addseq	r9, fp, r1, lsl #24
 b98:	b2030000 	andlt	r0, r3, #0
 b9c:	01000004 	tsteq	r0, r4
 ba0:	0000a817 	andeq	sl, r0, r7, lsl r8
 ba4:	5c910200 	lfmpl	f0, 4, [r1], {0}
 ba8:	00045a03 	andeq	r5, r4, r3, lsl #20
 bac:	bf180100 	svclt	0x00180100
 bb0:	05000000 	streq	r0, [r0, #-0]
 bb4:	000cb403 	andeq	fp, ip, r3, lsl #8
 bb8:	0a0a0420 	beq	281c40 <startup-0x1fd7e3c0>
 bbc:	007c2000 	rsbseq	r2, ip, r0
 bc0:	72050000 	andvc	r0, r5, #0
 bc4:	0100776f 	tsteq	r0, pc, ror #14
 bc8:	0000cf19 	andeq	ip, r0, r9, lsl pc
 bcc:	6f910200 	svcvs	0x00910200
 bd0:	000a1404 	andeq	r1, sl, r4, lsl #8
 bd4:	00005a20 	andeq	r5, r0, r0, lsr #20
 bd8:	03ac0600 			; <UNDEFINED> instruction: 0x03ac0600
 bdc:	1b010000 	blne	40be4 <startup-0x1ffbf41c>
 be0:	000000d6 	ldrdeq	r0, [r0], -r6
 be4:	0000008a 	andeq	r0, r0, sl, lsl #1
 be8:	ab030007 	blge	c0c0c <startup-0x1ff3f3f4>
 bec:	01000004 	tsteq	r0, r4
 bf0:	0000cf1c 	andeq	ip, r0, ip, lsl pc
 bf4:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 bf8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 bfc:	0000a104 	andeq	sl, r0, r4, lsl #2
 c00:	08010900 	stmdaeq	r1, {r8, fp}
 c04:	00000079 	andeq	r0, r0, r9, ror r0
 c08:	0000a10a 	andeq	sl, r0, sl, lsl #2
 c0c:	0000b800 	andeq	fp, r0, r0, lsl #16
 c10:	00b80b00 	adcseq	r0, r8, r0, lsl #22
 c14:	000f0000 	andeq	r0, pc, r0
 c18:	68070409 	stmdavs	r7, {r0, r3, sl}
 c1c:	0a000001 	beq	c28 <startup-0x1ffff3d8>
 c20:	000000a1 	andeq	r0, r0, r1, lsr #1
 c24:	000000cf 	andeq	r0, r0, pc, asr #1
 c28:	0000b80b 	andeq	fp, r0, fp, lsl #16
 c2c:	09000300 	stmdbeq	r0, {r8, r9}
 c30:	00820801 	addeq	r0, r2, r1, lsl #16
 c34:	040c0000 	streq	r0, [ip], #-0
 c38:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 c3c:	04650d00 	strbteq	r0, [r5], #-3328	; 0xfffff300
 c40:	0d010000 	stceq	0, cr0, [r1, #-0]
 c44:	000000a1 	andeq	r0, r0, r1, lsr #1
 c48:	200009a4 	andcs	r0, r0, r4, lsr #19
 c4c:	00000054 	andeq	r0, r0, r4, asr r0
 c50:	01059c01 	tsteq	r5, r1, lsl #24
 c54:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
 c58:	01007264 	tsteq	r0, r4, ror #4
 c5c:	0000a10e 	andeq	sl, r0, lr, lsl #2
 c60:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 c64:	04b70e00 	ldrteq	r0, [r7], #3584	; 0xe00
 c68:	03010000 	movweq	r0, #4096	; 0x1000
 c6c:	20000950 	andcs	r0, r0, r0, asr r9
 c70:	00000054 	andeq	r0, r0, r4, asr r0
 c74:	01299c01 			; <UNDEFINED> instruction: 0x01299c01
 c78:	720f0000 	andvc	r0, pc, #0
 c7c:	0100776f 	tsteq	r0, pc, ror #14
 c80:	00012903 	andeq	r2, r1, r3, lsl #18
 c84:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 c88:	07040900 	streq	r0, [r4, -r0, lsl #18]
 c8c:	00000393 	muleq	r0, r3, r3
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03011303 	movweq	r1, #4867	; 0x1303
  20:	3a0b0b0e 	bcc	2c2c60 <startup-0x1fd3d3a0>
  24:	010b3b0b 	tsteq	fp, fp, lsl #22
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	0b381349 	bleq	e04d60 <startup-0x1f1fb2a0>
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	3f13490b 	svccc	0x0013490b
  98:	00193c19 	andseq	r3, r9, r9, lsl ip
  9c:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	01111927 	tsteq	r1, r7, lsr #18
  ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b4:	0f000013 	svceq	0x00000013
  b8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c4:	0b100000 	bleq	4000cc <startup-0x1fbfff34>
  c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  cc:	11000006 	tstne	r0, r6
  d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  d4:	0b3b0b3a 	bleq	ec2dc4 <startup-0x1f13d23c>
  d8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  dc:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
  e0:	03193f00 	tsteq	r9, #0, 30
  e4:	3b0b3a0e 	blcc	2ce924 <startup-0x1fd316dc>
  e8:	1119270b 	tstne	r9, fp, lsl #14
  ec:	40061201 	andmi	r1, r6, r1, lsl #4
  f0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  f4:	01000000 	mrseq	r0, (UNDEF: 0)
  f8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  fc:	0e030b13 	vmoveq.32	d3[0], r0
 100:	06120111 			; <UNDEFINED> instruction: 0x06120111
 104:	00001710 	andeq	r1, r0, r0, lsl r7
 108:	03011302 	movweq	r1, #4866	; 0x1302
 10c:	3a0b0b0e 	bcc	2c2d4c <startup-0x1fd3d2b4>
 110:	010b3b0b 	tsteq	fp, fp, lsl #22
 114:	03000013 	movweq	r0, #19
 118:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	0b381349 	bleq	e04e4c <startup-0x1f1fb1b4>
 124:	24040000 	strcs	r0, [r4], #-0
 128:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 12c:	000e030b 	andeq	r0, lr, fp, lsl #6
 130:	00160500 	andseq	r0, r6, r0, lsl #10
 134:	0b3a0e03 	bleq	e83948 <startup-0x1f17c6b8>
 138:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 13c:	0d060000 	stceq	0, cr0, [r6, #-0]
 140:	3a0e0300 	bcc	380d48 <startup-0x1fc7f2b8>
 144:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 148:	000b3813 	andeq	r3, fp, r3, lsl r8
 14c:	00240700 	eoreq	r0, r4, r0, lsl #14
 150:	0b3e0b0b 	bleq	f82d84 <startup-0x1f07d27c>
 154:	00000803 	andeq	r0, r0, r3, lsl #16
 158:	49010108 	stmdbmi	r1, {r3, r8}
 15c:	00130113 	andseq	r0, r3, r3, lsl r1
 160:	00210900 	eoreq	r0, r1, r0, lsl #18
 164:	0b2f1349 	bleq	bc4e90 <startup-0x1f43b170>
 168:	0f0a0000 	svceq	0x000a0000
 16c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 170:	0b000013 	bleq	1c4 <startup-0x1ffffe3c>
 174:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 178:	00001301 	andeq	r1, r0, r1, lsl #6
 17c:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 180:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 184:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 188:	0b3b0b3a 	bleq	ec2e78 <startup-0x1f13d188>
 18c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 190:	0000193c 	andeq	r1, r0, ip, lsr r9
 194:	0300340e 	movweq	r3, #1038	; 0x40e
 198:	3b0b3a0e 	blcc	2ce9d8 <startup-0x1fd31628>
 19c:	3f13490b 	svccc	0x0013490b
 1a0:	00180219 	andseq	r0, r8, r9, lsl r2
 1a4:	00340f00 	eorseq	r0, r4, r0, lsl #30
 1a8:	0b3a1347 	bleq	e84ecc <startup-0x1f17b134>
 1ac:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 1b0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 1b4:	03193f01 	tsteq	r9, #1, 30
 1b8:	3b0b3a0e 	blcc	2ce9f8 <startup-0x1fd31608>
 1bc:	1119270b 	tstne	r9, fp, lsl #14
 1c0:	40061201 	andmi	r1, r6, r1, lsl #4
 1c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1c8:	05110000 	ldreq	r0, [r1, #-0]
 1cc:	3a0e0300 	bcc	380dd4 <startup-0x1fc7f22c>
 1d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d4:	00180213 	andseq	r0, r8, r3, lsl r2
 1d8:	00341200 	eorseq	r1, r4, r0, lsl #4
 1dc:	0b3a0803 	bleq	e821f0 <startup-0x1f17de10>
 1e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1e4:	00001802 	andeq	r1, r0, r2, lsl #16
 1e8:	01110100 	tsteq	r1, r0, lsl #2
 1ec:	0b130e25 	bleq	4c3a88 <startup-0x1fb3c578>
 1f0:	01110e03 	tsteq	r1, r3, lsl #28
 1f4:	17100612 			; <UNDEFINED> instruction: 0x17100612
 1f8:	16020000 	strne	r0, [r2], -r0
 1fc:	3a0e0300 	bcc	380e04 <startup-0x1fc7f1fc>
 200:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 204:	03000013 	movweq	r0, #19
 208:	0b0b0024 	bleq	2c02a0 <startup-0x1fd3fd60>
 20c:	0e030b3e 	vmoveq.16	d3[0], r0
 210:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 214:	03193f01 	tsteq	r9, #1, 30
 218:	3b0b3a0e 	blcc	2cea58 <startup-0x1fd315a8>
 21c:	1119270b 	tstne	r9, fp, lsl #14
 220:	40061201 	andmi	r1, r6, r1, lsl #4
 224:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 228:	00001301 	andeq	r1, r0, r1, lsl #6
 22c:	03000505 	movweq	r0, #1285	; 0x505
 230:	3b0b3a08 	blcc	2cea58 <startup-0x1fd315a8>
 234:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 238:	06000018 			; <UNDEFINED> instruction: 0x06000018
 23c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 240:	0b3b0b3a 	bleq	ec2f30 <startup-0x1f13d0d0>
 244:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 248:	0b070000 	bleq	1c0250 <startup-0x1fe3fdb0>
 24c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 250:	08000006 	stmdaeq	r0, {r1, r2}
 254:	08030034 	stmdaeq	r3, {r2, r4, r5}
 258:	0b3b0b3a 	bleq	ec2f48 <startup-0x1f13d0b8>
 25c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 260:	24090000 	strcs	r0, [r9], #-0
 264:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 268:	0008030b 	andeq	r0, r8, fp, lsl #6
 26c:	002e0a00 	eoreq	r0, lr, r0, lsl #20
 270:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 274:	0b3b0b3a 	bleq	ec2f64 <startup-0x1f13d09c>
 278:	01111927 	tsteq	r1, r7, lsr #18
 27c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 280:	00194296 	mulseq	r9, r6, r2
 284:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 288:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 28c:	0b3b0b3a 	bleq	ec2f7c <startup-0x1f13d084>
 290:	13491927 	movtne	r1, #39207	; 0x9927
 294:	06120111 			; <UNDEFINED> instruction: 0x06120111
 298:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 29c:	00130119 	andseq	r0, r3, r9, lsl r1
 2a0:	00050c00 	andeq	r0, r5, r0, lsl #24
 2a4:	0b3a0e03 	bleq	e83ab8 <startup-0x1f17c548>
 2a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2ac:	00001802 	andeq	r1, r0, r2, lsl #16
 2b0:	55010b0d 	strpl	r0, [r1, #-2829]	; 0xfffff4f3
 2b4:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
 2b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2bc:	0b3a0e03 	bleq	e83ad0 <startup-0x1f17c530>
 2c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2cc:	00130119 	andseq	r0, r3, r9, lsl r1
 2d0:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 2d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2d8:	0b3b0b3a 	bleq	ec2fc8 <startup-0x1f13d038>
 2dc:	01111927 	tsteq	r1, r7, lsr #18
 2e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2e4:	00194297 	mulseq	r9, r7, r2
 2e8:	11010000 	mrsne	r0, (UNDEF: 1)
 2ec:	130e2501 	movwne	r2, #58625	; 0xe501
 2f0:	110e030b 	tstne	lr, fp, lsl #6
 2f4:	10061201 	andne	r1, r6, r1, lsl #4
 2f8:	02000017 	andeq	r0, r0, #23
 2fc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 300:	0b3a0b0b 	bleq	e82f34 <startup-0x1f17d0cc>
 304:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 308:	0d030000 	stceq	0, cr0, [r3, #-0]
 30c:	3a080300 	bcc	200f14 <startup-0x1fdff0ec>
 310:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 314:	000b3813 	andeq	r3, fp, r3, lsl r8
 318:	00240400 	eoreq	r0, r4, r0, lsl #8
 31c:	0b3e0b0b 	bleq	f82f50 <startup-0x1f07d0b0>
 320:	00000e03 	andeq	r0, r0, r3, lsl #28
 324:	03001605 	movweq	r1, #1541	; 0x605
 328:	3b0b3a0e 	blcc	2ceb68 <startup-0x1fd31498>
 32c:	0013490b 	andseq	r4, r3, fp, lsl #18
 330:	000d0600 	andeq	r0, sp, r0, lsl #12
 334:	0b3a0e03 	bleq	e83b48 <startup-0x1f17c4b8>
 338:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 33c:	00000b38 	andeq	r0, r0, r8, lsr fp
 340:	0b002407 	bleq	9364 <startup-0x1fff6c9c>
 344:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 348:	08000008 	stmdaeq	r0, {r3}
 34c:	13490101 	movtne	r0, #37121	; 0x9101
 350:	00001301 	andeq	r1, r0, r1, lsl #6
 354:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 358:	000b2f13 	andeq	r2, fp, r3, lsl pc
 35c:	000f0a00 	andeq	r0, pc, r0, lsl #20
 360:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 364:	150b0000 	strne	r0, [fp, #-0]
 368:	01192701 	tsteq	r9, r1, lsl #14
 36c:	0c000013 	stceq	0, cr0, [r0], {19}
 370:	13490005 	movtne	r0, #36869	; 0x9005
 374:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 378:	03193f01 	tsteq	r9, #1, 30
 37c:	3b0b3a0e 	blcc	2cebbc <startup-0x1fd31444>
 380:	1119270b 	tstne	r9, fp, lsl #14
 384:	40061201 	andmi	r1, r6, r1, lsl #4
 388:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 38c:	00001301 	andeq	r1, r0, r1, lsl #6
 390:	0300050e 	movweq	r0, #1294	; 0x50e
 394:	3b0b3a0e 	blcc	2cebd4 <startup-0x1fd3142c>
 398:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 39c:	0f000018 	svceq	0x00000018
 3a0:	08030005 	stmdaeq	r3, {r0, r2}
 3a4:	0b3b0b3a 	bleq	ec3094 <startup-0x1f13cf6c>
 3a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3ac:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 3b0:	03193f01 	tsteq	r9, #1, 30
 3b4:	3b0b3a0e 	blcc	2cebf4 <startup-0x1fd3140c>
 3b8:	1119270b 	tstne	r9, fp, lsl #14
 3bc:	40061201 	andmi	r1, r6, r1, lsl #4
 3c0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3c4:	00001301 	andeq	r1, r0, r1, lsl #6
 3c8:	11010b11 	tstne	r1, r1, lsl fp
 3cc:	00061201 	andeq	r1, r6, r1, lsl #4
 3d0:	00341200 	eorseq	r1, r4, r0, lsl #4
 3d4:	0b3a0803 	bleq	e823e8 <startup-0x1f17dc18>
 3d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3dc:	00001802 	andeq	r1, r0, r2, lsl #16
 3e0:	3f012e13 	svccc	0x00012e13
 3e4:	3a0e0319 	bcc	381050 <startup-0x1fc7efb0>
 3e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3f0:	96184006 	ldrls	r4, [r8], -r6
 3f4:	00001942 	andeq	r1, r0, r2, asr #18
 3f8:	01110100 	tsteq	r1, r0, lsl #2
 3fc:	0b130e25 	bleq	4c3c98 <startup-0x1fb3c368>
 400:	01110e03 	tsteq	r1, r3, lsl #28
 404:	17100612 			; <UNDEFINED> instruction: 0x17100612
 408:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
 40c:	03193f00 	tsteq	r9, #0, 30
 410:	3b0b3a0e 	blcc	2cec50 <startup-0x1fd313b0>
 414:	1119270b 	tstne	r9, fp, lsl #14
 418:	40061201 	andmi	r1, r6, r1, lsl #4
 41c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 420:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 424:	03193f01 	tsteq	r9, #1, 30
 428:	3b0b3a0e 	blcc	2cec68 <startup-0x1fd31398>
 42c:	1119270b 	tstne	r9, fp, lsl #14
 430:	40061201 	andmi	r1, r6, r1, lsl #4
 434:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 438:	00001301 	andeq	r1, r0, r1, lsl #6
 43c:	03000504 	movweq	r0, #1284	; 0x504
 440:	3b0b3a08 	blcc	2cec68 <startup-0x1fd31398>
 444:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 448:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
 44c:	0b0b0024 	bleq	2c04e4 <startup-0x1fd3fb1c>
 450:	0e030b3e 	vmoveq.16	d3[0], r0
 454:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 458:	03193f00 	tsteq	r9, #0, 30
 45c:	3b0b3a0e 	blcc	2cec9c <startup-0x1fd31364>
 460:	1119270b 	tstne	r9, fp, lsl #14
 464:	40061201 	andmi	r1, r6, r1, lsl #4
 468:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 46c:	01000000 	mrseq	r0, (UNDEF: 0)
 470:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 474:	0e030b13 	vmoveq.32	d3[0], r0
 478:	06120111 			; <UNDEFINED> instruction: 0x06120111
 47c:	00001710 	andeq	r1, r0, r0, lsl r7
 480:	03011302 	movweq	r1, #4866	; 0x1302
 484:	3a0b0b0e 	bcc	2c30c4 <startup-0x1fd3cf3c>
 488:	010b3b0b 	tsteq	fp, fp, lsl #22
 48c:	03000013 	movweq	r0, #19
 490:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 494:	0b3b0b3a 	bleq	ec3184 <startup-0x1f13ce7c>
 498:	0b381349 	bleq	e051c4 <startup-0x1f1fae3c>
 49c:	24040000 	strcs	r0, [r4], #-0
 4a0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4a4:	000e030b 	andeq	r0, lr, fp, lsl #6
 4a8:	00160500 	andseq	r0, r6, r0, lsl #10
 4ac:	0b3a0e03 	bleq	e83cc0 <startup-0x1f17c340>
 4b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4b4:	0d060000 	stceq	0, cr0, [r6, #-0]
 4b8:	3a0e0300 	bcc	3810c0 <startup-0x1fc7ef40>
 4bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4c0:	000b3813 	andeq	r3, fp, r3, lsl r8
 4c4:	00240700 	eoreq	r0, r4, r0, lsl #14
 4c8:	0b3e0b0b 	bleq	f830fc <startup-0x1f07cf04>
 4cc:	00000803 	andeq	r0, r0, r3, lsl #16
 4d0:	49010108 	stmdbmi	r1, {r3, r8}
 4d4:	00130113 	andseq	r0, r3, r3, lsl r1
 4d8:	00210900 	eoreq	r0, r1, r0, lsl #18
 4dc:	0b2f1349 	bleq	bc5208 <startup-0x1f43adf8>
 4e0:	0f0a0000 	svceq	0x000a0000
 4e4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 4e8:	0b000013 	bleq	53c <startup-0x1ffffac4>
 4ec:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 4f0:	00001301 	andeq	r1, r0, r1, lsl #6
 4f4:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 4f8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 4fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 500:	0b3b0b3a 	bleq	ec31f0 <startup-0x1f13ce10>
 504:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 508:	0000193c 	andeq	r1, r0, ip, lsr r9
 50c:	0300340e 	movweq	r3, #1038	; 0x40e
 510:	3b0b3a0e 	blcc	2ced50 <startup-0x1fd312b0>
 514:	3f13490b 	svccc	0x0013490b
 518:	00180219 	andseq	r0, r8, r9, lsl r2
 51c:	00340f00 	eorseq	r0, r4, r0, lsl #30
 520:	0b3a1347 	bleq	e85244 <startup-0x1f17adbc>
 524:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 528:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 52c:	03193f01 	tsteq	r9, #1, 30
 530:	3b0b3a0e 	blcc	2ced70 <startup-0x1fd31290>
 534:	1119270b 	tstne	r9, fp, lsl #14
 538:	40061201 	andmi	r1, r6, r1, lsl #4
 53c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 540:	05110000 	ldreq	r0, [r1, #-0]
 544:	3a0e0300 	bcc	38114c <startup-0x1fc7eeb4>
 548:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 54c:	00180213 	andseq	r0, r8, r3, lsl r2
 550:	11010000 	mrsne	r0, (UNDEF: 1)
 554:	130e2501 	movwne	r2, #58625	; 0xe501
 558:	110e030b 	tstne	lr, fp, lsl #6
 55c:	10061201 	andne	r1, r6, r1, lsl #4
 560:	02000017 	andeq	r0, r0, #23
 564:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 568:	0b3a0e03 	bleq	e83d7c <startup-0x1f17c284>
 56c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 570:	01111349 	tsteq	r1, r9, asr #6
 574:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 578:	01194296 			; <UNDEFINED> instruction: 0x01194296
 57c:	03000013 	movweq	r0, #19
 580:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 584:	0b3b0b3a 	bleq	ec3274 <startup-0x1f13cd8c>
 588:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 58c:	0b040000 	bleq	100594 <startup-0x1feffa6c>
 590:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 594:	05000006 	streq	r0, [r0, #-6]
 598:	08030034 	stmdaeq	r3, {r2, r4, r5}
 59c:	0b3b0b3a 	bleq	ec328c <startup-0x1f13cd74>
 5a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5a4:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 5a8:	03193f01 	tsteq	r9, #1, 30
 5ac:	3b0b3a0e 	blcc	2cedec <startup-0x1fd31214>
 5b0:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 5b4:	00130119 	andseq	r0, r3, r9, lsl r1
 5b8:	00180700 	andseq	r0, r8, r0, lsl #14
 5bc:	0f080000 	svceq	0x00080000
 5c0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 5c4:	09000013 	stmdbeq	r0, {r0, r1, r4}
 5c8:	0b0b0024 	bleq	2c0660 <startup-0x1fd3f9a0>
 5cc:	0e030b3e 	vmoveq.16	d3[0], r0
 5d0:	010a0000 	mrseq	r0, (UNDEF: 10)
 5d4:	01134901 	tsteq	r3, r1, lsl #18
 5d8:	0b000013 	bleq	62c <startup-0x1ffff9d4>
 5dc:	13490021 	movtne	r0, #36897	; 0x9021
 5e0:	00000b2f 	andeq	r0, r0, pc, lsr #22
 5e4:	0b00240c 	bleq	961c <startup-0x1fff69e4>
 5e8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5ec:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
 5f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5f4:	0b3a0e03 	bleq	e83e08 <startup-0x1f17c1f8>
 5f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5fc:	01111349 	tsteq	r1, r9, asr #6
 600:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 604:	01194297 			; <UNDEFINED> instruction: 0x01194297
 608:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 60c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 610:	0b3a0e03 	bleq	e83e24 <startup-0x1f17c1dc>
 614:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 618:	06120111 			; <UNDEFINED> instruction: 0x06120111
 61c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 620:	00130119 	andseq	r0, r3, r9, lsl r1
 624:	00050f00 	andeq	r0, r5, r0, lsl #30
 628:	0b3a0803 	bleq	e8263c <startup-0x1f17d9c4>
 62c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 630:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000138 	andeq	r0, r0, r8, lsr r1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02340002 	eorseq	r0, r4, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000148 	andcs	r0, r0, r8, asr #2
  3c:	000000dc 	ldrdeq	r0, [r0], -ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	04390002 	ldrteq	r0, [r9], #-2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000224 	andcs	r0, r0, r4, lsr #4
  5c:	00000550 	andeq	r0, r0, r0, asr r5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	06c00002 	strbeq	r0, [r0], r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000774 	andcs	r0, r0, r4, ror r7
  7c:	000000dc 	ldrdeq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	08e20002 	stmiaeq	r2!, {r1}^
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000850 	andcs	r0, r0, r0, asr r8
  9c:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	09730002 	ldmdbeq	r3!, {r1}^
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200008f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  bc:	0000005e 	andeq	r0, r0, lr, asr r0
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	0b600002 	bleq	18000dc <startup-0x1e7fff24>
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000950 	andcs	r0, r0, r0, asr r9
  dc:	00000150 	andeq	r0, r0, r0, asr r1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000148 	andcs	r0, r0, r8, asr #2
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
  18:	000000f8 	strdeq	r0, [r0], -r8
  1c:	0000011e 	andeq	r0, r0, lr, lsl r1
  20:	00000120 	andeq	r0, r0, r0, lsr #2
  24:	00000122 	andeq	r0, r0, r2, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000c4 	andeq	r0, r0, r4, asr #1
   4:	00740002 	rsbseq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  44:	5f6c6165 	svcpl	0x006c6165
  48:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  4c:	74730000 	ldrbtvc	r0, [r3], #-0
  50:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  54:	00632e70 	rsbeq	r2, r3, r0, ror lr
  58:	6f000001 	svcvs	0x00000001
  5c:	63656a62 	cmnvs	r5, #401408	; 0x62000
  60:	00682e74 	rsbeq	r2, r8, r4, ror lr
  64:	62000001 	andvs	r0, r0, #1
  68:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
  6c:	00010068 	andeq	r0, r1, r8, rrx
  70:	64617000 	strbtvs	r7, [r1], #-0
  74:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
  78:	00010068 	andeq	r0, r1, r8, rrx
  7c:	05000000 	streq	r0, [r0, #-0]
  80:	00000002 	andeq	r0, r0, r2
  84:	010a0320 	tsteq	sl, r0, lsr #6
  88:	03025e13 	movweq	r5, #11795	; 0x2e13
  8c:	00010100 	andeq	r0, r1, r0, lsl #2
  90:	00100205 	andseq	r0, r0, r5, lsl #4
  94:	13032000 	movwne	r2, #12288	; 0x3000
  98:	4b3f3001 	blmi	fcc0a4 <startup-0x1f033f5c>
  9c:	d04b5959 	suble	r5, fp, r9, asr r9
  a0:	2f2f2f3d 	svccs	0x002f2f3d
  a4:	4b34302f 	blmi	d0c168 <startup-0x1f2f3e98>
  a8:	08596767 	ldmdaeq	r9, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
  ac:	83758313 	cmnhi	r5, #1275068416	; 0x4c000000
  b0:	02040200 	andeq	r0, r4, #0, 4
  b4:	0402006f 	streq	r0, [r2], #-111	; 0xffffff91
  b8:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
  bc:	59595960 	ldmdbpl	r9, {r5, r6, r8, fp, ip, lr}^
  c0:	023c7003 	eorseq	r7, ip, #3
  c4:	01010007 	tsteq	r1, r7
  c8:	000000aa 	andeq	r0, r0, sl, lsr #1
  cc:	00710002 	rsbseq	r0, r1, r2
  d0:	01020000 	mrseq	r0, (UNDEF: 2)
  d4:	000d0efb 	strdeq	r0, [sp], -fp
  d8:	01010101 	tsteq	r1, r1, lsl #2
  dc:	01000000 	mrseq	r0, (UNDEF: 0)
  e0:	43010000 	movwmi	r0, #4096	; 0x1000
  e4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  e8:	2f737265 	svccs	0x00737265
  ec:	706d6148 	rsbvc	r6, sp, r8, asr #2
  f0:	442f7375 	strtmi	r7, [pc], #-885	; f8 <startup-0x1fffff08>
  f4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  f8:	442f706f 	strtmi	r7, [pc], #-111	; 100 <startup-0x1fffff00>
  fc:	31305441 	teqcc	r0, r1, asr #8
 100:	6f432f37 	svcvs	0x00432f37
 104:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 108:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 10c:	5f6c6165 	svcpl	0x006c6165
 110:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 114:	61620000 	cmnvs	r2, r0
 118:	632e6c6c 			; <UNDEFINED> instruction: 0x632e6c6c
 11c:	00000100 	andeq	r0, r0, r0, lsl #2
 120:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 124:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 128:	00000100 	andeq	r0, r0, r0, lsl #2
 12c:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 130:	0100682e 	tsteq	r0, lr, lsr #16
 134:	61700000 	cmnvs	r0, r0
 138:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 13c:	0100682e 	tsteq	r0, lr, lsr #16
 140:	00000000 	andeq	r0, r0, r0
 144:	01480205 	cmpeq	r8, r5, lsl #4
 148:	1b032000 	blne	c8150 <startup-0x1ff37eb0>
 14c:	754c4b01 	strbvc	r4, [ip, #-2817]	; 0xfffff4ff
 150:	04020077 	streq	r0, [r2], #-119	; 0xffffff89
 154:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 158:	312f5c4b 			; <UNDEFINED> instruction: 0x312f5c4b
 15c:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 160:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 164:	00675f9f 	mlseq	r7, pc, pc, r5	; <UNPREDICTABLE>
 168:	06010402 	streq	r0, [r1], -r2, lsl #8
 16c:	5e9f0666 	cdppl	6, 9, cr0, cr15, cr6, {3}
 170:	00080259 	andeq	r0, r8, r9, asr r2
 174:	012e0101 			; <UNDEFINED> instruction: 0x012e0101
 178:	00020000 	andeq	r0, r2, r0
 17c:	0000005f 	andeq	r0, r0, pc, asr r0
 180:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 184:	0101000d 	tsteq	r1, sp
 188:	00000101 	andeq	r0, r0, r1, lsl #2
 18c:	00000100 	andeq	r0, r0, r0, lsl #2
 190:	2f3a4301 	svccs	0x003a4301
 194:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 198:	61482f73 	hvcvs	33523	; 0x82f3
 19c:	7375706d 	cmnvc	r5, #109	; 0x6d
 1a0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1a4:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1a8:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 1ac:	2f373130 	svccs	0x00373130
 1b0:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 1b4:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 1b8:	6165722f 	cmnvs	r5, pc, lsr #4
 1bc:	6f705f6c 	svcvs	0x00705f6c
 1c0:	0000676e 	andeq	r6, r0, lr, ror #14
 1c4:	70617267 	rsbvc	r7, r1, r7, ror #4
 1c8:	2e636968 	vnmulcs.f16	s13, s6, s17	; <UNPREDICTABLE>
 1cc:	00010063 	andeq	r0, r1, r3, rrx
 1d0:	61726700 	cmnvs	r2, r0, lsl #14
 1d4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1d8:	0100682e 	tsteq	r0, lr, lsr #16
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	02240205 	eoreq	r0, r4, #1342177280	; 0x50000000
 1e4:	67182000 	ldrvs	r2, [r8, -r0]
 1e8:	d76776e5 	strble	r7, [r7, -r5, ror #13]!
 1ec:	3d4b6768 	stclcc	7, cr6, [fp, #-416]	; 0xfffffe60
 1f0:	033c0b03 	teqeq	ip, #3072	; 0xc00
 1f4:	3d4b2076 	stclcc	0, cr2, [fp, #-472]	; 0xfffffe28
 1f8:	20790344 	rsbscs	r0, r9, r4, asr #6
 1fc:	1c413d4b 	mcrrne	13, 4, r3, r1, cr11
 200:	4c3e3d4b 	ldcmi	13, cr3, [lr], #-300	; 0xfffffed4
 204:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 208:	2f3d313d 	svccs	0x003d313d
 20c:	03303d4b 	teqeq	r0, #4800	; 0x12c0
 210:	23285879 			; <UNDEFINED> instruction: 0x23285879
 214:	67ca3e3d 			; <UNDEFINED> instruction: 0x67ca3e3d
 218:	593d3d3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 21c:	59303d2f 	ldmdbpl	r0!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 220:	3d4b3e3d 	stclcc	14, cr3, [fp, #-244]	; 0xffffff0c
 224:	313d4b31 	teqcc	sp, r1, lsr fp
 228:	4b91ca3e 	blmi	fe472b28 <returnKeys.4003+0xde471e74>
 22c:	2f3d2f59 	svccs	0x003d2f59
 230:	313d593e 	teqcc	sp, lr, lsr r9
 234:	3d313d59 	ldccc	13, cr3, [r1, #-356]!	; 0xfffffe9c
 238:	91763d3d 	cmnls	r6, sp, lsr sp
 23c:	833d593d 	teqhi	sp, #999424	; 0xf4000
 240:	593d914c 	ldmdbpl	sp!, {r2, r3, r6, r8, ip, pc}
 244:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
 248:	4c675967 			; <UNDEFINED> instruction: 0x4c675967
 24c:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 250:	4b3d3d3d 	blmi	f4f74c <startup-0x1f0b08b4>
 254:	4b4b4b4b 	blmi	12d2f88 <startup-0x1ed2d078>
 258:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
 25c:	02004bad 	andeq	r4, r0, #177152	; 0x2b400
 260:	003d0304 	eorseq	r0, sp, r4, lsl #6
 264:	49030402 	stmdbmi	r3, {r1, sl}
 268:	01040200 	mrseq	r0, R12_usr
 26c:	02003c06 	andeq	r3, r0, #1536	; 0x600
 270:	39060204 	stmdbcc	r6, {r2, r9}
 274:	01040200 	mrseq	r0, R12_usr
 278:	44063c06 	strmi	r3, [r6], #-3078	; 0xfffff3fa
 27c:	0200e64d 	andeq	lr, r0, #80740352	; 0x4d00000
 280:	66060104 	strvs	r0, [r6], -r4, lsl #2
 284:	ad685a06 	vstmdbge	r8!, {s11-s16}
 288:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 28c:	5b595959 	blpl	16567f8 <startup-0x1e9a9808>
 290:	4b4b784b 	blmi	12de3c4 <startup-0x1ed21c3c>
 294:	d7bb4d68 	ldrle	r4, [fp, r8, ror #26]!
 298:	ae4bbc9f 	mcrge	12, 2, fp, cr11, cr15, {4}
 29c:	ac5a03a1 	mrrcge	3, 10, r0, sl, cr1
 2a0:	02202803 	eoreq	r2, r0, #196608	; 0x30000
 2a4:	01010005 	tsteq	r1, r5
 2a8:	0000009d 	muleq	r0, sp, r0
 2ac:	005d0002 	subseq	r0, sp, r2
 2b0:	01020000 	mrseq	r0, (UNDEF: 2)
 2b4:	000d0efb 	strdeq	r0, [sp], -fp
 2b8:	01010101 	tsteq	r1, r1, lsl #2
 2bc:	01000000 	mrseq	r0, (UNDEF: 0)
 2c0:	43010000 	movwmi	r0, #4096	; 0x1000
 2c4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 2c8:	2f737265 	svccs	0x00737265
 2cc:	706d6148 	rsbvc	r6, sp, r8, asr #2
 2d0:	442f7375 	strtmi	r7, [pc], #-885	; 2d8 <startup-0x1ffffd28>
 2d4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 2d8:	442f706f 	strtmi	r7, [pc], #-111	; 2e0 <startup-0x1ffffd20>
 2dc:	31305441 	teqcc	r0, r1, asr #8
 2e0:	6f432f37 	svcvs	0x00432f37
 2e4:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 2e8:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 2ec:	5f6c6165 	svcpl	0x006c6165
 2f0:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 2f4:	626f0000 	rsbvs	r0, pc, #0
 2f8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2fc:	0100632e 	tsteq	r0, lr, lsr #6
 300:	626f0000 	rsbvs	r0, pc, #0
 304:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 308:	0100682e 	tsteq	r0, lr, lsr #16
 30c:	00000000 	andeq	r0, r0, r0
 310:	07740205 	ldrbeq	r0, [r4, -r5, lsl #4]!
 314:	4b152000 	blmi	54831c <startup-0x1fab7ce4>
 318:	03040200 	movweq	r0, #16896	; 0x4200
 31c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 320:	00c70803 	sbceq	r0, r7, r3, lsl #16
 324:	06010402 	streq	r0, [r1], -r2, lsl #8
 328:	4b3f063c 	blmi	fc1c20 <startup-0x1f03e3e0>
 32c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 330:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 334:	c7080304 	strgt	r0, [r8, -r4, lsl #6]
 338:	01040200 	mrseq	r0, R12_usr
 33c:	3f063c06 	svccc	0x00063c06
 340:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 344:	01000402 	tsteq	r0, r2, lsl #8
 348:	00008001 	andeq	r8, r0, r1
 34c:	50000200 	andpl	r0, r0, r0, lsl #4
 350:	02000000 	andeq	r0, r0, #0
 354:	0d0efb01 	vstreq	d15, [lr, #-4]
 358:	01010100 	mrseq	r0, (UNDEF: 17)
 35c:	00000001 	andeq	r0, r0, r1
 360:	01000001 	tsteq	r0, r1
 364:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff929 <returnKeys.4003+0xdfffec75>
 368:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 36c:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 370:	2f737570 	svccs	0x00737570
 374:	6b736544 	blvs	1cd988c <startup-0x1e326774>
 378:	2f706f74 	svccs	0x00706f74
 37c:	30544144 	subscc	r4, r4, r4, asr #2
 380:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 384:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 388:	2f657469 	svccs	0x00657469
 38c:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 390:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 394:	74000067 	strvc	r0, [r0], #-103	; 0xffffff99
 398:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 39c:	0100632e 	tsteq	r0, lr, lsr #6
 3a0:	00000000 	andeq	r0, r0, r0
 3a4:	08500205 	ldmdaeq	r0, {r0, r2, r9}^
 3a8:	2f142000 	svccs	0x00142000
 3ac:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 3b0:	01040200 	mrseq	r0, R12_usr
 3b4:	69062006 	stmdbvs	r6, {r1, r2, sp}
 3b8:	214ba03d 	cmpcs	fp, sp, lsr r0
 3bc:	2a2f2f2f 	bcs	bcc080 <startup-0x1f433f80>
 3c0:	764e4c5e 			; <UNDEFINED> instruction: 0x764e4c5e
 3c4:	2f2f2f4c 	svccs	0x002f2f4c
 3c8:	01000302 	tsteq	r0, r2, lsl #6
 3cc:	00008601 	andeq	r8, r0, r1, lsl #12
 3d0:	69000200 	stmdbvs	r0, {r9}
 3d4:	02000000 	andeq	r0, r0, #0
 3d8:	0d0efb01 	vstreq	d15, [lr, #-4]
 3dc:	01010100 	mrseq	r0, (UNDEF: 17)
 3e0:	00000001 	andeq	r0, r0, r1
 3e4:	01000001 	tsteq	r0, r1
 3e8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff9ad <returnKeys.4003+0xdfffecf9>
 3ec:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3f0:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 3f4:	2f737570 	svccs	0x00737570
 3f8:	6b736544 	blvs	1cd9910 <startup-0x1e3266f0>
 3fc:	2f706f74 	svccs	0x00706f74
 400:	30544144 	subscc	r4, r4, r4, asr #2
 404:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 408:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 40c:	2f657469 	svccs	0x00657469
 410:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 414:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 418:	70000067 	andvc	r0, r0, r7, rrx
 41c:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 420:	00632e65 	rsbeq	r2, r3, r5, ror #28
 424:	6f000001 	svcvs	0x00000001
 428:	63656a62 	cmnvs	r5, #401408	; 0x62000
 42c:	00682e74 	rsbeq	r2, r8, r4, ror lr
 430:	70000001 	andvc	r0, r0, r1
 434:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 438:	00682e65 	rsbeq	r2, r8, r5, ror #28
 43c:	00000001 	andeq	r0, r0, r1
 440:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
 444:	03200008 			; <UNDEFINED> instruction: 0x03200008
 448:	4d4b0136 	stfmie	f0, [fp, #-216]	; 0xffffff28
 44c:	834b4b77 	movthi	r4, #47991	; 0xbb77
 450:	04025977 	streq	r5, [r2], #-2423	; 0xfffff689
 454:	ac010100 	stfges	f0, [r1], {-0}
 458:	02000000 	andeq	r0, r0, #0
 45c:	00005100 	andeq	r5, r0, r0, lsl #2
 460:	fb010200 	blx	40c6a <startup-0x1ffbf396>
 464:	01000d0e 	tsteq	r0, lr, lsl #26
 468:	00010101 	andeq	r0, r1, r1, lsl #2
 46c:	00010000 	andeq	r0, r1, r0
 470:	3a430100 	bcc	10c0878 <startup-0x1ef3f788>
 474:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 478:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 47c:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 480:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 484:	6f746b73 	svcvs	0x00746b73
 488:	41442f70 	hvcmi	17136	; 0x42f0
 48c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 490:	646f432f 	strbtvs	r4, [pc], #-815	; 498 <startup-0x1ffffb68>
 494:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 498:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 49c:	705f6c61 	subsvc	r6, pc, r1, ror #24
 4a0:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 4a4:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 4a8:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 4ac:	00010063 	andeq	r0, r1, r3, rrx
 4b0:	05000000 	streq	r0, [r0, #-0]
 4b4:	00095002 	andeq	r5, r9, r2
 4b8:	914b1420 	cmpls	fp, r0, lsr #8
 4bc:	4b4b4b4b 	blmi	12d31f0 <startup-0x1ed2ce10>
 4c0:	4b3d924c 	blmi	f64df8 <startup-0x1f09b208>
 4c4:	01040200 	mrseq	r0, R12_usr
 4c8:	2f065806 	svccs	0x00065806
 4cc:	01040200 	mrseq	r0, R12_usr
 4d0:	2f065806 	svccs	0x00065806
 4d4:	01040200 	mrseq	r0, R12_usr
 4d8:	2f065806 	svccs	0x00065806
 4dc:	01040200 	mrseq	r0, R12_usr
 4e0:	2f065806 	svccs	0x00065806
 4e4:	683d6821 	ldmdavs	sp!, {r0, r5, fp, sp, lr}
 4e8:	672f6759 			; <UNDEFINED> instruction: 0x672f6759
 4ec:	00300859 	eorseq	r0, r0, r9, asr r8
 4f0:	03020402 	movweq	r0, #9218	; 0x2402
 4f4:	02007479 	andeq	r7, r0, #2030043136	; 0x79000000
 4f8:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
 4fc:	580a0306 	stmdapl	sl, {r1, r2, r8, r9}
 500:	0902213d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r8, sp}
 504:	Address 0x00000504 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	59726964 	ldmdbpl	r2!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	736f7000 	cmnvc	pc, #0
   8:	69730059 	ldmdbvs	r3!, {r0, r3, r4, r6}^
   c:	0058657a 	subseq	r6, r8, sl, ror r5
  10:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
  14:	64615074 	strbtvs	r5, [r1], #-116	; 0xffffff8c
  18:	00656c64 	rsbeq	r6, r5, r4, ror #24
  1c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  20:	72640059 	rsbvc	r0, r4, #89	; 0x59
  24:	43007761 	movwmi	r7, #1889	; 0x761
  28:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  2c:	2f737265 	svccs	0x00737265
  30:	706d6148 	rsbvc	r6, sp, r8, asr #2
  34:	442f7375 	strtmi	r7, [pc], #-885	; 3c <startup-0x1fffffc4>
  38:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  3c:	442f706f 	strtmi	r7, [pc], #-111	; 44 <startup-0x1fffffbc>
  40:	31305441 	teqcc	r0, r1, asr #8
  44:	6f432f37 	svcvs	0x00432f37
  48:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  4c:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  50:	5f6c6165 	svcpl	0x006c6165
  54:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  58:	6174732f 	cmnvs	r4, pc, lsr #6
  5c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  60:	7300632e 	movwvc	r6, #814	; 0x32e
  64:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
  68:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  6c:	6f507400 	svcvs	0x00507400
  70:	00746e69 	rsbseq	r6, r4, r9, ror #28
  74:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  78:	736e7500 	cmnvc	lr, #0, 10
  7c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  80:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  84:	47007261 	strmi	r7, [r0, -r1, ror #4]
  88:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  8c:	36203939 			; <UNDEFINED> instruction: 0x36203939
  90:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  94:	31303220 	teqcc	r0, r0, lsr #4
  98:	31323037 	teqcc	r2, r7, lsr r0
  9c:	72282035 	eorvc	r2, r8, #53	; 0x35
  a0:	61656c65 	cmnvs	r5, r5, ror #24
  a4:	20296573 	eorcs	r6, r9, r3, ror r5
  a8:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  ac:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  b0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  b4:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  b8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  bc:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  c0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  c4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  c8:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  cc:	205d3231 	subscs	r3, sp, r1, lsr r2
  d0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  d4:	20626d75 	rsbcs	r6, r2, r5, ror sp
  d8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  dc:	613d6863 	teqvs	sp, r3, ror #16
  e0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  e4:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  e8:	6f6c666d 	svcvs	0x006c666d
  ec:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  f0:	733d6962 	teqvc	sp, #1605632	; 0x188000
  f4:	2074666f 	rsbscs	r6, r4, pc, ror #12
  f8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  fc:	20626d75 	rsbcs	r6, r2, r5, ror sp
 100:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 104:	613d6863 	teqvs	sp, r3, ror #16
 108:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 10c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 110:	4f2d2067 	svcmi	0x002d2067
 114:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 118:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 11c:	50003939 	andpl	r3, r0, r9, lsr r9
 120:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; c <startup-0x1ffffff4>
 124:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 128:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 12c:	70615f74 	rsbvc	r5, r1, r4, ror pc
 130:	47740070 			; <UNDEFINED> instruction: 0x47740070
 134:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 138:	00797274 	rsbseq	r7, r9, r4, ror r2
 13c:	73657270 	cmnvc	r5, #112, 4
 140:	4b646573 	blmi	1919714 <startup-0x1e6e68ec>
 144:	00737965 	rsbseq	r7, r3, r5, ror #18
 148:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 14c:	00707574 	rsbseq	r7, r0, r4, ror r5
 150:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
 154:	64646150 	strbtvs	r6, [r4], #-336	; 0xfffffeb0
 158:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
 15c:	006e6961 	rsbeq	r6, lr, r1, ror #18
 160:	4a424f50 	bmi	1093ea8 <startup-0x1ef6c158>
 164:	00544345 	subseq	r4, r4, r5, asr #6
 168:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 16c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 170:	736f7000 	cmnvc	pc, #0
 174:	69640058 	stmdbvs	r4!, {r3, r4, r6}^
 178:	6e005872 	mcrvs	8, 0, r5, cr0, cr2, {3}
 17c:	6f506d75 	svcvs	0x00506d75
 180:	73746e69 	cmnvc	r4, #1680	; 0x690
 184:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 188:	7400544e 	strvc	r5, [r0], #-1102	; 0xfffffbb2
 18c:	006a624f 	rsbeq	r6, sl, pc, asr #4
 190:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 194:	6f65675f 	svcvs	0x0065675f
 198:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 19c:	68740079 	ldmdavs	r4!, {r0, r3, r4, r5, r6}^
 1a0:	6d007369 	stcvs	3, cr7, [r0, #-420]	; 0xfffffe5c
 1a4:	5f65766f 	svcpl	0x0065766f
 1a8:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 1ac:	2f3a4300 	svccs	0x003a4300
 1b0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1b4:	61482f73 	hvcvs	33523	; 0x82f3
 1b8:	7375706d 	cmnvc	r5, #109	; 0x6d
 1bc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1c0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1c4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 1c8:	2f373130 	svccs	0x00373130
 1cc:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 1d0:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 1d4:	6165722f 	cmnvs	r5, pc, lsr #4
 1d8:	6f705f6c 	svcvs	0x00705f6c
 1dc:	622f676e 	eorvs	r6, pc, #28835840	; 0x1b80000
 1e0:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
 1e4:	72670063 	rsbvc	r0, r7, #99	; 0x63
 1e8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1ec:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 1f0:	5f657469 	svcpl	0x00657469
 1f4:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1f8:	00646e61 	rsbeq	r6, r4, r1, ror #28
 1fc:	70617267 	rsbvc	r7, r1, r7, ror #4
 200:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 204:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 208:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 20c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 210:	00726165 	rsbseq	r6, r2, r5, ror #2
 214:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 218:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
 21c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 220:	635f7363 	cmpvs	pc, #-1946157055	; 0x8c000001
 224:	5f6c7274 	svcpl	0x006c7274
 228:	5f746962 	svcpl	0x00746962
 22c:	00746573 	rsbseq	r6, r4, r3, ror r5
 230:	70617267 	rsbvc	r7, r1, r7, ror #4
 234:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 238:	6165725f 	cmnvs	r5, pc, asr r2
 23c:	61645f64 	cmnvs	r4, r4, ror #30
 240:	67006174 	smlsdxvs	r0, r4, r1, r6
 244:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 248:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 24c:	5f746961 	svcpl	0x00746961
 250:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 254:	3a430079 	bcc	10c0440 <startup-0x1ef3fbc0>
 258:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 25c:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 260:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 264:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 268:	6f746b73 	svcvs	0x00746b73
 26c:	41442f70 	hvcmi	17136	; 0x42f0
 270:	37313054 			; <UNDEFINED> instruction: 0x37313054
 274:	646f432f 	strbtvs	r4, [pc], #-815	; 27c <startup-0x1ffffd84>
 278:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 27c:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 280:	705f6c61 	subsvc	r6, pc, r1, ror #24
 284:	2f676e6f 	svccs	0x00676e6f
 288:	70617267 	rsbvc	r7, r1, r7, ror #4
 28c:	2e636968 	vnmulcs.f16	s13, s6, s17	; <UNPREDICTABLE>
 290:	616d0063 	cmnvs	sp, r3, rrx
 294:	75006b73 	strvc	r6, [r0, #-2931]	; 0xfffff48d
 298:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 29c:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
 2a0:	00797375 	rsbseq	r7, r9, r5, ror r3
 2a4:	70617267 	rsbvc	r7, r1, r7, ror #4
 2a8:	5f636968 	svcpl	0x00636968
 2ac:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2b0:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 2b4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 2b8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 2bc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; f4 <startup-0x1fffff0c>
 2c0:	0072656c 	rsbseq	r6, r2, ip, ror #10
 2c4:	706d6574 	rsbvc	r6, sp, r4, ror r5
 2c8:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 2cc:	67007865 	strvs	r7, [r0, -r5, ror #16]
 2d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2d4:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 2d8:	00646165 	rsbeq	r6, r4, r5, ror #2
 2dc:	70617267 	rsbvc	r7, r1, r7, ror #4
 2e0:	5f636968 	svcpl	0x00636968
 2e4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2e8:	61645f65 	cmnvs	r4, r5, ror #30
 2ec:	70006174 	andvc	r6, r0, r4, ror r1
 2f0:	00656761 	rsbeq	r6, r5, r1, ror #14
 2f4:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 2f8:	72670065 	rsbvc	r0, r7, #101	; 0x65
 2fc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 300:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 304:	5f726165 	svcpl	0x00726165
 308:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 30c:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 310:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 314:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 318:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 31c:	7a696c61 	bvc	1a5b4a8 <startup-0x1e5a4b58>
 320:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 324:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 328:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 32c:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 330:	43006465 	movwmi	r6, #1125	; 0x465
 334:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 338:	2f737265 	svccs	0x00737265
 33c:	706d6148 	rsbvc	r6, sp, r8, asr #2
 340:	442f7375 	strtmi	r7, [pc], #-885	; 348 <startup-0x1ffffcb8>
 344:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 348:	442f706f 	strtmi	r7, [pc], #-111	; 350 <startup-0x1ffffcb0>
 34c:	31305441 	teqcc	r0, r1, asr #8
 350:	6f432f37 	svcvs	0x00432f37
 354:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 358:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 35c:	5f6c6165 	svcpl	0x006c6165
 360:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 364:	6a626f2f 	bvs	189c028 <startup-0x1e763fd8>
 368:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 36c:	6c630063 	stclvs	0, cr0, [r3], #-396	; 0xfffffe74
 370:	5f726165 	svcpl	0x00726165
 374:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 378:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 37c:	5f776172 	svcpl	0x00776172
 380:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 384:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 388:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 38c:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 390:	7500696c 	strvc	r6, [r0, #-2412]	; 0xfffff694
 394:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 398:	2064656e 	rsbcs	r6, r4, lr, ror #10
 39c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 3a0:	616c6564 	cmnvs	ip, r4, ror #10
 3a4:	30355f79 	eorscc	r5, r5, r9, ror pc
 3a8:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 3ac:	616c6564 	cmnvs	ip, r4, ror #10
 3b0:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 3b4:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 3b8:	616c6564 	cmnvs	ip, r4, ror #10
 3bc:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 3c0:	006f7263 	rsbeq	r7, pc, r3, ror #4
 3c4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff989 <returnKeys.4003+0xdfffecd5>
 3c8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3cc:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 3d0:	2f737570 	svccs	0x00737570
 3d4:	6b736544 	blvs	1cd98ec <startup-0x1e326714>
 3d8:	2f706f74 	svccs	0x00706f74
 3dc:	30544144 	subscc	r4, r4, r4, asr #2
 3e0:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 3e4:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 3e8:	2f657469 	svccs	0x00657469
 3ec:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 3f0:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 3f4:	69742f67 	ldmdbvs	r4!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp}^
 3f8:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 3fc:	6f6d0063 	svcvs	0x006d0063
 400:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 404:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 408:	61700065 	cmnvs	r0, r5, rrx
 40c:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 410:	6f65675f 	svcvs	0x0065675f
 414:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 418:	3a430079 	bcc	10c0604 <startup-0x1ef3f9fc>
 41c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 420:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 424:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 428:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 42c:	6f746b73 	svcvs	0x00746b73
 430:	41442f70 	hvcmi	17136	; 0x42f0
 434:	37313054 			; <UNDEFINED> instruction: 0x37313054
 438:	646f432f 	strbtvs	r4, [pc], #-815	; 440 <startup-0x1ffffbc0>
 43c:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 440:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 444:	705f6c61 	subsvc	r6, pc, r1, ror #24
 448:	2f676e6f 	svccs	0x00676e6f
 44c:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 450:	632e656c 			; <UNDEFINED> instruction: 0x632e656c
 454:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 458:	65720062 	ldrbvs	r0, [r2, #-98]!	; 0xffffff9e
 45c:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 460:	7379654b 	cmnvc	r9, #314572800	; 0x12c00000
 464:	61657200 	cmnvs	r5, r0, lsl #4
 468:	6c6f4364 	stclvs	3, cr4, [pc], #-400	; 2e0 <startup-0x1ffffd20>
 46c:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 470:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa35 <returnKeys.4003+0xdfffed81>
 474:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 478:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 47c:	2f737570 	svccs	0x00737570
 480:	6b736544 	blvs	1cd9998 <startup-0x1e326668>
 484:	2f706f74 	svccs	0x00706f74
 488:	30544144 	subscc	r4, r4, r4, asr #2
 48c:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 490:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 494:	2f657469 	svccs	0x00657469
 498:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 49c:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 4a0:	656b2f67 	strbvs	r2, [fp, #-3943]!	; 0xfffff099
 4a4:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 4a8:	6300632e 	movwvs	r6, #814	; 0x32e
 4ac:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 4b0:	656b006e 	strbvs	r0, [fp, #-110]!	; 0xffffff92
 4b4:	61007379 	tstvs	r0, r9, ror r3
 4b8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 4bc:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
 4c0:	Address 0x000004c0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000048 	andeq	r0, r0, r8, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000058 	andcs	r0, r0, r8, asr r0
  48:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	200e4101 	andcs	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	20000148 	andcs	r0, r0, r8, asr #2
  78:	000000dc 	ldrdeq	r0, [r0], -ip
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	180e4101 	stmdane	lr, {r0, r8, lr}
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	0000000c 	andeq	r0, r0, ip
  90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  94:	7c020001 	stcvc	0, cr0, [r2], {1}
  98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	0000008c 	andeq	r0, r0, ip, lsl #1
  a4:	20000224 	andcs	r0, r0, r4, lsr #4
  a8:	00000038 	andeq	r0, r0, r8, lsr r0
  ac:	40080e41 	andmi	r0, r8, r1, asr #28
  b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b4:	100e4101 	andne	r4, lr, r1, lsl #2
  b8:	00070d41 	andeq	r0, r7, r1, asr #26
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	0000008c 	andeq	r0, r0, ip, lsl #1
  c4:	2000025c 	andcs	r0, r0, ip, asr r2
  c8:	00000034 	andeq	r0, r0, r4, lsr r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	100e4101 	andne	r4, lr, r1, lsl #2
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	0000008c 	andeq	r0, r0, ip, lsl #1
  e4:	20000290 	mulcs	r0, r0, r2
  e8:	0000006a 	andeq	r0, r0, sl, rrx
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	0000008c 	andeq	r0, r0, ip, lsl #1
 104:	200002fa 	strdcs	r0, [r0], -sl
 108:	00000072 	andeq	r0, r0, r2, ror r0
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	100e4101 	andne	r4, lr, r1, lsl #2
 118:	00070d41 	andeq	r0, r7, r1, asr #26
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	0000008c 	andeq	r0, r0, ip, lsl #1
 124:	2000036c 	andcs	r0, r0, ip, ror #6
 128:	00000090 	muleq	r0, r0, r0
 12c:	40080e41 	andmi	r0, r8, r1, asr #28
 130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 134:	180e4101 	stmdane	lr, {r0, r8, lr}
 138:	00070d41 	andeq	r0, r7, r1, asr #26
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	0000008c 	andeq	r0, r0, ip, lsl #1
 144:	200003fc 	strdcs	r0, [r0], -ip
 148:	00000080 	andeq	r0, r0, r0, lsl #1
 14c:	40080e41 	andmi	r0, r8, r1, asr #28
 150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 154:	100e4101 	andne	r4, lr, r1, lsl #2
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	0000008c 	andeq	r0, r0, ip, lsl #1
 164:	2000047c 	andcs	r0, r0, ip, ror r4
 168:	00000040 	andeq	r0, r0, r0, asr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 174:	100e4101 	andne	r4, lr, r1, lsl #2
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	0000008c 	andeq	r0, r0, ip, lsl #1
 184:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 188:	00000046 	andeq	r0, r0, r6, asr #32
 18c:	40080e41 	andmi	r0, r8, r1, asr #28
 190:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 194:	100e4101 	andne	r4, lr, r1, lsl #2
 198:	00070d41 	andeq	r0, r7, r1, asr #26
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1a4:	20000502 	andcs	r0, r0, r2, lsl #10
 1a8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	100e4101 	andne	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1c4:	2000052c 	andcs	r0, r0, ip, lsr #10
 1c8:	0000005c 	andeq	r0, r0, ip, asr r0
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	0000008c 	andeq	r0, r0, ip, lsl #1
 1e0:	20000588 	andcs	r0, r0, r8, lsl #11
 1e4:	00000058 	andeq	r0, r0, r8, asr r0
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	100e4101 	andne	r4, lr, r1, lsl #2
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	00000020 	andeq	r0, r0, r0, lsr #32
 1fc:	0000008c 	andeq	r0, r0, ip, lsl #1
 200:	200005e0 	andcs	r0, r0, r0, ror #11
 204:	00000194 	muleq	r0, r4, r1
 208:	400c0e41 	andmi	r0, ip, r1, asr #28
 20c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 210:	018e4002 	orreq	r4, lr, r2
 214:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 218:	0000070d 	andeq	r0, r0, sp, lsl #14
 21c:	0000000c 	andeq	r0, r0, ip
 220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 224:	7c020001 	stcvc	0, cr0, [r2], {1}
 228:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 22c:	0000001c 	andeq	r0, r0, ip, lsl r0
 230:	0000021c 	andeq	r0, r0, ip, lsl r2
 234:	20000774 	andcs	r0, r0, r4, ror r7
 238:	0000005e 	andeq	r0, r0, lr, asr r0
 23c:	40080e41 	andmi	r0, r8, r1, asr #28
 240:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 244:	180e4101 	stmdane	lr, {r0, r8, lr}
 248:	00070d41 	andeq	r0, r7, r1, asr #26
 24c:	0000001c 	andeq	r0, r0, ip, lsl r0
 250:	0000021c 	andeq	r0, r0, ip, lsl r2
 254:	200007d2 	ldrdcs	r0, [r0], -r2
 258:	0000005e 	andeq	r0, r0, lr, asr r0
 25c:	40080e41 	andmi	r0, r8, r1, asr #28
 260:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 264:	180e4101 	stmdane	lr, {r0, r8, lr}
 268:	00070d41 	andeq	r0, r7, r1, asr #26
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	0000021c 	andeq	r0, r0, ip, lsl r2
 274:	20000830 	andcs	r0, r0, r0, lsr r8
 278:	00000020 	andeq	r0, r0, r0, lsr #32
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	180e4101 	stmdane	lr, {r0, r8, lr}
 288:	00070d41 	andeq	r0, r7, r1, asr #26
 28c:	0000000c 	andeq	r0, r0, ip
 290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 294:	7c020001 	stcvc	0, cr0, [r2], {1}
 298:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	0000028c 	andeq	r0, r0, ip, lsl #5
 2a4:	20000850 	andcs	r0, r0, r0, asr r8
 2a8:	00000044 	andeq	r0, r0, r4, asr #32
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	0000028c 	andeq	r0, r0, ip, lsl #5
 2c0:	20000894 	mulcs	r0, r4, r8
 2c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	100e4101 	andne	r4, lr, r1, lsl #2
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	0000028c 	andeq	r0, r0, ip, lsl #5
 2e0:	200008c0 	andcs	r0, r0, r0, asr #17
 2e4:	0000001e 	andeq	r0, r0, lr, lsl r0
 2e8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f0:	100e4101 	andne	r4, lr, r1, lsl #2
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	00000018 	andeq	r0, r0, r8, lsl r0
 2fc:	0000028c 	andeq	r0, r0, ip, lsl #5
 300:	200008de 	ldrdcs	r0, [r0], -lr
 304:	00000012 	andeq	r0, r0, r2, lsl r0
 308:	40080e41 	andmi	r0, r8, r1, asr #28
 30c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 310:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 314:	0000000c 	andeq	r0, r0, ip
 318:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 31c:	7c020001 	stcvc	0, cr0, [r2], {1}
 320:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	00000314 	andeq	r0, r0, r4, lsl r3
 32c:	200008f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 330:	0000005e 	andeq	r0, r0, lr, asr r0
 334:	40080e41 	andmi	r0, r8, r1, asr #28
 338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 33c:	100e4101 	andne	r4, lr, r1, lsl #2
 340:	00070d41 	andeq	r0, r7, r1, asr #26
 344:	0000000c 	andeq	r0, r0, ip
 348:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 34c:	7c020001 	stcvc	0, cr0, [r2], {1}
 350:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 354:	0000001c 	andeq	r0, r0, ip, lsl r0
 358:	00000344 	andeq	r0, r0, r4, asr #6
 35c:	20000950 	andcs	r0, r0, r0, asr r9
 360:	00000054 	andeq	r0, r0, r4, asr r0
 364:	40080e41 	andmi	r0, r8, r1, asr #28
 368:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 36c:	100e4101 	andne	r4, lr, r1, lsl #2
 370:	00070d41 	andeq	r0, r7, r1, asr #26
 374:	0000001c 	andeq	r0, r0, ip, lsl r0
 378:	00000344 	andeq	r0, r0, r4, asr #6
 37c:	200009a4 	andcs	r0, r0, r4, lsr #19
 380:	00000054 	andeq	r0, r0, r4, asr r0
 384:	40080e41 	andmi	r0, r8, r1, asr #28
 388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 38c:	100e4101 	andne	r4, lr, r1, lsl #2
 390:	00070d41 	andeq	r0, r7, r1, asr #26
 394:	00000020 	andeq	r0, r0, r0, lsr #32
 398:	00000344 	andeq	r0, r0, r4, asr #6
 39c:	200009f8 	strdcs	r0, [r0], -r8
 3a0:	000000a8 	andeq	r0, r0, r8, lsr #1
 3a4:	400c0e41 	andmi	r0, ip, r1, asr #28
 3a8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3ac:	018e4002 	orreq	r4, lr, r2
 3b0:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 3b4:	0000070d 	andeq	r0, r0, sp, lsl #14
