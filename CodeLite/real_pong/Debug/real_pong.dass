
./Debug/real_pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f828 	bl	20000058 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	// Setup display
	*GPIO_E_MODER = 0x55555555;
20000014:	4b0b      	ldr	r3, [pc, #44]	; (20000044 <init_app+0x34>)
20000016:	4a0c      	ldr	r2, [pc, #48]	; (20000048 <init_app+0x38>)
20000018:	601a      	str	r2, [r3, #0]
	
	// Setup for keypad
	*GPIO_D_MODER = 0x55000000;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <init_app+0x3c>)
2000001c:	22aa      	movs	r2, #170	; 0xaa
2000001e:	05d2      	lsls	r2, r2, #23
20000020:	601a      	str	r2, [r3, #0]
	*GPIO_D_OTYPER &= 0x0000FFFF;   
20000022:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <init_app+0x40>)
20000024:	4a0a      	ldr	r2, [pc, #40]	; (20000050 <init_app+0x40>)
20000026:	8812      	ldrh	r2, [r2, #0]
20000028:	b292      	uxth	r2, r2
2000002a:	801a      	strh	r2, [r3, #0]
	*GPIO_D_OTYPER |= 0x00000000;     
2000002c:	4b08      	ldr	r3, [pc, #32]	; (20000050 <init_app+0x40>)
2000002e:	4a08      	ldr	r2, [pc, #32]	; (20000050 <init_app+0x40>)
20000030:	8812      	ldrh	r2, [r2, #0]
20000032:	b292      	uxth	r2, r2
20000034:	801a      	strh	r2, [r3, #0]
	*GPIO_D_PUPDR = 0x00AA0000;    
20000036:	4b07      	ldr	r3, [pc, #28]	; (20000054 <init_app+0x44>)
20000038:	22aa      	movs	r2, #170	; 0xaa
2000003a:	0412      	lsls	r2, r2, #16
2000003c:	601a      	str	r2, [r3, #0]
}
2000003e:	46c0      	nop			; (mov r8, r8)
20000040:	46bd      	mov	sp, r7
20000042:	bd80      	pop	{r7, pc}
20000044:	40021000 	andmi	r1, r2, r0
20000048:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000004c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000050:	40020c04 	andmi	r0, r2, r4, lsl #24
20000054:	40020c0c 	andmi	r0, r2, ip, lsl #24

20000058 <main>:
// Reference all game objects
extern OBJECT ball;
extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void main(void) {
20000058:	b580      	push	{r7, lr}
2000005a:	b086      	sub	sp, #24
2000005c:	af00      	add	r7, sp, #0
	// Load all game objects
	POBJECT p = &ball;
2000005e:	4b3b      	ldr	r3, [pc, #236]	; (2000014c <main+0xf4>)
20000060:	613b      	str	r3, [r7, #16]
	POBJECT pl = &leftPaddle;
20000062:	4b3b      	ldr	r3, [pc, #236]	; (20000150 <main+0xf8>)
20000064:	60fb      	str	r3, [r7, #12]
	POBJECT pr = &rightPaddle;
20000066:	4b3b      	ldr	r3, [pc, #236]	; (20000154 <main+0xfc>)
20000068:	60bb      	str	r3, [r7, #8]
	
	init_app();
2000006a:	f7ff ffd1 	bl	20000010 <init_app>
	graphic_initialize();
2000006e:	f000 faef 	bl	20000650 <graphic_initialize>
  #ifndef SIMULATOR
	graphic_clear_screen();
20000072:	f000 fb1b 	bl	200006ac <graphic_clear_screen>
  #endif
	
	// Init asciidisplay
	ascii_init();
20000076:	f000 ff31 	bl	20000edc <ascii_init>
		
	// Set speed for ball
	p->set_speed(p, 4, 4);
2000007a:	693b      	ldr	r3, [r7, #16]
2000007c:	6a1b      	ldr	r3, [r3, #32]
2000007e:	6938      	ldr	r0, [r7, #16]
20000080:	2204      	movs	r2, #4
20000082:	2104      	movs	r1, #4
20000084:	4798      	blx	r3
	
	// Game loop
	while(1) {
		// Update from keypad
		unsigned char *pressedKeys = keyb();
20000086:	f000 fd49 	bl	20000b1c <keyb>
2000008a:	0003      	movs	r3, r0
2000008c:	607b      	str	r3, [r7, #4]
		pl->set_speed(pl,0,0);
2000008e:	68fb      	ldr	r3, [r7, #12]
20000090:	6a1b      	ldr	r3, [r3, #32]
20000092:	68f8      	ldr	r0, [r7, #12]
20000094:	2200      	movs	r2, #0
20000096:	2100      	movs	r1, #0
20000098:	4798      	blx	r3
		pr->set_speed(pr,0,0);
2000009a:	68bb      	ldr	r3, [r7, #8]
2000009c:	6a1b      	ldr	r3, [r3, #32]
2000009e:	68b8      	ldr	r0, [r7, #8]
200000a0:	2200      	movs	r2, #0
200000a2:	2100      	movs	r1, #0
200000a4:	4798      	blx	r3
		for(unsigned char i = 0; i < 4; i++) {
200000a6:	2317      	movs	r3, #23
200000a8:	18fb      	adds	r3, r7, r3
200000aa:	2200      	movs	r2, #0
200000ac:	701a      	strb	r2, [r3, #0]
200000ae:	e035      	b.n	2000011c <main+0xc4>
			switch(pressedKeys[i]) {
200000b0:	2317      	movs	r3, #23
200000b2:	18fb      	adds	r3, r7, r3
200000b4:	781b      	ldrb	r3, [r3, #0]
200000b6:	687a      	ldr	r2, [r7, #4]
200000b8:	18d3      	adds	r3, r2, r3
200000ba:	781b      	ldrb	r3, [r3, #0]
200000bc:	2b04      	cmp	r3, #4
200000be:	d010      	beq.n	200000e2 <main+0x8a>
200000c0:	dc02      	bgt.n	200000c8 <main+0x70>
200000c2:	2b01      	cmp	r3, #1
200000c4:	d005      	beq.n	200000d2 <main+0x7a>
200000c6:	e022      	b.n	2000010e <main+0xb6>
200000c8:	2b0c      	cmp	r3, #12
200000ca:	d011      	beq.n	200000f0 <main+0x98>
200000cc:	2b0d      	cmp	r3, #13
200000ce:	d017      	beq.n	20000100 <main+0xa8>
200000d0:	e01d      	b.n	2000010e <main+0xb6>
				case 0x01: pl->set_speed(pl,0,-5); break;
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	6a1b      	ldr	r3, [r3, #32]
200000d6:	2205      	movs	r2, #5
200000d8:	4252      	negs	r2, r2
200000da:	68f8      	ldr	r0, [r7, #12]
200000dc:	2100      	movs	r1, #0
200000de:	4798      	blx	r3
200000e0:	e015      	b.n	2000010e <main+0xb6>
				case 0x04: pl->set_speed(pl,0,5); break;
200000e2:	68fb      	ldr	r3, [r7, #12]
200000e4:	6a1b      	ldr	r3, [r3, #32]
200000e6:	68f8      	ldr	r0, [r7, #12]
200000e8:	2205      	movs	r2, #5
200000ea:	2100      	movs	r1, #0
200000ec:	4798      	blx	r3
200000ee:	e00e      	b.n	2000010e <main+0xb6>
				case 0x0C: pr->set_speed(pr,0,-5); break;
200000f0:	68bb      	ldr	r3, [r7, #8]
200000f2:	6a1b      	ldr	r3, [r3, #32]
200000f4:	2205      	movs	r2, #5
200000f6:	4252      	negs	r2, r2
200000f8:	68b8      	ldr	r0, [r7, #8]
200000fa:	2100      	movs	r1, #0
200000fc:	4798      	blx	r3
200000fe:	e006      	b.n	2000010e <main+0xb6>
				case 0x0D: pr->set_speed(pr,0,5); break;
20000100:	68bb      	ldr	r3, [r7, #8]
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	68b8      	ldr	r0, [r7, #8]
20000106:	2205      	movs	r2, #5
20000108:	2100      	movs	r1, #0
2000010a:	4798      	blx	r3
2000010c:	46c0      	nop			; (mov r8, r8)
		for(unsigned char i = 0; i < 4; i++) {
2000010e:	2317      	movs	r3, #23
20000110:	18fb      	adds	r3, r7, r3
20000112:	781a      	ldrb	r2, [r3, #0]
20000114:	2317      	movs	r3, #23
20000116:	18fb      	adds	r3, r7, r3
20000118:	3201      	adds	r2, #1
2000011a:	701a      	strb	r2, [r3, #0]
2000011c:	2317      	movs	r3, #23
2000011e:	18fb      	adds	r3, r7, r3
20000120:	781b      	ldrb	r3, [r3, #0]
20000122:	2b03      	cmp	r3, #3
20000124:	d9c4      	bls.n	200000b0 <main+0x58>
			}
		}
		
		// Move game objects
		p->move(p);
20000126:	693b      	ldr	r3, [r7, #16]
20000128:	69db      	ldr	r3, [r3, #28]
2000012a:	693a      	ldr	r2, [r7, #16]
2000012c:	0010      	movs	r0, r2
2000012e:	4798      	blx	r3
		pl->move(pl);
20000130:	68fb      	ldr	r3, [r7, #12]
20000132:	69db      	ldr	r3, [r3, #28]
20000134:	68fa      	ldr	r2, [r7, #12]
20000136:	0010      	movs	r0, r2
20000138:	4798      	blx	r3
		pr->move(pr);
2000013a:	68bb      	ldr	r3, [r7, #8]
2000013c:	69db      	ldr	r3, [r3, #28]
2000013e:	68ba      	ldr	r2, [r7, #8]
20000140:	0010      	movs	r0, r2
20000142:	4798      	blx	r3
		delay_milli(30);
20000144:	201e      	movs	r0, #30
20000146:	f000 fc4d 	bl	200009e4 <delay_milli>
	while(1) {
2000014a:	e79c      	b.n	20000086 <main+0x2e>
2000014c:	20001074 	andcs	r1, r0, r4, ror r0
20000150:	2000116c 	andcs	r1, r0, ip, ror #2
20000154:	20001190 	mulcs	r0, r0, r1

20000158 <move_ball>:
};

extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void move_ball(POBJECT this) {
20000158:	b590      	push	{r4, r7, lr}
2000015a:	b091      	sub	sp, #68	; 0x44
2000015c:	af00      	add	r7, sp, #0
2000015e:	6078      	str	r0, [r7, #4]
	clear_object(this);
20000160:	687b      	ldr	r3, [r7, #4]
20000162:	0018      	movs	r0, r3
20000164:	f000 fbc7 	bl	200008f6 <clear_object>
	
	// Move ball
	this->posX += this->dirX;
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	68da      	ldr	r2, [r3, #12]
2000016c:	687b      	ldr	r3, [r7, #4]
2000016e:	685b      	ldr	r3, [r3, #4]
20000170:	18d2      	adds	r2, r2, r3
20000172:	687b      	ldr	r3, [r7, #4]
20000174:	60da      	str	r2, [r3, #12]
	this->posY += this->dirY;
20000176:	687b      	ldr	r3, [r7, #4]
20000178:	691a      	ldr	r2, [r3, #16]
2000017a:	687b      	ldr	r3, [r7, #4]
2000017c:	689b      	ldr	r3, [r3, #8]
2000017e:	18d2      	adds	r2, r2, r3
20000180:	687b      	ldr	r3, [r7, #4]
20000182:	611a      	str	r2, [r3, #16]
	
	// Wall collisions
	if(this->posY < 0) {
20000184:	687b      	ldr	r3, [r7, #4]
20000186:	691b      	ldr	r3, [r3, #16]
20000188:	2b00      	cmp	r3, #0
2000018a:	da08      	bge.n	2000019e <move_ball+0x46>
		this->posY = 0;
2000018c:	687b      	ldr	r3, [r7, #4]
2000018e:	2200      	movs	r2, #0
20000190:	611a      	str	r2, [r3, #16]
		this->dirY = -this->dirY;
20000192:	687b      	ldr	r3, [r7, #4]
20000194:	689b      	ldr	r3, [r3, #8]
20000196:	425a      	negs	r2, r3
20000198:	687b      	ldr	r3, [r7, #4]
2000019a:	609a      	str	r2, [r3, #8]
2000019c:	e00b      	b.n	200001b6 <move_ball+0x5e>
	} else if(this->posY > 63) {
2000019e:	687b      	ldr	r3, [r7, #4]
200001a0:	691b      	ldr	r3, [r3, #16]
200001a2:	2b3f      	cmp	r3, #63	; 0x3f
200001a4:	dd07      	ble.n	200001b6 <move_ball+0x5e>
		this->posY = 63;
200001a6:	687b      	ldr	r3, [r7, #4]
200001a8:	223f      	movs	r2, #63	; 0x3f
200001aa:	611a      	str	r2, [r3, #16]
		this->dirY = -this->dirY;
200001ac:	687b      	ldr	r3, [r7, #4]
200001ae:	689b      	ldr	r3, [r3, #8]
200001b0:	425a      	negs	r2, r3
200001b2:	687b      	ldr	r3, [r7, #4]
200001b4:	609a      	str	r2, [r3, #8]
	}
	
	// Define left and right paddle
	POBJECT lp = &leftPaddle;
200001b6:	4b60      	ldr	r3, [pc, #384]	; (20000338 <move_ball+0x1e0>)
200001b8:	637b      	str	r3, [r7, #52]	; 0x34
	POBJECT rp = &rightPaddle;
200001ba:	4b60      	ldr	r3, [pc, #384]	; (2000033c <move_ball+0x1e4>)
200001bc:	633b      	str	r3, [r7, #48]	; 0x30
	
	// Collision left paddle
	if(this->posX <= lp->posX + lp->geo->sizeX) {
200001be:	687b      	ldr	r3, [r7, #4]
200001c0:	68da      	ldr	r2, [r3, #12]
200001c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001c4:	68d9      	ldr	r1, [r3, #12]
200001c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001c8:	681b      	ldr	r3, [r3, #0]
200001ca:	685b      	ldr	r3, [r3, #4]
200001cc:	18cb      	adds	r3, r1, r3
200001ce:	429a      	cmp	r2, r3
200001d0:	dc54      	bgt.n	2000027c <move_ball+0x124>
		if((this->posY >= lp->posY) && (this->posY <= lp->posY + lp->geo->sizeY)) {
200001d2:	687b      	ldr	r3, [r7, #4]
200001d4:	691a      	ldr	r2, [r3, #16]
200001d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001d8:	691b      	ldr	r3, [r3, #16]
200001da:	429a      	cmp	r2, r3
200001dc:	db18      	blt.n	20000210 <move_ball+0xb8>
200001de:	687b      	ldr	r3, [r7, #4]
200001e0:	691a      	ldr	r2, [r3, #16]
200001e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001e4:	6919      	ldr	r1, [r3, #16]
200001e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001e8:	681b      	ldr	r3, [r3, #0]
200001ea:	689b      	ldr	r3, [r3, #8]
200001ec:	18cb      	adds	r3, r1, r3
200001ee:	429a      	cmp	r2, r3
200001f0:	dc0e      	bgt.n	20000210 <move_ball+0xb8>
			this->posX = lp->posX + lp->geo->sizeX + 1;
200001f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001f4:	68da      	ldr	r2, [r3, #12]
200001f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001f8:	681b      	ldr	r3, [r3, #0]
200001fa:	685b      	ldr	r3, [r3, #4]
200001fc:	18d3      	adds	r3, r2, r3
200001fe:	1c5a      	adds	r2, r3, #1
20000200:	687b      	ldr	r3, [r7, #4]
20000202:	60da      	str	r2, [r3, #12]
			this->dirX = -this->dirX;
20000204:	687b      	ldr	r3, [r7, #4]
20000206:	685b      	ldr	r3, [r3, #4]
20000208:	425a      	negs	r2, r3
2000020a:	687b      	ldr	r3, [r7, #4]
2000020c:	605a      	str	r2, [r3, #4]
2000020e:	e035      	b.n	2000027c <move_ball+0x124>
		} else {
			// Left player lost
			ascii_ctrl_bit_set(2);
20000210:	2002      	movs	r0, #2
20000212:	f000 fcd7 	bl	20000bc4 <ascii_ctrl_bit_set>
			goToXY(1,1);
20000216:	2101      	movs	r1, #1
20000218:	2001      	movs	r0, #1
2000021a:	f000 fe99 	bl	20000f50 <goToXY>
			char *s;
			char test1[] = "Right player won! ";
2000021e:	231c      	movs	r3, #28
20000220:	18fb      	adds	r3, r7, r3
20000222:	4a47      	ldr	r2, [pc, #284]	; (20000340 <move_ball+0x1e8>)
20000224:	ca13      	ldmia	r2!, {r0, r1, r4}
20000226:	c313      	stmia	r3!, {r0, r1, r4}
20000228:	6811      	ldr	r1, [r2, #0]
2000022a:	6019      	str	r1, [r3, #0]
2000022c:	8891      	ldrh	r1, [r2, #4]
2000022e:	8099      	strh	r1, [r3, #4]
20000230:	7992      	ldrb	r2, [r2, #6]
20000232:	719a      	strb	r2, [r3, #6]
			s = test1;
20000234:	231c      	movs	r3, #28
20000236:	18fb      	adds	r3, r7, r3
20000238:	63fb      	str	r3, [r7, #60]	; 0x3c
			while(*s) {
2000023a:	e006      	b.n	2000024a <move_ball+0xf2>
				ascii_write_char(*s++);
2000023c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
2000023e:	1c5a      	adds	r2, r3, #1
20000240:	63fa      	str	r2, [r7, #60]	; 0x3c
20000242:	781b      	ldrb	r3, [r3, #0]
20000244:	0018      	movs	r0, r3
20000246:	f000 fe65 	bl	20000f14 <ascii_write_char>
			while(*s) {
2000024a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
2000024c:	781b      	ldrb	r3, [r3, #0]
2000024e:	2b00      	cmp	r3, #0
20000250:	d1f4      	bne.n	2000023c <move_ball+0xe4>
			}
			graphics_ctrl_bit_clear(B_SELECT);
20000252:	2004      	movs	r0, #4
20000254:	f000 f894 	bl	20000380 <graphics_ctrl_bit_clear>
			
			delay_milli(500);
20000258:	23fa      	movs	r3, #250	; 0xfa
2000025a:	005b      	lsls	r3, r3, #1
2000025c:	0018      	movs	r0, r3
2000025e:	f000 fbc1 	bl	200009e4 <delay_milli>
			this->posX = 63;
20000262:	687b      	ldr	r3, [r7, #4]
20000264:	223f      	movs	r2, #63	; 0x3f
20000266:	60da      	str	r2, [r3, #12]
			this->dirX = -this->dirX;
20000268:	687b      	ldr	r3, [r7, #4]
2000026a:	685b      	ldr	r3, [r3, #4]
2000026c:	425a      	negs	r2, r3
2000026e:	687b      	ldr	r3, [r7, #4]
20000270:	605a      	str	r2, [r3, #4]
			this->dirY = -this->dirY;
20000272:	687b      	ldr	r3, [r7, #4]
20000274:	689b      	ldr	r3, [r3, #8]
20000276:	425a      	negs	r2, r3
20000278:	687b      	ldr	r3, [r7, #4]
2000027a:	609a      	str	r2, [r3, #8]
		}
	}
	
	// Collision right paddle
	if(this->posX >= rp->posX) {
2000027c:	687b      	ldr	r3, [r7, #4]
2000027e:	68da      	ldr	r2, [r3, #12]
20000280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000282:	68db      	ldr	r3, [r3, #12]
20000284:	429a      	cmp	r2, r3
20000286:	db4e      	blt.n	20000326 <move_ball+0x1ce>
		if((this->posY >= rp->posY) && (this->posY <= rp->posY + rp->geo->sizeY)) {
20000288:	687b      	ldr	r3, [r7, #4]
2000028a:	691a      	ldr	r2, [r3, #16]
2000028c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000028e:	691b      	ldr	r3, [r3, #16]
20000290:	429a      	cmp	r2, r3
20000292:	db14      	blt.n	200002be <move_ball+0x166>
20000294:	687b      	ldr	r3, [r7, #4]
20000296:	691a      	ldr	r2, [r3, #16]
20000298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000029a:	6919      	ldr	r1, [r3, #16]
2000029c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000029e:	681b      	ldr	r3, [r3, #0]
200002a0:	689b      	ldr	r3, [r3, #8]
200002a2:	18cb      	adds	r3, r1, r3
200002a4:	429a      	cmp	r2, r3
200002a6:	dc0a      	bgt.n	200002be <move_ball+0x166>
			this->posX = rp->posX - 1;
200002a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200002aa:	68db      	ldr	r3, [r3, #12]
200002ac:	1e5a      	subs	r2, r3, #1
200002ae:	687b      	ldr	r3, [r7, #4]
200002b0:	60da      	str	r2, [r3, #12]
			this->dirX = -this->dirX;
200002b2:	687b      	ldr	r3, [r7, #4]
200002b4:	685b      	ldr	r3, [r3, #4]
200002b6:	425a      	negs	r2, r3
200002b8:	687b      	ldr	r3, [r7, #4]
200002ba:	605a      	str	r2, [r3, #4]
200002bc:	e033      	b.n	20000326 <move_ball+0x1ce>
		} else {
			// Right player lost
			ascii_ctrl_bit_set(2);
200002be:	2002      	movs	r0, #2
200002c0:	f000 fc80 	bl	20000bc4 <ascii_ctrl_bit_set>
			goToXY(1,1);
200002c4:	2101      	movs	r1, #1
200002c6:	2001      	movs	r0, #1
200002c8:	f000 fe42 	bl	20000f50 <goToXY>
			char *s;
			char test1[] = "Left player won!";
200002cc:	2308      	movs	r3, #8
200002ce:	18fb      	adds	r3, r7, r3
200002d0:	4a1c      	ldr	r2, [pc, #112]	; (20000344 <move_ball+0x1ec>)
200002d2:	ca13      	ldmia	r2!, {r0, r1, r4}
200002d4:	c313      	stmia	r3!, {r0, r1, r4}
200002d6:	6811      	ldr	r1, [r2, #0]
200002d8:	6019      	str	r1, [r3, #0]
200002da:	7912      	ldrb	r2, [r2, #4]
200002dc:	711a      	strb	r2, [r3, #4]
			s = test1;
200002de:	2308      	movs	r3, #8
200002e0:	18fb      	adds	r3, r7, r3
200002e2:	63bb      	str	r3, [r7, #56]	; 0x38
			while(*s) {
200002e4:	e006      	b.n	200002f4 <move_ball+0x19c>
				ascii_write_char(*s++);
200002e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200002e8:	1c5a      	adds	r2, r3, #1
200002ea:	63ba      	str	r2, [r7, #56]	; 0x38
200002ec:	781b      	ldrb	r3, [r3, #0]
200002ee:	0018      	movs	r0, r3
200002f0:	f000 fe10 	bl	20000f14 <ascii_write_char>
			while(*s) {
200002f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200002f6:	781b      	ldrb	r3, [r3, #0]
200002f8:	2b00      	cmp	r3, #0
200002fa:	d1f4      	bne.n	200002e6 <move_ball+0x18e>
			}
			graphics_ctrl_bit_clear(B_SELECT);
200002fc:	2004      	movs	r0, #4
200002fe:	f000 f83f 	bl	20000380 <graphics_ctrl_bit_clear>
			
			delay_milli(500);
20000302:	23fa      	movs	r3, #250	; 0xfa
20000304:	005b      	lsls	r3, r3, #1
20000306:	0018      	movs	r0, r3
20000308:	f000 fb6c 	bl	200009e4 <delay_milli>
			this->posX = 63;
2000030c:	687b      	ldr	r3, [r7, #4]
2000030e:	223f      	movs	r2, #63	; 0x3f
20000310:	60da      	str	r2, [r3, #12]
			this->dirX = -this->dirX;
20000312:	687b      	ldr	r3, [r7, #4]
20000314:	685b      	ldr	r3, [r3, #4]
20000316:	425a      	negs	r2, r3
20000318:	687b      	ldr	r3, [r7, #4]
2000031a:	605a      	str	r2, [r3, #4]
			this->dirY = -this->dirY;
2000031c:	687b      	ldr	r3, [r7, #4]
2000031e:	689b      	ldr	r3, [r3, #8]
20000320:	425a      	negs	r2, r3
20000322:	687b      	ldr	r3, [r7, #4]
20000324:	609a      	str	r2, [r3, #8]
		}
	}
	
	this->draw(this);
20000326:	687b      	ldr	r3, [r7, #4]
20000328:	695b      	ldr	r3, [r3, #20]
2000032a:	687a      	ldr	r2, [r7, #4]
2000032c:	0010      	movs	r0, r2
2000032e:	4798      	blx	r3
20000330:	46c0      	nop			; (mov r8, r8)
20000332:	46bd      	mov	sp, r7
20000334:	b011      	add	sp, #68	; 0x44
20000336:	bd90      	pop	{r4, r7, pc}
20000338:	2000116c 	andcs	r1, r0, ip, ror #2
2000033c:	20001190 	mulcs	r0, r0, r1
20000340:	200011b8 			; <UNDEFINED> instruction: 0x200011b8
20000344:	200011cc 	andcs	r1, r0, ip, asr #3

20000348 <graphics_ctrl_bit_set>:
#include "GPIOE.h"


typedef unsigned char uint8_t;

void graphics_ctrl_bit_set(uint8_t x){
20000348:	b580      	push	{r7, lr}
2000034a:	b082      	sub	sp, #8
2000034c:	af00      	add	r7, sp, #0
2000034e:	0002      	movs	r2, r0
20000350:	1dfb      	adds	r3, r7, #7
20000352:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= (x & ~B_SELECT);
20000354:	4909      	ldr	r1, [pc, #36]	; (2000037c <graphics_ctrl_bit_set+0x34>)
20000356:	4b09      	ldr	r3, [pc, #36]	; (2000037c <graphics_ctrl_bit_set+0x34>)
20000358:	781b      	ldrb	r3, [r3, #0]
2000035a:	b2db      	uxtb	r3, r3
2000035c:	b25a      	sxtb	r2, r3
2000035e:	1dfb      	adds	r3, r7, #7
20000360:	781b      	ldrb	r3, [r3, #0]
20000362:	b25b      	sxtb	r3, r3
20000364:	2004      	movs	r0, #4
20000366:	4383      	bics	r3, r0
20000368:	b25b      	sxtb	r3, r3
2000036a:	4313      	orrs	r3, r2
2000036c:	b25b      	sxtb	r3, r3
2000036e:	b2db      	uxtb	r3, r3
20000370:	700b      	strb	r3, [r1, #0]
}
20000372:	46c0      	nop			; (mov r8, r8)
20000374:	46bd      	mov	sp, r7
20000376:	b002      	add	sp, #8
20000378:	bd80      	pop	{r7, pc}
2000037a:	46c0      	nop			; (mov r8, r8)
2000037c:	40021014 	andmi	r1, r2, r4, lsl r0

20000380 <graphics_ctrl_bit_clear>:

void graphics_ctrl_bit_clear(uint8_t x){
20000380:	b580      	push	{r7, lr}
20000382:	b082      	sub	sp, #8
20000384:	af00      	add	r7, sp, #0
20000386:	0002      	movs	r2, r0
20000388:	1dfb      	adds	r3, r7, #7
2000038a:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ~x;
2000038c:	4908      	ldr	r1, [pc, #32]	; (200003b0 <graphics_ctrl_bit_clear+0x30>)
2000038e:	4b08      	ldr	r3, [pc, #32]	; (200003b0 <graphics_ctrl_bit_clear+0x30>)
20000390:	781b      	ldrb	r3, [r3, #0]
20000392:	b2db      	uxtb	r3, r3
20000394:	b25b      	sxtb	r3, r3
20000396:	1dfa      	adds	r2, r7, #7
20000398:	7812      	ldrb	r2, [r2, #0]
2000039a:	b252      	sxtb	r2, r2
2000039c:	43d2      	mvns	r2, r2
2000039e:	b252      	sxtb	r2, r2
200003a0:	4013      	ands	r3, r2
200003a2:	b25b      	sxtb	r3, r3
200003a4:	b2db      	uxtb	r3, r3
200003a6:	700b      	strb	r3, [r1, #0]
}
200003a8:	46c0      	nop			; (mov r8, r8)
200003aa:	46bd      	mov	sp, r7
200003ac:	b002      	add	sp, #8
200003ae:	bd80      	pop	{r7, pc}
200003b0:	40021014 	andmi	r1, r2, r4, lsl r0

200003b4 <select_controller>:

void select_controller(uint8_t controller){
200003b4:	b580      	push	{r7, lr}
200003b6:	b082      	sub	sp, #8
200003b8:	af00      	add	r7, sp, #0
200003ba:	0002      	movs	r2, r0
200003bc:	1dfb      	adds	r3, r7, #7
200003be:	701a      	strb	r2, [r3, #0]
    if(controller == 0) {
200003c0:	1dfb      	adds	r3, r7, #7
200003c2:	781b      	ldrb	r3, [r3, #0]
200003c4:	2b00      	cmp	r3, #0
200003c6:	d106      	bne.n	200003d6 <select_controller+0x22>
        graphics_ctrl_bit_clear(B_CS1);
200003c8:	2008      	movs	r0, #8
200003ca:	f7ff ffd9 	bl	20000380 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
200003ce:	2010      	movs	r0, #16
200003d0:	f7ff ffd6 	bl	20000380 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
    } else if(controller == B_CS2) {
        graphics_ctrl_bit_clear(B_CS1);
        graphics_ctrl_bit_set(B_CS2);
    }
}
200003d4:	e01f      	b.n	20000416 <select_controller+0x62>
    } else if(controller == (B_CS1 | B_CS2)) {
200003d6:	1dfb      	adds	r3, r7, #7
200003d8:	781b      	ldrb	r3, [r3, #0]
200003da:	2b18      	cmp	r3, #24
200003dc:	d106      	bne.n	200003ec <select_controller+0x38>
        graphics_ctrl_bit_set(B_CS1);
200003de:	2008      	movs	r0, #8
200003e0:	f7ff ffb2 	bl	20000348 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_set(B_CS2);
200003e4:	2010      	movs	r0, #16
200003e6:	f7ff ffaf 	bl	20000348 <graphics_ctrl_bit_set>
}
200003ea:	e014      	b.n	20000416 <select_controller+0x62>
    } else if(controller == B_CS1) {
200003ec:	1dfb      	adds	r3, r7, #7
200003ee:	781b      	ldrb	r3, [r3, #0]
200003f0:	2b08      	cmp	r3, #8
200003f2:	d106      	bne.n	20000402 <select_controller+0x4e>
        graphics_ctrl_bit_set(B_CS1);
200003f4:	2008      	movs	r0, #8
200003f6:	f7ff ffa7 	bl	20000348 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_clear(B_CS2);
200003fa:	2010      	movs	r0, #16
200003fc:	f7ff ffc0 	bl	20000380 <graphics_ctrl_bit_clear>
}
20000400:	e009      	b.n	20000416 <select_controller+0x62>
    } else if(controller == B_CS2) {
20000402:	1dfb      	adds	r3, r7, #7
20000404:	781b      	ldrb	r3, [r3, #0]
20000406:	2b10      	cmp	r3, #16
20000408:	d105      	bne.n	20000416 <select_controller+0x62>
        graphics_ctrl_bit_clear(B_CS1);
2000040a:	2008      	movs	r0, #8
2000040c:	f7ff ffb8 	bl	20000380 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_set(B_CS2);
20000410:	2010      	movs	r0, #16
20000412:	f7ff ff99 	bl	20000348 <graphics_ctrl_bit_set>
}
20000416:	46c0      	nop			; (mov r8, r8)
20000418:	46bd      	mov	sp, r7
2000041a:	b002      	add	sp, #8
2000041c:	bd80      	pop	{r7, pc}

2000041e <graphic_wait_ready>:

void graphic_wait_ready(){
2000041e:	b580      	push	{r7, lr}
20000420:	b082      	sub	sp, #8
20000422:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_clear(B_E);
20000424:	2040      	movs	r0, #64	; 0x40
20000426:	f7ff ffab 	bl	20000380 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
2000042a:	4b15      	ldr	r3, [pc, #84]	; (20000480 <graphic_wait_ready+0x62>)
2000042c:	4a15      	ldr	r2, [pc, #84]	; (20000484 <graphic_wait_ready+0x66>)
2000042e:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_RS);
20000430:	2001      	movs	r0, #1
20000432:	f7ff ffa5 	bl	20000380 <graphics_ctrl_bit_clear>
    graphics_ctrl_bit_set(B_RW);
20000436:	2002      	movs	r0, #2
20000438:	f7ff ff86 	bl	20000348 <graphics_ctrl_bit_set>
    delay_500ns();
2000043c:	f000 fae1 	bl	20000a02 <delay_500ns>
    
    while(1) { // Wait for display not to be busy
        graphics_ctrl_bit_set(B_E);
20000440:	2040      	movs	r0, #64	; 0x40
20000442:	f7ff ff81 	bl	20000348 <graphics_ctrl_bit_set>
        delay_500ns();
20000446:	f000 fadc 	bl	20000a02 <delay_500ns>
		unsigned char busy = *GPIO_E_IDR_HIGH;
2000044a:	4a0f      	ldr	r2, [pc, #60]	; (20000488 <graphic_wait_ready+0x6a>)
2000044c:	1dfb      	adds	r3, r7, #7
2000044e:	7812      	ldrb	r2, [r2, #0]
20000450:	701a      	strb	r2, [r3, #0]
        graphics_ctrl_bit_clear(B_E);
20000452:	2040      	movs	r0, #64	; 0x40
20000454:	f7ff ff94 	bl	20000380 <graphics_ctrl_bit_clear>
        delay_500ns();
20000458:	f000 fad3 	bl	20000a02 <delay_500ns>
        //unsigned char i = *GPIO_IDR_HIGH;
        if((busy & LCD_BUSY) == 0) {
2000045c:	1dfb      	adds	r3, r7, #7
2000045e:	781b      	ldrb	r3, [r3, #0]
20000460:	b25b      	sxtb	r3, r3
20000462:	2b00      	cmp	r3, #0
20000464:	da00      	bge.n	20000468 <graphic_wait_ready+0x4a>
    while(1) { // Wait for display not to be busy
20000466:	e7eb      	b.n	20000440 <graphic_wait_ready+0x22>
            break;
20000468:	46c0      	nop			; (mov r8, r8)
        }
    }
    graphics_ctrl_bit_set(B_E);
2000046a:	2040      	movs	r0, #64	; 0x40
2000046c:	f7ff ff6c 	bl	20000348 <graphics_ctrl_bit_set>
    *GPIO_E_MODER = 0x55555555;
20000470:	4b03      	ldr	r3, [pc, #12]	; (20000480 <graphic_wait_ready+0x62>)
20000472:	4a06      	ldr	r2, [pc, #24]	; (2000048c <graphic_wait_ready+0x6e>)
20000474:	601a      	str	r2, [r3, #0]
    
}
20000476:	46c0      	nop			; (mov r8, r8)
20000478:	46bd      	mov	sp, r7
2000047a:	b002      	add	sp, #8
2000047c:	bd80      	pop	{r7, pc}
2000047e:	46c0      	nop			; (mov r8, r8)
20000480:	40021000 	andmi	r1, r2, r0
20000484:	00005555 	andeq	r5, r0, r5, asr r5
20000488:	40021011 	andmi	r1, r2, r1, lsl r0
2000048c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000490 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000490:	b580      	push	{r7, lr}
20000492:	b084      	sub	sp, #16
20000494:	af00      	add	r7, sp, #0
20000496:	0002      	movs	r2, r0
20000498:	1dfb      	adds	r3, r7, #7
2000049a:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
2000049c:	2040      	movs	r0, #64	; 0x40
2000049e:	f7ff ff6f 	bl	20000380 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
200004a2:	4b1b      	ldr	r3, [pc, #108]	; (20000510 <graphic_read+0x80>)
200004a4:	4a1b      	ldr	r2, [pc, #108]	; (20000514 <graphic_read+0x84>)
200004a6:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_set(B_RS | B_RW);
200004a8:	2003      	movs	r0, #3
200004aa:	f7ff ff4d 	bl	20000348 <graphics_ctrl_bit_set>
    select_controller(controller);
200004ae:	1dfb      	adds	r3, r7, #7
200004b0:	781b      	ldrb	r3, [r3, #0]
200004b2:	0018      	movs	r0, r3
200004b4:	f7ff ff7e 	bl	200003b4 <select_controller>
    delay_500ns();
200004b8:	f000 faa3 	bl	20000a02 <delay_500ns>
    graphics_ctrl_bit_set(B_E);
200004bc:	2040      	movs	r0, #64	; 0x40
200004be:	f7ff ff43 	bl	20000348 <graphics_ctrl_bit_set>
    delay_500ns();
200004c2:	f000 fa9e 	bl	20000a02 <delay_500ns>
    
    uint8_t RV = *GPIO_E_IDR_HIGH;
200004c6:	4a14      	ldr	r2, [pc, #80]	; (20000518 <graphic_read+0x88>)
200004c8:	230f      	movs	r3, #15
200004ca:	18fb      	adds	r3, r7, r3
200004cc:	7812      	ldrb	r2, [r2, #0]
200004ce:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200004d0:	2040      	movs	r0, #64	; 0x40
200004d2:	f7ff ff55 	bl	20000380 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
200004d6:	4b0e      	ldr	r3, [pc, #56]	; (20000510 <graphic_read+0x80>)
200004d8:	4a10      	ldr	r2, [pc, #64]	; (2000051c <graphic_read+0x8c>)
200004da:	601a      	str	r2, [r3, #0]
    
    if(controller == B_CS1){
200004dc:	1dfb      	adds	r3, r7, #7
200004de:	781b      	ldrb	r3, [r3, #0]
200004e0:	2b08      	cmp	r3, #8
200004e2:	d104      	bne.n	200004ee <graphic_read+0x5e>
        select_controller(B_CS1);
200004e4:	2008      	movs	r0, #8
200004e6:	f7ff ff65 	bl	200003b4 <select_controller>
        graphic_wait_ready();
200004ea:	f7ff ff98 	bl	2000041e <graphic_wait_ready>
    }
    
    if(controller == B_CS2){
200004ee:	1dfb      	adds	r3, r7, #7
200004f0:	781b      	ldrb	r3, [r3, #0]
200004f2:	2b10      	cmp	r3, #16
200004f4:	d104      	bne.n	20000500 <graphic_read+0x70>
        select_controller(B_CS2);
200004f6:	2010      	movs	r0, #16
200004f8:	f7ff ff5c 	bl	200003b4 <select_controller>
        graphic_wait_ready();
200004fc:	f7ff ff8f 	bl	2000041e <graphic_wait_ready>
    }
    
    return RV;
20000500:	230f      	movs	r3, #15
20000502:	18fb      	adds	r3, r7, r3
20000504:	781b      	ldrb	r3, [r3, #0]
    
}
20000506:	0018      	movs	r0, r3
20000508:	46bd      	mov	sp, r7
2000050a:	b004      	add	sp, #16
2000050c:	bd80      	pop	{r7, pc}
2000050e:	46c0      	nop			; (mov r8, r8)
20000510:	40021000 	andmi	r1, r2, r0
20000514:	00005555 	andeq	r5, r0, r5, asr r5
20000518:	40021011 	andmi	r1, r2, r1, lsl r0
2000051c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000520 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000520:	b580      	push	{r7, lr}
20000522:	b082      	sub	sp, #8
20000524:	af00      	add	r7, sp, #0
20000526:	0002      	movs	r2, r0
20000528:	1dfb      	adds	r3, r7, #7
2000052a:	701a      	strb	r2, [r3, #0]
2000052c:	1dbb      	adds	r3, r7, #6
2000052e:	1c0a      	adds	r2, r1, #0
20000530:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
20000532:	4a1a      	ldr	r2, [pc, #104]	; (2000059c <graphic_write+0x7c>)
20000534:	1dfb      	adds	r3, r7, #7
20000536:	781b      	ldrb	r3, [r3, #0]
20000538:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
2000053a:	1dbb      	adds	r3, r7, #6
2000053c:	781b      	ldrb	r3, [r3, #0]
2000053e:	0018      	movs	r0, r3
20000540:	f7ff ff38 	bl	200003b4 <select_controller>
    delay_500ns();
20000544:	f000 fa5d 	bl	20000a02 <delay_500ns>
    graphics_ctrl_bit_set(B_E);
20000548:	2040      	movs	r0, #64	; 0x40
2000054a:	f7ff fefd 	bl	20000348 <graphics_ctrl_bit_set>
    delay_500ns();
2000054e:	f000 fa58 	bl	20000a02 <delay_500ns>
    graphics_ctrl_bit_clear(B_E);
20000552:	2040      	movs	r0, #64	; 0x40
20000554:	f7ff ff14 	bl	20000380 <graphics_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000558:	1dbb      	adds	r3, r7, #6
2000055a:	781b      	ldrb	r3, [r3, #0]
2000055c:	2208      	movs	r2, #8
2000055e:	4013      	ands	r3, r2
20000560:	d004      	beq.n	2000056c <graphic_write+0x4c>
        select_controller(B_CS1);
20000562:	2008      	movs	r0, #8
20000564:	f7ff ff26 	bl	200003b4 <select_controller>
        graphic_wait_ready();
20000568:	f7ff ff59 	bl	2000041e <graphic_wait_ready>
    }
    
    if(controller & B_CS2){
2000056c:	1dbb      	adds	r3, r7, #6
2000056e:	781b      	ldrb	r3, [r3, #0]
20000570:	2210      	movs	r2, #16
20000572:	4013      	ands	r3, r2
20000574:	d004      	beq.n	20000580 <graphic_write+0x60>
        select_controller(B_CS2);
20000576:	2010      	movs	r0, #16
20000578:	f7ff ff1c 	bl	200003b4 <select_controller>
        graphic_wait_ready();
2000057c:	f7ff ff4f 	bl	2000041e <graphic_wait_ready>
    }
    
    *GPIO_E_ODR_HIGH = 0;
20000580:	4b06      	ldr	r3, [pc, #24]	; (2000059c <graphic_write+0x7c>)
20000582:	2200      	movs	r2, #0
20000584:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_set(B_E);
20000586:	2040      	movs	r0, #64	; 0x40
20000588:	f7ff fede 	bl	20000348 <graphics_ctrl_bit_set>
    select_controller(0);
2000058c:	2000      	movs	r0, #0
2000058e:	f7ff ff11 	bl	200003b4 <select_controller>
}
20000592:	46c0      	nop			; (mov r8, r8)
20000594:	46bd      	mov	sp, r7
20000596:	b002      	add	sp, #8
20000598:	bd80      	pop	{r7, pc}
2000059a:	46c0      	nop			; (mov r8, r8)
2000059c:	40021015 	andmi	r1, r2, r5, lsl r0

200005a0 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
200005a0:	b580      	push	{r7, lr}
200005a2:	b082      	sub	sp, #8
200005a4:	af00      	add	r7, sp, #0
200005a6:	0002      	movs	r2, r0
200005a8:	1dfb      	adds	r3, r7, #7
200005aa:	701a      	strb	r2, [r3, #0]
200005ac:	1dbb      	adds	r3, r7, #6
200005ae:	1c0a      	adds	r2, r1, #0
200005b0:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200005b2:	2040      	movs	r0, #64	; 0x40
200005b4:	f7ff fee4 	bl	20000380 <graphics_ctrl_bit_clear>
    select_controller(controller);
200005b8:	1dbb      	adds	r3, r7, #6
200005ba:	781b      	ldrb	r3, [r3, #0]
200005bc:	0018      	movs	r0, r3
200005be:	f7ff fef9 	bl	200003b4 <select_controller>
    graphics_ctrl_bit_clear(B_RS | B_RW);
200005c2:	2003      	movs	r0, #3
200005c4:	f7ff fedc 	bl	20000380 <graphics_ctrl_bit_clear>
    graphic_write(command, controller);
200005c8:	1dbb      	adds	r3, r7, #6
200005ca:	781a      	ldrb	r2, [r3, #0]
200005cc:	1dfb      	adds	r3, r7, #7
200005ce:	781b      	ldrb	r3, [r3, #0]
200005d0:	0011      	movs	r1, r2
200005d2:	0018      	movs	r0, r3
200005d4:	f7ff ffa4 	bl	20000520 <graphic_write>
}
200005d8:	46c0      	nop			; (mov r8, r8)
200005da:	46bd      	mov	sp, r7
200005dc:	b002      	add	sp, #8
200005de:	bd80      	pop	{r7, pc}

200005e0 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200005e0:	b580      	push	{r7, lr}
200005e2:	b082      	sub	sp, #8
200005e4:	af00      	add	r7, sp, #0
200005e6:	0002      	movs	r2, r0
200005e8:	1dfb      	adds	r3, r7, #7
200005ea:	701a      	strb	r2, [r3, #0]
200005ec:	1dbb      	adds	r3, r7, #6
200005ee:	1c0a      	adds	r2, r1, #0
200005f0:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200005f2:	2040      	movs	r0, #64	; 0x40
200005f4:	f7ff fec4 	bl	20000380 <graphics_ctrl_bit_clear>
    select_controller(controller);
200005f8:	1dbb      	adds	r3, r7, #6
200005fa:	781b      	ldrb	r3, [r3, #0]
200005fc:	0018      	movs	r0, r3
200005fe:	f7ff fed9 	bl	200003b4 <select_controller>
    graphics_ctrl_bit_set(B_RS);
20000602:	2001      	movs	r0, #1
20000604:	f7ff fea0 	bl	20000348 <graphics_ctrl_bit_set>
    graphics_ctrl_bit_clear(B_RW);
20000608:	2002      	movs	r0, #2
2000060a:	f7ff feb9 	bl	20000380 <graphics_ctrl_bit_clear>
    graphic_write(data, controller);
2000060e:	1dbb      	adds	r3, r7, #6
20000610:	781a      	ldrb	r2, [r3, #0]
20000612:	1dfb      	adds	r3, r7, #7
20000614:	781b      	ldrb	r3, [r3, #0]
20000616:	0011      	movs	r1, r2
20000618:	0018      	movs	r0, r3
2000061a:	f7ff ff81 	bl	20000520 <graphic_write>
}
2000061e:	46c0      	nop			; (mov r8, r8)
20000620:	46bd      	mov	sp, r7
20000622:	b002      	add	sp, #8
20000624:	bd80      	pop	{r7, pc}

20000626 <graphics_read_data>:

uint8_t graphics_read_data(uint8_t controller){
20000626:	b580      	push	{r7, lr}
20000628:	b082      	sub	sp, #8
2000062a:	af00      	add	r7, sp, #0
2000062c:	0002      	movs	r2, r0
2000062e:	1dfb      	adds	r3, r7, #7
20000630:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
20000632:	1dfb      	adds	r3, r7, #7
20000634:	781b      	ldrb	r3, [r3, #0]
20000636:	0018      	movs	r0, r3
20000638:	f7ff ff2a 	bl	20000490 <graphic_read>
    return graphic_read(controller);
2000063c:	1dfb      	adds	r3, r7, #7
2000063e:	781b      	ldrb	r3, [r3, #0]
20000640:	0018      	movs	r0, r3
20000642:	f7ff ff25 	bl	20000490 <graphic_read>
20000646:	0003      	movs	r3, r0
}
20000648:	0018      	movs	r0, r3
2000064a:	46bd      	mov	sp, r7
2000064c:	b002      	add	sp, #8
2000064e:	bd80      	pop	{r7, pc}

20000650 <graphic_initialize>:

void graphic_initialize(void){
20000650:	b580      	push	{r7, lr}
20000652:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_set(B_E);
20000654:	2040      	movs	r0, #64	; 0x40
20000656:	f7ff fe77 	bl	20000348 <graphics_ctrl_bit_set>
    graphics_ctrl_bit_set(B_SELECT);
2000065a:	2004      	movs	r0, #4
2000065c:	f7ff fe74 	bl	20000348 <graphics_ctrl_bit_set>
    delay_micro(10);
20000660:	200a      	movs	r0, #10
20000662:	f000 f9a9 	bl	200009b8 <delay_micro>
    graphics_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000666:	2078      	movs	r0, #120	; 0x78
20000668:	f7ff fe8a 	bl	20000380 <graphics_ctrl_bit_clear>
    delay_milli(30);
2000066c:	201e      	movs	r0, #30
2000066e:	f000 f9b9 	bl	200009e4 <delay_milli>
    graphics_ctrl_bit_set(B_RST);
20000672:	2020      	movs	r0, #32
20000674:	f7ff fe68 	bl	20000348 <graphics_ctrl_bit_set>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000678:	2118      	movs	r1, #24
2000067a:	203e      	movs	r0, #62	; 0x3e
2000067c:	f7ff ff90 	bl	200005a0 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000680:	2118      	movs	r1, #24
20000682:	203f      	movs	r0, #63	; 0x3f
20000684:	f7ff ff8c 	bl	200005a0 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000688:	2118      	movs	r1, #24
2000068a:	20c0      	movs	r0, #192	; 0xc0
2000068c:	f7ff ff88 	bl	200005a0 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000690:	2118      	movs	r1, #24
20000692:	2040      	movs	r0, #64	; 0x40
20000694:	f7ff ff84 	bl	200005a0 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000698:	2118      	movs	r1, #24
2000069a:	20b8      	movs	r0, #184	; 0xb8
2000069c:	f7ff ff80 	bl	200005a0 <graphic_write_command>
    select_controller(0);
200006a0:	2000      	movs	r0, #0
200006a2:	f7ff fe87 	bl	200003b4 <select_controller>
}
200006a6:	46c0      	nop			; (mov r8, r8)
200006a8:	46bd      	mov	sp, r7
200006aa:	bd80      	pop	{r7, pc}

200006ac <graphic_clear_screen>:

void graphic_clear_screen(void){
200006ac:	b580      	push	{r7, lr}
200006ae:	b082      	sub	sp, #8
200006b0:	af00      	add	r7, sp, #0
    for(int page = 0; page < 8; page++){
200006b2:	2300      	movs	r3, #0
200006b4:	607b      	str	r3, [r7, #4]
200006b6:	e01e      	b.n	200006f6 <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
200006b8:	687b      	ldr	r3, [r7, #4]
200006ba:	b25b      	sxtb	r3, r3
200006bc:	2248      	movs	r2, #72	; 0x48
200006be:	4252      	negs	r2, r2
200006c0:	4313      	orrs	r3, r2
200006c2:	b25b      	sxtb	r3, r3
200006c4:	b2db      	uxtb	r3, r3
200006c6:	2118      	movs	r1, #24
200006c8:	0018      	movs	r0, r3
200006ca:	f7ff ff69 	bl	200005a0 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
200006ce:	2118      	movs	r1, #24
200006d0:	2040      	movs	r0, #64	; 0x40
200006d2:	f7ff ff65 	bl	200005a0 <graphic_write_command>
        for(int add = 0; add < 64; add++){
200006d6:	2300      	movs	r3, #0
200006d8:	603b      	str	r3, [r7, #0]
200006da:	e006      	b.n	200006ea <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
200006dc:	2118      	movs	r1, #24
200006de:	2000      	movs	r0, #0
200006e0:	f7ff ff7e 	bl	200005e0 <graphic_write_data>
        for(int add = 0; add < 64; add++){
200006e4:	683b      	ldr	r3, [r7, #0]
200006e6:	3301      	adds	r3, #1
200006e8:	603b      	str	r3, [r7, #0]
200006ea:	683b      	ldr	r3, [r7, #0]
200006ec:	2b3f      	cmp	r3, #63	; 0x3f
200006ee:	ddf5      	ble.n	200006dc <graphic_clear_screen+0x30>
    for(int page = 0; page < 8; page++){
200006f0:	687b      	ldr	r3, [r7, #4]
200006f2:	3301      	adds	r3, #1
200006f4:	607b      	str	r3, [r7, #4]
200006f6:	687b      	ldr	r3, [r7, #4]
200006f8:	2b07      	cmp	r3, #7
200006fa:	dddd      	ble.n	200006b8 <graphic_clear_screen+0xc>
        }
    }
    
}
200006fc:	46c0      	nop			; (mov r8, r8)
200006fe:	46bd      	mov	sp, r7
20000700:	b002      	add	sp, #8
20000702:	bd80      	pop	{r7, pc}

20000704 <pixel>:


void pixel(unsigned char x, unsigned char y, unsigned char set) {
20000704:	b590      	push	{r4, r7, lr}
20000706:	b085      	sub	sp, #20
20000708:	af00      	add	r7, sp, #0
2000070a:	0004      	movs	r4, r0
2000070c:	0008      	movs	r0, r1
2000070e:	0011      	movs	r1, r2
20000710:	1dfb      	adds	r3, r7, #7
20000712:	1c22      	adds	r2, r4, #0
20000714:	701a      	strb	r2, [r3, #0]
20000716:	1dbb      	adds	r3, r7, #6
20000718:	1c02      	adds	r2, r0, #0
2000071a:	701a      	strb	r2, [r3, #0]
2000071c:	1d7b      	adds	r3, r7, #5
2000071e:	1c0a      	adds	r2, r1, #0
20000720:	701a      	strb	r2, [r3, #0]
	if(x < 0 || y < 0) return;
	if(x > 127 || y > 63) return;
20000722:	1dfb      	adds	r3, r7, #7
20000724:	781b      	ldrb	r3, [r3, #0]
20000726:	b25b      	sxtb	r3, r3
20000728:	2b00      	cmp	r3, #0
2000072a:	da00      	bge.n	2000072e <pixel+0x2a>
2000072c:	e0ae      	b.n	2000088c <pixel+0x188>
2000072e:	1dbb      	adds	r3, r7, #6
20000730:	781b      	ldrb	r3, [r3, #0]
20000732:	2b3f      	cmp	r3, #63	; 0x3f
20000734:	d900      	bls.n	20000738 <pixel+0x34>
20000736:	e0a9      	b.n	2000088c <pixel+0x188>
	unsigned char mask;
	unsigned char index = y / 8;
20000738:	230d      	movs	r3, #13
2000073a:	18fb      	adds	r3, r7, r3
2000073c:	1dba      	adds	r2, r7, #6
2000073e:	7812      	ldrb	r2, [r2, #0]
20000740:	08d2      	lsrs	r2, r2, #3
20000742:	701a      	strb	r2, [r3, #0]
	
	switch(y % 8) {
20000744:	1dbb      	adds	r3, r7, #6
20000746:	781b      	ldrb	r3, [r3, #0]
20000748:	2207      	movs	r2, #7
2000074a:	4013      	ands	r3, r2
2000074c:	2b07      	cmp	r3, #7
2000074e:	d82c      	bhi.n	200007aa <pixel+0xa6>
20000750:	009a      	lsls	r2, r3, #2
20000752:	4b50      	ldr	r3, [pc, #320]	; (20000894 <pixel+0x190>)
20000754:	18d3      	adds	r3, r2, r3
20000756:	681b      	ldr	r3, [r3, #0]
20000758:	469f      	mov	pc, r3
		case 0: mask = 1; break;
2000075a:	230f      	movs	r3, #15
2000075c:	18fb      	adds	r3, r7, r3
2000075e:	2201      	movs	r2, #1
20000760:	701a      	strb	r2, [r3, #0]
20000762:	e022      	b.n	200007aa <pixel+0xa6>
		case 1: mask = 2; break;
20000764:	230f      	movs	r3, #15
20000766:	18fb      	adds	r3, r7, r3
20000768:	2202      	movs	r2, #2
2000076a:	701a      	strb	r2, [r3, #0]
2000076c:	e01d      	b.n	200007aa <pixel+0xa6>
		case 2: mask = 4; break;
2000076e:	230f      	movs	r3, #15
20000770:	18fb      	adds	r3, r7, r3
20000772:	2204      	movs	r2, #4
20000774:	701a      	strb	r2, [r3, #0]
20000776:	e018      	b.n	200007aa <pixel+0xa6>
		case 3: mask = 8; break;
20000778:	230f      	movs	r3, #15
2000077a:	18fb      	adds	r3, r7, r3
2000077c:	2208      	movs	r2, #8
2000077e:	701a      	strb	r2, [r3, #0]
20000780:	e013      	b.n	200007aa <pixel+0xa6>
		case 4: mask = 16; break;
20000782:	230f      	movs	r3, #15
20000784:	18fb      	adds	r3, r7, r3
20000786:	2210      	movs	r2, #16
20000788:	701a      	strb	r2, [r3, #0]
2000078a:	e00e      	b.n	200007aa <pixel+0xa6>
		case 5: mask = 32; break;
2000078c:	230f      	movs	r3, #15
2000078e:	18fb      	adds	r3, r7, r3
20000790:	2220      	movs	r2, #32
20000792:	701a      	strb	r2, [r3, #0]
20000794:	e009      	b.n	200007aa <pixel+0xa6>
		case 6: mask = 64; break;
20000796:	230f      	movs	r3, #15
20000798:	18fb      	adds	r3, r7, r3
2000079a:	2240      	movs	r2, #64	; 0x40
2000079c:	701a      	strb	r2, [r3, #0]
2000079e:	e004      	b.n	200007aa <pixel+0xa6>
		case 7: mask = 128; break;
200007a0:	230f      	movs	r3, #15
200007a2:	18fb      	adds	r3, r7, r3
200007a4:	2280      	movs	r2, #128	; 0x80
200007a6:	701a      	strb	r2, [r3, #0]
200007a8:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0) {
200007aa:	1d7b      	adds	r3, r7, #5
200007ac:	781b      	ldrb	r3, [r3, #0]
200007ae:	2b00      	cmp	r3, #0
200007b0:	d106      	bne.n	200007c0 <pixel+0xbc>
		mask = ~mask;
200007b2:	230f      	movs	r3, #15
200007b4:	18fb      	adds	r3, r7, r3
200007b6:	220f      	movs	r2, #15
200007b8:	18ba      	adds	r2, r7, r2
200007ba:	7812      	ldrb	r2, [r2, #0]
200007bc:	43d2      	mvns	r2, r2
200007be:	701a      	strb	r2, [r3, #0]
	}
	
	unsigned char controller;
	if(x > 63) {
200007c0:	1dfb      	adds	r3, r7, #7
200007c2:	781b      	ldrb	r3, [r3, #0]
200007c4:	2b3f      	cmp	r3, #63	; 0x3f
200007c6:	d909      	bls.n	200007dc <pixel+0xd8>
		controller = B_CS2;
200007c8:	230e      	movs	r3, #14
200007ca:	18fb      	adds	r3, r7, r3
200007cc:	2210      	movs	r2, #16
200007ce:	701a      	strb	r2, [r3, #0]
		x = x - 64;
200007d0:	1dfb      	adds	r3, r7, #7
200007d2:	1dfa      	adds	r2, r7, #7
200007d4:	7812      	ldrb	r2, [r2, #0]
200007d6:	3a40      	subs	r2, #64	; 0x40
200007d8:	701a      	strb	r2, [r3, #0]
200007da:	e003      	b.n	200007e4 <pixel+0xe0>
	} else {
		controller = B_CS1;
200007dc:	230e      	movs	r3, #14
200007de:	18fb      	adds	r3, r7, r3
200007e0:	2208      	movs	r2, #8
200007e2:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x, controller);
200007e4:	1dfb      	adds	r3, r7, #7
200007e6:	781b      	ldrb	r3, [r3, #0]
200007e8:	2240      	movs	r2, #64	; 0x40
200007ea:	4313      	orrs	r3, r2
200007ec:	b2da      	uxtb	r2, r3
200007ee:	230e      	movs	r3, #14
200007f0:	18fb      	adds	r3, r7, r3
200007f2:	781b      	ldrb	r3, [r3, #0]
200007f4:	0019      	movs	r1, r3
200007f6:	0010      	movs	r0, r2
200007f8:	f7ff fed2 	bl	200005a0 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200007fc:	230d      	movs	r3, #13
200007fe:	18fb      	adds	r3, r7, r3
20000800:	781b      	ldrb	r3, [r3, #0]
20000802:	2248      	movs	r2, #72	; 0x48
20000804:	4252      	negs	r2, r2
20000806:	4313      	orrs	r3, r2
20000808:	b2da      	uxtb	r2, r3
2000080a:	230e      	movs	r3, #14
2000080c:	18fb      	adds	r3, r7, r3
2000080e:	781b      	ldrb	r3, [r3, #0]
20000810:	0019      	movs	r1, r3
20000812:	0010      	movs	r0, r2
20000814:	f7ff fec4 	bl	200005a0 <graphic_write_command>
	unsigned char temp = graphics_read_data(controller);
20000818:	230c      	movs	r3, #12
2000081a:	18fc      	adds	r4, r7, r3
2000081c:	230e      	movs	r3, #14
2000081e:	18fb      	adds	r3, r7, r3
20000820:	781b      	ldrb	r3, [r3, #0]
20000822:	0018      	movs	r0, r3
20000824:	f7ff feff 	bl	20000626 <graphics_read_data>
20000828:	0003      	movs	r3, r0
2000082a:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
2000082c:	1dfb      	adds	r3, r7, #7
2000082e:	781b      	ldrb	r3, [r3, #0]
20000830:	2240      	movs	r2, #64	; 0x40
20000832:	4313      	orrs	r3, r2
20000834:	b2da      	uxtb	r2, r3
20000836:	230e      	movs	r3, #14
20000838:	18fb      	adds	r3, r7, r3
2000083a:	781b      	ldrb	r3, [r3, #0]
2000083c:	0019      	movs	r1, r3
2000083e:	0010      	movs	r0, r2
20000840:	f7ff feae 	bl	200005a0 <graphic_write_command>
	
	if(set) {
20000844:	1d7b      	adds	r3, r7, #5
20000846:	781b      	ldrb	r3, [r3, #0]
20000848:	2b00      	cmp	r3, #0
2000084a:	d00a      	beq.n	20000862 <pixel+0x15e>
		mask = mask | temp;
2000084c:	230f      	movs	r3, #15
2000084e:	18fb      	adds	r3, r7, r3
20000850:	220f      	movs	r2, #15
20000852:	18b9      	adds	r1, r7, r2
20000854:	220c      	movs	r2, #12
20000856:	18ba      	adds	r2, r7, r2
20000858:	7809      	ldrb	r1, [r1, #0]
2000085a:	7812      	ldrb	r2, [r2, #0]
2000085c:	430a      	orrs	r2, r1
2000085e:	701a      	strb	r2, [r3, #0]
20000860:	e009      	b.n	20000876 <pixel+0x172>
	} else {
		mask = mask & temp;
20000862:	230f      	movs	r3, #15
20000864:	18fb      	adds	r3, r7, r3
20000866:	220f      	movs	r2, #15
20000868:	18ba      	adds	r2, r7, r2
2000086a:	210c      	movs	r1, #12
2000086c:	1879      	adds	r1, r7, r1
2000086e:	7812      	ldrb	r2, [r2, #0]
20000870:	7809      	ldrb	r1, [r1, #0]
20000872:	400a      	ands	r2, r1
20000874:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
20000876:	230e      	movs	r3, #14
20000878:	18fb      	adds	r3, r7, r3
2000087a:	781a      	ldrb	r2, [r3, #0]
2000087c:	230f      	movs	r3, #15
2000087e:	18fb      	adds	r3, r7, r3
20000880:	781b      	ldrb	r3, [r3, #0]
20000882:	0011      	movs	r1, r2
20000884:	0018      	movs	r0, r3
20000886:	f7ff feab 	bl	200005e0 <graphic_write_data>
2000088a:	e000      	b.n	2000088e <pixel+0x18a>
	if(x > 127 || y > 63) return;
2000088c:	46c0      	nop			; (mov r8, r8)
	
}
2000088e:	46bd      	mov	sp, r7
20000890:	b005      	add	sp, #20
20000892:	bd90      	pop	{r4, r7, pc}
20000894:	200011e0 	andcs	r1, r0, r0, ror #3

20000898 <draw_object>:
#include "object.h"
#include "graphic.h"

void draw_object(POBJECT this) {
20000898:	b580      	push	{r7, lr}
2000089a:	b084      	sub	sp, #16
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
200008a0:	2300      	movs	r3, #0
200008a2:	60fb      	str	r3, [r7, #12]
200008a4:	e020      	b.n	200008e8 <draw_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 1);
200008a6:	687b      	ldr	r3, [r7, #4]
200008a8:	681a      	ldr	r2, [r3, #0]
200008aa:	68fb      	ldr	r3, [r7, #12]
200008ac:	3304      	adds	r3, #4
200008ae:	005b      	lsls	r3, r3, #1
200008b0:	18d3      	adds	r3, r2, r3
200008b2:	3304      	adds	r3, #4
200008b4:	781a      	ldrb	r2, [r3, #0]
200008b6:	687b      	ldr	r3, [r7, #4]
200008b8:	68db      	ldr	r3, [r3, #12]
200008ba:	b2db      	uxtb	r3, r3
200008bc:	18d3      	adds	r3, r2, r3
200008be:	b2d8      	uxtb	r0, r3
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	681a      	ldr	r2, [r3, #0]
200008c4:	68fb      	ldr	r3, [r7, #12]
200008c6:	3304      	adds	r3, #4
200008c8:	005b      	lsls	r3, r3, #1
200008ca:	18d3      	adds	r3, r2, r3
200008cc:	3305      	adds	r3, #5
200008ce:	781a      	ldrb	r2, [r3, #0]
200008d0:	687b      	ldr	r3, [r7, #4]
200008d2:	691b      	ldr	r3, [r3, #16]
200008d4:	b2db      	uxtb	r3, r3
200008d6:	18d3      	adds	r3, r2, r3
200008d8:	b2db      	uxtb	r3, r3
200008da:	2201      	movs	r2, #1
200008dc:	0019      	movs	r1, r3
200008de:	f7ff ff11 	bl	20000704 <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
200008e2:	68fb      	ldr	r3, [r7, #12]
200008e4:	3301      	adds	r3, #1
200008e6:	60fb      	str	r3, [r7, #12]
200008e8:	68fb      	ldr	r3, [r7, #12]
200008ea:	2b63      	cmp	r3, #99	; 0x63
200008ec:	dddb      	ble.n	200008a6 <draw_object+0xe>
	}
}
200008ee:	46c0      	nop			; (mov r8, r8)
200008f0:	46bd      	mov	sp, r7
200008f2:	b004      	add	sp, #16
200008f4:	bd80      	pop	{r7, pc}

200008f6 <clear_object>:
void clear_object(POBJECT this) {
200008f6:	b580      	push	{r7, lr}
200008f8:	b084      	sub	sp, #16
200008fa:	af00      	add	r7, sp, #0
200008fc:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
200008fe:	2300      	movs	r3, #0
20000900:	60fb      	str	r3, [r7, #12]
20000902:	e020      	b.n	20000946 <clear_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 0);
20000904:	687b      	ldr	r3, [r7, #4]
20000906:	681a      	ldr	r2, [r3, #0]
20000908:	68fb      	ldr	r3, [r7, #12]
2000090a:	3304      	adds	r3, #4
2000090c:	005b      	lsls	r3, r3, #1
2000090e:	18d3      	adds	r3, r2, r3
20000910:	3304      	adds	r3, #4
20000912:	781a      	ldrb	r2, [r3, #0]
20000914:	687b      	ldr	r3, [r7, #4]
20000916:	68db      	ldr	r3, [r3, #12]
20000918:	b2db      	uxtb	r3, r3
2000091a:	18d3      	adds	r3, r2, r3
2000091c:	b2d8      	uxtb	r0, r3
2000091e:	687b      	ldr	r3, [r7, #4]
20000920:	681a      	ldr	r2, [r3, #0]
20000922:	68fb      	ldr	r3, [r7, #12]
20000924:	3304      	adds	r3, #4
20000926:	005b      	lsls	r3, r3, #1
20000928:	18d3      	adds	r3, r2, r3
2000092a:	3305      	adds	r3, #5
2000092c:	781a      	ldrb	r2, [r3, #0]
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	691b      	ldr	r3, [r3, #16]
20000932:	b2db      	uxtb	r3, r3
20000934:	18d3      	adds	r3, r2, r3
20000936:	b2db      	uxtb	r3, r3
20000938:	2200      	movs	r2, #0
2000093a:	0019      	movs	r1, r3
2000093c:	f7ff fee2 	bl	20000704 <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
20000940:	68fb      	ldr	r3, [r7, #12]
20000942:	3301      	adds	r3, #1
20000944:	60fb      	str	r3, [r7, #12]
20000946:	68fb      	ldr	r3, [r7, #12]
20000948:	2b63      	cmp	r3, #99	; 0x63
2000094a:	dddb      	ble.n	20000904 <clear_object+0xe>
	}
}
2000094c:	46c0      	nop			; (mov r8, r8)
2000094e:	46bd      	mov	sp, r7
20000950:	b004      	add	sp, #16
20000952:	bd80      	pop	{r7, pc}

20000954 <set_object_speed>:

void set_object_speed(POBJECT this, int x, int y) {
20000954:	b580      	push	{r7, lr}
20000956:	b084      	sub	sp, #16
20000958:	af00      	add	r7, sp, #0
2000095a:	60f8      	str	r0, [r7, #12]
2000095c:	60b9      	str	r1, [r7, #8]
2000095e:	607a      	str	r2, [r7, #4]
	this->dirX = x;
20000960:	68fb      	ldr	r3, [r7, #12]
20000962:	68ba      	ldr	r2, [r7, #8]
20000964:	605a      	str	r2, [r3, #4]
	this->dirY = y;
20000966:	68fb      	ldr	r3, [r7, #12]
20000968:	687a      	ldr	r2, [r7, #4]
2000096a:	609a      	str	r2, [r3, #8]
2000096c:	46c0      	nop			; (mov r8, r8)
2000096e:	46bd      	mov	sp, r7
20000970:	b004      	add	sp, #16
20000972:	bd80      	pop	{r7, pc}

20000974 <delay_250ns>:
#include "timer.h"

void delay_250ns(void) {
20000974:	b580      	push	{r7, lr}
20000976:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000978:	4b0c      	ldr	r3, [pc, #48]	; (200009ac <delay_250ns+0x38>)
2000097a:	2200      	movs	r2, #0
2000097c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
2000097e:	4b0c      	ldr	r3, [pc, #48]	; (200009b0 <delay_250ns+0x3c>)
20000980:	2231      	movs	r2, #49	; 0x31
20000982:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000984:	4b0b      	ldr	r3, [pc, #44]	; (200009b4 <delay_250ns+0x40>)
20000986:	2200      	movs	r2, #0
20000988:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000098a:	4b08      	ldr	r3, [pc, #32]	; (200009ac <delay_250ns+0x38>)
2000098c:	2205      	movs	r2, #5
2000098e:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
20000990:	46c0      	nop			; (mov r8, r8)
20000992:	4b06      	ldr	r3, [pc, #24]	; (200009ac <delay_250ns+0x38>)
20000994:	681a      	ldr	r2, [r3, #0]
20000996:	2380      	movs	r3, #128	; 0x80
20000998:	025b      	lsls	r3, r3, #9
2000099a:	4013      	ands	r3, r2
2000099c:	d0f9      	beq.n	20000992 <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
2000099e:	4b03      	ldr	r3, [pc, #12]	; (200009ac <delay_250ns+0x38>)
200009a0:	2200      	movs	r2, #0
200009a2:	601a      	str	r2, [r3, #0]
}
200009a4:	46c0      	nop			; (mov r8, r8)
200009a6:	46bd      	mov	sp, r7
200009a8:	bd80      	pop	{r7, pc}
200009aa:	46c0      	nop			; (mov r8, r8)
200009ac:	e000e010 	and	lr, r0, r0, lsl r0
200009b0:	e000e014 	and	lr, r0, r4, lsl r0
200009b4:	e000e018 	and	lr, r0, r8, lsl r0

200009b8 <delay_micro>:

void delay_micro(unsigned int us) {
200009b8:	b580      	push	{r7, lr}
200009ba:	b082      	sub	sp, #8
200009bc:	af00      	add	r7, sp, #0
200009be:	6078      	str	r0, [r7, #4]
	while(us--) {
200009c0:	e007      	b.n	200009d2 <delay_micro+0x1a>
		delay_250ns();
200009c2:	f7ff ffd7 	bl	20000974 <delay_250ns>
		delay_250ns();
200009c6:	f7ff ffd5 	bl	20000974 <delay_250ns>
		delay_250ns();
200009ca:	f7ff ffd3 	bl	20000974 <delay_250ns>
		delay_250ns();
200009ce:	f7ff ffd1 	bl	20000974 <delay_250ns>
	while(us--) {
200009d2:	687b      	ldr	r3, [r7, #4]
200009d4:	1e5a      	subs	r2, r3, #1
200009d6:	607a      	str	r2, [r7, #4]
200009d8:	2b00      	cmp	r3, #0
200009da:	d1f2      	bne.n	200009c2 <delay_micro+0xa>
	}
}
200009dc:	46c0      	nop			; (mov r8, r8)
200009de:	46bd      	mov	sp, r7
200009e0:	b002      	add	sp, #8
200009e2:	bd80      	pop	{r7, pc}

200009e4 <delay_milli>:

void delay_milli(unsigned int ms) {
200009e4:	b580      	push	{r7, lr}
200009e6:	b082      	sub	sp, #8
200009e8:	af00      	add	r7, sp, #0
200009ea:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_micro(ms);
	#else
		delay_micro(1000 * ms);
200009ec:	687b      	ldr	r3, [r7, #4]
200009ee:	22fa      	movs	r2, #250	; 0xfa
200009f0:	0092      	lsls	r2, r2, #2
200009f2:	4353      	muls	r3, r2
200009f4:	0018      	movs	r0, r3
200009f6:	f7ff ffdf 	bl	200009b8 <delay_micro>
	#endif
}
200009fa:	46c0      	nop			; (mov r8, r8)
200009fc:	46bd      	mov	sp, r7
200009fe:	b002      	add	sp, #8
20000a00:	bd80      	pop	{r7, pc}

20000a02 <delay_500ns>:

void delay_500ns(void) {
20000a02:	b580      	push	{r7, lr}
20000a04:	af00      	add	r7, sp, #0
	delay_250ns();
20000a06:	f7ff ffb5 	bl	20000974 <delay_250ns>
	delay_250ns();
20000a0a:	f7ff ffb3 	bl	20000974 <delay_250ns>
}
20000a0e:	46c0      	nop			; (mov r8, r8)
20000a10:	46bd      	mov	sp, r7
20000a12:	bd80      	pop	{r7, pc}

20000a14 <move_paddle>:
	clear_object,
	move_paddle,
	set_object_speed
};

void move_paddle(POBJECT this) {
20000a14:	b580      	push	{r7, lr}
20000a16:	b082      	sub	sp, #8
20000a18:	af00      	add	r7, sp, #0
20000a1a:	6078      	str	r0, [r7, #4]
	clear_object(this);
20000a1c:	687b      	ldr	r3, [r7, #4]
20000a1e:	0018      	movs	r0, r3
20000a20:	f7ff ff69 	bl	200008f6 <clear_object>
	
	// Move paddle in y direction only.
	this->posY += this->dirY;
20000a24:	687b      	ldr	r3, [r7, #4]
20000a26:	691a      	ldr	r2, [r3, #16]
20000a28:	687b      	ldr	r3, [r7, #4]
20000a2a:	689b      	ldr	r3, [r3, #8]
20000a2c:	18d2      	adds	r2, r2, r3
20000a2e:	687b      	ldr	r3, [r7, #4]
20000a30:	611a      	str	r2, [r3, #16]
	
	// Wall collisions todo add width check with paddle.
	if(this->posY < 0) {
20000a32:	687b      	ldr	r3, [r7, #4]
20000a34:	691b      	ldr	r3, [r3, #16]
20000a36:	2b00      	cmp	r3, #0
20000a38:	da03      	bge.n	20000a42 <move_paddle+0x2e>
		this->posY = 0;
20000a3a:	687b      	ldr	r3, [r7, #4]
20000a3c:	2200      	movs	r2, #0
20000a3e:	611a      	str	r2, [r3, #16]
20000a40:	e00e      	b.n	20000a60 <move_paddle+0x4c>
	} else if((this->posY + this->geo->sizeY) > 63) {
20000a42:	687b      	ldr	r3, [r7, #4]
20000a44:	691a      	ldr	r2, [r3, #16]
20000a46:	687b      	ldr	r3, [r7, #4]
20000a48:	681b      	ldr	r3, [r3, #0]
20000a4a:	689b      	ldr	r3, [r3, #8]
20000a4c:	18d3      	adds	r3, r2, r3
20000a4e:	2b3f      	cmp	r3, #63	; 0x3f
20000a50:	dd06      	ble.n	20000a60 <move_paddle+0x4c>
		this->posY = (63 - this->geo->sizeY);
20000a52:	687b      	ldr	r3, [r7, #4]
20000a54:	681b      	ldr	r3, [r3, #0]
20000a56:	689b      	ldr	r3, [r3, #8]
20000a58:	223f      	movs	r2, #63	; 0x3f
20000a5a:	1ad2      	subs	r2, r2, r3
20000a5c:	687b      	ldr	r3, [r7, #4]
20000a5e:	611a      	str	r2, [r3, #16]
	}
	
	this->draw(this);
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	695b      	ldr	r3, [r3, #20]
20000a64:	687a      	ldr	r2, [r7, #4]
20000a66:	0010      	movs	r0, r2
20000a68:	4798      	blx	r3
20000a6a:	46c0      	nop			; (mov r8, r8)
20000a6c:	46bd      	mov	sp, r7
20000a6e:	b002      	add	sp, #8
20000a70:	bd80      	pop	{r7, pc}
	...

20000a74 <activateRow>:
#include "keypad.h"

void activateRow(unsigned int row) {
20000a74:	b580      	push	{r7, lr}
20000a76:	b082      	sub	sp, #8
20000a78:	af00      	add	r7, sp, #0
20000a7a:	6078      	str	r0, [r7, #4]
	switch(row) {
20000a7c:	687b      	ldr	r3, [r7, #4]
20000a7e:	2b04      	cmp	r3, #4
20000a80:	d819      	bhi.n	20000ab6 <activateRow+0x42>
20000a82:	687b      	ldr	r3, [r7, #4]
20000a84:	009a      	lsls	r2, r3, #2
20000a86:	4b0e      	ldr	r3, [pc, #56]	; (20000ac0 <activateRow+0x4c>)
20000a88:	18d3      	adds	r3, r2, r3
20000a8a:	681b      	ldr	r3, [r3, #0]
20000a8c:	469f      	mov	pc, r3
		case 0: *GPIO_D_ODR_HIGH = 0x00; break;
20000a8e:	4b0d      	ldr	r3, [pc, #52]	; (20000ac4 <activateRow+0x50>)
20000a90:	2200      	movs	r2, #0
20000a92:	701a      	strb	r2, [r3, #0]
20000a94:	e00f      	b.n	20000ab6 <activateRow+0x42>
		case 1: *GPIO_D_ODR_HIGH = 0x10; break;
20000a96:	4b0b      	ldr	r3, [pc, #44]	; (20000ac4 <activateRow+0x50>)
20000a98:	2210      	movs	r2, #16
20000a9a:	701a      	strb	r2, [r3, #0]
20000a9c:	e00b      	b.n	20000ab6 <activateRow+0x42>
		case 2: *GPIO_D_ODR_HIGH = 0x20; break;
20000a9e:	4b09      	ldr	r3, [pc, #36]	; (20000ac4 <activateRow+0x50>)
20000aa0:	2220      	movs	r2, #32
20000aa2:	701a      	strb	r2, [r3, #0]
20000aa4:	e007      	b.n	20000ab6 <activateRow+0x42>
		case 3: *GPIO_D_ODR_HIGH = 0x40; break;
20000aa6:	4b07      	ldr	r3, [pc, #28]	; (20000ac4 <activateRow+0x50>)
20000aa8:	2240      	movs	r2, #64	; 0x40
20000aaa:	701a      	strb	r2, [r3, #0]
20000aac:	e003      	b.n	20000ab6 <activateRow+0x42>
		case 4: *GPIO_D_ODR_HIGH = 0x80; break;
20000aae:	4b05      	ldr	r3, [pc, #20]	; (20000ac4 <activateRow+0x50>)
20000ab0:	2280      	movs	r2, #128	; 0x80
20000ab2:	701a      	strb	r2, [r3, #0]
20000ab4:	46c0      	nop			; (mov r8, r8)
	}
}
20000ab6:	46c0      	nop			; (mov r8, r8)
20000ab8:	46bd      	mov	sp, r7
20000aba:	b002      	add	sp, #8
20000abc:	bd80      	pop	{r7, pc}
20000abe:	46c0      	nop			; (mov r8, r8)
20000ac0:	20001200 	andcs	r1, r0, r0, lsl #4
20000ac4:	40020c15 	andmi	r0, r2, r5, lsl ip

20000ac8 <readColumn>:

unsigned char readColumn(void) {
20000ac8:	b580      	push	{r7, lr}
20000aca:	b082      	sub	sp, #8
20000acc:	af00      	add	r7, sp, #0
	unsigned char idr = *GPIO_D_IDR_HIGH;
20000ace:	4a12      	ldr	r2, [pc, #72]	; (20000b18 <readColumn+0x50>)
20000ad0:	1dfb      	adds	r3, r7, #7
20000ad2:	7812      	ldrb	r2, [r2, #0]
20000ad4:	701a      	strb	r2, [r3, #0]
	if(idr & 0x01) return 1;
20000ad6:	1dfb      	adds	r3, r7, #7
20000ad8:	781b      	ldrb	r3, [r3, #0]
20000ada:	2201      	movs	r2, #1
20000adc:	4013      	ands	r3, r2
20000ade:	d001      	beq.n	20000ae4 <readColumn+0x1c>
20000ae0:	2301      	movs	r3, #1
20000ae2:	e015      	b.n	20000b10 <readColumn+0x48>
	if(idr & 0x02) return 2;
20000ae4:	1dfb      	adds	r3, r7, #7
20000ae6:	781b      	ldrb	r3, [r3, #0]
20000ae8:	2202      	movs	r2, #2
20000aea:	4013      	ands	r3, r2
20000aec:	d001      	beq.n	20000af2 <readColumn+0x2a>
20000aee:	2302      	movs	r3, #2
20000af0:	e00e      	b.n	20000b10 <readColumn+0x48>
	if(idr & 0x04) return 3;
20000af2:	1dfb      	adds	r3, r7, #7
20000af4:	781b      	ldrb	r3, [r3, #0]
20000af6:	2204      	movs	r2, #4
20000af8:	4013      	ands	r3, r2
20000afa:	d001      	beq.n	20000b00 <readColumn+0x38>
20000afc:	2303      	movs	r3, #3
20000afe:	e007      	b.n	20000b10 <readColumn+0x48>
	if(idr & 0x08) return 4;
20000b00:	1dfb      	adds	r3, r7, #7
20000b02:	781b      	ldrb	r3, [r3, #0]
20000b04:	2208      	movs	r2, #8
20000b06:	4013      	ands	r3, r2
20000b08:	d001      	beq.n	20000b0e <readColumn+0x46>
20000b0a:	2304      	movs	r3, #4
20000b0c:	e000      	b.n	20000b10 <readColumn+0x48>
	return 0;
20000b0e:	2300      	movs	r3, #0
}
20000b10:	0018      	movs	r0, r3
20000b12:	46bd      	mov	sp, r7
20000b14:	b002      	add	sp, #8
20000b16:	bd80      	pop	{r7, pc}
20000b18:	40020c11 	andmi	r0, r2, r1, lsl ip

20000b1c <keyb>:

unsigned char * keyb(void) {
20000b1c:	b590      	push	{r4, r7, lr}
20000b1e:	b087      	sub	sp, #28
20000b20:	af00      	add	r7, sp, #0
	unsigned char keys[] = {0x1,0x2,0x3,0xA,0x4,0x5,0x6,0xB,0x7,0x8,0x9,0xC,0xE,0x0,0xF,0xD};
20000b22:	1d3b      	adds	r3, r7, #4
20000b24:	4a25      	ldr	r2, [pc, #148]	; (20000bbc <keyb+0xa0>)
20000b26:	ca13      	ldmia	r2!, {r0, r1, r4}
20000b28:	c313      	stmia	r3!, {r0, r1, r4}
20000b2a:	6812      	ldr	r2, [r2, #0]
20000b2c:	601a      	str	r2, [r3, #0]
	static unsigned char returnKeys[4] = {0xFF,0xFF,0xFF,0xFF};
	for(char row = 1; row <= 4; row++) {
20000b2e:	2317      	movs	r3, #23
20000b30:	18fb      	adds	r3, r7, r3
20000b32:	2201      	movs	r2, #1
20000b34:	701a      	strb	r2, [r3, #0]
20000b36:	e033      	b.n	20000ba0 <keyb+0x84>
		activateRow(row);
20000b38:	2317      	movs	r3, #23
20000b3a:	18fb      	adds	r3, r7, r3
20000b3c:	781b      	ldrb	r3, [r3, #0]
20000b3e:	0018      	movs	r0, r3
20000b40:	f7ff ff98 	bl	20000a74 <activateRow>
		delay_250ns();
20000b44:	f7ff ff16 	bl	20000974 <delay_250ns>
		char column = readColumn();
20000b48:	2316      	movs	r3, #22
20000b4a:	18fc      	adds	r4, r7, r3
20000b4c:	f7ff ffbc 	bl	20000ac8 <readColumn>
20000b50:	0003      	movs	r3, r0
20000b52:	7023      	strb	r3, [r4, #0]
		if(column != 0) {
20000b54:	2316      	movs	r3, #22
20000b56:	18fb      	adds	r3, r7, r3
20000b58:	781b      	ldrb	r3, [r3, #0]
20000b5a:	2b00      	cmp	r3, #0
20000b5c:	d012      	beq.n	20000b84 <keyb+0x68>
			returnKeys[row-1] = keys[4 * (row - 1) + (column - 1)];
20000b5e:	2317      	movs	r3, #23
20000b60:	18fb      	adds	r3, r7, r3
20000b62:	781b      	ldrb	r3, [r3, #0]
20000b64:	3b01      	subs	r3, #1
20000b66:	2217      	movs	r2, #23
20000b68:	18ba      	adds	r2, r7, r2
20000b6a:	7812      	ldrb	r2, [r2, #0]
20000b6c:	3a01      	subs	r2, #1
20000b6e:	0091      	lsls	r1, r2, #2
20000b70:	2216      	movs	r2, #22
20000b72:	18ba      	adds	r2, r7, r2
20000b74:	7812      	ldrb	r2, [r2, #0]
20000b76:	3a01      	subs	r2, #1
20000b78:	188a      	adds	r2, r1, r2
20000b7a:	1d39      	adds	r1, r7, #4
20000b7c:	5c89      	ldrb	r1, [r1, r2]
20000b7e:	4a10      	ldr	r2, [pc, #64]	; (20000bc0 <keyb+0xa4>)
20000b80:	54d1      	strb	r1, [r2, r3]
20000b82:	e006      	b.n	20000b92 <keyb+0x76>
		} else {
			returnKeys[row-1] = 0xFF;
20000b84:	2317      	movs	r3, #23
20000b86:	18fb      	adds	r3, r7, r3
20000b88:	781b      	ldrb	r3, [r3, #0]
20000b8a:	3b01      	subs	r3, #1
20000b8c:	4a0c      	ldr	r2, [pc, #48]	; (20000bc0 <keyb+0xa4>)
20000b8e:	21ff      	movs	r1, #255	; 0xff
20000b90:	54d1      	strb	r1, [r2, r3]
	for(char row = 1; row <= 4; row++) {
20000b92:	2317      	movs	r3, #23
20000b94:	18fb      	adds	r3, r7, r3
20000b96:	781a      	ldrb	r2, [r3, #0]
20000b98:	2317      	movs	r3, #23
20000b9a:	18fb      	adds	r3, r7, r3
20000b9c:	3201      	adds	r2, #1
20000b9e:	701a      	strb	r2, [r3, #0]
20000ba0:	2317      	movs	r3, #23
20000ba2:	18fb      	adds	r3, r7, r3
20000ba4:	781b      	ldrb	r3, [r3, #0]
20000ba6:	2b04      	cmp	r3, #4
20000ba8:	d9c6      	bls.n	20000b38 <keyb+0x1c>
		}
	}
	activateRow(0);
20000baa:	2000      	movs	r0, #0
20000bac:	f7ff ff62 	bl	20000a74 <activateRow>
	return returnKeys;
20000bb0:	4b03      	ldr	r3, [pc, #12]	; (20000bc0 <keyb+0xa4>)
20000bb2:	0018      	movs	r0, r3
20000bb4:	46bd      	mov	sp, r7
20000bb6:	b007      	add	sp, #28
20000bb8:	bd90      	pop	{r4, r7, pc}
20000bba:	46c0      	nop			; (mov r8, r8)
20000bbc:	20001214 	andcs	r1, r0, r4, lsl r2
20000bc0:	200011b4 			; <UNDEFINED> instruction: 0x200011b4

20000bc4 <ascii_ctrl_bit_set>:
#define B_E 6
#define B_SELECT 2
#define B_RW 1
#define B_RS 0

void ascii_ctrl_bit_set(unsigned int x) {
20000bc4:	b580      	push	{r7, lr}
20000bc6:	b082      	sub	sp, #8
20000bc8:	af00      	add	r7, sp, #0
20000bca:	6078      	str	r0, [r7, #4]
	switch(x) {
20000bcc:	687b      	ldr	r3, [r7, #4]
20000bce:	2b07      	cmp	r3, #7
20000bd0:	d84e      	bhi.n	20000c70 <ascii_ctrl_bit_set+0xac>
20000bd2:	687b      	ldr	r3, [r7, #4]
20000bd4:	009a      	lsls	r2, r3, #2
20000bd6:	4b28      	ldr	r3, [pc, #160]	; (20000c78 <ascii_ctrl_bit_set+0xb4>)
20000bd8:	18d3      	adds	r3, r2, r3
20000bda:	681b      	ldr	r3, [r3, #0]
20000bdc:	469f      	mov	pc, r3
		case 0: *GPIO_E_ODR_LOW |= 1; break;
20000bde:	4a27      	ldr	r2, [pc, #156]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000be0:	4b26      	ldr	r3, [pc, #152]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000be2:	781b      	ldrb	r3, [r3, #0]
20000be4:	b2db      	uxtb	r3, r3
20000be6:	2101      	movs	r1, #1
20000be8:	430b      	orrs	r3, r1
20000bea:	b2db      	uxtb	r3, r3
20000bec:	7013      	strb	r3, [r2, #0]
20000bee:	e03f      	b.n	20000c70 <ascii_ctrl_bit_set+0xac>
		case 1: *GPIO_E_ODR_LOW |= 2; break;
20000bf0:	4a22      	ldr	r2, [pc, #136]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000bf2:	4b22      	ldr	r3, [pc, #136]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000bf4:	781b      	ldrb	r3, [r3, #0]
20000bf6:	b2db      	uxtb	r3, r3
20000bf8:	2102      	movs	r1, #2
20000bfa:	430b      	orrs	r3, r1
20000bfc:	b2db      	uxtb	r3, r3
20000bfe:	7013      	strb	r3, [r2, #0]
20000c00:	e036      	b.n	20000c70 <ascii_ctrl_bit_set+0xac>
		case 2: *GPIO_E_ODR_LOW |= 4; break;
20000c02:	4a1e      	ldr	r2, [pc, #120]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000c04:	4b1d      	ldr	r3, [pc, #116]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000c06:	781b      	ldrb	r3, [r3, #0]
20000c08:	b2db      	uxtb	r3, r3
20000c0a:	2104      	movs	r1, #4
20000c0c:	430b      	orrs	r3, r1
20000c0e:	b2db      	uxtb	r3, r3
20000c10:	7013      	strb	r3, [r2, #0]
20000c12:	e02d      	b.n	20000c70 <ascii_ctrl_bit_set+0xac>
		case 3: *GPIO_E_ODR_LOW |= 8; break;
20000c14:	4a19      	ldr	r2, [pc, #100]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000c16:	4b19      	ldr	r3, [pc, #100]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000c18:	781b      	ldrb	r3, [r3, #0]
20000c1a:	b2db      	uxtb	r3, r3
20000c1c:	2108      	movs	r1, #8
20000c1e:	430b      	orrs	r3, r1
20000c20:	b2db      	uxtb	r3, r3
20000c22:	7013      	strb	r3, [r2, #0]
20000c24:	e024      	b.n	20000c70 <ascii_ctrl_bit_set+0xac>
		case 4: *GPIO_E_ODR_LOW |= 16; break;
20000c26:	4a15      	ldr	r2, [pc, #84]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000c28:	4b14      	ldr	r3, [pc, #80]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000c2a:	781b      	ldrb	r3, [r3, #0]
20000c2c:	b2db      	uxtb	r3, r3
20000c2e:	2110      	movs	r1, #16
20000c30:	430b      	orrs	r3, r1
20000c32:	b2db      	uxtb	r3, r3
20000c34:	7013      	strb	r3, [r2, #0]
20000c36:	e01b      	b.n	20000c70 <ascii_ctrl_bit_set+0xac>
		case 5: *GPIO_E_ODR_LOW |= 32; break;
20000c38:	4a10      	ldr	r2, [pc, #64]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000c3a:	4b10      	ldr	r3, [pc, #64]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000c3c:	781b      	ldrb	r3, [r3, #0]
20000c3e:	b2db      	uxtb	r3, r3
20000c40:	2120      	movs	r1, #32
20000c42:	430b      	orrs	r3, r1
20000c44:	b2db      	uxtb	r3, r3
20000c46:	7013      	strb	r3, [r2, #0]
20000c48:	e012      	b.n	20000c70 <ascii_ctrl_bit_set+0xac>
		case 6: *GPIO_E_ODR_LOW |= 64; break;
20000c4a:	4a0c      	ldr	r2, [pc, #48]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000c4c:	4b0b      	ldr	r3, [pc, #44]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000c4e:	781b      	ldrb	r3, [r3, #0]
20000c50:	b2db      	uxtb	r3, r3
20000c52:	2140      	movs	r1, #64	; 0x40
20000c54:	430b      	orrs	r3, r1
20000c56:	b2db      	uxtb	r3, r3
20000c58:	7013      	strb	r3, [r2, #0]
20000c5a:	e009      	b.n	20000c70 <ascii_ctrl_bit_set+0xac>
		case 7: *GPIO_E_ODR_LOW |= 128; break;
20000c5c:	4907      	ldr	r1, [pc, #28]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000c5e:	4b07      	ldr	r3, [pc, #28]	; (20000c7c <ascii_ctrl_bit_set+0xb8>)
20000c60:	781b      	ldrb	r3, [r3, #0]
20000c62:	b2db      	uxtb	r3, r3
20000c64:	2280      	movs	r2, #128	; 0x80
20000c66:	4252      	negs	r2, r2
20000c68:	4313      	orrs	r3, r2
20000c6a:	b2db      	uxtb	r3, r3
20000c6c:	700b      	strb	r3, [r1, #0]
20000c6e:	46c0      	nop			; (mov r8, r8)
	}
}
20000c70:	46c0      	nop			; (mov r8, r8)
20000c72:	46bd      	mov	sp, r7
20000c74:	b002      	add	sp, #8
20000c76:	bd80      	pop	{r7, pc}
20000c78:	20001224 	andcs	r1, r0, r4, lsr #4
20000c7c:	40021014 	andmi	r1, r2, r4, lsl r0

20000c80 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned int x) {
20000c80:	b580      	push	{r7, lr}
20000c82:	b082      	sub	sp, #8
20000c84:	af00      	add	r7, sp, #0
20000c86:	6078      	str	r0, [r7, #4]
	switch(x) {
20000c88:	687b      	ldr	r3, [r7, #4]
20000c8a:	2b07      	cmp	r3, #7
20000c8c:	d84d      	bhi.n	20000d2a <ascii_ctrl_bit_clear+0xaa>
20000c8e:	687b      	ldr	r3, [r7, #4]
20000c90:	009a      	lsls	r2, r3, #2
20000c92:	4b28      	ldr	r3, [pc, #160]	; (20000d34 <ascii_ctrl_bit_clear+0xb4>)
20000c94:	18d3      	adds	r3, r2, r3
20000c96:	681b      	ldr	r3, [r3, #0]
20000c98:	469f      	mov	pc, r3
		case(0): *GPIO_E_ODR_LOW &= 0xFE; break;
20000c9a:	4a27      	ldr	r2, [pc, #156]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000c9c:	4b26      	ldr	r3, [pc, #152]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000c9e:	781b      	ldrb	r3, [r3, #0]
20000ca0:	b2db      	uxtb	r3, r3
20000ca2:	2101      	movs	r1, #1
20000ca4:	438b      	bics	r3, r1
20000ca6:	b2db      	uxtb	r3, r3
20000ca8:	7013      	strb	r3, [r2, #0]
20000caa:	e03e      	b.n	20000d2a <ascii_ctrl_bit_clear+0xaa>
		case(1): *GPIO_E_ODR_LOW &= 0xFD; break;
20000cac:	4a22      	ldr	r2, [pc, #136]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000cae:	4b22      	ldr	r3, [pc, #136]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000cb0:	781b      	ldrb	r3, [r3, #0]
20000cb2:	b2db      	uxtb	r3, r3
20000cb4:	2102      	movs	r1, #2
20000cb6:	438b      	bics	r3, r1
20000cb8:	b2db      	uxtb	r3, r3
20000cba:	7013      	strb	r3, [r2, #0]
20000cbc:	e035      	b.n	20000d2a <ascii_ctrl_bit_clear+0xaa>
		case(2): *GPIO_E_ODR_LOW &= 0xFB; break;
20000cbe:	4a1e      	ldr	r2, [pc, #120]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000cc0:	4b1d      	ldr	r3, [pc, #116]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	b2db      	uxtb	r3, r3
20000cc6:	2104      	movs	r1, #4
20000cc8:	438b      	bics	r3, r1
20000cca:	b2db      	uxtb	r3, r3
20000ccc:	7013      	strb	r3, [r2, #0]
20000cce:	e02c      	b.n	20000d2a <ascii_ctrl_bit_clear+0xaa>
		case(3): *GPIO_E_ODR_LOW &= 0xF7; break;
20000cd0:	4a19      	ldr	r2, [pc, #100]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000cd2:	4b19      	ldr	r3, [pc, #100]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000cd4:	781b      	ldrb	r3, [r3, #0]
20000cd6:	b2db      	uxtb	r3, r3
20000cd8:	2108      	movs	r1, #8
20000cda:	438b      	bics	r3, r1
20000cdc:	b2db      	uxtb	r3, r3
20000cde:	7013      	strb	r3, [r2, #0]
20000ce0:	e023      	b.n	20000d2a <ascii_ctrl_bit_clear+0xaa>
		case(4): *GPIO_E_ODR_LOW &= 0xEF; break;
20000ce2:	4a15      	ldr	r2, [pc, #84]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000ce4:	4b14      	ldr	r3, [pc, #80]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000ce6:	781b      	ldrb	r3, [r3, #0]
20000ce8:	b2db      	uxtb	r3, r3
20000cea:	2110      	movs	r1, #16
20000cec:	438b      	bics	r3, r1
20000cee:	b2db      	uxtb	r3, r3
20000cf0:	7013      	strb	r3, [r2, #0]
20000cf2:	e01a      	b.n	20000d2a <ascii_ctrl_bit_clear+0xaa>
		case(5): *GPIO_E_ODR_LOW &= 0xDF; break;
20000cf4:	4a10      	ldr	r2, [pc, #64]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000cf6:	4b10      	ldr	r3, [pc, #64]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000cf8:	781b      	ldrb	r3, [r3, #0]
20000cfa:	b2db      	uxtb	r3, r3
20000cfc:	2120      	movs	r1, #32
20000cfe:	438b      	bics	r3, r1
20000d00:	b2db      	uxtb	r3, r3
20000d02:	7013      	strb	r3, [r2, #0]
20000d04:	e011      	b.n	20000d2a <ascii_ctrl_bit_clear+0xaa>
		case(6): *GPIO_E_ODR_LOW &= 0xBF; break;
20000d06:	4a0c      	ldr	r2, [pc, #48]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000d08:	4b0b      	ldr	r3, [pc, #44]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000d0a:	781b      	ldrb	r3, [r3, #0]
20000d0c:	b2db      	uxtb	r3, r3
20000d0e:	2140      	movs	r1, #64	; 0x40
20000d10:	438b      	bics	r3, r1
20000d12:	b2db      	uxtb	r3, r3
20000d14:	7013      	strb	r3, [r2, #0]
20000d16:	e008      	b.n	20000d2a <ascii_ctrl_bit_clear+0xaa>
		case(7): *GPIO_E_ODR_LOW &= 0x7F; break;
20000d18:	4a07      	ldr	r2, [pc, #28]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000d1a:	4b07      	ldr	r3, [pc, #28]	; (20000d38 <ascii_ctrl_bit_clear+0xb8>)
20000d1c:	781b      	ldrb	r3, [r3, #0]
20000d1e:	b2db      	uxtb	r3, r3
20000d20:	217f      	movs	r1, #127	; 0x7f
20000d22:	400b      	ands	r3, r1
20000d24:	b2db      	uxtb	r3, r3
20000d26:	7013      	strb	r3, [r2, #0]
20000d28:	46c0      	nop			; (mov r8, r8)
	}
}
20000d2a:	46c0      	nop			; (mov r8, r8)
20000d2c:	46bd      	mov	sp, r7
20000d2e:	b002      	add	sp, #8
20000d30:	bd80      	pop	{r7, pc}
20000d32:	46c0      	nop			; (mov r8, r8)
20000d34:	20001244 	andcs	r1, r0, r4, asr #4
20000d38:	40021014 	andmi	r1, r2, r4, lsl r0

20000d3c <ascii_write_controller>:

void ascii_write_controller(unsigned char byte) {
20000d3c:	b580      	push	{r7, lr}
20000d3e:	b082      	sub	sp, #8
20000d40:	af00      	add	r7, sp, #0
20000d42:	0002      	movs	r2, r0
20000d44:	1dfb      	adds	r3, r7, #7
20000d46:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20000d48:	2006      	movs	r0, #6
20000d4a:	f7ff ff3b 	bl	20000bc4 <ascii_ctrl_bit_set>
	*GPIO_E_ODR_HIGH = byte;
20000d4e:	4a06      	ldr	r2, [pc, #24]	; (20000d68 <ascii_write_controller+0x2c>)
20000d50:	1dfb      	adds	r3, r7, #7
20000d52:	781b      	ldrb	r3, [r3, #0]
20000d54:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20000d56:	f7ff fe0d 	bl	20000974 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20000d5a:	2006      	movs	r0, #6
20000d5c:	f7ff ff90 	bl	20000c80 <ascii_ctrl_bit_clear>
}
20000d60:	46c0      	nop			; (mov r8, r8)
20000d62:	46bd      	mov	sp, r7
20000d64:	b002      	add	sp, #8
20000d66:	bd80      	pop	{r7, pc}
20000d68:	40021015 	andmi	r1, r2, r5, lsl r0

20000d6c <ascii_read_controller>:

unsigned char ascii_read_controller() {
20000d6c:	b580      	push	{r7, lr}
20000d6e:	b082      	sub	sp, #8
20000d70:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
20000d72:	2006      	movs	r0, #6
20000d74:	f7ff ff26 	bl	20000bc4 <ascii_ctrl_bit_set>
	delay_250ns();
20000d78:	f7ff fdfc 	bl	20000974 <delay_250ns>
	delay_250ns();
20000d7c:	f7ff fdfa 	bl	20000974 <delay_250ns>
	unsigned char rv = *GPIO_E_IDR_HIGH;
20000d80:	4a06      	ldr	r2, [pc, #24]	; (20000d9c <ascii_read_controller+0x30>)
20000d82:	1dfb      	adds	r3, r7, #7
20000d84:	7812      	ldrb	r2, [r2, #0]
20000d86:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000d88:	2006      	movs	r0, #6
20000d8a:	f7ff ff79 	bl	20000c80 <ascii_ctrl_bit_clear>
	return rv;
20000d8e:	1dfb      	adds	r3, r7, #7
20000d90:	781b      	ldrb	r3, [r3, #0]
}
20000d92:	0018      	movs	r0, r3
20000d94:	46bd      	mov	sp, r7
20000d96:	b002      	add	sp, #8
20000d98:	bd80      	pop	{r7, pc}
20000d9a:	46c0      	nop			; (mov r8, r8)
20000d9c:	40021011 	andmi	r1, r2, r1, lsl r0

20000da0 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command) {
20000da0:	b580      	push	{r7, lr}
20000da2:	b082      	sub	sp, #8
20000da4:	af00      	add	r7, sp, #0
20000da6:	0002      	movs	r2, r0
20000da8:	1dfb      	adds	r3, r7, #7
20000daa:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000dac:	2000      	movs	r0, #0
20000dae:	f7ff ff67 	bl	20000c80 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000db2:	2001      	movs	r0, #1
20000db4:	f7ff ff64 	bl	20000c80 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000db8:	1dfb      	adds	r3, r7, #7
20000dba:	781b      	ldrb	r3, [r3, #0]
20000dbc:	0018      	movs	r0, r3
20000dbe:	f7ff ffbd 	bl	20000d3c <ascii_write_controller>
}
20000dc2:	46c0      	nop			; (mov r8, r8)
20000dc4:	46bd      	mov	sp, r7
20000dc6:	b002      	add	sp, #8
20000dc8:	bd80      	pop	{r7, pc}

20000dca <ascii_write_data>:

void ascii_write_data(unsigned char data) {
20000dca:	b580      	push	{r7, lr}
20000dcc:	b082      	sub	sp, #8
20000dce:	af00      	add	r7, sp, #0
20000dd0:	0002      	movs	r2, r0
20000dd2:	1dfb      	adds	r3, r7, #7
20000dd4:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000dd6:	2000      	movs	r0, #0
20000dd8:	f7ff fef4 	bl	20000bc4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000ddc:	2001      	movs	r0, #1
20000dde:	f7ff ff4f 	bl	20000c80 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000de2:	1dfb      	adds	r3, r7, #7
20000de4:	781b      	ldrb	r3, [r3, #0]
20000de6:	0018      	movs	r0, r3
20000de8:	f7ff ffa8 	bl	20000d3c <ascii_write_controller>
}
20000dec:	46c0      	nop			; (mov r8, r8)
20000dee:	46bd      	mov	sp, r7
20000df0:	b002      	add	sp, #8
20000df2:	bd80      	pop	{r7, pc}

20000df4 <ascii_read_status>:

unsigned char ascii_read_status(void) {
20000df4:	b590      	push	{r4, r7, lr}
20000df6:	b083      	sub	sp, #12
20000df8:	af00      	add	r7, sp, #0
	*GPIO_E_MODER &= 0x0000FFFF;	
20000dfa:	4b11      	ldr	r3, [pc, #68]	; (20000e40 <ascii_read_status+0x4c>)
20000dfc:	4a10      	ldr	r2, [pc, #64]	; (20000e40 <ascii_read_status+0x4c>)
20000dfe:	6812      	ldr	r2, [r2, #0]
20000e00:	0412      	lsls	r2, r2, #16
20000e02:	0c12      	lsrs	r2, r2, #16
20000e04:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000e06:	2000      	movs	r0, #0
20000e08:	f7ff ff3a 	bl	20000c80 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000e0c:	2001      	movs	r0, #1
20000e0e:	f7ff fed9 	bl	20000bc4 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000e12:	1dfc      	adds	r4, r7, #7
20000e14:	f7ff ffaa 	bl	20000d6c <ascii_read_controller>
20000e18:	0003      	movs	r3, r0
20000e1a:	7023      	strb	r3, [r4, #0]
	*GPIO_E_MODER &= 0x0000FFFF;
20000e1c:	4b08      	ldr	r3, [pc, #32]	; (20000e40 <ascii_read_status+0x4c>)
20000e1e:	4a08      	ldr	r2, [pc, #32]	; (20000e40 <ascii_read_status+0x4c>)
20000e20:	6812      	ldr	r2, [r2, #0]
20000e22:	0412      	lsls	r2, r2, #16
20000e24:	0c12      	lsrs	r2, r2, #16
20000e26:	601a      	str	r2, [r3, #0]
	*GPIO_E_MODER |= 0x55550000;	
20000e28:	4b05      	ldr	r3, [pc, #20]	; (20000e40 <ascii_read_status+0x4c>)
20000e2a:	4a05      	ldr	r2, [pc, #20]	; (20000e40 <ascii_read_status+0x4c>)
20000e2c:	6812      	ldr	r2, [r2, #0]
20000e2e:	4905      	ldr	r1, [pc, #20]	; (20000e44 <ascii_read_status+0x50>)
20000e30:	430a      	orrs	r2, r1
20000e32:	601a      	str	r2, [r3, #0]
	return rv;
20000e34:	1dfb      	adds	r3, r7, #7
20000e36:	781b      	ldrb	r3, [r3, #0]
}
20000e38:	0018      	movs	r0, r3
20000e3a:	46bd      	mov	sp, r7
20000e3c:	b003      	add	sp, #12
20000e3e:	bd90      	pop	{r4, r7, pc}
20000e40:	40021000 	andmi	r1, r2, r0
20000e44:	55550000 	ldrbpl	r0, [r5, #-0]

20000e48 <ascii_read_data>:

unsigned char ascii_read_data(void) {
20000e48:	b590      	push	{r4, r7, lr}
20000e4a:	b083      	sub	sp, #12
20000e4c:	af00      	add	r7, sp, #0
	*GPIO_E_MODER &= 0x0000FFFF;	
20000e4e:	4b11      	ldr	r3, [pc, #68]	; (20000e94 <ascii_read_data+0x4c>)
20000e50:	4a10      	ldr	r2, [pc, #64]	; (20000e94 <ascii_read_data+0x4c>)
20000e52:	6812      	ldr	r2, [r2, #0]
20000e54:	0412      	lsls	r2, r2, #16
20000e56:	0c12      	lsrs	r2, r2, #16
20000e58:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000e5a:	2000      	movs	r0, #0
20000e5c:	f7ff feb2 	bl	20000bc4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000e60:	2001      	movs	r0, #1
20000e62:	f7ff feaf 	bl	20000bc4 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000e66:	1dfc      	adds	r4, r7, #7
20000e68:	f7ff ff80 	bl	20000d6c <ascii_read_controller>
20000e6c:	0003      	movs	r3, r0
20000e6e:	7023      	strb	r3, [r4, #0]
	*GPIO_E_MODER &= 0x0000FFFF;
20000e70:	4b08      	ldr	r3, [pc, #32]	; (20000e94 <ascii_read_data+0x4c>)
20000e72:	4a08      	ldr	r2, [pc, #32]	; (20000e94 <ascii_read_data+0x4c>)
20000e74:	6812      	ldr	r2, [r2, #0]
20000e76:	0412      	lsls	r2, r2, #16
20000e78:	0c12      	lsrs	r2, r2, #16
20000e7a:	601a      	str	r2, [r3, #0]
	*GPIO_E_MODER |= 0x55550000;	
20000e7c:	4b05      	ldr	r3, [pc, #20]	; (20000e94 <ascii_read_data+0x4c>)
20000e7e:	4a05      	ldr	r2, [pc, #20]	; (20000e94 <ascii_read_data+0x4c>)
20000e80:	6812      	ldr	r2, [r2, #0]
20000e82:	4905      	ldr	r1, [pc, #20]	; (20000e98 <ascii_read_data+0x50>)
20000e84:	430a      	orrs	r2, r1
20000e86:	601a      	str	r2, [r3, #0]
	return rv;
20000e88:	1dfb      	adds	r3, r7, #7
20000e8a:	781b      	ldrb	r3, [r3, #0]
}
20000e8c:	0018      	movs	r0, r3
20000e8e:	46bd      	mov	sp, r7
20000e90:	b003      	add	sp, #12
20000e92:	bd90      	pop	{r4, r7, pc}
20000e94:	40021000 	andmi	r1, r2, r0
20000e98:	55550000 	ldrbpl	r0, [r5, #-0]

20000e9c <ascii_command>:

void ascii_command(char command, unsigned int delayMicro) {
20000e9c:	b580      	push	{r7, lr}
20000e9e:	b082      	sub	sp, #8
20000ea0:	af00      	add	r7, sp, #0
20000ea2:	0002      	movs	r2, r0
20000ea4:	6039      	str	r1, [r7, #0]
20000ea6:	1dfb      	adds	r3, r7, #7
20000ea8:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80) {
20000eaa:	46c0      	nop			; (mov r8, r8)
20000eac:	f7ff ffa2 	bl	20000df4 <ascii_read_status>
20000eb0:	0003      	movs	r3, r0
20000eb2:	001a      	movs	r2, r3
20000eb4:	2380      	movs	r3, #128	; 0x80
20000eb6:	4013      	ands	r3, r2
20000eb8:	2b80      	cmp	r3, #128	; 0x80
20000eba:	d0f7      	beq.n	20000eac <ascii_command+0x10>
		// Do nothing, wait for status flag
	}
	delay_micro(8);
20000ebc:	2008      	movs	r0, #8
20000ebe:	f7ff fd7b 	bl	200009b8 <delay_micro>
	ascii_write_cmd(command);
20000ec2:	1dfb      	adds	r3, r7, #7
20000ec4:	781b      	ldrb	r3, [r3, #0]
20000ec6:	0018      	movs	r0, r3
20000ec8:	f7ff ff6a 	bl	20000da0 <ascii_write_cmd>
	delay_micro(delayMicro);
20000ecc:	683b      	ldr	r3, [r7, #0]
20000ece:	0018      	movs	r0, r3
20000ed0:	f7ff fd72 	bl	200009b8 <delay_micro>
}
20000ed4:	46c0      	nop			; (mov r8, r8)
20000ed6:	46bd      	mov	sp, r7
20000ed8:	b002      	add	sp, #8
20000eda:	bd80      	pop	{r7, pc}

20000edc <ascii_init>:

void ascii_init(void) {
20000edc:	b580      	push	{r7, lr}
20000ede:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_SELECT);
20000ee0:	2002      	movs	r0, #2
20000ee2:	f7ff fe6f 	bl	20000bc4 <ascii_ctrl_bit_set>
	ascii_command(0x38, 40); // Set display size and font size
20000ee6:	2128      	movs	r1, #40	; 0x28
20000ee8:	2038      	movs	r0, #56	; 0x38
20000eea:	f7ff ffd7 	bl	20000e9c <ascii_command>
    ascii_command(0xE, 40); // Set display, cursor on
20000eee:	2128      	movs	r1, #40	; 0x28
20000ef0:	200e      	movs	r0, #14
20000ef2:	f7ff ffd3 	bl	20000e9c <ascii_command>
	ascii_command(0x01, 1530); // Clear display
20000ef6:	4b06      	ldr	r3, [pc, #24]	; (20000f10 <ascii_init+0x34>)
20000ef8:	0019      	movs	r1, r3
20000efa:	2001      	movs	r0, #1
20000efc:	f7ff ffce 	bl	20000e9c <ascii_command>
    ascii_command(0x6, 40); // Inc, no shift
20000f00:	2128      	movs	r1, #40	; 0x28
20000f02:	2006      	movs	r0, #6
20000f04:	f7ff ffca 	bl	20000e9c <ascii_command>
}
20000f08:	46c0      	nop			; (mov r8, r8)
20000f0a:	46bd      	mov	sp, r7
20000f0c:	bd80      	pop	{r7, pc}
20000f0e:	46c0      	nop			; (mov r8, r8)
20000f10:	000005fa 	strdeq	r0, [r0], -sl

20000f14 <ascii_write_char>:

void ascii_write_char(unsigned char charToWrite) {
20000f14:	b580      	push	{r7, lr}
20000f16:	b082      	sub	sp, #8
20000f18:	af00      	add	r7, sp, #0
20000f1a:	0002      	movs	r2, r0
20000f1c:	1dfb      	adds	r3, r7, #7
20000f1e:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80) {
20000f20:	46c0      	nop			; (mov r8, r8)
20000f22:	f7ff ff67 	bl	20000df4 <ascii_read_status>
20000f26:	0003      	movs	r3, r0
20000f28:	001a      	movs	r2, r3
20000f2a:	2380      	movs	r3, #128	; 0x80
20000f2c:	4013      	ands	r3, r2
20000f2e:	2b80      	cmp	r3, #128	; 0x80
20000f30:	d0f7      	beq.n	20000f22 <ascii_write_char+0xe>
	// Do nothing, wait for status flag
    }
	delay_micro(8);
20000f32:	2008      	movs	r0, #8
20000f34:	f7ff fd40 	bl	200009b8 <delay_micro>
    ascii_write_data(charToWrite);
20000f38:	1dfb      	adds	r3, r7, #7
20000f3a:	781b      	ldrb	r3, [r3, #0]
20000f3c:	0018      	movs	r0, r3
20000f3e:	f7ff ff44 	bl	20000dca <ascii_write_data>
    delay_micro(45);
20000f42:	202d      	movs	r0, #45	; 0x2d
20000f44:	f7ff fd38 	bl	200009b8 <delay_micro>
}
20000f48:	46c0      	nop			; (mov r8, r8)
20000f4a:	46bd      	mov	sp, r7
20000f4c:	b002      	add	sp, #8
20000f4e:	bd80      	pop	{r7, pc}

20000f50 <goToXY>:

void goToXY(unsigned char row, unsigned char column) {
20000f50:	b580      	push	{r7, lr}
20000f52:	b084      	sub	sp, #16
20000f54:	af00      	add	r7, sp, #0
20000f56:	0002      	movs	r2, r0
20000f58:	1dfb      	adds	r3, r7, #7
20000f5a:	701a      	strb	r2, [r3, #0]
20000f5c:	1dbb      	adds	r3, r7, #6
20000f5e:	1c0a      	adds	r2, r1, #0
20000f60:	701a      	strb	r2, [r3, #0]
	unsigned char address = row - 1;
20000f62:	230f      	movs	r3, #15
20000f64:	18fb      	adds	r3, r7, r3
20000f66:	1dfa      	adds	r2, r7, #7
20000f68:	7812      	ldrb	r2, [r2, #0]
20000f6a:	3a01      	subs	r2, #1
20000f6c:	701a      	strb	r2, [r3, #0]
	if(column == 2) {
20000f6e:	1dbb      	adds	r3, r7, #6
20000f70:	781b      	ldrb	r3, [r3, #0]
20000f72:	2b02      	cmp	r3, #2
20000f74:	d106      	bne.n	20000f84 <goToXY+0x34>
		address = address + 0x40;
20000f76:	230f      	movs	r3, #15
20000f78:	18fb      	adds	r3, r7, r3
20000f7a:	220f      	movs	r2, #15
20000f7c:	18ba      	adds	r2, r7, r2
20000f7e:	7812      	ldrb	r2, [r2, #0]
20000f80:	3240      	adds	r2, #64	; 0x40
20000f82:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
20000f84:	230f      	movs	r3, #15
20000f86:	18fb      	adds	r3, r7, r3
20000f88:	781b      	ldrb	r3, [r3, #0]
20000f8a:	2280      	movs	r2, #128	; 0x80
20000f8c:	4252      	negs	r2, r2
20000f8e:	4313      	orrs	r3, r2
20000f90:	b2db      	uxtb	r3, r3
20000f92:	0018      	movs	r0, r3
20000f94:	f7ff ff04 	bl	20000da0 <ascii_write_cmd>
20000f98:	46c0      	nop			; (mov r8, r8)
20000f9a:	46bd      	mov	sp, r7
20000f9c:	b004      	add	sp, #16
20000f9e:	bd80      	pop	{r7, pc}

20000fa0 <ball_geometry>:
20000fa0:	0000000c 	andeq	r0, r0, ip
20000fa4:	00000004 	andeq	r0, r0, r4
20000fa8:	00000004 	andeq	r0, r0, r4
20000fac:	02000100 	andeq	r0, r0, #0, 2
20000fb0:	01010001 	tsteq	r1, r1
20000fb4:	03010201 	movweq	r0, #4609	; 0x1201
20000fb8:	01020002 	tsteq	r2, r2
20000fbc:	03020202 	movweq	r0, #8706	; 0x2202
20000fc0:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20001074 <ball>:
20001074:	20000fa0 	andcs	r0, r0, r0, lsr #31
	...
20001080:	0000003f 	andeq	r0, r0, pc, lsr r0
20001084:	00000020 	andeq	r0, r0, r0, lsr #32
20001088:	20000899 	mulcs	r0, r9, r8
2000108c:	200008f7 	strdcs	r0, [r0], -r7
20001090:	20000159 	andcs	r0, r0, r9, asr r1
20001094:	20000955 	andcs	r0, r0, r5, asr r9

20001098 <paddle_geometry>:
20001098:	00000064 	andeq	r0, r0, r4, rrx
2000109c:	00000004 	andeq	r0, r0, r4
200010a0:	00000019 	andeq	r0, r0, r9, lsl r0
200010a4:	00010000 	andeq	r0, r1, r0
200010a8:	00030002 	andeq	r0, r3, r2
200010ac:	01010100 	mrseq	r0, (UNDEF: 17)
200010b0:	01030102 	tsteq	r3, r2, lsl #2
200010b4:	02010200 	andeq	r0, r1, #0, 4
200010b8:	02030202 	andeq	r0, r3, #536870912	; 0x20000000
200010bc:	03010300 	movweq	r0, #4864	; 0x1300
200010c0:	03030302 	movweq	r0, #13058	; 0x3302
200010c4:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
200010c8:	04030402 	streq	r0, [r3], #-1026	; 0xfffffbfe
200010cc:	05010500 	streq	r0, [r1, #-1280]	; 0xfffffb00
200010d0:	05030502 	streq	r0, [r3, #-1282]	; 0xfffffafe
200010d4:	06010600 	streq	r0, [r1], -r0, lsl #12
200010d8:	06030602 	streq	r0, [r3], -r2, lsl #12
200010dc:	07010700 	streq	r0, [r1, -r0, lsl #14]
200010e0:	07030702 	streq	r0, [r3, -r2, lsl #14]
200010e4:	08010800 	stmdaeq	r1, {fp}
200010e8:	08030802 	stmdaeq	r3, {r1, fp}
200010ec:	09010900 	stmdbeq	r1, {r8, fp}
200010f0:	09030902 	stmdbeq	r3, {r1, r8, fp}
200010f4:	0a010a00 	beq	200438fc <returnKeys.4003+0x42748>
200010f8:	0a030a02 	beq	200c3908 <returnKeys.4003+0xc2754>
200010fc:	0b010b00 	bleq	20043d04 <returnKeys.4003+0x42b50>
20001100:	0b030b02 	bleq	200c3d10 <returnKeys.4003+0xc2b5c>
20001104:	0c010c00 	stceq	12, cr0, [r1], {-0}
20001108:	0c030c02 	stceq	12, cr0, [r3], {2}
2000110c:	0d010d00 	stceq	13, cr0, [r1, #-0]
20001110:	0d030d02 	stceq	13, cr0, [r3, #-8]
20001114:	0e010e00 	cdpeq	14, 0, cr0, cr1, cr0, {0}
20001118:	0e030e02 	cdpeq	14, 0, cr0, cr3, cr2, {0}
2000111c:	0f010f00 	svceq	0x00010f00
20001120:	0f030f02 	svceq	0x00030f02
20001124:	10011000 	andne	r1, r1, r0
20001128:	10031002 	andne	r1, r3, r2
2000112c:	11011100 	mrsne	r1, (UNDEF: 17)
20001130:	11031102 	tstne	r3, r2, lsl #2
20001134:	12011200 	andne	r1, r1, #0, 4
20001138:	12031202 	andne	r1, r3, #536870912	; 0x20000000
2000113c:	13011300 	movwne	r1, #4864	; 0x1300
20001140:	13031302 	movwne	r1, #13058	; 0x3302
20001144:	14011400 	strne	r1, [r1], #-1024	; 0xfffffc00
20001148:	14031402 	strne	r1, [r3], #-1026	; 0xfffffbfe
2000114c:	15011500 	strne	r1, [r1, #-1280]	; 0xfffffb00
20001150:	15031502 	strne	r1, [r3, #-1282]	; 0xfffffafe
20001154:	16011600 	strne	r1, [r1], -r0, lsl #12
20001158:	16031602 	strne	r1, [r3], -r2, lsl #12
2000115c:	17011700 	strne	r1, [r1, -r0, lsl #14]
20001160:	17031702 	strne	r1, [r3, -r2, lsl #14]
20001164:	18011800 	stmdane	r1, {fp, ip}
20001168:	18031802 	stmdane	r3, {r1, fp, ip}

2000116c <leftPaddle>:
2000116c:	20001098 	mulcs	r0, r8, r0
	...
20001178:	00000001 	andeq	r0, r0, r1
2000117c:	00000020 	andeq	r0, r0, r0, lsr #32
20001180:	20000899 	mulcs	r0, r9, r8
20001184:	200008f7 	strdcs	r0, [r0], -r7
20001188:	20000a15 	andcs	r0, r0, r5, lsl sl
2000118c:	20000955 	andcs	r0, r0, r5, asr r9

20001190 <rightPaddle>:
20001190:	20001098 	mulcs	r0, r8, r0
	...
2000119c:	0000007c 	andeq	r0, r0, ip, ror r0
200011a0:	00000020 	andeq	r0, r0, r0, lsr #32
200011a4:	20000899 	mulcs	r0, r9, r8
200011a8:	200008f7 	strdcs	r0, [r0], -r7
200011ac:	20000a15 	andcs	r0, r0, r5, lsl sl
200011b0:	20000955 	andcs	r0, r0, r5, asr r9

200011b4 <returnKeys.4003>:
200011b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200011b8:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
200011bc:	6c702074 	ldclvs	0, cr2, [r0], #-464	; 0xfffffe30
200011c0:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
200011c4:	6e6f7720 	cdpvs	7, 6, cr7, cr15, cr0, {1}
200011c8:	00002021 	andeq	r2, r0, r1, lsr #32
200011cc:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
200011d0:	616c7020 	cmnvs	ip, r0, lsr #32
200011d4:	20726579 	rsbscs	r6, r2, r9, ror r5
200011d8:	216e6f77 	smccs	59127	; 0xe6f7
200011dc:	00000000 	andeq	r0, r0, r0
200011e0:	2000075a 	andcs	r0, r0, sl, asr r7
200011e4:	20000764 	andcs	r0, r0, r4, ror #14
200011e8:	2000076e 	andcs	r0, r0, lr, ror #14
200011ec:	20000778 	andcs	r0, r0, r8, ror r7
200011f0:	20000782 	andcs	r0, r0, r2, lsl #15
200011f4:	2000078c 	andcs	r0, r0, ip, lsl #15
200011f8:	20000796 	mulcs	r0, r6, r7
200011fc:	200007a0 	andcs	r0, r0, r0, lsr #15
20001200:	20000a8e 	andcs	r0, r0, lr, lsl #21
20001204:	20000a96 	mulcs	r0, r6, sl
20001208:	20000a9e 	mulcs	r0, lr, sl
2000120c:	20000aa6 	andcs	r0, r0, r6, lsr #21
20001210:	20000aae 	andcs	r0, r0, lr, lsr #21
20001214:	0a030201 	beq	200c1a20 <returnKeys.4003+0xc086c>
20001218:	0b060504 	bleq	20182630 <returnKeys.4003+0x18147c>
2000121c:	0c090807 	stceq	8, cr0, [r9], {7}
20001220:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200011f0 <returnKeys.4003+0x3c>
20001224:	20000bde 	ldrdcs	r0, [r0], -lr
20001228:	20000bf0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
2000122c:	20000c02 	andcs	r0, r0, r2, lsl #24
20001230:	20000c14 	andcs	r0, r0, r4, lsl ip
20001234:	20000c26 	andcs	r0, r0, r6, lsr #24
20001238:	20000c38 	andcs	r0, r0, r8, lsr ip
2000123c:	20000c4a 	andcs	r0, r0, sl, asr #24
20001240:	20000c5c 	andcs	r0, r0, ip, asr ip
20001244:	20000c9a 	mulcs	r0, sl, ip
20001248:	20000cac 	andcs	r0, r0, ip, lsr #25
2000124c:	20000cbe 			; <UNDEFINED> instruction: 0x20000cbe
20001250:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20001254:	20000ce2 	andcs	r0, r0, r2, ror #25
20001258:	20000cf4 	strdcs	r0, [r0], -r4
2000125c:	20000d06 	andcs	r0, r0, r6, lsl #26
20001260:	20000d18 	andcs	r0, r0, r8, lsl sp

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000230 	andeq	r0, r0, r0, lsr r2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000087 	andeq	r0, r0, r7, lsl #1
  10:	0000270c 	andeq	r2, r0, ip, lsl #14
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	00000079 	andeq	r0, r0, r9, ror r0
  28:	00006d03 	andeq	r6, r0, r3, lsl #26
  2c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
  30:	00000049 	andeq	r0, r0, r9, asr #32
  34:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
  38:	00002106 	andeq	r2, r0, r6, lsl #2
  3c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
  40:	21070200 	mrscs	r0, (UNDEF: 39)
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	01850500 	orreq	r0, r5, r0, lsl #10
  4c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  50:	00000028 	andeq	r0, r0, r8, lsr #32
  54:	00013203 	andeq	r3, r1, r3, lsl #4
  58:	0b02d400 	bleq	b5060 <startup-0x1ff4afa0>
  5c:	00000090 	muleq	r0, r0, r0
  60:	00017b06 	andeq	r7, r1, r6, lsl #22
  64:	900c0200 	andls	r0, ip, r0, lsl #4
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000a06 	andeq	r0, r0, r6, lsl #20
  70:	900d0200 	andls	r0, sp, r0, lsl #4
  74:	04000000 	streq	r0, [r0], #-0
  78:	00001c06 	andeq	r1, r0, r6, lsl #24
  7c:	900e0200 	andls	r0, lr, r0, lsl #4
  80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  84:	00787004 	rsbseq	r7, r8, r4
  88:	00970f02 	addseq	r0, r7, r2, lsl #30
  8c:	000c0000 	andeq	r0, ip, r0
  90:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  94:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  98:	00000049 	andeq	r0, r0, r9, asr #32
  9c:	000000a7 	andeq	r0, r0, r7, lsr #1
  a0:	0000a709 	andeq	sl, r0, r9, lsl #14
  a4:	02006300 	andeq	r6, r0, #0, 6
  a8:	01680704 	cmneq	r8, r4, lsl #14
  ac:	1f050000 	svcne	0x00050000
  b0:	02000001 	andeq	r0, r0, #1
  b4:	0000b910 	andeq	fp, r0, r0, lsl r9
  b8:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
  bc:	03000000 	movweq	r0, #0
  c0:	0000018b 	andeq	r0, r0, fp, lsl #3
  c4:	38120224 	ldmdacc	r2, {r2, r5, r9}
  c8:	04000001 	streq	r0, [r0], #-1
  cc:	006f6567 	rsbeq	r6, pc, r7, ror #10
  d0:	00ae1302 	adceq	r1, lr, r2, lsl #6
  d4:	06000000 	streq	r0, [r0], -r0
  d8:	00000176 	andeq	r0, r0, r6, ror r1
  dc:	00901402 	addseq	r1, r0, r2, lsl #8
  e0:	06040000 	streq	r0, [r4], -r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	00901402 	addseq	r1, r0, r2, lsl #8
  ec:	06080000 	streq	r0, [r8], -r0
  f0:	00000171 	andeq	r0, r0, r1, ror r1
  f4:	00901502 	addseq	r1, r0, r2, lsl #10
  f8:	060c0000 	streq	r0, [ip], -r0
  fc:	00000005 	andeq	r0, r0, r5
 100:	00901502 	addseq	r1, r0, r2, lsl #10
 104:	06100000 	ldreq	r0, [r0], -r0
 108:	00000022 	andeq	r0, r0, r2, lsr #32
 10c:	01491602 	cmpeq	r9, r2, lsl #12
 110:	06140000 	ldreq	r0, [r4], -r0
 114:	000004e8 	andeq	r0, r0, r8, ror #9
 118:	01491702 	cmpeq	r9, r2, lsl #14
 11c:	06180000 	ldreq	r0, [r8], -r0
 120:	00000074 	andeq	r0, r0, r4, ror r0
 124:	01491802 	cmpeq	r9, r2, lsl #16
 128:	061c0000 	ldreq	r0, [ip], -r0
 12c:	00000063 	andeq	r0, r0, r3, rrx
 130:	01641902 	cmneq	r4, r2, lsl #18
 134:	00200000 	eoreq	r0, r0, r0
 138:	0001430b 	andeq	r4, r1, fp, lsl #6
 13c:	01430c00 	cmpeq	r3, r0, lsl #24
 140:	0a000000 	beq	148 <startup-0x1ffffeb8>
 144:	0000bf04 	andeq	fp, r0, r4, lsl #30
 148:	38040a00 	stmdacc	r4, {r9, fp}
 14c:	0b000001 	bleq	158 <startup-0x1ffffea8>
 150:	00000164 	andeq	r0, r0, r4, ror #2
 154:	0001430c 	andeq	r4, r1, ip, lsl #6
 158:	00900c00 	addseq	r0, r0, r0, lsl #24
 15c:	900c0000 	andls	r0, ip, r0
 160:	00000000 	andeq	r0, r0, r0
 164:	014f040a 	cmpeq	pc, sl, lsl #8
 168:	61050000 	mrsvs	r0, (UNDEF: 5)
 16c:	02000001 	andeq	r0, r0, #1
 170:	0000bf1a 	andeq	fp, r0, sl, lsl pc
 174:	01600500 	cmneq	r0, r0, lsl #10
 178:	1a020000 	bne	80180 <startup-0x1ff7fe80>
 17c:	00000143 	andeq	r0, r0, r3, asr #2
 180:	0001b40d 	andeq	fp, r1, sp, lsl #8
 184:	6a050300 	bvs	140d8c <startup-0x1febf274>
 188:	0d000001 	stceq	0, cr0, [r0, #-4]
 18c:	00000150 	andeq	r0, r0, r0, asr r1
 190:	016a0404 	cmneq	sl, r4, lsl #8
 194:	100d0000 	andne	r0, sp, r0
 198:	04000000 	streq	r0, [r0], #-0
 19c:	00016a05 	andeq	r6, r1, r5, lsl #20
 1a0:	015b0e00 	cmpeq	fp, r0, lsl #28
 1a4:	27010000 	strcs	r0, [r1, -r0]
 1a8:	20000058 	andcs	r0, r0, r8, asr r0
 1ac:	00000100 	andeq	r0, r0, r0, lsl #2
 1b0:	020b9c01 	andeq	r9, fp, #256	; 0x100
 1b4:	700f0000 	andvc	r0, pc, r0
 1b8:	75290100 	strvc	r0, [r9, #-256]!	; 0xffffff00
 1bc:	02000001 	andeq	r0, r0, #1
 1c0:	700f7091 	mulvc	pc, r1, r0	; <UNPREDICTABLE>
 1c4:	2a01006c 	bcs	4037c <startup-0x1ffbfc84>
 1c8:	00000175 	andeq	r0, r0, r5, ror r1
 1cc:	0f6c9102 	svceq	0x006c9102
 1d0:	01007270 	tsteq	r0, r0, ror r2
 1d4:	0001752b 	andeq	r7, r1, fp, lsr #10
 1d8:	68910200 	ldmvs	r1, {r9}
 1dc:	00008610 	andeq	r8, r0, r0, lsl r6
 1e0:	0000c420 	andeq	ip, r0, r0, lsr #8
 1e4:	013c1100 	teqeq	ip, r0, lsl #2
 1e8:	3c010000 	stccc	0, cr0, [r1], {-0}
 1ec:	0000020b 	andeq	r0, r0, fp, lsl #4
 1f0:	10649102 	rsbne	r9, r4, r2, lsl #2
 1f4:	200000a6 	andcs	r0, r0, r6, lsr #1
 1f8:	00000080 	andeq	r0, r0, r0, lsl #1
 1fc:	0100690f 	tsteq	r0, pc, lsl #18
 200:	0000213f 	andeq	r2, r0, pc, lsr r1
 204:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 208:	0a000000 	beq	210 <startup-0x1ffffdf0>
 20c:	00002104 	andeq	r2, r0, r4, lsl #2
 210:	01291200 			; <UNDEFINED> instruction: 0x01291200
 214:	16010000 	strne	r0, [r1], -r0
 218:	20000010 	andcs	r0, r0, r0, lsl r0
 21c:	00000048 	andeq	r0, r0, r8, asr #32
 220:	48129c01 	ldmdami	r2, {r0, sl, fp, ip, pc}
 224:	01000001 	tsteq	r0, r1
 228:	0000000c 	andeq	r0, r0, ip
 22c:	00000c20 	andeq	r0, r0, r0, lsr #24
 230:	009c0100 	addseq	r0, ip, r0, lsl #2
 234:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 238:	00f70004 	rscseq	r0, r7, r4
 23c:	01040000 	mrseq	r0, (UNDEF: 4)
 240:	00000087 	andeq	r0, r0, r7, lsl #1
 244:	0001b90c 	andeq	fp, r1, ip, lsl #18
 248:	00015800 	andeq	r5, r1, r0, lsl #16
 24c:	0001f020 	andeq	pc, r1, r0, lsr #32
 250:	0000cc00 	andeq	ip, r0, r0, lsl #24
 254:	006d0200 	rsbeq	r0, sp, r0, lsl #4
 258:	02020000 	andeq	r0, r2, #0
 25c:	00004205 	andeq	r4, r0, r5, lsl #4
 260:	00780300 	rsbseq	r0, r8, r0, lsl #6
 264:	00420602 	subeq	r0, r2, r2, lsl #12
 268:	03000000 	movweq	r0, #0
 26c:	07020079 	smlsdxeq	r2, r9, r0, r0
 270:	00000042 	andeq	r0, r0, r2, asr #32
 274:	01040001 	tsteq	r4, r1
 278:	00007908 	andeq	r7, r0, r8, lsl #18
 27c:	01850500 	orreq	r0, r5, r0, lsl #10
 280:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 284:	00000021 	andeq	r0, r0, r1, lsr #32
 288:	00013202 	andeq	r3, r1, r2, lsl #4
 28c:	0b02d400 	bleq	b5294 <startup-0x1ff4ad6c>
 290:	00000090 	muleq	r0, r0, r0
 294:	00017b06 	andeq	r7, r1, r6, lsl #22
 298:	900c0200 	andls	r0, ip, r0, lsl #4
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	00000a06 	andeq	r0, r0, r6, lsl #20
 2a4:	900d0200 	andls	r0, sp, r0, lsl #4
 2a8:	04000000 	streq	r0, [r0], #-0
 2ac:	00001c06 	andeq	r1, r0, r6, lsl #24
 2b0:	900e0200 	andls	r0, lr, r0, lsl #4
 2b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 2b8:	00787003 	rsbseq	r7, r8, r3
 2bc:	00970f02 	addseq	r0, r7, r2, lsl #30
 2c0:	000c0000 	andeq	r0, ip, r0
 2c4:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 2c8:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 2cc:	00000049 	andeq	r0, r0, r9, asr #32
 2d0:	000000a7 	andeq	r0, r0, r7, lsr #1
 2d4:	0000a709 	andeq	sl, r0, r9, lsl #14
 2d8:	04006300 	streq	r6, [r0], #-768	; 0xfffffd00
 2dc:	01680704 	cmneq	r8, r4, lsl #14
 2e0:	20050000 	andcs	r0, r5, r0
 2e4:	02000001 	andeq	r0, r0, #1
 2e8:	00005410 	andeq	r5, r0, r0, lsl r4
 2ec:	011f0500 	tsteq	pc, r0, lsl #10
 2f0:	10020000 	andne	r0, r2, r0
 2f4:	000000c4 	andeq	r0, r0, r4, asr #1
 2f8:	0054040a 	subseq	r0, r4, sl, lsl #8
 2fc:	8b020000 	blhi	80304 <startup-0x1ff7fcfc>
 300:	24000001 	strcs	r0, [r0], #-1
 304:	01431202 	cmpeq	r3, r2, lsl #4
 308:	67030000 	strvs	r0, [r3, -r0]
 30c:	02006f65 	andeq	r6, r0, #404	; 0x194
 310:	0000b913 	andeq	fp, r0, r3, lsl r9
 314:	76060000 	strvc	r0, [r6], -r0
 318:	02000001 	andeq	r0, r0, #1
 31c:	00009014 	andeq	r9, r0, r4, lsl r0
 320:	00060400 	andeq	r0, r6, r0, lsl #8
 324:	02000000 	andeq	r0, r0, #0
 328:	00009014 	andeq	r9, r0, r4, lsl r0
 32c:	71060800 	tstvc	r6, r0, lsl #16
 330:	02000001 	andeq	r0, r0, #1
 334:	00009015 	andeq	r9, r0, r5, lsl r0
 338:	05060c00 	streq	r0, [r6, #-3072]	; 0xfffff400
 33c:	02000000 	andeq	r0, r0, #0
 340:	00009015 	andeq	r9, r0, r5, lsl r0
 344:	22061000 	andcs	r1, r6, #0
 348:	02000000 	andeq	r0, r0, #0
 34c:	00015416 	andeq	r5, r1, r6, lsl r4
 350:	e8061400 	stmda	r6, {sl, ip}
 354:	02000004 	andeq	r0, r0, #4
 358:	00015417 	andeq	r5, r1, r7, lsl r4
 35c:	74061800 	strvc	r1, [r6], #-2048	; 0xfffff800
 360:	02000000 	andeq	r0, r0, #0
 364:	00015418 	andeq	r5, r1, r8, lsl r4
 368:	63061c00 	movwvs	r1, #27648	; 0x6c00
 36c:	02000000 	andeq	r0, r0, #0
 370:	00016f19 	andeq	r6, r1, r9, lsl pc
 374:	0b002000 	bleq	837c <startup-0x1fff7c84>
 378:	0000014e 	andeq	r0, r0, lr, asr #2
 37c:	00014e0c 	andeq	r4, r1, ip, lsl #28
 380:	040a0000 	streq	r0, [sl], #-0
 384:	000000ca 	andeq	r0, r0, sl, asr #1
 388:	0143040a 	cmpeq	r3, sl, lsl #8
 38c:	6f0b0000 	svcvs	0x000b0000
 390:	0c000001 	stceq	0, cr0, [r0], {1}
 394:	0000014e 	andeq	r0, r0, lr, asr #2
 398:	0000900c 	andeq	r9, r0, ip
 39c:	00900c00 	addseq	r0, r0, r0, lsl #24
 3a0:	0a000000 	beq	3a8 <startup-0x1ffffc58>
 3a4:	00015a04 	andeq	r5, r1, r4, lsl #20
 3a8:	01610500 	cmneq	r1, r0, lsl #10
 3ac:	1a020000 	bne	803b4 <startup-0x1ff7fc4c>
 3b0:	000000ca 	andeq	r0, r0, sl, asr #1
 3b4:	00016005 	andeq	r6, r1, r5
 3b8:	4e1a0200 	cdpmi	2, 1, cr0, cr10, cr0, {0}
 3bc:	0d000001 	stceq	0, cr0, [r0, #-4]
 3c0:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 3c4:	01750503 	cmneq	r5, r3, lsl #10
 3c8:	500d0000 	andpl	r0, sp, r0
 3cc:	04000001 	streq	r0, [r0], #-1
 3d0:	00017504 	andeq	r7, r1, r4, lsl #10
 3d4:	00100d00 	andseq	r0, r0, r0, lsl #26
 3d8:	05040000 	streq	r0, [r4, #-0]
 3dc:	00000175 	andeq	r0, r0, r5, ror r1
 3e0:	0001900e 	andeq	r9, r1, lr
 3e4:	ae060100 	adfges	f0, f6, f0
 3e8:	05000000 	streq	r0, [r0, #-0]
 3ec:	000fa003 	andeq	sl, pc, r3
 3f0:	018b0f20 	orreq	r0, fp, r0, lsr #30
 3f4:	11010000 	mrsne	r0, (UNDEF: 1)
 3f8:	10740305 	rsbsne	r0, r4, r5, lsl #6
 3fc:	af102000 	svcge	0x00102000
 400:	01000001 	tsteq	r0, r1
 404:	0001581e 	andeq	r5, r1, lr, lsl r8
 408:	0001f020 	andeq	pc, r1, r0, lsr #32
 40c:	929c0100 	addsls	r0, ip, #0, 2
 410:	11000002 	tstne	r0, r2
 414:	000001aa 	andeq	r0, r0, sl, lsr #3
 418:	01801e01 	orreq	r1, r0, r1, lsl #28
 41c:	91030000 	mrsls	r0, (UNDEF: 3)
 420:	6c127fb4 	ldcvs	15, cr7, [r2], {180}	; 0xb4
 424:	2f010070 	svccs	0x00010070
 428:	00000180 	andeq	r0, r0, r0, lsl #3
 42c:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
 430:	01007072 	tsteq	r0, r2, ror r0
 434:	00018030 	andeq	r8, r1, r0, lsr r0
 438:	60910200 	addsvs	r0, r1, r0, lsl #4
 43c:	00021013 	andeq	r1, r2, r3, lsl r0
 440:	00006c20 	andeq	r6, r0, r0, lsr #24
 444:	00024e00 	andeq	r4, r2, r0, lsl #28
 448:	00731200 	rsbseq	r1, r3, r0, lsl #4
 44c:	02923b01 	addseq	r3, r2, #1024	; 0x400
 450:	91020000 	mrsls	r0, (UNDEF: 2)
 454:	01f2146c 	mvnseq	r1, ip, ror #8
 458:	3c010000 	stccc	0, cr0, [r1], {-0}
 45c:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
 460:	154c9102 	strbne	r9, [ip, #-258]	; 0xfffffefe
 464:	000001f8 	strdeq	r0, [r0], -r8
 468:	00904101 	addseq	r4, r0, r1, lsl #2
 46c:	02400000 	subeq	r0, r0, #0
 470:	00160000 	andseq	r0, r6, r0
 474:	00019e17 	andeq	r9, r1, r7, lsl lr
 478:	90430100 	subls	r0, r3, r0, lsl #2
 47c:	16000000 	strne	r0, [r0], -r0
 480:	be180000 	cdplt	0, 1, cr0, cr8, cr0, {0}
 484:	68200002 	stmdavs	r0!, {r1}
 488:	12000000 	andne	r0, r0, #0
 48c:	53010073 	movwpl	r0, #4211	; 0x1073
 490:	00000292 	muleq	r0, r2, r2
 494:	14689102 	strbtne	r9, [r8], #-258	; 0xfffffefe
 498:	000001f2 	strdeq	r0, [r0], -r2
 49c:	02af5401 	adceq	r5, pc, #16777216	; 0x1000000
 4a0:	91030000 	mrsls	r0, (UNDEF: 3)
 4a4:	f8157fb8 			; <UNDEFINED> instruction: 0xf8157fb8
 4a8:	01000001 	tsteq	r0, r1
 4ac:	00009041 	andeq	r9, r0, r1, asr #32
 4b0:	00028300 	andeq	r8, r2, r0, lsl #6
 4b4:	17001600 	strne	r1, [r0, -r0, lsl #12]
 4b8:	0000019e 	muleq	r0, lr, r1
 4bc:	00904301 	addseq	r4, r0, r1, lsl #6
 4c0:	00160000 	andseq	r0, r6, r0
 4c4:	040a0000 	streq	r0, [sl], #-0
 4c8:	00000298 	muleq	r0, r8, r2
 4cc:	82080104 	andhi	r0, r8, #4, 2
 4d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 4d4:	00000298 	muleq	r0, r8, r2
 4d8:	000002af 	andeq	r0, r0, pc, lsr #5
 4dc:	0000a709 	andeq	sl, r0, r9, lsl #14
 4e0:	19001200 	stmdbne	r0, {r9, ip}
 4e4:	00000298 	muleq	r0, r8, r2
 4e8:	0000a709 	andeq	sl, r0, r9, lsl #14
 4ec:	00001000 	andeq	r1, r0, r0
 4f0:	00000283 	andeq	r0, r0, r3, lsl #5
 4f4:	023e0004 	eorseq	r0, lr, #4
 4f8:	01040000 	mrseq	r0, (UNDEF: 4)
 4fc:	00000087 	andeq	r0, r0, r7, lsl #1
 500:	0002680c 	andeq	r6, r2, ip, lsl #16
 504:	00034800 	andeq	r4, r3, r0, lsl #16
 508:	00055020 	andeq	r5, r5, r0, lsr #32
 50c:	00019100 	andeq	r9, r1, r0, lsl #2
 510:	02a90200 	adceq	r0, r9, #0, 4
 514:	1c020000 	stcne	0, cr0, [r2], {-0}
 518:	0000002c 	andeq	r0, r0, ip, lsr #32
 51c:	79080103 	stmdbvc	r8, {r0, r1, r8}
 520:	04000000 	streq	r0, [r0], #-0
 524:	00000226 	andeq	r0, r0, r6, lsr #4
 528:	07049801 	streq	r9, [r4, -r1, lsl #16]
 52c:	01942000 	orrseq	r2, r4, r0
 530:	9c010000 	stcls	0, cr0, [r1], {-0}
 534:	000000a7 	andeq	r0, r0, r7, lsr #1
 538:	01007805 	tsteq	r0, r5, lsl #16
 53c:	00002c98 	muleq	r0, r8, ip
 540:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 544:	01007905 	tsteq	r0, r5, lsl #18
 548:	00002c98 	muleq	r0, r8, ip
 54c:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 550:	74657305 	strbtvc	r7, [r5], #-773	; 0xfffffcfb
 554:	2c980100 	ldfcss	f0, [r8], {0}
 558:	02000000 	andeq	r0, r0, #0
 55c:	a4066591 	strge	r6, [r6], #-1425	; 0xfffffa6f
 560:	01000002 	tsteq	r0, r2
 564:	00002c9b 	muleq	r0, fp, ip
 568:	6f910200 	svcvs	0x00910200
 56c:	0002db06 	andeq	sp, r2, r6, lsl #22
 570:	2c9c0100 	ldfcss	f0, [ip], {0}
 574:	02000000 	andeq	r0, r0, #0
 578:	f9066d91 			; <UNDEFINED> instruction: 0xf9066d91
 57c:	01000004 	tsteq	r0, r4
 580:	00002cad 	andeq	r2, r0, sp, lsr #25
 584:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 588:	0002d606 	andeq	sp, r2, r6, lsl #12
 58c:	2cb70100 	ldfcss	f0, [r7]
 590:	02000000 	andeq	r0, r0, #0
 594:	04006c91 	streq	r6, [r0], #-3217	; 0xfffff36f
 598:	0000030c 	andeq	r0, r0, ip, lsl #6
 59c:	06ac8c01 	strteq	r8, [ip], r1, lsl #24
 5a0:	00582000 	subseq	r2, r8, r0
 5a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 5a8:	000000ed 	andeq	r0, r0, sp, ror #1
 5ac:	0006b207 	andeq	fp, r6, r7, lsl #4
 5b0:	00004a20 	andeq	r4, r0, r0, lsr #20
 5b4:	03010600 	movweq	r0, #5632	; 0x1600
 5b8:	8d010000 	stchi	0, cr0, [r1, #-0]
 5bc:	000000ed 	andeq	r0, r0, sp, ror #1
 5c0:	07749102 	ldrbeq	r9, [r4, -r2, lsl #2]!
 5c4:	200006d6 	ldrdcs	r0, [r0], -r6
 5c8:	0000001a 	andeq	r0, r0, sl, lsl r0
 5cc:	64646108 	strbtvs	r6, [r4], #-264	; 0xfffffef8
 5d0:	ed900100 	ldfs	f0, [r0]
 5d4:	02000000 	andeq	r0, r0, #0
 5d8:	00007091 	muleq	r0, r1, r0
 5dc:	05040900 	streq	r0, [r4, #-2304]	; 0xfffff700
 5e0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 5e4:	0003210a 	andeq	r2, r3, sl, lsl #2
 5e8:	507d0100 	rsbspl	r0, sp, r0, lsl #2
 5ec:	5c200006 	stcpl	0, cr0, [r0], #-24	; 0xffffffe8
 5f0:	01000000 	mrseq	r0, (UNDEF: 0)
 5f4:	02420b9c 	subeq	r0, r2, #156, 22	; 0x27000
 5f8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
 5fc:	00000021 	andeq	r0, r0, r1, lsr #32
 600:	20000626 	andcs	r0, r0, r6, lsr #12
 604:	0000002a 	andeq	r0, r0, sl, lsr #32
 608:	012d9c01 			; <UNDEFINED> instruction: 0x012d9c01
 60c:	f90c0000 			; <UNDEFINED> instruction: 0xf90c0000
 610:	01000004 	tsteq	r0, r4
 614:	00002178 	andeq	r2, r0, r8, ror r1
 618:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 61c:	02ee0400 	rsceq	r0, lr, #0, 8
 620:	70010000 	andvc	r0, r1, r0
 624:	200005e0 	andcs	r0, r0, r0, ror #11
 628:	00000046 	andeq	r0, r0, r6, asr #32
 62c:	015f9c01 	cmpeq	pc, r1, lsl #24
 630:	ab0c0000 	blge	300638 <startup-0x1fcff9c8>
 634:	01000005 	tsteq	r0, r5
 638:	00002170 	andeq	r2, r0, r0, ror r1
 63c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 640:	0004f90c 	andeq	pc, r4, ip, lsl #18
 644:	21700100 	cmncs	r0, r0, lsl #2
 648:	02000000 	andeq	r0, r0, #0
 64c:	04007691 	streq	r7, [r0], #-1681	; 0xfffff96f
 650:	00000210 	andeq	r0, r0, r0, lsl r2
 654:	05a06901 	streq	r6, [r0, #2305]!	; 0x901
 658:	00402000 	subeq	r2, r0, r0
 65c:	9c010000 	stcls	0, cr0, [r1], {-0}
 660:	00000191 	muleq	r0, r1, r1
 664:	00021e0c 	andeq	r1, r2, ip, lsl #28
 668:	21690100 	cmncs	r9, r0, lsl #2
 66c:	02000000 	andeq	r0, r0, #0
 670:	f90c7791 			; <UNDEFINED> instruction: 0xf90c7791
 674:	01000004 	tsteq	r0, r4
 678:	00002169 	andeq	r2, r0, r9, ror #2
 67c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 680:	02b60400 	adcseq	r0, r6, #0, 8
 684:	52010000 	andpl	r0, r1, #0
 688:	20000520 	andcs	r0, r0, r0, lsr #10
 68c:	00000080 	andeq	r0, r0, r0, lsl #1
 690:	01c39c01 	biceq	r9, r3, r1, lsl #24
 694:	060c0000 	streq	r0, [ip], -r0
 698:	01000003 	tsteq	r0, r3
 69c:	00002152 	andeq	r2, r0, r2, asr r1
 6a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6a4:	0004f90c 	andeq	pc, r4, ip, lsl #18
 6a8:	21520100 	cmpcs	r2, r0, lsl #2
 6ac:	02000000 	andeq	r0, r0, #0
 6b0:	0b007691 	bleq	1e0fc <startup-0x1ffe1f04>
 6b4:	000002e1 	andeq	r0, r0, r1, ror #5
 6b8:	00213701 	eoreq	r3, r1, r1, lsl #14
 6bc:	04900000 	ldreq	r0, [r0], #0
 6c0:	00902000 	addseq	r2, r0, r0
 6c4:	9c010000 	stcls	0, cr0, [r1], {-0}
 6c8:	000001f8 	strdeq	r0, [r0], -r8
 6cc:	0004f90c 	andeq	pc, r4, ip, lsl #18
 6d0:	21370100 	teqcs	r7, r0, lsl #2
 6d4:	02000000 	andeq	r0, r0, #0
 6d8:	52086f91 	andpl	r6, r8, #580	; 0x244
 6dc:	40010056 	andmi	r0, r1, r6, asr r0
 6e0:	00000021 	andeq	r0, r0, r1, lsr #32
 6e4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 6e8:	00025504 	andeq	r5, r2, r4, lsl #10
 6ec:	1e200100 	sufnes	f0, f0, f0
 6f0:	72200004 	eorvc	r0, r0, #4
 6f4:	01000000 	mrseq	r0, (UNDEF: 0)
 6f8:	0002229c 	muleq	r2, ip, r2
 6fc:	00180d00 	andseq	r0, r8, r0, lsl #26
 700:	b1060000 	mrslt	r0, (UNDEF: 6)
 704:	01000002 	tsteq	r0, r2
 708:	00002c2a 	andeq	r2, r0, sl, lsr #24
 70c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 710:	c4040000 	strgt	r0, [r4], #-0
 714:	01000002 	tsteq	r0, r2
 718:	0003b410 	andeq	fp, r3, r0, lsl r4
 71c:	00006a20 	andeq	r6, r0, r0, lsr #20
 720:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
 724:	0c000002 	stceq	0, cr0, [r0], {2}
 728:	000004f9 	strdeq	r0, [r0], -r9
 72c:	00211001 	eoreq	r1, r1, r1
 730:	91020000 	mrsls	r0, (UNDEF: 2)
 734:	f80e0077 			; <UNDEFINED> instruction: 0xf80e0077
 738:	01000001 	tsteq	r0, r1
 73c:	0003800c 	andeq	r8, r3, ip
 740:	00003420 	andeq	r3, r0, r0, lsr #8
 744:	689c0100 	ldmvs	ip, {r8}
 748:	05000002 	streq	r0, [r0, #-2]
 74c:	0c010078 	stceq	0, cr0, [r1], {120}	; 0x78
 750:	00000021 	andeq	r0, r0, r1, lsr #32
 754:	00779102 	rsbseq	r9, r7, r2, lsl #2
 758:	00022c0f 	andeq	r2, r2, pc, lsl #24
 75c:	48080100 	stmdami	r8, {r8}
 760:	38200003 	stmdacc	r0!, {r0, r1}
 764:	01000000 	mrseq	r0, (UNDEF: 0)
 768:	0078059c 			; <UNDEFINED> instruction: 0x0078059c
 76c:	00210801 	eoreq	r0, r1, r1, lsl #16
 770:	91020000 	mrsls	r0, (UNDEF: 2)
 774:	1e000077 	mcrne	0, 0, r0, cr0, cr7, {3}
 778:	04000002 	streq	r0, [r0], #-2
 77c:	00033f00 	andeq	r3, r3, r0, lsl #30
 780:	87010400 	strhi	r0, [r1, -r0, lsl #8]
 784:	0c000000 	stceq	0, cr0, [r0], {-0}
 788:	00000345 	andeq	r0, r0, r5, asr #6
 78c:	20000898 	mulcs	r0, r8, r8
 790:	000000dc 	ldrdeq	r0, [r0], -ip
 794:	000002c3 	andeq	r0, r0, r3, asr #5
 798:	00006d02 	andeq	r6, r0, r2, lsl #26
 79c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
 7a0:	00000042 	andeq	r0, r0, r2, asr #32
 7a4:	02007803 	andeq	r7, r0, #196608	; 0x30000
 7a8:	00004206 	andeq	r4, r0, r6, lsl #4
 7ac:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
 7b0:	42070200 	andmi	r0, r7, #0, 4
 7b4:	01000000 	mrseq	r0, (UNDEF: 0)
 7b8:	08010400 	stmdaeq	r1, {sl}
 7bc:	00000079 	andeq	r0, r0, r9, ror r0
 7c0:	00018505 	andeq	r8, r1, r5, lsl #10
 7c4:	21080200 	mrscs	r0, R8_fiq
 7c8:	02000000 	andeq	r0, r0, #0
 7cc:	00000132 	andeq	r0, r0, r2, lsr r1
 7d0:	900b02d4 	ldrdls	r0, [fp], -r4
 7d4:	06000000 	streq	r0, [r0], -r0
 7d8:	0000017b 	andeq	r0, r0, fp, ror r1
 7dc:	00900c02 	addseq	r0, r0, r2, lsl #24
 7e0:	06000000 	streq	r0, [r0], -r0
 7e4:	0000000a 	andeq	r0, r0, sl
 7e8:	00900d02 	addseq	r0, r0, r2, lsl #26
 7ec:	06040000 	streq	r0, [r4], -r0
 7f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f4:	00900e02 	addseq	r0, r0, r2, lsl #28
 7f8:	03080000 	movweq	r0, #32768	; 0x8000
 7fc:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 800:	0000970f 	andeq	r9, r0, pc, lsl #14
 804:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 808:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 80c:	49080074 	stmdbmi	r8, {r2, r4, r5, r6}
 810:	a7000000 	strge	r0, [r0, -r0]
 814:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 818:	000000a7 	andeq	r0, r0, r7, lsr #1
 81c:	04040063 	streq	r0, [r4], #-99	; 0xffffff9d
 820:	00016807 	andeq	r6, r1, r7, lsl #16
 824:	011f0500 	tsteq	pc, r0, lsl #10
 828:	10020000 	andne	r0, r2, r0
 82c:	000000b9 	strheq	r0, [r0], -r9
 830:	0054040a 	subseq	r0, r4, sl, lsl #8
 834:	8b020000 	blhi	8083c <startup-0x1ff7f7c4>
 838:	24000001 	strcs	r0, [r0], #-1
 83c:	01381202 	teqeq	r8, r2, lsl #4
 840:	67030000 	strvs	r0, [r3, -r0]
 844:	02006f65 	andeq	r6, r0, #404	; 0x194
 848:	0000ae13 	andeq	sl, r0, r3, lsl lr
 84c:	76060000 	strvc	r0, [r6], -r0
 850:	02000001 	andeq	r0, r0, #1
 854:	00009014 	andeq	r9, r0, r4, lsl r0
 858:	00060400 	andeq	r0, r6, r0, lsl #8
 85c:	02000000 	andeq	r0, r0, #0
 860:	00009014 	andeq	r9, r0, r4, lsl r0
 864:	71060800 	tstvc	r6, r0, lsl #16
 868:	02000001 	andeq	r0, r0, #1
 86c:	00009015 	andeq	r9, r0, r5, lsl r0
 870:	05060c00 	streq	r0, [r6, #-3072]	; 0xfffff400
 874:	02000000 	andeq	r0, r0, #0
 878:	00009015 	andeq	r9, r0, r5, lsl r0
 87c:	22061000 	andcs	r1, r6, #0
 880:	02000000 	andeq	r0, r0, #0
 884:	00014916 	andeq	r4, r1, r6, lsl r9
 888:	e8061400 	stmda	r6, {sl, ip}
 88c:	02000004 	andeq	r0, r0, #4
 890:	00014917 	andeq	r4, r1, r7, lsl r9
 894:	74061800 	strvc	r1, [r6], #-2048	; 0xfffff800
 898:	02000000 	andeq	r0, r0, #0
 89c:	00014918 	andeq	r4, r1, r8, lsl r9
 8a0:	63061c00 	movwvs	r1, #27648	; 0x6c00
 8a4:	02000000 	andeq	r0, r0, #0
 8a8:	00016419 	andeq	r6, r1, r9, lsl r4
 8ac:	0b002000 	bleq	88b4 <startup-0x1fff774c>
 8b0:	00000143 	andeq	r0, r0, r3, asr #2
 8b4:	0001430c 	andeq	r4, r1, ip, lsl #6
 8b8:	040a0000 	streq	r0, [sl], #-0
 8bc:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
 8c0:	0138040a 	teqeq	r8, sl, lsl #8
 8c4:	640b0000 	strvs	r0, [fp], #-0
 8c8:	0c000001 	stceq	0, cr0, [r0], {1}
 8cc:	00000143 	andeq	r0, r0, r3, asr #2
 8d0:	0000900c 	andeq	r9, r0, ip
 8d4:	00900c00 	addseq	r0, r0, r0, lsl #24
 8d8:	0a000000 	beq	8e0 <startup-0x1ffff720>
 8dc:	00014f04 	andeq	r4, r1, r4, lsl #30
 8e0:	01600500 	cmneq	r0, r0, lsl #10
 8e4:	1a020000 	bne	808ec <startup-0x1ff7f714>
 8e8:	00000143 	andeq	r0, r0, r3, asr #2
 8ec:	0003340d 	andeq	r3, r3, sp, lsl #8
 8f0:	540f0100 	strpl	r0, [pc], #-256	; 8f8 <startup-0x1ffff708>
 8f4:	20200009 	eorcs	r0, r0, r9
 8f8:	01000000 	mrseq	r0, (UNDEF: 0)
 8fc:	0001b19c 	muleq	r1, ip, r1
 900:	01aa0e00 			; <UNDEFINED> instruction: 0x01aa0e00
 904:	0f010000 	svceq	0x00010000
 908:	0000016a 	andeq	r0, r0, sl, ror #2
 90c:	0f749102 	svceq	0x00749102
 910:	0f010078 	svceq	0x00010078
 914:	00000090 	muleq	r0, r0, r0
 918:	0f709102 	svceq	0x00709102
 91c:	0f010079 	svceq	0x00010079
 920:	00000090 	muleq	r0, r0, r0
 924:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 928:	00038010 	andeq	r8, r3, r0, lsl r0
 92c:	f6090100 			; <UNDEFINED> instruction: 0xf6090100
 930:	5e200008 	cdppl	0, 2, cr0, cr0, cr8, {0}
 934:	01000000 	mrseq	r0, (UNDEF: 0)
 938:	0001eb9c 	muleq	r1, ip, fp
 93c:	01aa0e00 			; <UNDEFINED> instruction: 0x01aa0e00
 940:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 944:	0000016a 	andeq	r0, r0, sl, ror #2
 948:	116c9102 	cmnne	ip, r2, lsl #2
 94c:	200008fe 	strdcs	r0, [r0], -lr
 950:	0000004e 	andeq	r0, r0, lr, asr #32
 954:	01006912 	tsteq	r0, r2, lsl r9
 958:	0000900a 	andeq	r9, r0, sl
 95c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 960:	8d130000 	ldchi	0, cr0, [r3, #-0]
 964:	01000003 	tsteq	r0, r3
 968:	00089804 	andeq	r9, r8, r4, lsl #16
 96c:	00005e20 	andeq	r5, r0, r0, lsr #28
 970:	0e9c0100 	fmleqe	f0, f4, f0
 974:	000001aa 	andeq	r0, r0, sl, lsr #3
 978:	016a0401 	cmneq	sl, r1, lsl #8
 97c:	91020000 	mrsls	r0, (UNDEF: 2)
 980:	08a0116c 	stmiaeq	r0!, {r2, r3, r5, r6, r8, ip}
 984:	004e2000 	subeq	r2, lr, r0
 988:	69120000 	ldmdbvs	r2, {}	; <UNPREDICTABLE>
 98c:	90050100 	andls	r0, r5, r0, lsl #2
 990:	02000000 	andeq	r0, r0, #0
 994:	00007491 	muleq	r0, r1, r4
 998:	00008d00 	andeq	r8, r0, r0, lsl #26
 99c:	4e000400 	cfcpysmi	mvf0, mvf0
 9a0:	04000004 	streq	r0, [r0], #-4
 9a4:	00008701 	andeq	r8, r0, r1, lsl #14
 9a8:	03ca0c00 	biceq	r0, sl, #0, 24
 9ac:	09740000 	ldmdbeq	r4!, {}^	; <UNPREDICTABLE>
 9b0:	00a02000 	adceq	r2, r0, r0
 9b4:	03640000 	cmneq	r4, #0
 9b8:	a6020000 	strge	r0, [r2], -r0
 9bc:	01000003 	tsteq	r0, r3
 9c0:	000a021f 	andeq	r0, sl, pc, lsl r2
 9c4:	00001220 	andeq	r1, r0, r0, lsr #4
 9c8:	039c0100 	orrseq	r0, ip, #0, 2
 9cc:	0000019e 	muleq	r0, lr, r1
 9d0:	09e41701 	stmibeq	r4!, {r0, r8, r9, sl, ip}^
 9d4:	001e2000 	andseq	r2, lr, r0
 9d8:	9c010000 	stcls	0, cr0, [r1], {-0}
 9dc:	00000055 	andeq	r0, r0, r5, asr r0
 9e0:	00736d04 	rsbseq	r6, r3, r4, lsl #26
 9e4:	00551701 	subseq	r1, r5, r1, lsl #14
 9e8:	91020000 	mrsls	r0, (UNDEF: 2)
 9ec:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
 9f0:	00039907 	andeq	r9, r3, r7, lsl #18
 9f4:	03be0300 			; <UNDEFINED> instruction: 0x03be0300
 9f8:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
 9fc:	200009b8 			; <UNDEFINED> instruction: 0x200009b8
 a00:	0000002c 	andeq	r0, r0, ip, lsr #32
 a04:	007f9c01 	rsbseq	r9, pc, r1, lsl #24
 a08:	75040000 	strvc	r0, [r4, #-0]
 a0c:	0e010073 	mcreq	0, 0, r0, cr1, cr3, {3}
 a10:	00000055 	andeq	r0, r0, r5, asr r0
 a14:	00749102 	rsbseq	r9, r4, r2, lsl #2
 a18:	0003b206 	andeq	fp, r3, r6, lsl #4
 a1c:	74030100 	strvc	r0, [r3], #-256	; 0xffffff00
 a20:	44200009 	strtmi	r0, [r0], #-9
 a24:	01000000 	mrseq	r0, (UNDEF: 0)
 a28:	01e9009c 			; <UNDEFINED> instruction: 0x01e9009c
 a2c:	00040000 	andeq	r0, r4, r0
 a30:	000004c4 	andeq	r0, r0, r4, asr #9
 a34:	00870104 	addeq	r0, r7, r4, lsl #2
 a38:	200c0000 	andcs	r0, ip, r0
 a3c:	14000004 	strne	r0, [r0], #-4
 a40:	5e20000a 	cdppl	0, 2, cr0, cr0, cr10, {0}
 a44:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
 a48:	02000003 	andeq	r0, r0, #3
 a4c:	0000006d 	andeq	r0, r0, sp, rrx
 a50:	42050202 	andmi	r0, r5, #536870912	; 0x20000000
 a54:	03000000 	movweq	r0, #0
 a58:	06020078 			; <UNDEFINED> instruction: 0x06020078
 a5c:	00000042 	andeq	r0, r0, r2, asr #32
 a60:	00790300 	rsbseq	r0, r9, r0, lsl #6
 a64:	00420702 	subeq	r0, r2, r2, lsl #14
 a68:	00010000 	andeq	r0, r1, r0
 a6c:	79080104 	stmdbvc	r8, {r2, r8}
 a70:	05000000 	streq	r0, [r0, #-0]
 a74:	00000185 	andeq	r0, r0, r5, lsl #3
 a78:	00210802 	eoreq	r0, r1, r2, lsl #16
 a7c:	32020000 	andcc	r0, r2, #0
 a80:	d4000001 	strle	r0, [r0], #-1
 a84:	00900b02 	addseq	r0, r0, r2, lsl #22
 a88:	7b060000 	blvc	180a90 <startup-0x1fe7f570>
 a8c:	02000001 	andeq	r0, r0, #1
 a90:	0000900c 	andeq	r9, r0, ip
 a94:	0a060000 	beq	180a9c <startup-0x1fe7f564>
 a98:	02000000 	andeq	r0, r0, #0
 a9c:	0000900d 	andeq	r9, r0, sp
 aa0:	1c060400 	cfstrsne	mvf0, [r6], {-0}
 aa4:	02000000 	andeq	r0, r0, #0
 aa8:	0000900e 	andeq	r9, r0, lr
 aac:	70030800 	andvc	r0, r3, r0, lsl #16
 ab0:	0f020078 	svceq	0x00020078
 ab4:	00000097 	muleq	r0, r7, r0
 ab8:	0407000c 	streq	r0, [r7], #-12
 abc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 ac0:	00490800 	subeq	r0, r9, r0, lsl #16
 ac4:	00a70000 	adceq	r0, r7, r0
 ac8:	a7090000 	strge	r0, [r9, -r0]
 acc:	63000000 	movwvs	r0, #0
 ad0:	07040400 	streq	r0, [r4, -r0, lsl #8]
 ad4:	00000168 	andeq	r0, r0, r8, ror #2
 ad8:	00012005 	andeq	r2, r1, r5
 adc:	54100200 	ldrpl	r0, [r0], #-512	; 0xfffffe00
 ae0:	05000000 	streq	r0, [r0, #-0]
 ae4:	0000011f 	andeq	r0, r0, pc, lsl r1
 ae8:	00c41002 	sbceq	r1, r4, r2
 aec:	040a0000 	streq	r0, [sl], #-0
 af0:	00000054 	andeq	r0, r0, r4, asr r0
 af4:	00018b02 	andeq	r8, r1, r2, lsl #22
 af8:	12022400 	andne	r2, r2, #0, 8
 afc:	00000143 	andeq	r0, r0, r3, asr #2
 b00:	6f656703 	svcvs	0x00656703
 b04:	b9130200 	ldmdblt	r3, {r9}
 b08:	00000000 	andeq	r0, r0, r0
 b0c:	00017606 	andeq	r7, r1, r6, lsl #12
 b10:	90140200 	andsls	r0, r4, r0, lsl #4
 b14:	04000000 	streq	r0, [r0], #-0
 b18:	00000006 	andeq	r0, r0, r6
 b1c:	90140200 	andsls	r0, r4, r0, lsl #4
 b20:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 b24:	00017106 	andeq	r7, r1, r6, lsl #2
 b28:	90150200 	andsls	r0, r5, r0, lsl #4
 b2c:	0c000000 	stceq	0, cr0, [r0], {-0}
 b30:	00000506 	andeq	r0, r0, r6, lsl #10
 b34:	90150200 	andsls	r0, r5, r0, lsl #4
 b38:	10000000 	andne	r0, r0, r0
 b3c:	00002206 	andeq	r2, r0, r6, lsl #4
 b40:	54160200 	ldrpl	r0, [r6], #-512	; 0xfffffe00
 b44:	14000001 	strne	r0, [r0], #-1
 b48:	0004e806 	andeq	lr, r4, r6, lsl #16
 b4c:	54170200 	ldrpl	r0, [r7], #-512	; 0xfffffe00
 b50:	18000001 	stmdane	r0, {r0}
 b54:	00007406 	andeq	r7, r0, r6, lsl #8
 b58:	54180200 	ldrpl	r0, [r8], #-512	; 0xfffffe00
 b5c:	1c000001 	stcne	0, cr0, [r0], {1}
 b60:	00006306 	andeq	r6, r0, r6, lsl #6
 b64:	6f190200 	svcvs	0x00190200
 b68:	20000001 	andcs	r0, r0, r1
 b6c:	014e0b00 	cmpeq	lr, r0, lsl #22
 b70:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
 b74:	00000001 	andeq	r0, r0, r1
 b78:	00ca040a 	sbceq	r0, sl, sl, lsl #8
 b7c:	040a0000 	streq	r0, [sl], #-0
 b80:	00000143 	andeq	r0, r0, r3, asr #2
 b84:	00016f0b 	andeq	r6, r1, fp, lsl #30
 b88:	014e0c00 	cmpeq	lr, r0, lsl #24
 b8c:	900c0000 	andls	r0, ip, r0
 b90:	0c000000 	stceq	0, cr0, [r0], {-0}
 b94:	00000090 	muleq	r0, r0, r0
 b98:	5a040a00 	bpl	1033a0 <startup-0x1fefcc60>
 b9c:	05000001 	streq	r0, [r0, #-1]
 ba0:	00000161 	andeq	r0, r0, r1, ror #2
 ba4:	00ca1a02 	sbceq	r1, sl, r2, lsl #20
 ba8:	60050000 	andvs	r0, r5, r0
 bac:	02000001 	andeq	r0, r0, #1
 bb0:	00014e1a 	andeq	r4, r1, sl, lsl lr
 bb4:	01500d00 	cmpeq	r0, r0, lsl #26
 bb8:	04030000 	streq	r0, [r3], #-0
 bbc:	00000175 	andeq	r0, r0, r5, ror r1
 bc0:	0000100d 	andeq	r1, r0, sp
 bc4:	75050300 	strvc	r0, [r5, #-768]	; 0xfffffd00
 bc8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 bcc:	00000410 	andeq	r0, r0, r0, lsl r4
 bd0:	00ae0301 	adceq	r0, lr, r1, lsl #6
 bd4:	03050000 	movweq	r0, #20480	; 0x5000
 bd8:	20001098 	mulcs	r0, r8, r0
 bdc:	00018b0f 	andeq	r8, r1, pc, lsl #22
 be0:	05230100 	streq	r0, [r3, #-256]!	; 0xffffff00
 be4:	00116c03 	andseq	r6, r1, r3, lsl #24
 be8:	01960f20 	orrseq	r0, r6, r0, lsr #30
 bec:	2d010000 	stccs	0, cr0, [r1, #-0]
 bf0:	11900305 	orrsne	r0, r0, r5, lsl #6
 bf4:	04102000 	ldreq	r2, [r0], #-0
 bf8:	01000004 	tsteq	r0, r4
 bfc:	000a1437 	andeq	r1, sl, r7, lsr r4
 c00:	00005e20 	andeq	r5, r0, r0, lsr #28
 c04:	119c0100 	orrsne	r0, ip, r0, lsl #2
 c08:	000001aa 	andeq	r0, r0, sl, lsr #3
 c0c:	01803701 	orreq	r3, r0, r1, lsl #14
 c10:	91020000 	mrsls	r0, (UNDEF: 2)
 c14:	2d000074 	stccs	0, cr0, [r0, #-464]	; 0xfffffe30
 c18:	04000001 	streq	r0, [r0], #-1
 c1c:	0005a700 	andeq	sl, r5, r0, lsl #14
 c20:	87010400 	strhi	r0, [r1, -r0, lsl #8]
 c24:	0c000000 	stceq	0, cr0, [r0], {-0}
 c28:	00000476 	andeq	r0, r0, r6, ror r4
 c2c:	20000a74 	andcs	r0, r0, r4, ror sl
 c30:	00000150 	andeq	r0, r0, r0, asr r1
 c34:	00000472 	andeq	r0, r0, r2, ror r4
 c38:	00045b02 	andeq	r5, r4, r2, lsl #22
 c3c:	9b160100 	blls	581044 <startup-0x1fa7efbc>
 c40:	1c000000 	stcne	0, cr0, [r0], {-0}
 c44:	a820000b 	stmdage	r0!, {r0, r1, r3}
 c48:	01000000 	mrseq	r0, (UNDEF: 0)
 c4c:	00009b9c 	muleq	r0, ip, fp
 c50:	04b80300 	ldrteq	r0, [r8], #768	; 0x300
 c54:	17010000 	strne	r0, [r1, -r0]
 c58:	000000a8 	andeq	r0, r0, r8, lsr #1
 c5c:	035c9102 	cmpeq	ip, #-2147483648	; 0x80000000
 c60:	00000460 	andeq	r0, r0, r0, ror #8
 c64:	00bf1801 	adcseq	r1, pc, r1, lsl #16
 c68:	03050000 	movweq	r0, #20480	; 0x5000
 c6c:	200011b4 			; <UNDEFINED> instruction: 0x200011b4
 c70:	000b2e04 	andeq	r2, fp, r4, lsl #28
 c74:	00007c20 	andeq	r7, r0, r0, lsr #24
 c78:	6f720500 	svcvs	0x00720500
 c7c:	19010077 	stmdbne	r1, {r0, r1, r2, r4, r5, r6}
 c80:	000000cf 	andeq	r0, r0, pc, asr #1
 c84:	046f9102 	strbteq	r9, [pc], #-258	; c8c <startup-0x1ffff374>
 c88:	20000b38 	andcs	r0, r0, r8, lsr fp
 c8c:	0000005a 	andeq	r0, r0, sl, asr r0
 c90:	0003b206 	andeq	fp, r3, r6, lsl #4
 c94:	d61b0100 	ldrle	r0, [fp], -r0, lsl #2
 c98:	8a000000 	bhi	ca0 <startup-0x1ffff360>
 c9c:	07000000 	streq	r0, [r0, -r0]
 ca0:	04b10300 	ldrteq	r0, [r1], #768	; 0x300
 ca4:	1c010000 	stcne	0, cr0, [r1], {-0}
 ca8:	000000cf 	andeq	r0, r0, pc, asr #1
 cac:	006e9102 	rsbeq	r9, lr, r2, lsl #2
 cb0:	04080000 	streq	r0, [r8], #-0
 cb4:	000000a1 	andeq	r0, r0, r1, lsr #1
 cb8:	79080109 	stmdbvc	r8, {r0, r3, r8}
 cbc:	0a000000 	beq	cc4 <startup-0x1ffff33c>
 cc0:	000000a1 	andeq	r0, r0, r1, lsr #1
 cc4:	000000b8 	strheq	r0, [r0], -r8
 cc8:	0000b80b 	andeq	fp, r0, fp, lsl #16
 ccc:	09000f00 	stmdbeq	r0, {r8, r9, sl, fp}
 cd0:	01680704 	cmneq	r8, r4, lsl #14
 cd4:	a10a0000 	mrsge	r0, (UNDEF: 10)
 cd8:	cf000000 	svcgt	0x00000000
 cdc:	0b000000 	bleq	ce4 <startup-0x1ffff31c>
 ce0:	000000b8 	strheq	r0, [r0], -r8
 ce4:	01090003 	tsteq	r9, r3
 ce8:	00008208 	andeq	r8, r0, r8, lsl #4
 cec:	05040c00 	streq	r0, [r4, #-3072]	; 0xfffff400
 cf0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 cf4:	00046b0d 	andeq	r6, r4, sp, lsl #22
 cf8:	a10d0100 	mrsge	r0, (UNDEF: 29)
 cfc:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
 d00:	5420000a 	strtpl	r0, [r0], #-10
 d04:	01000000 	mrseq	r0, (UNDEF: 0)
 d08:	0001059c 	muleq	r1, ip, r5
 d0c:	64690500 	strbtvs	r0, [r9], #-1280	; 0xfffffb00
 d10:	0e010072 	mcreq	0, 0, r0, cr1, cr2, {3}
 d14:	000000a1 	andeq	r0, r0, r1, lsr #1
 d18:	00779102 	rsbseq	r9, r7, r2, lsl #2
 d1c:	0004bd0e 	andeq	fp, r4, lr, lsl #26
 d20:	74030100 	strvc	r0, [r3], #-256	; 0xffffff00
 d24:	5420000a 	strtpl	r0, [r0], #-10
 d28:	01000000 	mrseq	r0, (UNDEF: 0)
 d2c:	0001299c 	muleq	r1, ip, r9
 d30:	6f720f00 	svcvs	0x00720f00
 d34:	03010077 	movweq	r0, #4215	; 0x1077
 d38:	00000129 	andeq	r0, r0, r9, lsr #2
 d3c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 d40:	99070409 	stmdbls	r7, {r0, r3, sl}
 d44:	00000003 	andeq	r0, r0, r3
 d48:	000001fb 	strdeq	r0, [r0], -fp
 d4c:	068a0004 	streq	r0, [sl], r4
 d50:	01040000 	mrseq	r0, (UNDEF: 4)
 d54:	00000087 	andeq	r0, r0, r7, lsl #1
 d58:	0005260c 	andeq	r2, r5, ip, lsl #12
 d5c:	000bc400 	andeq	ip, fp, r0, lsl #8
 d60:	0003dc20 	andeq	sp, r3, r0, lsr #24
 d64:	00052200 	andeq	r2, r5, r0, lsl #4
 d68:	05c10200 	strbeq	r0, [r1, #512]	; 0x200
 d6c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
 d70:	20000f50 	andcs	r0, r0, r0, asr pc
 d74:	00000050 	andeq	r0, r0, r0, asr r0
 d78:	00619c01 	rsbeq	r9, r1, r1, lsl #24
 d7c:	72030000 	andvc	r0, r3, #0
 d80:	0100776f 	tsteq	r0, pc, ror #14
 d84:	0000616e 	andeq	r6, r0, lr, ror #2
 d88:	6f910200 	svcvs	0x00910200
 d8c:	0004b104 	andeq	fp, r4, r4, lsl #2
 d90:	616e0100 	cmnvs	lr, r0, lsl #2
 d94:	02000000 	andeq	r0, r0, #0
 d98:	67056e91 			; <UNDEFINED> instruction: 0x67056e91
 d9c:	01000005 	tsteq	r0, r5
 da0:	0000616f 	andeq	r6, r0, pc, ror #2
 da4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 da8:	08010600 	stmdaeq	r1, {r9, sl}
 dac:	00000079 	andeq	r0, r0, r9, ror r0
 db0:	0005c802 	andeq	ip, r5, r2, lsl #16
 db4:	14650100 	strbtne	r0, [r5], #-256	; 0xffffff00
 db8:	3c20000f 	stccc	0, cr0, [r0], #-60	; 0xffffffc4
 dbc:	01000000 	mrseq	r0, (UNDEF: 0)
 dc0:	00008c9c 	muleq	r0, ip, ip
 dc4:	05b50400 	ldreq	r0, [r5, #1024]!	; 0x400
 dc8:	65010000 	strvs	r0, [r1, #-0]
 dcc:	00000061 	andeq	r0, r0, r1, rrx
 dd0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 dd4:	0005ec07 	andeq	lr, r5, r7, lsl #24
 dd8:	dc5d0100 	ldflee	f0, [sp], {-0}
 ddc:	3820000e 	stmdacc	r0!, {r1, r2, r3}
 de0:	01000000 	mrseq	r0, (UNDEF: 0)
 de4:	0592029c 	ldreq	r0, [r2, #668]	; 0x29c
 de8:	54010000 	strpl	r0, [r1], #-0
 dec:	20000e9c 	mulcs	r0, ip, lr
 df0:	00000040 	andeq	r0, r0, r0, asr #32
 df4:	00cf9c01 	sbceq	r9, pc, r1, lsl #24
 df8:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
 dfc:	01000002 	tsteq	r0, r2
 e00:	0000cf54 	andeq	ip, r0, r4, asr pc
 e04:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 e08:	00051b04 	andeq	r1, r5, r4, lsl #22
 e0c:	d6540100 	ldrble	r0, [r4], -r0, lsl #2
 e10:	02000000 	andeq	r0, r0, #0
 e14:	06007091 			; <UNDEFINED> instruction: 0x06007091
 e18:	00820801 	addeq	r0, r2, r1, lsl #16
 e1c:	04060000 	streq	r0, [r6], #-0
 e20:	00039907 	andeq	r9, r3, r7, lsl #18
 e24:	05a00800 	streq	r0, [r0, #2048]!	; 0x800
 e28:	4a010000 	bmi	40e30 <startup-0x1ffbf1d0>
 e2c:	00000061 	andeq	r0, r0, r1, rrx
 e30:	20000e48 	andcs	r0, r0, r8, asr #28
 e34:	00000054 	andeq	r0, r0, r4, asr r0
 e38:	01049c01 	tsteq	r4, r1, lsl #24
 e3c:	72090000 	andvc	r0, r9, #0
 e40:	4e010076 	mcrmi	0, 0, r0, cr1, cr6, {3}
 e44:	00000061 	andeq	r0, r0, r1, rrx
 e48:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 e4c:	00056f08 	andeq	r6, r5, r8, lsl #30
 e50:	61400100 	mrsvs	r0, (UNDEF: 80)
 e54:	f4000000 	vst4.8	{d0-d3}, [r0], r0
 e58:	5420000d 	strtpl	r0, [r0], #-13
 e5c:	01000000 	mrseq	r0, (UNDEF: 0)
 e60:	00012b9c 	muleq	r1, ip, fp
 e64:	76720900 	ldrbtvc	r0, [r2], -r0, lsl #18
 e68:	61440100 	mrsvs	r0, (UNDEF: 84)
 e6c:	02000000 	andeq	r0, r0, #0
 e70:	02006f91 	andeq	r6, r0, #580	; 0x244
 e74:	00000581 	andeq	r0, r0, r1, lsl #11
 e78:	0dca3a01 	vstreq	s7, [sl, #4]
 e7c:	002a2000 	eoreq	r2, sl, r0
 e80:	9c010000 	stcls	0, cr0, [r1], {-0}
 e84:	0000014f 	andeq	r0, r0, pc, asr #2
 e88:	0005ab04 	andeq	sl, r5, r4, lsl #22
 e8c:	613a0100 	teqvs	sl, r0, lsl #2
 e90:	02000000 	andeq	r0, r0, #0
 e94:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 e98:	000004c9 	andeq	r0, r0, r9, asr #9
 e9c:	0da03401 	cfstrseq	mvf3, [r0, #4]!
 ea0:	002a2000 	eoreq	r2, sl, r0
 ea4:	9c010000 	stcls	0, cr0, [r1], {-0}
 ea8:	00000173 	andeq	r0, r0, r3, ror r1
 eac:	00021e04 	andeq	r1, r2, r4, lsl #28
 eb0:	61340100 	teqvs	r4, r0, lsl #2
 eb4:	02000000 	andeq	r0, r0, #0
 eb8:	0a007791 	beq	1ed04 <startup-0x1ffe12fc>
 ebc:	000004ee 	andeq	r0, r0, lr, ror #9
 ec0:	00612b01 	rsbeq	r2, r1, r1, lsl #22
 ec4:	0d6c0000 	stcleq	0, cr0, [ip, #-0]
 ec8:	00342000 	eorseq	r2, r4, r0
 ecc:	9c010000 	stcls	0, cr0, [r1], {-0}
 ed0:	0000019a 	muleq	r0, sl, r1
 ed4:	00767209 	rsbseq	r7, r6, r9, lsl #4
 ed8:	00612f01 	rsbeq	r2, r1, r1, lsl #30
 edc:	91020000 	mrsls	r0, (UNDEF: 2)
 ee0:	04020077 	streq	r0, [r2], #-119	; 0xffffff89
 ee4:	01000005 	tsteq	r0, r5
 ee8:	000d3c24 	andeq	r3, sp, r4, lsr #24
 eec:	00003020 	andeq	r3, r0, r0, lsr #32
 ef0:	be9c0100 	fmllte	f0, f4, f0
 ef4:	04000001 	streq	r0, [r0], #-1
 ef8:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 efc:	00612401 	rsbeq	r2, r1, r1, lsl #8
 f00:	91020000 	mrsls	r0, (UNDEF: 2)
 f04:	d90b0077 	stmdble	fp, {r0, r1, r2, r4, r5, r6}
 f08:	01000004 	tsteq	r0, r4
 f0c:	000c8017 	andeq	r8, ip, r7, lsl r0
 f10:	0000bc20 	andeq	fp, r0, r0, lsr #24
 f14:	e09c0100 	adds	r0, ip, r0, lsl #2
 f18:	03000001 	movweq	r0, #1
 f1c:	17010078 	smlsdxne	r1, r8, r0, r0
 f20:	000000d6 	ldrdeq	r0, [r0], -r6
 f24:	00749102 	rsbseq	r9, r4, r2, lsl #2
 f28:	0005d90c 	andeq	sp, r5, ip, lsl #18
 f2c:	c40a0100 	strgt	r0, [sl], #-256	; 0xffffff00
 f30:	bc20000b 	stclt	0, cr0, [r0], #-44	; 0xffffffd4
 f34:	01000000 	mrseq	r0, (UNDEF: 0)
 f38:	0078039c 			; <UNDEFINED> instruction: 0x0078039c
 f3c:	00d60a01 	sbcseq	r0, r6, r1, lsl #20
 f40:	91020000 	mrsls	r0, (UNDEF: 2)
 f44:	Address 0x00000f44 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03011303 	movweq	r1, #4867	; 0x1303
  20:	3a0b0b0e 	bcc	2c2c60 <startup-0x1fd3d3a0>
  24:	010b3b0b 	tsteq	fp, fp, lsl #22
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	0b381349 	bleq	e04d60 <startup-0x1f1fb2a0>
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	3f13490b 	svccc	0x0013490b
  98:	00193c19 	andseq	r3, r9, r9, lsl ip
  9c:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	01111927 	tsteq	r1, r7, lsr #18
  ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b4:	0f000013 	svceq	0x00000013
  b8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c4:	0b100000 	bleq	4000cc <startup-0x1fbfff34>
  c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  cc:	11000006 	tstne	r0, r6
  d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  d4:	0b3b0b3a 	bleq	ec2dc4 <startup-0x1f13d23c>
  d8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  dc:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
  e0:	03193f00 	tsteq	r9, #0, 30
  e4:	3b0b3a0e 	blcc	2ce924 <startup-0x1fd316dc>
  e8:	1119270b 	tstne	r9, fp, lsl #14
  ec:	40061201 	andmi	r1, r6, r1, lsl #4
  f0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  f4:	01000000 	mrseq	r0, (UNDEF: 0)
  f8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  fc:	0e030b13 	vmoveq.32	d3[0], r0
 100:	06120111 			; <UNDEFINED> instruction: 0x06120111
 104:	00001710 	andeq	r1, r0, r0, lsl r7
 108:	03011302 	movweq	r1, #4866	; 0x1302
 10c:	3a0b0b0e 	bcc	2c2d4c <startup-0x1fd3d2b4>
 110:	010b3b0b 	tsteq	fp, fp, lsl #22
 114:	03000013 	movweq	r0, #19
 118:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	0b381349 	bleq	e04e4c <startup-0x1f1fb1b4>
 124:	24040000 	strcs	r0, [r4], #-0
 128:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 12c:	000e030b 	andeq	r0, lr, fp, lsl #6
 130:	00160500 	andseq	r0, r6, r0, lsl #10
 134:	0b3a0e03 	bleq	e83948 <startup-0x1f17c6b8>
 138:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 13c:	0d060000 	stceq	0, cr0, [r6, #-0]
 140:	3a0e0300 	bcc	380d48 <startup-0x1fc7f2b8>
 144:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 148:	000b3813 	andeq	r3, fp, r3, lsl r8
 14c:	00240700 	eoreq	r0, r4, r0, lsl #14
 150:	0b3e0b0b 	bleq	f82d84 <startup-0x1f07d27c>
 154:	00000803 	andeq	r0, r0, r3, lsl #16
 158:	49010108 	stmdbmi	r1, {r3, r8}
 15c:	00130113 	andseq	r0, r3, r3, lsl r1
 160:	00210900 	eoreq	r0, r1, r0, lsl #18
 164:	0b2f1349 	bleq	bc4e90 <startup-0x1f43b170>
 168:	0f0a0000 	svceq	0x000a0000
 16c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 170:	0b000013 	bleq	1c4 <startup-0x1ffffe3c>
 174:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 178:	00001301 	andeq	r1, r0, r1, lsl #6
 17c:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 180:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 184:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 188:	0b3b0b3a 	bleq	ec2e78 <startup-0x1f13d188>
 18c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 190:	0000193c 	andeq	r1, r0, ip, lsr r9
 194:	0300340e 	movweq	r3, #1038	; 0x40e
 198:	3b0b3a0e 	blcc	2ce9d8 <startup-0x1fd31628>
 19c:	3f13490b 	svccc	0x0013490b
 1a0:	00180219 	andseq	r0, r8, r9, lsl r2
 1a4:	00340f00 	eorseq	r0, r4, r0, lsl #30
 1a8:	0b3a1347 	bleq	e84ecc <startup-0x1f17b134>
 1ac:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 1b0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 1b4:	03193f01 	tsteq	r9, #1, 30
 1b8:	3b0b3a0e 	blcc	2ce9f8 <startup-0x1fd31608>
 1bc:	1119270b 	tstne	r9, fp, lsl #14
 1c0:	40061201 	andmi	r1, r6, r1, lsl #4
 1c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1c8:	00001301 	andeq	r1, r0, r1, lsl #6
 1cc:	03000511 	movweq	r0, #1297	; 0x511
 1d0:	3b0b3a0e 	blcc	2cea10 <startup-0x1fd315f0>
 1d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1d8:	12000018 	andne	r0, r0, #24
 1dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 1e0:	0b3b0b3a 	bleq	ec2ed0 <startup-0x1f13d130>
 1e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1e8:	0b130000 	bleq	4c01f0 <startup-0x1fb3fe10>
 1ec:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 1f0:	00130106 	andseq	r0, r3, r6, lsl #2
 1f4:	00341400 	eorseq	r1, r4, r0, lsl #8
 1f8:	0b3a0e03 	bleq	e83a0c <startup-0x1f17c5f4>
 1fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 200:	00001802 	andeq	r1, r0, r2, lsl #16
 204:	3f012e15 	svccc	0x00012e15
 208:	3a0e0319 	bcc	380e74 <startup-0x1fc7f18c>
 20c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 210:	01193c13 	tsteq	r9, r3, lsl ip
 214:	16000013 			; <UNDEFINED> instruction: 0x16000013
 218:	00000018 	andeq	r0, r0, r8, lsl r0
 21c:	3f012e17 	svccc	0x00012e17
 220:	3a0e0319 	bcc	380e8c <startup-0x1fc7f174>
 224:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 228:	00193c13 	andseq	r3, r9, r3, lsl ip
 22c:	010b1800 	tsteq	fp, r0, lsl #16
 230:	06120111 			; <UNDEFINED> instruction: 0x06120111
 234:	01190000 	tsteq	r9, r0
 238:	00134901 	andseq	r4, r3, r1, lsl #18
 23c:	11010000 	mrsne	r0, (UNDEF: 1)
 240:	130e2501 	movwne	r2, #58625	; 0xe501
 244:	110e030b 	tstne	lr, fp, lsl #6
 248:	10061201 	andne	r1, r6, r1, lsl #4
 24c:	02000017 	andeq	r0, r0, #23
 250:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 254:	0b3b0b3a 	bleq	ec2f44 <startup-0x1f13d0bc>
 258:	00001349 	andeq	r1, r0, r9, asr #6
 25c:	0b002403 	bleq	9270 <startup-0x1fff6d90>
 260:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 264:	0400000e 	streq	r0, [r0], #-14
 268:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 26c:	0b3a0e03 	bleq	e83a80 <startup-0x1f17c580>
 270:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 274:	06120111 			; <UNDEFINED> instruction: 0x06120111
 278:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 27c:	00130119 	andseq	r0, r3, r9, lsl r1
 280:	00050500 	andeq	r0, r5, r0, lsl #10
 284:	0b3a0803 	bleq	e82298 <startup-0x1f17dd68>
 288:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 28c:	00001802 	andeq	r1, r0, r2, lsl #16
 290:	03003406 	movweq	r3, #1030	; 0x406
 294:	3b0b3a0e 	blcc	2cead4 <startup-0x1fd3152c>
 298:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 29c:	07000018 	smladeq	r0, r8, r0, r0
 2a0:	0111010b 	tsteq	r1, fp, lsl #2
 2a4:	00000612 	andeq	r0, r0, r2, lsl r6
 2a8:	03003408 	movweq	r3, #1032	; 0x408
 2ac:	3b0b3a08 	blcc	2cead4 <startup-0x1fd3152c>
 2b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2b4:	09000018 	stmdbeq	r0, {r3, r4}
 2b8:	0b0b0024 	bleq	2c0350 <startup-0x1fd3fcb0>
 2bc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 2c0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 2c4:	03193f00 	tsteq	r9, #0, 30
 2c8:	3b0b3a0e 	blcc	2ceb08 <startup-0x1fd314f8>
 2cc:	1119270b 	tstne	r9, fp, lsl #14
 2d0:	40061201 	andmi	r1, r6, r1, lsl #4
 2d4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2d8:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 2dc:	03193f01 	tsteq	r9, #1, 30
 2e0:	3b0b3a0e 	blcc	2ceb20 <startup-0x1fd314e0>
 2e4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 2e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2ec:	96184006 	ldrls	r4, [r8], -r6
 2f0:	13011942 	movwne	r1, #6466	; 0x1942
 2f4:	050c0000 	streq	r0, [ip, #-0]
 2f8:	3a0e0300 	bcc	380f00 <startup-0x1fc7f100>
 2fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 300:	00180213 	andseq	r0, r8, r3, lsl r2
 304:	010b0d00 	tsteq	fp, r0, lsl #26
 308:	00001755 	andeq	r1, r0, r5, asr r7
 30c:	3f012e0e 	svccc	0x00012e0e
 310:	3a0e0319 	bcc	380f7c <startup-0x1fc7f084>
 314:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 318:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 31c:	97184006 	ldrls	r4, [r8, -r6]
 320:	13011942 	movwne	r1, #6466	; 0x1942
 324:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 328:	03193f01 	tsteq	r9, #1, 30
 32c:	3b0b3a0e 	blcc	2ceb6c <startup-0x1fd31494>
 330:	1119270b 	tstne	r9, fp, lsl #14
 334:	40061201 	andmi	r1, r6, r1, lsl #4
 338:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 33c:	01000000 	mrseq	r0, (UNDEF: 0)
 340:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 344:	0e030b13 	vmoveq.32	d3[0], r0
 348:	06120111 			; <UNDEFINED> instruction: 0x06120111
 34c:	00001710 	andeq	r1, r0, r0, lsl r7
 350:	03011302 	movweq	r1, #4866	; 0x1302
 354:	3a0b0b0e 	bcc	2c2f94 <startup-0x1fd3d06c>
 358:	010b3b0b 	tsteq	fp, fp, lsl #22
 35c:	03000013 	movweq	r0, #19
 360:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 364:	0b3b0b3a 	bleq	ec3054 <startup-0x1f13cfac>
 368:	0b381349 	bleq	e05094 <startup-0x1f1faf6c>
 36c:	24040000 	strcs	r0, [r4], #-0
 370:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 374:	000e030b 	andeq	r0, lr, fp, lsl #6
 378:	00160500 	andseq	r0, r6, r0, lsl #10
 37c:	0b3a0e03 	bleq	e83b90 <startup-0x1f17c470>
 380:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 384:	0d060000 	stceq	0, cr0, [r6, #-0]
 388:	3a0e0300 	bcc	380f90 <startup-0x1fc7f070>
 38c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 390:	000b3813 	andeq	r3, fp, r3, lsl r8
 394:	00240700 	eoreq	r0, r4, r0, lsl #14
 398:	0b3e0b0b 	bleq	f82fcc <startup-0x1f07d034>
 39c:	00000803 	andeq	r0, r0, r3, lsl #16
 3a0:	49010108 	stmdbmi	r1, {r3, r8}
 3a4:	00130113 	andseq	r0, r3, r3, lsl r1
 3a8:	00210900 	eoreq	r0, r1, r0, lsl #18
 3ac:	0b2f1349 	bleq	bc50d8 <startup-0x1f43af28>
 3b0:	0f0a0000 	svceq	0x000a0000
 3b4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 3b8:	0b000013 	bleq	40c <startup-0x1ffffbf4>
 3bc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 3c0:	00001301 	andeq	r1, r0, r1, lsl #6
 3c4:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 3c8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 3cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3d0:	0b3a0e03 	bleq	e83be4 <startup-0x1f17c41c>
 3d4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3dc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3e0:	00130119 	andseq	r0, r3, r9, lsl r1
 3e4:	00050e00 	andeq	r0, r5, r0, lsl #28
 3e8:	0b3a0e03 	bleq	e83bfc <startup-0x1f17c404>
 3ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3f0:	00001802 	andeq	r1, r0, r2, lsl #16
 3f4:	0300050f 	movweq	r0, #1295	; 0x50f
 3f8:	3b0b3a08 	blcc	2cec20 <startup-0x1fd313e0>
 3fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 400:	10000018 	andne	r0, r0, r8, lsl r0
 404:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 408:	0b3a0e03 	bleq	e83c1c <startup-0x1f17c3e4>
 40c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 410:	06120111 			; <UNDEFINED> instruction: 0x06120111
 414:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 418:	00130119 	andseq	r0, r3, r9, lsl r1
 41c:	010b1100 	mrseq	r1, (UNDEF: 27)
 420:	06120111 			; <UNDEFINED> instruction: 0x06120111
 424:	34120000 	ldrcc	r0, [r2], #-0
 428:	3a080300 	bcc	201030 <startup-0x1fdfefd0>
 42c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 430:	00180213 	andseq	r0, r8, r3, lsl r2
 434:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 438:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 43c:	0b3b0b3a 	bleq	ec312c <startup-0x1f13ced4>
 440:	01111927 	tsteq	r1, r7, lsr #18
 444:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 448:	00194296 	mulseq	r9, r6, r2
 44c:	11010000 	mrsne	r0, (UNDEF: 1)
 450:	130e2501 	movwne	r2, #58625	; 0xe501
 454:	110e030b 	tstne	lr, fp, lsl #6
 458:	10061201 	andne	r1, r6, r1, lsl #4
 45c:	02000017 	andeq	r0, r0, #23
 460:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 464:	0b3a0e03 	bleq	e83c78 <startup-0x1f17c388>
 468:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 46c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 470:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 474:	03000019 	movweq	r0, #25
 478:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 47c:	0b3a0e03 	bleq	e83c90 <startup-0x1f17c370>
 480:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 484:	06120111 			; <UNDEFINED> instruction: 0x06120111
 488:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 48c:	00130119 	andseq	r0, r3, r9, lsl r1
 490:	00050400 	andeq	r0, r5, r0, lsl #8
 494:	0b3a0803 	bleq	e824a8 <startup-0x1f17db58>
 498:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 49c:	00001802 	andeq	r1, r0, r2, lsl #16
 4a0:	0b002405 	bleq	94bc <startup-0x1fff6b44>
 4a4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4a8:	0600000e 	streq	r0, [r0], -lr
 4ac:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 4b0:	0b3a0e03 	bleq	e83cc4 <startup-0x1f17c33c>
 4b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4bc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 4c0:	00000019 	andeq	r0, r0, r9, lsl r0
 4c4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 4c8:	030b130e 	movweq	r1, #45838	; 0xb30e
 4cc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 4d0:	00171006 	andseq	r1, r7, r6
 4d4:	01130200 	tsteq	r3, r0, lsl #4
 4d8:	0b0b0e03 	bleq	2c3cec <startup-0x1fd3c314>
 4dc:	0b3b0b3a 	bleq	ec31cc <startup-0x1f13ce34>
 4e0:	00001301 	andeq	r1, r0, r1, lsl #6
 4e4:	03000d03 	movweq	r0, #3331	; 0xd03
 4e8:	3b0b3a08 	blcc	2ced10 <startup-0x1fd312f0>
 4ec:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 4f0:	0400000b 	streq	r0, [r0], #-11
 4f4:	0b0b0024 	bleq	2c058c <startup-0x1fd3fa74>
 4f8:	0e030b3e 	vmoveq.16	d3[0], r0
 4fc:	16050000 	strne	r0, [r5], -r0
 500:	3a0e0300 	bcc	381108 <startup-0x1fc7eef8>
 504:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 508:	06000013 			; <UNDEFINED> instruction: 0x06000013
 50c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 510:	0b3b0b3a 	bleq	ec3200 <startup-0x1f13ce00>
 514:	0b381349 	bleq	e05240 <startup-0x1f1fadc0>
 518:	24070000 	strcs	r0, [r7], #-0
 51c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 520:	0008030b 	andeq	r0, r8, fp, lsl #6
 524:	01010800 	tsteq	r1, r0, lsl #16
 528:	13011349 	movwne	r1, #4937	; 0x1349
 52c:	21090000 	mrscs	r0, (UNDEF: 9)
 530:	2f134900 	svccs	0x00134900
 534:	0a00000b 	beq	568 <startup-0x1ffffa98>
 538:	0b0b000f 	bleq	2c057c <startup-0x1fd3fa84>
 53c:	00001349 	andeq	r1, r0, r9, asr #6
 540:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 544:	00130119 	andseq	r0, r3, r9, lsl r1
 548:	00050c00 	andeq	r0, r5, r0, lsl #24
 54c:	00001349 	andeq	r1, r0, r9, asr #6
 550:	0300340d 	movweq	r3, #1037	; 0x40d
 554:	3b0b3a0e 	blcc	2ced94 <startup-0x1fd3126c>
 558:	3f13490b 	svccc	0x0013490b
 55c:	00193c19 	andseq	r3, r9, r9, lsl ip
 560:	00340e00 	eorseq	r0, r4, r0, lsl #28
 564:	0b3a0e03 	bleq	e83d78 <startup-0x1f17c288>
 568:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 56c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 570:	340f0000 	strcc	r0, [pc], #-0	; 578 <startup-0x1ffffa88>
 574:	3a134700 	bcc	4d217c <startup-0x1fb2de84>
 578:	020b3b0b 	andeq	r3, fp, #11264	; 0x2c00
 57c:	10000018 	andne	r0, r0, r8, lsl r0
 580:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 584:	0b3a0e03 	bleq	e83d98 <startup-0x1f17c268>
 588:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 58c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 590:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 594:	11000019 	tstne	r0, r9, lsl r0
 598:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 59c:	0b3b0b3a 	bleq	ec328c <startup-0x1f13cd74>
 5a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5a4:	01000000 	mrseq	r0, (UNDEF: 0)
 5a8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 5ac:	0e030b13 	vmoveq.32	d3[0], r0
 5b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5b4:	00001710 	andeq	r1, r0, r0, lsl r7
 5b8:	3f012e02 	svccc	0x00012e02
 5bc:	3a0e0319 	bcc	381228 <startup-0x1fc7edd8>
 5c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5c4:	11134919 	tstne	r3, r9, lsl r9
 5c8:	40061201 	andmi	r1, r6, r1, lsl #4
 5cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5d0:	00001301 	andeq	r1, r0, r1, lsl #6
 5d4:	03003403 	movweq	r3, #1027	; 0x403
 5d8:	3b0b3a0e 	blcc	2cee18 <startup-0x1fd311e8>
 5dc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5e0:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
 5e4:	0111010b 	tsteq	r1, fp, lsl #2
 5e8:	00000612 	andeq	r0, r0, r2, lsl r6
 5ec:	03003405 	movweq	r3, #1029	; 0x405
 5f0:	3b0b3a08 	blcc	2cee18 <startup-0x1fd311e8>
 5f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5f8:	06000018 			; <UNDEFINED> instruction: 0x06000018
 5fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 600:	0b3a0e03 	bleq	e83e14 <startup-0x1f17c1ec>
 604:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 608:	1301193c 	movwne	r1, #6460	; 0x193c
 60c:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
 610:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 614:	0b0b000f 	bleq	2c0658 <startup-0x1fd3f9a8>
 618:	00001349 	andeq	r1, r0, r9, asr #6
 61c:	0b002409 	bleq	9648 <startup-0x1fff69b8>
 620:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 624:	0a00000e 	beq	664 <startup-0x1ffff99c>
 628:	13490101 	movtne	r0, #37121	; 0x9101
 62c:	00001301 	andeq	r1, r0, r1, lsl #6
 630:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
 634:	000b2f13 	andeq	r2, fp, r3, lsl pc
 638:	00240c00 	eoreq	r0, r4, r0, lsl #24
 63c:	0b3e0b0b 	bleq	f83270 <startup-0x1f07cd90>
 640:	00000803 	andeq	r0, r0, r3, lsl #16
 644:	3f012e0d 	svccc	0x00012e0d
 648:	3a0e0319 	bcc	3812b4 <startup-0x1fc7ed4c>
 64c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 650:	11134919 	tstne	r3, r9, lsl r9
 654:	40061201 	andmi	r1, r6, r1, lsl #4
 658:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 65c:	00001301 	andeq	r1, r0, r1, lsl #6
 660:	3f012e0e 	svccc	0x00012e0e
 664:	3a0e0319 	bcc	3812d0 <startup-0x1fc7ed30>
 668:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 66c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 670:	97184006 	ldrls	r4, [r8, -r6]
 674:	13011942 	movwne	r1, #6466	; 0x1942
 678:	050f0000 	streq	r0, [pc, #-0]	; 680 <startup-0x1ffff980>
 67c:	3a080300 	bcc	201284 <startup-0x1fdfed7c>
 680:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 684:	00180213 	andseq	r0, r8, r3, lsl r2
 688:	11010000 	mrsne	r0, (UNDEF: 1)
 68c:	130e2501 	movwne	r2, #58625	; 0xe501
 690:	110e030b 	tstne	lr, fp, lsl #6
 694:	10061201 	andne	r1, r6, r1, lsl #4
 698:	02000017 	andeq	r0, r0, #23
 69c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6a0:	0b3a0e03 	bleq	e83eb4 <startup-0x1f17c14c>
 6a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 6b0:	00130119 	andseq	r0, r3, r9, lsl r1
 6b4:	00050300 	andeq	r0, r5, r0, lsl #6
 6b8:	0b3a0803 	bleq	e826cc <startup-0x1f17d934>
 6bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6c0:	00001802 	andeq	r1, r0, r2, lsl #16
 6c4:	03000504 	movweq	r0, #1284	; 0x504
 6c8:	3b0b3a0e 	blcc	2cef08 <startup-0x1fd310f8>
 6cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6d0:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
 6d4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 6d8:	0b3b0b3a 	bleq	ec33c8 <startup-0x1f13cc38>
 6dc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6e0:	24060000 	strcs	r0, [r6], #-0
 6e4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 6e8:	000e030b 	andeq	r0, lr, fp, lsl #6
 6ec:	002e0700 	eoreq	r0, lr, r0, lsl #14
 6f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6f4:	0b3b0b3a 	bleq	ec33e4 <startup-0x1f13cc1c>
 6f8:	01111927 	tsteq	r1, r7, lsr #18
 6fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 700:	00194296 	mulseq	r9, r6, r2
 704:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 708:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 70c:	0b3b0b3a 	bleq	ec33fc <startup-0x1f13cc04>
 710:	13491927 	movtne	r1, #39207	; 0x9927
 714:	06120111 			; <UNDEFINED> instruction: 0x06120111
 718:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 71c:	00130119 	andseq	r0, r3, r9, lsl r1
 720:	00340900 	eorseq	r0, r4, r0, lsl #18
 724:	0b3a0803 	bleq	e82738 <startup-0x1f17d8c8>
 728:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 72c:	00001802 	andeq	r1, r0, r2, lsl #16
 730:	3f012e0a 	svccc	0x00012e0a
 734:	3a0e0319 	bcc	3813a0 <startup-0x1fc7ec60>
 738:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 73c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 740:	96184006 	ldrls	r4, [r8], -r6
 744:	13011942 	movwne	r1, #6466	; 0x1942
 748:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 74c:	03193f01 	tsteq	r9, #1, 30
 750:	3b0b3a0e 	blcc	2cef90 <startup-0x1fd31070>
 754:	1119270b 	tstne	r9, fp, lsl #14
 758:	40061201 	andmi	r1, r6, r1, lsl #4
 75c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 760:	00001301 	andeq	r1, r0, r1, lsl #6
 764:	3f012e0c 	svccc	0x00012e0c
 768:	3a0e0319 	bcc	3813d4 <startup-0x1fc7ec2c>
 76c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 770:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 774:	97184006 	ldrls	r4, [r8, -r6]
 778:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000148 	andeq	r0, r0, r8, asr #2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02340002 	eorseq	r0, r4, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000158 	andcs	r0, r0, r8, asr r1
  3c:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	04f00002 	ldrbteq	r0, [r0], #2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000348 	andcs	r0, r0, r8, asr #6
  5c:	00000550 	andeq	r0, r0, r0, asr r5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	07770002 	ldrbeq	r0, [r7, -r2]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000898 	mulcs	r0, r8, r8
  7c:	000000dc 	ldrdeq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	09990002 	ldmibeq	r9, {r1}
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000974 	andcs	r0, r0, r4, ror r9
  9c:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0a2a0002 	beq	a800bc <startup-0x1f57ff44>
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000a14 	andcs	r0, r0, r4, lsl sl
  bc:	0000005e 	andeq	r0, r0, lr, asr r0
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	0c170002 	ldceq	0, cr0, [r7], {2}
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000a74 	andcs	r0, r0, r4, ror sl
  dc:	00000150 	andeq	r0, r0, r0, asr r1
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	0d480002 	stcleq	0, cr0, [r8, #-8]
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20000bc4 	andcs	r0, r0, r4, asr #23
  fc:	000003dc 	ldrdeq	r0, [r0], -ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000158 	andcs	r0, r0, r8, asr r1
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
  18:	000000f8 	strdeq	r0, [r0], -r8
  1c:	0000011e 	andeq	r0, r0, lr, lsl r1
  20:	00000120 	andeq	r0, r0, r0, lsr #2
  24:	00000122 	andeq	r0, r0, r2, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000c8 	andeq	r0, r0, r8, asr #1
   4:	00740002 	rsbseq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  44:	5f6c6165 	svcpl	0x006c6165
  48:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  4c:	74730000 	ldrbtvc	r0, [r3], #-0
  50:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  54:	00632e70 	rsbeq	r2, r3, r0, ror lr
  58:	6f000001 	svcvs	0x00000001
  5c:	63656a62 	cmnvs	r5, #401408	; 0x62000
  60:	00682e74 	rsbeq	r2, r8, r4, ror lr
  64:	62000001 	andvs	r0, r0, #1
  68:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
  6c:	00010068 	andeq	r0, r1, r8, rrx
  70:	64617000 	strbtvs	r7, [r1], #-0
  74:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
  78:	00010068 	andeq	r0, r1, r8, rrx
  7c:	05000000 	streq	r0, [r0, #-0]
  80:	00000002 	andeq	r0, r0, r2
  84:	010c0320 	tsteq	ip, r0, lsr #6
  88:	03025e13 	movweq	r5, #11795	; 0x2e13
  8c:	00010100 	andeq	r0, r1, r0, lsl #2
  90:	00100205 	andseq	r0, r0, r5, lsl #4
  94:	15032000 	strne	r2, [r3, #-0]
  98:	4b3f3001 	blmi	fcc0a4 <startup-0x1f033f5c>
  9c:	d04b5959 	suble	r5, fp, r9, asr r9
  a0:	302f2f3e 	eorcc	r2, pc, lr, lsr pc	; <UNPREDICTABLE>
  a4:	3132302f 	teqcc	r2, pc, lsr #32
  a8:	67674b6b 	strbvs	r4, [r7, -fp, ror #22]!
  ac:	83130859 	tsthi	r3, #5832704	; 0x590000
  b0:	02008375 	andeq	r8, r0, #-738197503	; 0xd4000001
  b4:	006f0204 	rsbeq	r0, pc, r4, lsl #4
  b8:	06010402 	streq	r0, [r1], -r2, lsl #8
  bc:	0a030674 	beq	c1a94 <startup-0x1ff3e56c>
  c0:	59595958 	ldmdbpl	r9, {r3, r4, r6, r8, fp, ip, lr}^
  c4:	023c6e03 	eorseq	r6, ip, #3, 28	; 0x30
  c8:	01010007 	tsteq	r1, r7
  cc:	000000c1 	andeq	r0, r0, r1, asr #1
  d0:	00710002 	rsbseq	r0, r1, r2
  d4:	01020000 	mrseq	r0, (UNDEF: 2)
  d8:	000d0efb 	strdeq	r0, [sp], -fp
  dc:	01010101 	tsteq	r1, r1, lsl #2
  e0:	01000000 	mrseq	r0, (UNDEF: 0)
  e4:	43010000 	movwmi	r0, #4096	; 0x1000
  e8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  ec:	2f737265 	svccs	0x00737265
  f0:	706d6148 	rsbvc	r6, sp, r8, asr #2
  f4:	442f7375 	strtmi	r7, [pc], #-885	; fc <startup-0x1fffff04>
  f8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  fc:	442f706f 	strtmi	r7, [pc], #-111	; 104 <startup-0x1ffffefc>
 100:	31305441 	teqcc	r0, r1, asr #8
 104:	6f432f37 	svcvs	0x00432f37
 108:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 10c:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 110:	5f6c6165 	svcpl	0x006c6165
 114:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 118:	61620000 	cmnvs	r2, r0
 11c:	632e6c6c 			; <UNDEFINED> instruction: 0x632e6c6c
 120:	00000100 	andeq	r0, r0, r0, lsl #2
 124:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 128:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 12c:	00000100 	andeq	r0, r0, r0, lsl #2
 130:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 134:	0100682e 	tsteq	r0, lr, lsr #16
 138:	61700000 	cmnvs	r0, r0
 13c:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 140:	0100682e 	tsteq	r0, lr, lsr #16
 144:	00000000 	andeq	r0, r0, r0
 148:	01580205 	cmpeq	r8, r5, lsl #4
 14c:	1d032000 	stcne	0, cr2, [r3, #-0]
 150:	754d4b01 	strbvc	r4, [sp, #-2817]	; 0xfffff4ff
 154:	673d4b77 			; <UNDEFINED> instruction: 0x673d4b77
 158:	2f5c3d4b 	svccs	0x005c3d4b
 15c:	02009f31 	andeq	r9, r0, #49, 30	; 0xc4
 160:	66060104 	strvs	r0, [r6], -r4, lsl #2
 164:	69919f06 	ldmibvs	r1, {r1, r2, r8, r9, sl, fp, ip, pc}
 168:	3dad4c3d 	stccc	12, cr4, [sp, #244]!	; 0xf4
 16c:	3e4d7321 	cdpcc	3, 4, cr7, cr13, cr1, {1}
 170:	5d593d59 	ldclpl	13, cr3, [r9, #-356]	; 0xfffffe9c
 174:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 178:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 17c:	3d69599f 			; <UNDEFINED> instruction: 0x3d69599f
 180:	213d914c 	teqcs	sp, ip, asr #2
 184:	593e4d73 	ldmdbpl	lr!, {r0, r1, r4, r5, r6, r8, sl, fp, lr}
 188:	595c593d 	ldmdbpl	ip, {r0, r2, r3, r4, r5, r8, fp, ip, lr}^
 18c:	01000c02 	tsteq	r0, r2, lsl #24
 190:	00012e01 	andeq	r2, r1, r1, lsl #28
 194:	5f000200 	svcpl	0x00000200
 198:	02000000 	andeq	r0, r0, #0
 19c:	0d0efb01 	vstreq	d15, [lr, #-4]
 1a0:	01010100 	mrseq	r0, (UNDEF: 17)
 1a4:	00000001 	andeq	r0, r0, r1
 1a8:	01000001 	tsteq	r0, r1
 1ac:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff771 <returnKeys.4003+0xdfffe5bd>
 1b0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1b4:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 1b8:	2f737570 	svccs	0x00737570
 1bc:	6b736544 	blvs	1cd96d4 <startup-0x1e32692c>
 1c0:	2f706f74 	svccs	0x00706f74
 1c4:	30544144 	subscc	r4, r4, r4, asr #2
 1c8:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 1cc:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 1d0:	2f657469 	svccs	0x00657469
 1d4:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 1d8:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 1dc:	67000067 	strvs	r0, [r0, -r7, rrx]
 1e0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1e4:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
 1e8:	00000100 	andeq	r0, r0, r0, lsl #2
 1ec:	70617267 	rsbvc	r7, r1, r7, ror #4
 1f0:	2e636968 	vnmulcs.f16	s13, s6, s17	; <UNPREDICTABLE>
 1f4:	00010068 	andeq	r0, r1, r8, rrx
 1f8:	05000000 	streq	r0, [r0, #-0]
 1fc:	00034802 	andeq	r4, r3, r2, lsl #16
 200:	e5671920 	strb	r1, [r7, #-2336]!	; 0xfffff6e0
 204:	68d76776 	ldmvs	r7, {r1, r2, r4, r5, r6, r8, r9, sl, sp, lr}^
 208:	033d4b67 	teqeq	sp, #105472	; 0x19c00
 20c:	76033c0b 	strvc	r3, [r3], -fp, lsl #24
 210:	443d4b20 	ldrtmi	r4, [sp], #-2848	; 0xfffff4e0
 214:	4b207903 	blmi	81e628 <startup-0x1f7e19d8>
 218:	4b1c413d 	blmi	710714 <startup-0x1f8ef8ec>
 21c:	3d4c3e3d 	stclcc	14, cr3, [ip, #-244]	; 0xffffff0c
 220:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 224:	4b2f3d31 	blmi	bcf6f0 <startup-0x1f430910>
 228:	7903303d 	stmdbvc	r3, {r0, r2, r3, r4, r5, ip, sp}
 22c:	3d232858 	stccc	8, cr2, [r3, #-352]!	; 0xfffffea0
 230:	3d67ca3e 	vstmdbcc	r7!, {s25-s86}
 234:	2f593d3d 	svccs	0x00593d3d
 238:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 23c:	313d4b3e 	teqcc	sp, lr, lsr fp
 240:	3e313d4b 	cdpcc	13, 3, cr3, cr1, cr11, {2}
 244:	594b91ca 	stmdbpl	fp, {r1, r3, r6, r7, r8, ip, pc}^
 248:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
 24c:	59313d59 	ldmdbpl	r1!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 250:	3d3d313d 	ldfccs	f3, [sp, #-244]!	; 0xffffff0c
 254:	3d91763d 	ldccc	6, cr7, [r1, #244]	; 0xf4
 258:	4c833d59 	stcmi	13, cr3, [r3], {89}	; 0x59
 25c:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 260:	674c833d 	smlaldxvs	r8, ip, sp, r3
 264:	2f4c6759 	svccs	0x004c6759
 268:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 26c:	4b4b3d3d 	blmi	12cf768 <startup-0x1ed30898>
 270:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 274:	ad3d3d3e 	ldcge	13, cr3, [sp, #-248]!	; 0xffffff08
 278:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 27c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 280:	00490304 	subeq	r0, r9, r4, lsl #6
 284:	06010402 	streq	r0, [r1], -r2, lsl #8
 288:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 28c:	00390602 	eorseq	r0, r9, r2, lsl #12
 290:	06010402 	streq	r0, [r1], -r2, lsl #8
 294:	4d44063c 	stclmi	6, cr0, [r4, #-240]	; 0xffffff10
 298:	040200e6 	streq	r0, [r2], #-230	; 0xffffff1a
 29c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 2a0:	59ad685a 	stmibpl	sp!, {r1, r3, r4, r6, fp, sp, lr}
 2a4:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 2a8:	4b5b5959 	blmi	16d6814 <startup-0x1e9297ec>
 2ac:	684b4b78 	stmdavs	fp, {r3, r4, r5, r6, r8, r9, fp, lr}^
 2b0:	9fd7bb4d 	svcls	0x00d7bb4d
 2b4:	a1ae4bbc 			; <UNDEFINED> instruction: 0xa1ae4bbc
 2b8:	03ac5a03 			; <UNDEFINED> instruction: 0x03ac5a03
 2bc:	05022028 	streq	r2, [r2, #-40]	; 0xffffffd8
 2c0:	9d010100 	stflss	f0, [r1, #-0]
 2c4:	02000000 	andeq	r0, r0, #0
 2c8:	00005d00 	andeq	r5, r0, r0, lsl #26
 2cc:	fb010200 	blx	40ad6 <startup-0x1ffbf52a>
 2d0:	01000d0e 	tsteq	r0, lr, lsl #26
 2d4:	00010101 	andeq	r0, r1, r1, lsl #2
 2d8:	00010000 	andeq	r0, r1, r0
 2dc:	3a430100 	bcc	10c06e4 <startup-0x1ef3f91c>
 2e0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 2e4:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 2e8:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 2ec:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 2f0:	6f746b73 	svcvs	0x00746b73
 2f4:	41442f70 	hvcmi	17136	; 0x42f0
 2f8:	37313054 			; <UNDEFINED> instruction: 0x37313054
 2fc:	646f432f 	strbtvs	r4, [pc], #-815	; 304 <startup-0x1ffffcfc>
 300:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 304:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 308:	705f6c61 	subsvc	r6, pc, r1, ror #24
 30c:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 310:	6a626f00 	bvs	189bf18 <startup-0x1e7640e8>
 314:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 318:	00010063 	andeq	r0, r1, r3, rrx
 31c:	6a626f00 	bvs	189bf24 <startup-0x1e7640dc>
 320:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 324:	00010068 	andeq	r0, r1, r8, rrx
 328:	05000000 	streq	r0, [r0, #-0]
 32c:	00089802 	andeq	r9, r8, r2, lsl #16
 330:	004b1520 	subeq	r1, fp, r0, lsr #10
 334:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 338:	03040200 	movweq	r0, #16896	; 0x4200
 33c:	0200c708 	andeq	ip, r0, #8, 14	; 0x200000
 340:	3c060104 	stfccs	f0, [r6], {4}
 344:	4b4b3f06 	blmi	12cff64 <startup-0x1ed3009c>
 348:	03040200 	movweq	r0, #16896	; 0x4200
 34c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 350:	00c70803 	sbceq	r0, r7, r3, lsl #16
 354:	06010402 	streq	r0, [r1], -r2, lsl #8
 358:	4c3f063c 	ldcmi	6, cr0, [pc], #-240	; 270 <startup-0x1ffffd90>
 35c:	023d3d67 	eorseq	r3, sp, #6592	; 0x19c0
 360:	01010004 	tsteq	r1, r4
 364:	00000080 	andeq	r0, r0, r0, lsl #1
 368:	00500002 	subseq	r0, r0, r2
 36c:	01020000 	mrseq	r0, (UNDEF: 2)
 370:	000d0efb 	strdeq	r0, [sp], -fp
 374:	01010101 	tsteq	r1, r1, lsl #2
 378:	01000000 	mrseq	r0, (UNDEF: 0)
 37c:	43010000 	movwmi	r0, #4096	; 0x1000
 380:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 384:	2f737265 	svccs	0x00737265
 388:	706d6148 	rsbvc	r6, sp, r8, asr #2
 38c:	442f7375 	strtmi	r7, [pc], #-885	; 394 <startup-0x1ffffc6c>
 390:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 394:	442f706f 	strtmi	r7, [pc], #-111	; 39c <startup-0x1ffffc64>
 398:	31305441 	teqcc	r0, r1, asr #8
 39c:	6f432f37 	svcvs	0x00432f37
 3a0:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 3a4:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 3a8:	5f6c6165 	svcpl	0x006c6165
 3ac:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 3b0:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 3b4:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 3b8:	00010063 	andeq	r0, r1, r3, rrx
 3bc:	05000000 	streq	r0, [r0, #-0]
 3c0:	00097402 	andeq	r7, r9, r2, lsl #8
 3c4:	3d2f1420 	cfstrscc	mvf1, [pc, #-128]!	; 34c <startup-0x1ffffcb4>
 3c8:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 3cc:	06010402 	streq	r0, [r1], -r2, lsl #8
 3d0:	3d690620 	stclcc	6, cr0, [r9, #-128]!	; 0xffffff80
 3d4:	2f214ba0 	svccs	0x00214ba0
 3d8:	5e2a2f2f 	cdppl	15, 2, cr2, cr10, cr15, {1}
 3dc:	4c764e4c 	ldclmi	14, cr4, [r6], #-304	; 0xfffffed0
 3e0:	022f2f2f 	eoreq	r2, pc, #47, 30	; 0xbc
 3e4:	01010003 	tsteq	r1, r3
 3e8:	00000086 	andeq	r0, r0, r6, lsl #1
 3ec:	00690002 	rsbeq	r0, r9, r2
 3f0:	01020000 	mrseq	r0, (UNDEF: 2)
 3f4:	000d0efb 	strdeq	r0, [sp], -fp
 3f8:	01010101 	tsteq	r1, r1, lsl #2
 3fc:	01000000 	mrseq	r0, (UNDEF: 0)
 400:	43010000 	movwmi	r0, #4096	; 0x1000
 404:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 408:	2f737265 	svccs	0x00737265
 40c:	706d6148 	rsbvc	r6, sp, r8, asr #2
 410:	442f7375 	strtmi	r7, [pc], #-885	; 418 <startup-0x1ffffbe8>
 414:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 418:	442f706f 	strtmi	r7, [pc], #-111	; 420 <startup-0x1ffffbe0>
 41c:	31305441 	teqcc	r0, r1, asr #8
 420:	6f432f37 	svcvs	0x00432f37
 424:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 428:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 42c:	5f6c6165 	svcpl	0x006c6165
 430:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 434:	61700000 	cmnvs	r0, r0
 438:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 43c:	0100632e 	tsteq	r0, lr, lsr #6
 440:	626f0000 	rsbvs	r0, pc, #0
 444:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 448:	0100682e 	tsteq	r0, lr, lsr #16
 44c:	61700000 	cmnvs	r0, r0
 450:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 454:	0100682e 	tsteq	r0, lr, lsr #16
 458:	00000000 	andeq	r0, r0, r0
 45c:	0a140205 	beq	500c78 <startup-0x1faff388>
 460:	36032000 	strcc	r2, [r3], -r0
 464:	774d4b01 	strbvc	r4, [sp, -r1, lsl #22]
 468:	77834b4b 	strvc	r4, [r3, fp, asr #22]
 46c:	00040259 	andeq	r0, r4, r9, asr r2
 470:	00ac0101 	adceq	r0, ip, r1, lsl #2
 474:	00020000 	andeq	r0, r2, r0
 478:	00000051 	andeq	r0, r0, r1, asr r0
 47c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 480:	0101000d 	tsteq	r1, sp
 484:	00000101 	andeq	r0, r0, r1, lsl #2
 488:	00000100 	andeq	r0, r0, r0, lsl #2
 48c:	2f3a4301 	svccs	0x003a4301
 490:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 494:	61482f73 	hvcvs	33523	; 0x82f3
 498:	7375706d 	cmnvc	r5, #109	; 0x6d
 49c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 4a0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 4a4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 4a8:	2f373130 	svccs	0x00373130
 4ac:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 4b0:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 4b4:	6165722f 	cmnvs	r5, pc, lsr #4
 4b8:	6f705f6c 	svcvs	0x00705f6c
 4bc:	0000676e 	andeq	r6, r0, lr, ror #14
 4c0:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 4c4:	632e6461 			; <UNDEFINED> instruction: 0x632e6461
 4c8:	00000100 	andeq	r0, r0, r0, lsl #2
 4cc:	02050000 	andeq	r0, r5, #0
 4d0:	20000a74 	andcs	r0, r0, r4, ror sl
 4d4:	4b914b14 	blmi	fe45312c <returnKeys.4003+0xde451f78>
 4d8:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 4dc:	004b3d92 	umaaleq	r3, fp, r2, sp
 4e0:	06010402 	streq	r0, [r1], -r2, lsl #8
 4e4:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 4e8:	06010402 	streq	r0, [r1], -r2, lsl #8
 4ec:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 4f0:	06010402 	streq	r0, [r1], -r2, lsl #8
 4f4:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 4f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 4fc:	212f0658 			; <UNDEFINED> instruction: 0x212f0658
 500:	59683d68 	stmdbpl	r8!, {r3, r5, r6, r8, sl, fp, ip, sp}^
 504:	59672f67 	stmdbpl	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp}^
 508:	02003008 	andeq	r3, r0, #8
 50c:	79030204 	stmdbvc	r3, {r2, r9}
 510:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
 514:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
 518:	3d580a03 	vldrcc	s1, [r8, #-12]
 51c:	00090221 	andeq	r0, r9, r1, lsr #4
 520:	00d20101 	sbcseq	r0, r2, r1, lsl #2
 524:	00020000 	andeq	r0, r2, r0
 528:	00000057 	andeq	r0, r0, r7, asr r0
 52c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 530:	0101000d 	tsteq	r1, sp
 534:	00000101 	andeq	r0, r0, r1, lsl #2
 538:	00000100 	andeq	r0, r0, r0, lsl #2
 53c:	2f3a4301 	svccs	0x003a4301
 540:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 544:	61482f73 	hvcvs	33523	; 0x82f3
 548:	7375706d 	cmnvc	r5, #109	; 0x6d
 54c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 550:	706f746b 	rsbvc	r7, pc, fp, ror #8
 554:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 558:	2f373130 	svccs	0x00373130
 55c:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 560:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 564:	6165722f 	cmnvs	r5, pc, lsr #4
 568:	6f705f6c 	svcvs	0x00705f6c
 56c:	0000676e 	andeq	r6, r0, lr, ror #14
 570:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 574:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
 578:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 57c:	0100632e 	tsteq	r0, lr, lsr #6
 580:	00000000 	andeq	r0, r0, r0
 584:	0bc40205 	bleq	ff100da0 <returnKeys.4003+0xdf0ffbec>
 588:	09032000 	stmdbeq	r3, {sp}
 58c:	91914b01 	orrsls	r4, r1, r1, lsl #22
 590:	91919191 			; <UNDEFINED> instruction: 0x91919191
 594:	84a09191 	strthi	r9, [r0], #401	; 0x191
 598:	9191914b 	orrsls	r9, r1, fp, asr #2
 59c:	91919191 			; <UNDEFINED> instruction: 0x91919191
 5a0:	67929291 			; <UNDEFINED> instruction: 0x67929291
 5a4:	3d2f4b3d 	fstmdbxcc	pc!, {d4-d33}	;@ Deprecated
 5a8:	2f3d3d68 	svccs	0x003d3d68
 5ac:	2f3d4b2f 	svccs	0x003d4b2f
 5b0:	3d3d6776 	ldccc	7, cr6, [sp, #-472]!	; 0xfffffe28
 5b4:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
 5b8:	3d4c593d 	vstrcc.16	s11, [ip, #-122]	; 0xffffff86	; <UNPREDICTABLE>
 5bc:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 5c0:	842f6767 	strthi	r6, [pc], #-1895	; 5c8 <startup-0x1ffffa38>
 5c4:	3d3d673d 	ldccc	7, cr6, [sp, #-244]!	; 0xffffff0c
 5c8:	2f676759 	svccs	0x00676759
 5cc:	02007584 	andeq	r7, r0, #132, 10	; 0x21000000
 5d0:	20060104 	andcs	r0, r6, r4, lsl #2
 5d4:	593d8506 	ldmdbpl	sp!, {r1, r2, r8, sl, pc}
 5d8:	3d2f4c4b 	stccc	12, cr4, [pc, #-300]!	; 4b4 <startup-0x1ffffb4c>
 5dc:	4b594b4b 	blmi	1653310 <startup-0x1e9accf0>
 5e0:	02006768 	andeq	r6, r0, #104, 14	; 0x1a00000
 5e4:	20060104 	andcs	r0, r6, r4, lsl #2
 5e8:	593d8506 	ldmdbpl	sp!, {r1, r2, r8, sl, pc}
 5ec:	67914c3d 			; <UNDEFINED> instruction: 0x67914c3d
 5f0:	029f764b 	addseq	r7, pc, #78643200	; 0x4b00000
 5f4:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	59726964 	ldmdbpl	r2!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	736f7000 	cmnvc	pc, #0
   8:	69730059 	ldmdbvs	r3!, {r0, r3, r4, r6}^
   c:	0058657a 	subseq	r6, r8, sl, ror r5
  10:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
  14:	64615074 	strbtvs	r5, [r1], #-116	; 0xffffff8c
  18:	00656c64 	rsbeq	r6, r5, r4, ror #24
  1c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  20:	72640059 	rsbvc	r0, r4, #89	; 0x59
  24:	43007761 	movwmi	r7, #1889	; 0x761
  28:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  2c:	2f737265 	svccs	0x00737265
  30:	706d6148 	rsbvc	r6, sp, r8, asr #2
  34:	442f7375 	strtmi	r7, [pc], #-885	; 3c <startup-0x1fffffc4>
  38:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  3c:	442f706f 	strtmi	r7, [pc], #-111	; 44 <startup-0x1fffffbc>
  40:	31305441 	teqcc	r0, r1, asr #8
  44:	6f432f37 	svcvs	0x00432f37
  48:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  4c:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  50:	5f6c6165 	svcpl	0x006c6165
  54:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  58:	6174732f 	cmnvs	r4, pc, lsr #6
  5c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  60:	7300632e 	movwvc	r6, #814	; 0x32e
  64:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
  68:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  6c:	6f507400 	svcvs	0x00507400
  70:	00746e69 	rsbseq	r6, r4, r9, ror #28
  74:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  78:	736e7500 	cmnvc	lr, #0, 10
  7c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  80:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  84:	47007261 	strmi	r7, [r0, -r1, ror #4]
  88:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  8c:	36203939 			; <UNDEFINED> instruction: 0x36203939
  90:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  94:	31303220 	teqcc	r0, r0, lsr #4
  98:	31323037 	teqcc	r2, r7, lsr r0
  9c:	72282035 	eorvc	r2, r8, #53	; 0x35
  a0:	61656c65 	cmnvs	r5, r5, ror #24
  a4:	20296573 	eorcs	r6, r9, r3, ror r5
  a8:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  ac:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  b0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  b4:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  b8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  bc:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  c0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  c4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  c8:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  cc:	205d3231 	subscs	r3, sp, r1, lsr r2
  d0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  d4:	20626d75 	rsbcs	r6, r2, r5, ror sp
  d8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  dc:	613d6863 	teqvs	sp, r3, ror #16
  e0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  e4:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  e8:	6f6c666d 	svcvs	0x006c666d
  ec:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  f0:	733d6962 	teqvc	sp, #1605632	; 0x188000
  f4:	2074666f 	rsbscs	r6, r4, pc, ror #12
  f8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  fc:	20626d75 	rsbcs	r6, r2, r5, ror sp
 100:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 104:	613d6863 	teqvs	sp, r3, ror #16
 108:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 10c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 110:	4f2d2067 	svcmi	0x002d2067
 114:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 118:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 11c:	50003939 	andpl	r3, r0, r9, lsr r9
 120:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; c <startup-0x1ffffff4>
 124:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 128:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 12c:	70615f74 	rsbvc	r5, r1, r4, ror pc
 130:	47740070 			; <UNDEFINED> instruction: 0x47740070
 134:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 138:	00797274 	rsbseq	r7, r9, r4, ror r2
 13c:	73657270 	cmnvc	r5, #112, 4
 140:	4b646573 	blmi	1919714 <startup-0x1e6e68ec>
 144:	00737965 	rsbseq	r7, r3, r5, ror #18
 148:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 14c:	00707574 	rsbseq	r7, r0, r4, ror r5
 150:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
 154:	64646150 	strbtvs	r6, [r4], #-336	; 0xfffffeb0
 158:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
 15c:	006e6961 	rsbeq	r6, lr, r1, ror #18
 160:	4a424f50 	bmi	1093ea8 <startup-0x1ef6c158>
 164:	00544345 	subseq	r4, r4, r5, asr #6
 168:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 16c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 170:	736f7000 	cmnvc	pc, #0
 174:	69640058 	stmdbvs	r4!, {r3, r4, r6}^
 178:	6e005872 	mcrvs	8, 0, r5, cr0, cr2, {3}
 17c:	6f506d75 	svcvs	0x00506d75
 180:	73746e69 	cmnvc	r4, #1680	; 0x690
 184:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 188:	7400544e 	strvc	r5, [r0], #-1102	; 0xfffffbb2
 18c:	006a624f 	rsbeq	r6, sl, pc, asr #4
 190:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 194:	6f65675f 	svcvs	0x0065675f
 198:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 19c:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 1a0:	5f79616c 	svcpl	0x0079616c
 1a4:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 1a8:	68740069 	ldmdavs	r4!, {r0, r3, r5, r6}^
 1ac:	6d007369 	stcvs	3, cr7, [r0, #-420]	; 0xfffffe5c
 1b0:	5f65766f 	svcpl	0x0065766f
 1b4:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 1b8:	2f3a4300 	svccs	0x003a4300
 1bc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1c0:	61482f73 	hvcvs	33523	; 0x82f3
 1c4:	7375706d 	cmnvc	r5, #109	; 0x6d
 1c8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1cc:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1d0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 1d4:	2f373130 	svccs	0x00373130
 1d8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 1dc:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 1e0:	6165722f 	cmnvs	r5, pc, lsr #4
 1e4:	6f705f6c 	svcvs	0x00705f6c
 1e8:	622f676e 	eorvs	r6, pc, #28835840	; 0x1b80000
 1ec:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
 1f0:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
 1f4:	00317473 	eorseq	r7, r1, r3, ror r4
 1f8:	70617267 	rsbvc	r7, r1, r7, ror #4
 1fc:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 200:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 204:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 208:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 20c:	00726165 	rsbseq	r6, r2, r5, ror #2
 210:	70617267 	rsbvc	r7, r1, r7, ror #4
 214:	5f636968 	svcpl	0x00636968
 218:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 21c:	6f635f65 	svcvs	0x00635f65
 220:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 224:	69700064 	ldmdbvs	r0!, {r2, r5, r6}^
 228:	006c6578 	rsbeq	r6, ip, r8, ror r5
 22c:	70617267 	rsbvc	r7, r1, r7, ror #4
 230:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 234:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 238:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 23c:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 240:	72670074 	rsbvc	r0, r7, #116	; 0x74
 244:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 248:	725f7363 	subsvc	r7, pc, #-1946157055	; 0x8c000001
 24c:	5f646165 	svcpl	0x00646165
 250:	61746164 	cmnvs	r4, r4, ror #2
 254:	61726700 	cmnvs	r2, r0, lsl #14
 258:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 25c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 260:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 264:	00796461 	rsbseq	r6, r9, r1, ror #8
 268:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff82d <returnKeys.4003+0xdfffe679>
 26c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 270:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 274:	2f737570 	svccs	0x00737570
 278:	6b736544 	blvs	1cd9790 <startup-0x1e326870>
 27c:	2f706f74 	svccs	0x00706f74
 280:	30544144 	subscc	r4, r4, r4, asr #2
 284:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 288:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 28c:	2f657469 	svccs	0x00657469
 290:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 294:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 298:	72672f67 	rsbvc	r2, r7, #412	; 0x19c
 29c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2a0:	00632e63 	rsbeq	r2, r3, r3, ror #28
 2a4:	6b73616d 	blvs	1cd8860 <startup-0x1e3277a0>
 2a8:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 2ac:	745f3874 	ldrbvc	r3, [pc], #-2164	; 2b4 <startup-0x1ffffd4c>
 2b0:	73756200 	cmnvc	r5, #0, 4
 2b4:	72670079 	rsbvc	r0, r7, #121	; 0x79
 2b8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2bc:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 2c0:	00657469 	rsbeq	r7, r5, r9, ror #8
 2c4:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 2c8:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 2cc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 2d0:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 2d4:	65740072 	ldrbvs	r0, [r4, #-114]!	; 0xffffff8e
 2d8:	6900706d 	stmdbvs	r0, {r0, r2, r3, r5, r6, ip, sp, lr}
 2dc:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 2e0:	61726700 	cmnvs	r2, r0, lsl #14
 2e4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2e8:	6165725f 	cmnvs	r5, pc, asr r2
 2ec:	72670064 	rsbvc	r0, r7, #100	; 0x64
 2f0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2f4:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 2f8:	5f657469 	svcpl	0x00657469
 2fc:	61746164 	cmnvs	r4, r4, ror #2
 300:	67617000 	strbvs	r7, [r1, -r0]!
 304:	61760065 	cmnvs	r6, r5, rrx
 308:	0065756c 	rsbeq	r7, r5, ip, ror #10
 30c:	70617267 	rsbvc	r7, r1, r7, ror #4
 310:	5f636968 	svcpl	0x00636968
 314:	61656c63 	cmnvs	r5, r3, ror #24
 318:	63735f72 	cmnvs	r3, #456	; 0x1c8
 31c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 320:	61726700 	cmnvs	r2, r0, lsl #14
 324:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 328:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 32c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 330:	00657a69 	rsbeq	r7, r5, r9, ror #20
 334:	5f746573 	svcpl	0x00746573
 338:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 33c:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 340:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 344:	2f3a4300 	svccs	0x003a4300
 348:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 34c:	61482f73 	hvcvs	33523	; 0x82f3
 350:	7375706d 	cmnvc	r5, #109	; 0x6d
 354:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 358:	706f746b 	rsbvc	r7, pc, fp, ror #8
 35c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 360:	2f373130 	svccs	0x00373130
 364:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 368:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 36c:	6165722f 	cmnvs	r5, pc, lsr #4
 370:	6f705f6c 	svcvs	0x00705f6c
 374:	6f2f676e 	svcvs	0x002f676e
 378:	63656a62 	cmnvs	r5, #401408	; 0x62000
 37c:	00632e74 	rsbeq	r2, r3, r4, ror lr
 380:	61656c63 	cmnvs	r5, r3, ror #24
 384:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 388:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 38c:	61726400 	cmnvs	r2, r0, lsl #8
 390:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 394:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 398:	736e7500 	cmnvc	lr, #0, 10
 39c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 3a0:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 3a4:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 3a8:	5f79616c 	svcpl	0x0079616c
 3ac:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 3b0:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 3b4:	5f79616c 	svcpl	0x0079616c
 3b8:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 3bc:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 3c0:	5f79616c 	svcpl	0x0079616c
 3c4:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 3c8:	3a43006f 	bcc	10c058c <startup-0x1ef3fa74>
 3cc:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 3d0:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 3d4:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 3d8:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 3dc:	6f746b73 	svcvs	0x00746b73
 3e0:	41442f70 	hvcmi	17136	; 0x42f0
 3e4:	37313054 			; <UNDEFINED> instruction: 0x37313054
 3e8:	646f432f 	strbtvs	r4, [pc], #-815	; 3f0 <startup-0x1ffffc10>
 3ec:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 3f0:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 3f4:	705f6c61 	subsvc	r6, pc, r1, ror #24
 3f8:	2f676e6f 	svccs	0x00676e6f
 3fc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 400:	00632e72 	rsbeq	r2, r3, r2, ror lr
 404:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 408:	6461705f 	strbtvs	r7, [r1], #-95	; 0xffffffa1
 40c:	00656c64 	rsbeq	r6, r5, r4, ror #24
 410:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 414:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
 418:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 41c:	00797274 	rsbseq	r7, r9, r4, ror r2
 420:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff9e5 <returnKeys.4003+0xdfffe831>
 424:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 428:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 42c:	2f737570 	svccs	0x00737570
 430:	6b736544 	blvs	1cd9948 <startup-0x1e3266b8>
 434:	2f706f74 	svccs	0x00706f74
 438:	30544144 	subscc	r4, r4, r4, asr #2
 43c:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 440:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 444:	2f657469 	svccs	0x00657469
 448:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 44c:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 450:	61702f67 	cmnvs	r0, r7, ror #30
 454:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 458:	6b00632e 	blvs	19118 <startup-0x1ffe6ee8>
 45c:	00627965 	rsbeq	r7, r2, r5, ror #18
 460:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 464:	654b6e72 	strbvs	r6, [fp, #-3698]	; 0xfffff18e
 468:	72007379 	andvc	r7, r0, #-469762047	; 0xe4000001
 46c:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
 470:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 474:	3a43006e 	bcc	10c0634 <startup-0x1ef3f9cc>
 478:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 47c:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 480:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 484:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 488:	6f746b73 	svcvs	0x00746b73
 48c:	41442f70 	hvcmi	17136	; 0x42f0
 490:	37313054 			; <UNDEFINED> instruction: 0x37313054
 494:	646f432f 	strbtvs	r4, [pc], #-815	; 49c <startup-0x1ffffb64>
 498:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 49c:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 4a0:	705f6c61 	subsvc	r6, pc, r1, ror #24
 4a4:	2f676e6f 	svccs	0x00676e6f
 4a8:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 4ac:	632e6461 			; <UNDEFINED> instruction: 0x632e6461
 4b0:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 4b8 <startup-0x1ffffb48>
 4b4:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 4b8:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 4bc:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
 4c0:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 4c4:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
 4c8:	63736100 	cmnvs	r3, #0, 2
 4cc:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 4d0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 4d4:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 4d8:	63736100 	cmnvs	r3, #0, 2
 4dc:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 4e0:	5f6c7274 	svcpl	0x006c7274
 4e4:	5f746962 	svcpl	0x00746962
 4e8:	61656c63 	cmnvs	r5, r3, ror #24
 4ec:	73610072 	cmnvc	r1, #114	; 0x72
 4f0:	5f696963 	svcpl	0x00696963
 4f4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4f8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 4fc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 334 <startup-0x1ffffccc>
 500:	0072656c 	rsbseq	r6, r2, ip, ror #10
 504:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 508:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 50c:	5f657469 	svcpl	0x00657469
 510:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 514:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 518:	64007265 	strvs	r7, [r0], #-613	; 0xfffffd9b
 51c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 520:	7263694d 	rsbvc	r6, r3, #1261568	; 0x134000
 524:	3a43006f 	bcc	10c06e8 <startup-0x1ef3f918>
 528:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 52c:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 530:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 534:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 538:	6f746b73 	svcvs	0x00746b73
 53c:	41442f70 	hvcmi	17136	; 0x42f0
 540:	37313054 			; <UNDEFINED> instruction: 0x37313054
 544:	646f432f 	strbtvs	r4, [pc], #-815	; 54c <startup-0x1ffffab4>
 548:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 54c:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 550:	705f6c61 	subsvc	r6, pc, r1, ror #24
 554:	2f676e6f 	svccs	0x00676e6f
 558:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 55c:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
 560:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 564:	6100632e 	tstvs	r0, lr, lsr #6
 568:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 56c:	61007373 	tstvs	r0, r3, ror r3
 570:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 574:	6165725f 	cmnvs	r5, pc, asr r2
 578:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 57c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 580:	63736100 	cmnvs	r3, #0, 2
 584:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 588:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 58c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 590:	73610061 	cmnvc	r1, #97	; 0x61
 594:	5f696963 	svcpl	0x00696963
 598:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 59c:	00646e61 	rsbeq	r6, r4, r1, ror #28
 5a0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5a4:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 5a8:	645f6461 	ldrbvs	r6, [pc], #-1121	; 5b0 <startup-0x1ffffa50>
 5ac:	00617461 	rsbeq	r7, r1, r1, ror #8
 5b0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 5b4:	61686300 	cmnvs	r8, r0, lsl #6
 5b8:	576f5472 			; <UNDEFINED> instruction: 0x576f5472
 5bc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 5c0:	546f6700 	strbtpl	r6, [pc], #-1792	; 5c8 <startup-0x1ffffa38>
 5c4:	0059586f 	subseq	r5, r9, pc, ror #16
 5c8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5cc:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 5d0:	5f657469 	svcpl	0x00657469
 5d4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 5d8:	63736100 	cmnvs	r3, #0, 2
 5dc:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 5e0:	5f6c7274 	svcpl	0x006c7274
 5e4:	5f746962 	svcpl	0x00746962
 5e8:	00746573 	rsbseq	r6, r4, r3, ror r5
 5ec:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5f0:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 5f4:	Address 0x000005f4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000048 	andeq	r0, r0, r8, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000058 	andcs	r0, r0, r8, asr r0
  48:	00000100 	andeq	r0, r0, r0, lsl #2
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	200e4101 	andcs	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	00000020 	andeq	r0, r0, r0, lsr #32
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	20000158 	andcs	r0, r0, r8, asr r1
  78:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  7c:	400c0e41 	andmi	r0, ip, r1, asr #28
  80:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  84:	018e4002 	orreq	r4, lr, r2
  88:	41500e41 	cmpmi	r0, r1, asr #28
  8c:	0000070d 	andeq	r0, r0, sp, lsl #14
  90:	0000000c 	andeq	r0, r0, ip
  94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  98:	7c020001 	stcvc	0, cr0, [r2], {1}
  9c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	00000090 	muleq	r0, r0, r0
  a8:	20000348 	andcs	r0, r0, r8, asr #6
  ac:	00000038 	andeq	r0, r0, r8, lsr r0
  b0:	40080e41 	andmi	r0, r8, r1, asr #28
  b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b8:	100e4101 	andne	r4, lr, r1, lsl #2
  bc:	00070d41 	andeq	r0, r7, r1, asr #26
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	00000090 	muleq	r0, r0, r0
  c8:	20000380 	andcs	r0, r0, r0, lsl #7
  cc:	00000034 	andeq	r0, r0, r4, lsr r0
  d0:	40080e41 	andmi	r0, r8, r1, asr #28
  d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d8:	100e4101 	andne	r4, lr, r1, lsl #2
  dc:	00070d41 	andeq	r0, r7, r1, asr #26
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	00000090 	muleq	r0, r0, r0
  e8:	200003b4 			; <UNDEFINED> instruction: 0x200003b4
  ec:	0000006a 	andeq	r0, r0, sl, rrx
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	100e4101 	andne	r4, lr, r1, lsl #2
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	00000090 	muleq	r0, r0, r0
 108:	2000041e 	andcs	r0, r0, lr, lsl r4
 10c:	00000072 	andeq	r0, r0, r2, ror r0
 110:	40080e41 	andmi	r0, r8, r1, asr #28
 114:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 118:	100e4101 	andne	r4, lr, r1, lsl #2
 11c:	00070d41 	andeq	r0, r7, r1, asr #26
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	00000090 	muleq	r0, r0, r0
 128:	20000490 	mulcs	r0, r0, r4
 12c:	00000090 	muleq	r0, r0, r0
 130:	40080e41 	andmi	r0, r8, r1, asr #28
 134:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 138:	180e4101 	stmdane	lr, {r0, r8, lr}
 13c:	00070d41 	andeq	r0, r7, r1, asr #26
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	00000090 	muleq	r0, r0, r0
 148:	20000520 	andcs	r0, r0, r0, lsr #10
 14c:	00000080 	andeq	r0, r0, r0, lsl #1
 150:	40080e41 	andmi	r0, r8, r1, asr #28
 154:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 158:	100e4101 	andne	r4, lr, r1, lsl #2
 15c:	00070d41 	andeq	r0, r7, r1, asr #26
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	00000090 	muleq	r0, r0, r0
 168:	200005a0 	andcs	r0, r0, r0, lsr #11
 16c:	00000040 	andeq	r0, r0, r0, asr #32
 170:	40080e41 	andmi	r0, r8, r1, asr #28
 174:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 178:	100e4101 	andne	r4, lr, r1, lsl #2
 17c:	00070d41 	andeq	r0, r7, r1, asr #26
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	00000090 	muleq	r0, r0, r0
 188:	200005e0 	andcs	r0, r0, r0, ror #11
 18c:	00000046 	andeq	r0, r0, r6, asr #32
 190:	40080e41 	andmi	r0, r8, r1, asr #28
 194:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 198:	100e4101 	andne	r4, lr, r1, lsl #2
 19c:	00070d41 	andeq	r0, r7, r1, asr #26
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000090 	muleq	r0, r0, r0
 1a8:	20000626 	andcs	r0, r0, r6, lsr #12
 1ac:	0000002a 	andeq	r0, r0, sl, lsr #32
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	100e4101 	andne	r4, lr, r1, lsl #2
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	00000018 	andeq	r0, r0, r8, lsl r0
 1c4:	00000090 	muleq	r0, r0, r0
 1c8:	20000650 	andcs	r0, r0, r0, asr r6
 1cc:	0000005c 	andeq	r0, r0, ip, asr r0
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000090 	muleq	r0, r0, r0
 1e4:	200006ac 	andcs	r0, r0, ip, lsr #13
 1e8:	00000058 	andeq	r0, r0, r8, asr r0
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	100e4101 	andne	r4, lr, r1, lsl #2
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	00000090 	muleq	r0, r0, r0
 204:	20000704 	andcs	r0, r0, r4, lsl #14
 208:	00000194 	muleq	r0, r4, r1
 20c:	400c0e41 	andmi	r0, ip, r1, asr #28
 210:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 214:	018e4002 	orreq	r4, lr, r2
 218:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 21c:	0000070d 	andeq	r0, r0, sp, lsl #14
 220:	0000000c 	andeq	r0, r0, ip
 224:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 228:	7c020001 	stcvc	0, cr0, [r2], {1}
 22c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000220 	andeq	r0, r0, r0, lsr #4
 238:	20000898 	mulcs	r0, r8, r8
 23c:	0000005e 	andeq	r0, r0, lr, asr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000220 	andeq	r0, r0, r0, lsr #4
 258:	200008f6 	strdcs	r0, [r0], -r6
 25c:	0000005e 	andeq	r0, r0, lr, asr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	180e4101 	stmdane	lr, {r0, r8, lr}
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	00000220 	andeq	r0, r0, r0, lsr #4
 278:	20000954 	andcs	r0, r0, r4, asr r9
 27c:	00000020 	andeq	r0, r0, r0, lsr #32
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	180e4101 	stmdane	lr, {r0, r8, lr}
 28c:	00070d41 	andeq	r0, r7, r1, asr #26
 290:	0000000c 	andeq	r0, r0, ip
 294:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 298:	7c020001 	stcvc	0, cr0, [r2], {1}
 29c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a0:	00000018 	andeq	r0, r0, r8, lsl r0
 2a4:	00000290 	muleq	r0, r0, r2
 2a8:	20000974 	andcs	r0, r0, r4, ror r9
 2ac:	00000044 	andeq	r0, r0, r4, asr #32
 2b0:	40080e41 	andmi	r0, r8, r1, asr #28
 2b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	00000290 	muleq	r0, r0, r2
 2c4:	200009b8 			; <UNDEFINED> instruction: 0x200009b8
 2c8:	0000002c 	andeq	r0, r0, ip, lsr #32
 2cc:	40080e41 	andmi	r0, r8, r1, asr #28
 2d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d4:	100e4101 	andne	r4, lr, r1, lsl #2
 2d8:	00070d41 	andeq	r0, r7, r1, asr #26
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	00000290 	muleq	r0, r0, r2
 2e4:	200009e4 	andcs	r0, r0, r4, ror #19
 2e8:	0000001e 	andeq	r0, r0, lr, lsl r0
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	100e4101 	andne	r4, lr, r1, lsl #2
 2f8:	00070d41 	andeq	r0, r7, r1, asr #26
 2fc:	00000018 	andeq	r0, r0, r8, lsl r0
 300:	00000290 	muleq	r0, r0, r2
 304:	20000a02 	andcs	r0, r0, r2, lsl #20
 308:	00000012 	andeq	r0, r0, r2, lsl r0
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 318:	0000000c 	andeq	r0, r0, ip
 31c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 320:	7c020001 	stcvc	0, cr0, [r2], {1}
 324:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 328:	0000001c 	andeq	r0, r0, ip, lsl r0
 32c:	00000318 	andeq	r0, r0, r8, lsl r3
 330:	20000a14 	andcs	r0, r0, r4, lsl sl
 334:	0000005e 	andeq	r0, r0, lr, asr r0
 338:	40080e41 	andmi	r0, r8, r1, asr #28
 33c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 340:	100e4101 	andne	r4, lr, r1, lsl #2
 344:	00070d41 	andeq	r0, r7, r1, asr #26
 348:	0000000c 	andeq	r0, r0, ip
 34c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 350:	7c020001 	stcvc	0, cr0, [r2], {1}
 354:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 358:	0000001c 	andeq	r0, r0, ip, lsl r0
 35c:	00000348 	andeq	r0, r0, r8, asr #6
 360:	20000a74 	andcs	r0, r0, r4, ror sl
 364:	00000054 	andeq	r0, r0, r4, asr r0
 368:	40080e41 	andmi	r0, r8, r1, asr #28
 36c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 370:	100e4101 	andne	r4, lr, r1, lsl #2
 374:	00070d41 	andeq	r0, r7, r1, asr #26
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	00000348 	andeq	r0, r0, r8, asr #6
 380:	20000ac8 	andcs	r0, r0, r8, asr #21
 384:	00000054 	andeq	r0, r0, r4, asr r0
 388:	40080e41 	andmi	r0, r8, r1, asr #28
 38c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 390:	100e4101 	andne	r4, lr, r1, lsl #2
 394:	00070d41 	andeq	r0, r7, r1, asr #26
 398:	00000020 	andeq	r0, r0, r0, lsr #32
 39c:	00000348 	andeq	r0, r0, r8, asr #6
 3a0:	20000b1c 	andcs	r0, r0, ip, lsl fp
 3a4:	000000a8 	andeq	r0, r0, r8, lsr #1
 3a8:	400c0e41 	andmi	r0, ip, r1, asr #28
 3ac:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3b0:	018e4002 	orreq	r4, lr, r2
 3b4:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 3b8:	0000070d 	andeq	r0, r0, sp, lsl #14
 3bc:	0000000c 	andeq	r0, r0, ip
 3c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3c4:	7c020001 	stcvc	0, cr0, [r2], {1}
 3c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 3d4:	20000bc4 	andcs	r0, r0, r4, asr #23
 3d8:	000000bc 	strheq	r0, [r0], -ip
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	100e4101 	andne	r4, lr, r1, lsl #2
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 3f4:	20000c80 	andcs	r0, r0, r0, lsl #25
 3f8:	000000bc 	strheq	r0, [r0], -ip
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	100e4101 	andne	r4, lr, r1, lsl #2
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 414:	20000d3c 	andcs	r0, r0, ip, lsr sp
 418:	00000030 	andeq	r0, r0, r0, lsr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	100e4101 	andne	r4, lr, r1, lsl #2
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 434:	20000d6c 	andcs	r0, r0, ip, ror #26
 438:	00000034 	andeq	r0, r0, r4, lsr r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 454:	20000da0 	andcs	r0, r0, r0, lsr #27
 458:	0000002a 	andeq	r0, r0, sl, lsr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 474:	20000dca 	andcs	r0, r0, sl, asr #27
 478:	0000002a 	andeq	r0, r0, sl, lsr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	00000020 	andeq	r0, r0, r0, lsr #32
 490:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 494:	20000df4 	strdcs	r0, [r0], -r4
 498:	00000054 	andeq	r0, r0, r4, asr r0
 49c:	400c0e41 	andmi	r0, ip, r1, asr #28
 4a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4a4:	018e4002 	orreq	r4, lr, r2
 4a8:	41180e41 	tstmi	r8, r1, asr #28
 4ac:	0000070d 	andeq	r0, r0, sp, lsl #14
 4b0:	00000020 	andeq	r0, r0, r0, lsr #32
 4b4:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 4b8:	20000e48 	andcs	r0, r0, r8, asr #28
 4bc:	00000054 	andeq	r0, r0, r4, asr r0
 4c0:	400c0e41 	andmi	r0, ip, r1, asr #28
 4c4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4c8:	018e4002 	orreq	r4, lr, r2
 4cc:	41180e41 	tstmi	r8, r1, asr #28
 4d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 4d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d8:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 4dc:	20000e9c 	mulcs	r0, ip, lr
 4e0:	00000040 	andeq	r0, r0, r0, asr #32
 4e4:	40080e41 	andmi	r0, r8, r1, asr #28
 4e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4ec:	100e4101 	andne	r4, lr, r1, lsl #2
 4f0:	00070d41 	andeq	r0, r7, r1, asr #26
 4f4:	00000018 	andeq	r0, r0, r8, lsl r0
 4f8:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 4fc:	20000edc 	ldrdcs	r0, [r0], -ip
 500:	00000038 	andeq	r0, r0, r8, lsr r0
 504:	40080e41 	andmi	r0, r8, r1, asr #28
 508:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 50c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 518:	20000f14 	andcs	r0, r0, r4, lsl pc
 51c:	0000003c 	andeq	r0, r0, ip, lsr r0
 520:	40080e41 	andmi	r0, r8, r1, asr #28
 524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 528:	100e4101 	andne	r4, lr, r1, lsl #2
 52c:	00070d41 	andeq	r0, r7, r1, asr #26
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
 534:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 538:	20000f50 	andcs	r0, r0, r0, asr pc
 53c:	00000050 	andeq	r0, r0, r0, asr r0
 540:	40080e41 	andmi	r0, r8, r1, asr #28
 544:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 548:	180e4101 	stmdane	lr, {r0, r8, lr}
 54c:	00070d41 	andeq	r0, r7, r1, asr #26
