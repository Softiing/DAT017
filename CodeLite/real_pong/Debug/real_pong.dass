
./Debug/real_pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f810 	bl	20000028 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*GPIO_E_MODER = 0x55555555;
20000014:	4b02      	ldr	r3, [pc, #8]	; (20000020 <init_app+0x10>)
20000016:	4a03      	ldr	r2, [pc, #12]	; (20000024 <init_app+0x14>)
20000018:	601a      	str	r2, [r3, #0]
}
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	46bd      	mov	sp, r7
2000001e:	bd80      	pop	{r7, pc}
20000020:	40021000 	andmi	r1, r2, r0
20000024:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000028 <main>:

extern OBJECT ball;
extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void main(void) {
20000028:	b580      	push	{r7, lr}
2000002a:	b084      	sub	sp, #16
2000002c:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
2000002e:	4b17      	ldr	r3, [pc, #92]	; (2000008c <main+0x64>)
20000030:	60fb      	str	r3, [r7, #12]
	POBJECT pl = &leftPaddle;
20000032:	4b17      	ldr	r3, [pc, #92]	; (20000090 <main+0x68>)
20000034:	60bb      	str	r3, [r7, #8]
	POBJECT pr = &rightPaddle;
20000036:	4b17      	ldr	r3, [pc, #92]	; (20000094 <main+0x6c>)
20000038:	607b      	str	r3, [r7, #4]
	init_app();
2000003a:	f7ff ffe9 	bl	20000010 <init_app>
	graphic_initialize();
2000003e:	f000 fa17 	bl	20000470 <graphic_initialize>
  #ifndef SIMULATOR
	graphic_clear_screen();
  #endif
  
	p->set_speed(p, 16, 16);
20000042:	68fb      	ldr	r3, [r7, #12]
20000044:	6a1b      	ldr	r3, [r3, #32]
20000046:	68f8      	ldr	r0, [r7, #12]
20000048:	2210      	movs	r2, #16
2000004a:	2110      	movs	r1, #16
2000004c:	4798      	blx	r3
	p->set_speed(pl, 0, 1);
2000004e:	68fb      	ldr	r3, [r7, #12]
20000050:	6a1b      	ldr	r3, [r3, #32]
20000052:	68b8      	ldr	r0, [r7, #8]
20000054:	2201      	movs	r2, #1
20000056:	2100      	movs	r1, #0
20000058:	4798      	blx	r3
	p->set_speed(pr, 0, 1);
2000005a:	68fb      	ldr	r3, [r7, #12]
2000005c:	6a1b      	ldr	r3, [r3, #32]
2000005e:	6878      	ldr	r0, [r7, #4]
20000060:	2201      	movs	r2, #1
20000062:	2100      	movs	r1, #0
20000064:	4798      	blx	r3
	while(1) {
		p->move(p);
20000066:	68fb      	ldr	r3, [r7, #12]
20000068:	69db      	ldr	r3, [r3, #28]
2000006a:	68fa      	ldr	r2, [r7, #12]
2000006c:	0010      	movs	r0, r2
2000006e:	4798      	blx	r3
		pl->move(pl);
20000070:	68bb      	ldr	r3, [r7, #8]
20000072:	69db      	ldr	r3, [r3, #28]
20000074:	68ba      	ldr	r2, [r7, #8]
20000076:	0010      	movs	r0, r2
20000078:	4798      	blx	r3
		pr->move(pr);
2000007a:	687b      	ldr	r3, [r7, #4]
2000007c:	69db      	ldr	r3, [r3, #28]
2000007e:	687a      	ldr	r2, [r7, #4]
20000080:	0010      	movs	r0, r2
20000082:	4798      	blx	r3
		delay_milli(50);
20000084:	2032      	movs	r0, #50	; 0x32
20000086:	f000 fc13 	bl	200008b0 <delay_milli>
		p->move(p);
2000008a:	e7ec      	b.n	20000066 <main+0x3e>
2000008c:	20000a10 	andcs	r0, r0, r0, lsl sl
20000090:	20000b08 	andcs	r0, r0, r8, lsl #22
20000094:	20000b2c 	andcs	r0, r0, ip, lsr #22

20000098 <move_ball>:
};

extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void move_ball(POBJECT this) {
20000098:	b580      	push	{r7, lr}
2000009a:	b084      	sub	sp, #16
2000009c:	af00      	add	r7, sp, #0
2000009e:	6078      	str	r0, [r7, #4]
	clear_object(this);
200000a0:	687b      	ldr	r3, [r7, #4]
200000a2:	0018      	movs	r0, r3
200000a4:	f000 fb8d 	bl	200007c2 <clear_object>
	
	this->posX += this->dirX;
200000a8:	687b      	ldr	r3, [r7, #4]
200000aa:	68da      	ldr	r2, [r3, #12]
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	685b      	ldr	r3, [r3, #4]
200000b0:	18d2      	adds	r2, r2, r3
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	60da      	str	r2, [r3, #12]
	this->posY += this->dirY;
200000b6:	687b      	ldr	r3, [r7, #4]
200000b8:	691a      	ldr	r2, [r3, #16]
200000ba:	687b      	ldr	r3, [r7, #4]
200000bc:	689b      	ldr	r3, [r3, #8]
200000be:	18d2      	adds	r2, r2, r3
200000c0:	687b      	ldr	r3, [r7, #4]
200000c2:	611a      	str	r2, [r3, #16]
	
	// Wall collisions
	if((this->posY < 0) ||  this->posY > 63 ) {
200000c4:	687b      	ldr	r3, [r7, #4]
200000c6:	691b      	ldr	r3, [r3, #16]
200000c8:	2b00      	cmp	r3, #0
200000ca:	db03      	blt.n	200000d4 <move_ball+0x3c>
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	691b      	ldr	r3, [r3, #16]
200000d0:	2b3f      	cmp	r3, #63	; 0x3f
200000d2:	dd04      	ble.n	200000de <move_ball+0x46>
		this->dirY = -this->dirY;
200000d4:	687b      	ldr	r3, [r7, #4]
200000d6:	689b      	ldr	r3, [r3, #8]
200000d8:	425a      	negs	r2, r3
200000da:	687b      	ldr	r3, [r7, #4]
200000dc:	609a      	str	r2, [r3, #8]
	}
	
	// Define left and right paddle
	POBJECT lp = &leftPaddle;
200000de:	4b23      	ldr	r3, [pc, #140]	; (2000016c <move_ball+0xd4>)
200000e0:	60fb      	str	r3, [r7, #12]
	POBJECT rp = &rightPaddle;
200000e2:	4b23      	ldr	r3, [pc, #140]	; (20000170 <move_ball+0xd8>)
200000e4:	60bb      	str	r3, [r7, #8]
	
	//For left paddle
	if(this->posX <= lp->posX + lp->geo->sizeX) {
200000e6:	687b      	ldr	r3, [r7, #4]
200000e8:	68da      	ldr	r2, [r3, #12]
200000ea:	68fb      	ldr	r3, [r7, #12]
200000ec:	68d9      	ldr	r1, [r3, #12]
200000ee:	68fb      	ldr	r3, [r7, #12]
200000f0:	681b      	ldr	r3, [r3, #0]
200000f2:	685b      	ldr	r3, [r3, #4]
200000f4:	18cb      	adds	r3, r1, r3
200000f6:	429a      	cmp	r2, r3
200000f8:	dc14      	bgt.n	20000124 <move_ball+0x8c>
		if((this->posY >= lp->posY) && (this->posY <= lp->posY + lp->geo->sizeY)) {
200000fa:	687b      	ldr	r3, [r7, #4]
200000fc:	691a      	ldr	r2, [r3, #16]
200000fe:	68fb      	ldr	r3, [r7, #12]
20000100:	691b      	ldr	r3, [r3, #16]
20000102:	429a      	cmp	r2, r3
20000104:	db0e      	blt.n	20000124 <move_ball+0x8c>
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	691a      	ldr	r2, [r3, #16]
2000010a:	68fb      	ldr	r3, [r7, #12]
2000010c:	6919      	ldr	r1, [r3, #16]
2000010e:	68fb      	ldr	r3, [r7, #12]
20000110:	681b      	ldr	r3, [r3, #0]
20000112:	689b      	ldr	r3, [r3, #8]
20000114:	18cb      	adds	r3, r1, r3
20000116:	429a      	cmp	r2, r3
20000118:	dc04      	bgt.n	20000124 <move_ball+0x8c>
			this->dirX = -this->dirX;
2000011a:	687b      	ldr	r3, [r7, #4]
2000011c:	685b      	ldr	r3, [r3, #4]
2000011e:	425a      	negs	r2, r3
20000120:	687b      	ldr	r3, [r7, #4]
20000122:	605a      	str	r2, [r3, #4]
			// Left player lost
		}
	}
	
	//For right paddle
	if(this->posX >= rp->posX) {
20000124:	687b      	ldr	r3, [r7, #4]
20000126:	68da      	ldr	r2, [r3, #12]
20000128:	68bb      	ldr	r3, [r7, #8]
2000012a:	68db      	ldr	r3, [r3, #12]
2000012c:	429a      	cmp	r2, r3
2000012e:	db14      	blt.n	2000015a <move_ball+0xc2>
		if((this->posY >= rp->posY) && (this->posY <= rp->posY + rp->geo->sizeY)) {
20000130:	687b      	ldr	r3, [r7, #4]
20000132:	691a      	ldr	r2, [r3, #16]
20000134:	68bb      	ldr	r3, [r7, #8]
20000136:	691b      	ldr	r3, [r3, #16]
20000138:	429a      	cmp	r2, r3
2000013a:	db0e      	blt.n	2000015a <move_ball+0xc2>
2000013c:	687b      	ldr	r3, [r7, #4]
2000013e:	691a      	ldr	r2, [r3, #16]
20000140:	68bb      	ldr	r3, [r7, #8]
20000142:	6919      	ldr	r1, [r3, #16]
20000144:	68bb      	ldr	r3, [r7, #8]
20000146:	681b      	ldr	r3, [r3, #0]
20000148:	689b      	ldr	r3, [r3, #8]
2000014a:	18cb      	adds	r3, r1, r3
2000014c:	429a      	cmp	r2, r3
2000014e:	dc04      	bgt.n	2000015a <move_ball+0xc2>
			this->dirX = -this->dirX;
20000150:	687b      	ldr	r3, [r7, #4]
20000152:	685b      	ldr	r3, [r3, #4]
20000154:	425a      	negs	r2, r3
20000156:	687b      	ldr	r3, [r7, #4]
20000158:	605a      	str	r2, [r3, #4]
		} else {
			// Right player lost
		}
	}
	
	this->draw(this);
2000015a:	687b      	ldr	r3, [r7, #4]
2000015c:	695b      	ldr	r3, [r3, #20]
2000015e:	687a      	ldr	r2, [r7, #4]
20000160:	0010      	movs	r0, r2
20000162:	4798      	blx	r3
20000164:	46c0      	nop			; (mov r8, r8)
20000166:	46bd      	mov	sp, r7
20000168:	b004      	add	sp, #16
2000016a:	bd80      	pop	{r7, pc}
2000016c:	20000b08 	andcs	r0, r0, r8, lsl #22
20000170:	20000b2c 	andcs	r0, r0, ip, lsr #22

20000174 <graphics_ctrl_bit_set>:
#include "graphic.h"


typedef unsigned char uint8_t;

void graphics_ctrl_bit_set(uint8_t x){
20000174:	b580      	push	{r7, lr}
20000176:	b082      	sub	sp, #8
20000178:	af00      	add	r7, sp, #0
2000017a:	0002      	movs	r2, r0
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= (x & ~B_SELECT);
20000180:	4909      	ldr	r1, [pc, #36]	; (200001a8 <graphics_ctrl_bit_set+0x34>)
20000182:	4b09      	ldr	r3, [pc, #36]	; (200001a8 <graphics_ctrl_bit_set+0x34>)
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	b2db      	uxtb	r3, r3
20000188:	b25a      	sxtb	r2, r3
2000018a:	1dfb      	adds	r3, r7, #7
2000018c:	781b      	ldrb	r3, [r3, #0]
2000018e:	b25b      	sxtb	r3, r3
20000190:	2004      	movs	r0, #4
20000192:	4383      	bics	r3, r0
20000194:	b25b      	sxtb	r3, r3
20000196:	4313      	orrs	r3, r2
20000198:	b25b      	sxtb	r3, r3
2000019a:	b2db      	uxtb	r3, r3
2000019c:	700b      	strb	r3, [r1, #0]
}
2000019e:	46c0      	nop			; (mov r8, r8)
200001a0:	46bd      	mov	sp, r7
200001a2:	b002      	add	sp, #8
200001a4:	bd80      	pop	{r7, pc}
200001a6:	46c0      	nop			; (mov r8, r8)
200001a8:	40021014 	andmi	r1, r2, r4, lsl r0

200001ac <graphics_ctrl_bit_clear>:

void graphics_ctrl_bit_clear(uint8_t x){
200001ac:	b580      	push	{r7, lr}
200001ae:	b082      	sub	sp, #8
200001b0:	af00      	add	r7, sp, #0
200001b2:	0002      	movs	r2, r0
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ~x;
200001b8:	4908      	ldr	r1, [pc, #32]	; (200001dc <graphics_ctrl_bit_clear+0x30>)
200001ba:	4b08      	ldr	r3, [pc, #32]	; (200001dc <graphics_ctrl_bit_clear+0x30>)
200001bc:	781b      	ldrb	r3, [r3, #0]
200001be:	b2db      	uxtb	r3, r3
200001c0:	b25b      	sxtb	r3, r3
200001c2:	1dfa      	adds	r2, r7, #7
200001c4:	7812      	ldrb	r2, [r2, #0]
200001c6:	b252      	sxtb	r2, r2
200001c8:	43d2      	mvns	r2, r2
200001ca:	b252      	sxtb	r2, r2
200001cc:	4013      	ands	r3, r2
200001ce:	b25b      	sxtb	r3, r3
200001d0:	b2db      	uxtb	r3, r3
200001d2:	700b      	strb	r3, [r1, #0]
}
200001d4:	46c0      	nop			; (mov r8, r8)
200001d6:	46bd      	mov	sp, r7
200001d8:	b002      	add	sp, #8
200001da:	bd80      	pop	{r7, pc}
200001dc:	40021014 	andmi	r1, r2, r4, lsl r0

200001e0 <select_controller>:

void select_controller(uint8_t controller){
200001e0:	b580      	push	{r7, lr}
200001e2:	b082      	sub	sp, #8
200001e4:	af00      	add	r7, sp, #0
200001e6:	0002      	movs	r2, r0
200001e8:	1dfb      	adds	r3, r7, #7
200001ea:	701a      	strb	r2, [r3, #0]
    if(controller == 0) {
200001ec:	1dfb      	adds	r3, r7, #7
200001ee:	781b      	ldrb	r3, [r3, #0]
200001f0:	2b00      	cmp	r3, #0
200001f2:	d106      	bne.n	20000202 <select_controller+0x22>
        graphics_ctrl_bit_clear(B_CS1);
200001f4:	2008      	movs	r0, #8
200001f6:	f7ff ffd9 	bl	200001ac <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
200001fa:	2010      	movs	r0, #16
200001fc:	f7ff ffd6 	bl	200001ac <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
    } else if(controller == B_CS2) {
        graphics_ctrl_bit_clear(B_CS1);
        graphics_ctrl_bit_set(B_CS2);
    }
}
20000200:	e01f      	b.n	20000242 <select_controller+0x62>
    } else if(controller == (B_CS1 | B_CS2)) {
20000202:	1dfb      	adds	r3, r7, #7
20000204:	781b      	ldrb	r3, [r3, #0]
20000206:	2b18      	cmp	r3, #24
20000208:	d106      	bne.n	20000218 <select_controller+0x38>
        graphics_ctrl_bit_set(B_CS1);
2000020a:	2008      	movs	r0, #8
2000020c:	f7ff ffb2 	bl	20000174 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_set(B_CS2);
20000210:	2010      	movs	r0, #16
20000212:	f7ff ffaf 	bl	20000174 <graphics_ctrl_bit_set>
}
20000216:	e014      	b.n	20000242 <select_controller+0x62>
    } else if(controller == B_CS1) {
20000218:	1dfb      	adds	r3, r7, #7
2000021a:	781b      	ldrb	r3, [r3, #0]
2000021c:	2b08      	cmp	r3, #8
2000021e:	d106      	bne.n	2000022e <select_controller+0x4e>
        graphics_ctrl_bit_set(B_CS1);
20000220:	2008      	movs	r0, #8
20000222:	f7ff ffa7 	bl	20000174 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_clear(B_CS2);
20000226:	2010      	movs	r0, #16
20000228:	f7ff ffc0 	bl	200001ac <graphics_ctrl_bit_clear>
}
2000022c:	e009      	b.n	20000242 <select_controller+0x62>
    } else if(controller == B_CS2) {
2000022e:	1dfb      	adds	r3, r7, #7
20000230:	781b      	ldrb	r3, [r3, #0]
20000232:	2b10      	cmp	r3, #16
20000234:	d105      	bne.n	20000242 <select_controller+0x62>
        graphics_ctrl_bit_clear(B_CS1);
20000236:	2008      	movs	r0, #8
20000238:	f7ff ffb8 	bl	200001ac <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_set(B_CS2);
2000023c:	2010      	movs	r0, #16
2000023e:	f7ff ff99 	bl	20000174 <graphics_ctrl_bit_set>
}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	46bd      	mov	sp, r7
20000246:	b002      	add	sp, #8
20000248:	bd80      	pop	{r7, pc}

2000024a <graphic_wait_ready>:

void graphic_wait_ready(){
2000024a:	b580      	push	{r7, lr}
2000024c:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_clear(B_E);
2000024e:	2040      	movs	r0, #64	; 0x40
20000250:	f7ff ffac 	bl	200001ac <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000254:	4b12      	ldr	r3, [pc, #72]	; (200002a0 <graphic_wait_ready+0x56>)
20000256:	4a13      	ldr	r2, [pc, #76]	; (200002a4 <graphic_wait_ready+0x5a>)
20000258:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_RS);
2000025a:	2001      	movs	r0, #1
2000025c:	f7ff ffa6 	bl	200001ac <graphics_ctrl_bit_clear>
    graphics_ctrl_bit_set(B_RW);
20000260:	2002      	movs	r0, #2
20000262:	f7ff ff87 	bl	20000174 <graphics_ctrl_bit_set>
    delay_500ns();
20000266:	f000 fb2f 	bl	200008c8 <delay_500ns>
    
    while(1) { // Wait for display not to be busy
        graphics_ctrl_bit_set(B_E);
2000026a:	2040      	movs	r0, #64	; 0x40
2000026c:	f7ff ff82 	bl	20000174 <graphics_ctrl_bit_set>
        delay_500ns();
20000270:	f000 fb2a 	bl	200008c8 <delay_500ns>
        graphics_ctrl_bit_clear(B_E);
20000274:	2040      	movs	r0, #64	; 0x40
20000276:	f7ff ff99 	bl	200001ac <graphics_ctrl_bit_clear>
        delay_500ns();
2000027a:	f000 fb25 	bl	200008c8 <delay_500ns>
        //unsigned char i = *GPIO_IDR_HIGH;
        if((*GPIO_E_IDR_HIGH & LCD_BUSY) == 0) {
2000027e:	4b0a      	ldr	r3, [pc, #40]	; (200002a8 <graphic_wait_ready+0x5e>)
20000280:	781b      	ldrb	r3, [r3, #0]
20000282:	b2db      	uxtb	r3, r3
20000284:	b25b      	sxtb	r3, r3
20000286:	2b00      	cmp	r3, #0
20000288:	da00      	bge.n	2000028c <graphic_wait_ready+0x42>
        graphics_ctrl_bit_set(B_E);
2000028a:	e7ee      	b.n	2000026a <graphic_wait_ready+0x20>
            break;
2000028c:	46c0      	nop			; (mov r8, r8)
        }
    }
    graphics_ctrl_bit_set(B_E);
2000028e:	2040      	movs	r0, #64	; 0x40
20000290:	f7ff ff70 	bl	20000174 <graphics_ctrl_bit_set>
    *GPIO_E_MODER = 0x55555555;
20000294:	4b02      	ldr	r3, [pc, #8]	; (200002a0 <graphic_wait_ready+0x56>)
20000296:	4a05      	ldr	r2, [pc, #20]	; (200002ac <graphic_wait_ready+0x62>)
20000298:	601a      	str	r2, [r3, #0]
    
}
2000029a:	46c0      	nop			; (mov r8, r8)
2000029c:	46bd      	mov	sp, r7
2000029e:	bd80      	pop	{r7, pc}
200002a0:	40021000 	andmi	r1, r2, r0
200002a4:	00005555 	andeq	r5, r0, r5, asr r5
200002a8:	40021011 	andmi	r1, r2, r1, lsl r0
200002ac:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002b0 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
200002b0:	b580      	push	{r7, lr}
200002b2:	b084      	sub	sp, #16
200002b4:	af00      	add	r7, sp, #0
200002b6:	0002      	movs	r2, r0
200002b8:	1dfb      	adds	r3, r7, #7
200002ba:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200002bc:	2040      	movs	r0, #64	; 0x40
200002be:	f7ff ff75 	bl	200001ac <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
200002c2:	4b1b      	ldr	r3, [pc, #108]	; (20000330 <graphic_read+0x80>)
200002c4:	4a1b      	ldr	r2, [pc, #108]	; (20000334 <graphic_read+0x84>)
200002c6:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_set(B_RS | B_RW);
200002c8:	2003      	movs	r0, #3
200002ca:	f7ff ff53 	bl	20000174 <graphics_ctrl_bit_set>
    select_controller(controller);
200002ce:	1dfb      	adds	r3, r7, #7
200002d0:	781b      	ldrb	r3, [r3, #0]
200002d2:	0018      	movs	r0, r3
200002d4:	f7ff ff84 	bl	200001e0 <select_controller>
    delay_500ns();
200002d8:	f000 faf6 	bl	200008c8 <delay_500ns>
    graphics_ctrl_bit_set(B_E);
200002dc:	2040      	movs	r0, #64	; 0x40
200002de:	f7ff ff49 	bl	20000174 <graphics_ctrl_bit_set>
    delay_500ns();
200002e2:	f000 faf1 	bl	200008c8 <delay_500ns>
    
    uint8_t RV = *GPIO_E_IDR_HIGH;
200002e6:	4a14      	ldr	r2, [pc, #80]	; (20000338 <graphic_read+0x88>)
200002e8:	230f      	movs	r3, #15
200002ea:	18fb      	adds	r3, r7, r3
200002ec:	7812      	ldrb	r2, [r2, #0]
200002ee:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200002f0:	2040      	movs	r0, #64	; 0x40
200002f2:	f7ff ff5b 	bl	200001ac <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
200002f6:	4b0e      	ldr	r3, [pc, #56]	; (20000330 <graphic_read+0x80>)
200002f8:	4a10      	ldr	r2, [pc, #64]	; (2000033c <graphic_read+0x8c>)
200002fa:	601a      	str	r2, [r3, #0]
    
    if(controller == B_CS1){
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	781b      	ldrb	r3, [r3, #0]
20000300:	2b08      	cmp	r3, #8
20000302:	d104      	bne.n	2000030e <graphic_read+0x5e>
        select_controller(B_CS1);
20000304:	2008      	movs	r0, #8
20000306:	f7ff ff6b 	bl	200001e0 <select_controller>
        graphic_wait_ready();
2000030a:	f7ff ff9e 	bl	2000024a <graphic_wait_ready>
    }
    
    if(controller == B_CS2){
2000030e:	1dfb      	adds	r3, r7, #7
20000310:	781b      	ldrb	r3, [r3, #0]
20000312:	2b10      	cmp	r3, #16
20000314:	d104      	bne.n	20000320 <graphic_read+0x70>
        select_controller(B_CS2);
20000316:	2010      	movs	r0, #16
20000318:	f7ff ff62 	bl	200001e0 <select_controller>
        graphic_wait_ready();
2000031c:	f7ff ff95 	bl	2000024a <graphic_wait_ready>
    }
    
    return RV;
20000320:	230f      	movs	r3, #15
20000322:	18fb      	adds	r3, r7, r3
20000324:	781b      	ldrb	r3, [r3, #0]
    
}
20000326:	0018      	movs	r0, r3
20000328:	46bd      	mov	sp, r7
2000032a:	b004      	add	sp, #16
2000032c:	bd80      	pop	{r7, pc}
2000032e:	46c0      	nop			; (mov r8, r8)
20000330:	40021000 	andmi	r1, r2, r0
20000334:	00005555 	andeq	r5, r0, r5, asr r5
20000338:	40021011 	andmi	r1, r2, r1, lsl r0
2000033c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000340 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000340:	b580      	push	{r7, lr}
20000342:	b082      	sub	sp, #8
20000344:	af00      	add	r7, sp, #0
20000346:	0002      	movs	r2, r0
20000348:	1dfb      	adds	r3, r7, #7
2000034a:	701a      	strb	r2, [r3, #0]
2000034c:	1dbb      	adds	r3, r7, #6
2000034e:	1c0a      	adds	r2, r1, #0
20000350:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
20000352:	4a1a      	ldr	r2, [pc, #104]	; (200003bc <graphic_write+0x7c>)
20000354:	1dfb      	adds	r3, r7, #7
20000356:	781b      	ldrb	r3, [r3, #0]
20000358:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
2000035a:	1dbb      	adds	r3, r7, #6
2000035c:	781b      	ldrb	r3, [r3, #0]
2000035e:	0018      	movs	r0, r3
20000360:	f7ff ff3e 	bl	200001e0 <select_controller>
    delay_500ns();
20000364:	f000 fab0 	bl	200008c8 <delay_500ns>
    graphics_ctrl_bit_set(B_E);
20000368:	2040      	movs	r0, #64	; 0x40
2000036a:	f7ff ff03 	bl	20000174 <graphics_ctrl_bit_set>
    delay_500ns();
2000036e:	f000 faab 	bl	200008c8 <delay_500ns>
    graphics_ctrl_bit_clear(B_E);
20000372:	2040      	movs	r0, #64	; 0x40
20000374:	f7ff ff1a 	bl	200001ac <graphics_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000378:	1dbb      	adds	r3, r7, #6
2000037a:	781b      	ldrb	r3, [r3, #0]
2000037c:	2208      	movs	r2, #8
2000037e:	4013      	ands	r3, r2
20000380:	d004      	beq.n	2000038c <graphic_write+0x4c>
        select_controller(B_CS1);
20000382:	2008      	movs	r0, #8
20000384:	f7ff ff2c 	bl	200001e0 <select_controller>
        graphic_wait_ready();
20000388:	f7ff ff5f 	bl	2000024a <graphic_wait_ready>
    }
    
    if(controller & B_CS2){
2000038c:	1dbb      	adds	r3, r7, #6
2000038e:	781b      	ldrb	r3, [r3, #0]
20000390:	2210      	movs	r2, #16
20000392:	4013      	ands	r3, r2
20000394:	d004      	beq.n	200003a0 <graphic_write+0x60>
        select_controller(B_CS2);
20000396:	2010      	movs	r0, #16
20000398:	f7ff ff22 	bl	200001e0 <select_controller>
        graphic_wait_ready();
2000039c:	f7ff ff55 	bl	2000024a <graphic_wait_ready>
    }
    
    *GPIO_E_ODR_HIGH = 0;
200003a0:	4b06      	ldr	r3, [pc, #24]	; (200003bc <graphic_write+0x7c>)
200003a2:	2200      	movs	r2, #0
200003a4:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_set(B_E);
200003a6:	2040      	movs	r0, #64	; 0x40
200003a8:	f7ff fee4 	bl	20000174 <graphics_ctrl_bit_set>
    select_controller(0);
200003ac:	2000      	movs	r0, #0
200003ae:	f7ff ff17 	bl	200001e0 <select_controller>
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b002      	add	sp, #8
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40021015 	andmi	r1, r2, r5, lsl r0

200003c0 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
200003c0:	b580      	push	{r7, lr}
200003c2:	b082      	sub	sp, #8
200003c4:	af00      	add	r7, sp, #0
200003c6:	0002      	movs	r2, r0
200003c8:	1dfb      	adds	r3, r7, #7
200003ca:	701a      	strb	r2, [r3, #0]
200003cc:	1dbb      	adds	r3, r7, #6
200003ce:	1c0a      	adds	r2, r1, #0
200003d0:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200003d2:	2040      	movs	r0, #64	; 0x40
200003d4:	f7ff feea 	bl	200001ac <graphics_ctrl_bit_clear>
    select_controller(controller);
200003d8:	1dbb      	adds	r3, r7, #6
200003da:	781b      	ldrb	r3, [r3, #0]
200003dc:	0018      	movs	r0, r3
200003de:	f7ff feff 	bl	200001e0 <select_controller>
    graphics_ctrl_bit_clear(B_RS | B_RW);
200003e2:	2003      	movs	r0, #3
200003e4:	f7ff fee2 	bl	200001ac <graphics_ctrl_bit_clear>
    graphic_write(command, controller);
200003e8:	1dbb      	adds	r3, r7, #6
200003ea:	781a      	ldrb	r2, [r3, #0]
200003ec:	1dfb      	adds	r3, r7, #7
200003ee:	781b      	ldrb	r3, [r3, #0]
200003f0:	0011      	movs	r1, r2
200003f2:	0018      	movs	r0, r3
200003f4:	f7ff ffa4 	bl	20000340 <graphic_write>
}
200003f8:	46c0      	nop			; (mov r8, r8)
200003fa:	46bd      	mov	sp, r7
200003fc:	b002      	add	sp, #8
200003fe:	bd80      	pop	{r7, pc}

20000400 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000400:	b580      	push	{r7, lr}
20000402:	b082      	sub	sp, #8
20000404:	af00      	add	r7, sp, #0
20000406:	0002      	movs	r2, r0
20000408:	1dfb      	adds	r3, r7, #7
2000040a:	701a      	strb	r2, [r3, #0]
2000040c:	1dbb      	adds	r3, r7, #6
2000040e:	1c0a      	adds	r2, r1, #0
20000410:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
20000412:	2040      	movs	r0, #64	; 0x40
20000414:	f7ff feca 	bl	200001ac <graphics_ctrl_bit_clear>
    select_controller(controller);
20000418:	1dbb      	adds	r3, r7, #6
2000041a:	781b      	ldrb	r3, [r3, #0]
2000041c:	0018      	movs	r0, r3
2000041e:	f7ff fedf 	bl	200001e0 <select_controller>
    graphics_ctrl_bit_set(B_RS);
20000422:	2001      	movs	r0, #1
20000424:	f7ff fea6 	bl	20000174 <graphics_ctrl_bit_set>
    graphics_ctrl_bit_clear(B_RW);
20000428:	2002      	movs	r0, #2
2000042a:	f7ff febf 	bl	200001ac <graphics_ctrl_bit_clear>
    graphic_write(data, controller);
2000042e:	1dbb      	adds	r3, r7, #6
20000430:	781a      	ldrb	r2, [r3, #0]
20000432:	1dfb      	adds	r3, r7, #7
20000434:	781b      	ldrb	r3, [r3, #0]
20000436:	0011      	movs	r1, r2
20000438:	0018      	movs	r0, r3
2000043a:	f7ff ff81 	bl	20000340 <graphic_write>
}
2000043e:	46c0      	nop			; (mov r8, r8)
20000440:	46bd      	mov	sp, r7
20000442:	b002      	add	sp, #8
20000444:	bd80      	pop	{r7, pc}

20000446 <graphics_read_data>:

uint8_t graphics_read_data(uint8_t controller){
20000446:	b580      	push	{r7, lr}
20000448:	b082      	sub	sp, #8
2000044a:	af00      	add	r7, sp, #0
2000044c:	0002      	movs	r2, r0
2000044e:	1dfb      	adds	r3, r7, #7
20000450:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
20000452:	1dfb      	adds	r3, r7, #7
20000454:	781b      	ldrb	r3, [r3, #0]
20000456:	0018      	movs	r0, r3
20000458:	f7ff ff2a 	bl	200002b0 <graphic_read>
    return graphic_read(controller);
2000045c:	1dfb      	adds	r3, r7, #7
2000045e:	781b      	ldrb	r3, [r3, #0]
20000460:	0018      	movs	r0, r3
20000462:	f7ff ff25 	bl	200002b0 <graphic_read>
20000466:	0003      	movs	r3, r0
}
20000468:	0018      	movs	r0, r3
2000046a:	46bd      	mov	sp, r7
2000046c:	b002      	add	sp, #8
2000046e:	bd80      	pop	{r7, pc}

20000470 <graphic_initialize>:

void graphic_initialize(void){
20000470:	b580      	push	{r7, lr}
20000472:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_set(B_E);
20000474:	2040      	movs	r0, #64	; 0x40
20000476:	f7ff fe7d 	bl	20000174 <graphics_ctrl_bit_set>
    delay_micro(10);
2000047a:	200a      	movs	r0, #10
2000047c:	f000 fa02 	bl	20000884 <delay_micro>
    graphics_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000480:	2078      	movs	r0, #120	; 0x78
20000482:	f7ff fe93 	bl	200001ac <graphics_ctrl_bit_clear>
    delay_milli(30);
20000486:	201e      	movs	r0, #30
20000488:	f000 fa12 	bl	200008b0 <delay_milli>
    graphics_ctrl_bit_set(B_RST);
2000048c:	2020      	movs	r0, #32
2000048e:	f7ff fe71 	bl	20000174 <graphics_ctrl_bit_set>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000492:	2118      	movs	r1, #24
20000494:	203e      	movs	r0, #62	; 0x3e
20000496:	f7ff ff93 	bl	200003c0 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
2000049a:	2118      	movs	r1, #24
2000049c:	203f      	movs	r0, #63	; 0x3f
2000049e:	f7ff ff8f 	bl	200003c0 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
200004a2:	2118      	movs	r1, #24
200004a4:	20c0      	movs	r0, #192	; 0xc0
200004a6:	f7ff ff8b 	bl	200003c0 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
200004aa:	2118      	movs	r1, #24
200004ac:	2040      	movs	r0, #64	; 0x40
200004ae:	f7ff ff87 	bl	200003c0 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
200004b2:	2118      	movs	r1, #24
200004b4:	20b8      	movs	r0, #184	; 0xb8
200004b6:	f7ff ff83 	bl	200003c0 <graphic_write_command>
    select_controller(0);
200004ba:	2000      	movs	r0, #0
200004bc:	f7ff fe90 	bl	200001e0 <select_controller>
}
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	46bd      	mov	sp, r7
200004c4:	bd80      	pop	{r7, pc}

200004c6 <graphic_clear_screen>:

void graphic_clear_screen(void){
200004c6:	b580      	push	{r7, lr}
200004c8:	b082      	sub	sp, #8
200004ca:	af00      	add	r7, sp, #0
    for(int page = 0; page < PAGE; page++){
200004cc:	2300      	movs	r3, #0
200004ce:	607b      	str	r3, [r7, #4]
200004d0:	e01e      	b.n	20000510 <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
200004d2:	687b      	ldr	r3, [r7, #4]
200004d4:	b25b      	sxtb	r3, r3
200004d6:	2248      	movs	r2, #72	; 0x48
200004d8:	4252      	negs	r2, r2
200004da:	4313      	orrs	r3, r2
200004dc:	b25b      	sxtb	r3, r3
200004de:	b2db      	uxtb	r3, r3
200004e0:	2118      	movs	r1, #24
200004e2:	0018      	movs	r0, r3
200004e4:	f7ff ff6c 	bl	200003c0 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
200004e8:	2118      	movs	r1, #24
200004ea:	2040      	movs	r0, #64	; 0x40
200004ec:	f7ff ff68 	bl	200003c0 <graphic_write_command>
        for(int add = 0; add < ADD; add++){
200004f0:	2300      	movs	r3, #0
200004f2:	603b      	str	r3, [r7, #0]
200004f4:	e006      	b.n	20000504 <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
200004f6:	2118      	movs	r1, #24
200004f8:	2000      	movs	r0, #0
200004fa:	f7ff ff81 	bl	20000400 <graphic_write_data>
        for(int add = 0; add < ADD; add++){
200004fe:	683b      	ldr	r3, [r7, #0]
20000500:	3301      	adds	r3, #1
20000502:	603b      	str	r3, [r7, #0]
20000504:	683b      	ldr	r3, [r7, #0]
20000506:	2b3e      	cmp	r3, #62	; 0x3e
20000508:	ddf5      	ble.n	200004f6 <graphic_clear_screen+0x30>
    for(int page = 0; page < PAGE; page++){
2000050a:	687b      	ldr	r3, [r7, #4]
2000050c:	3301      	adds	r3, #1
2000050e:	607b      	str	r3, [r7, #4]
20000510:	687b      	ldr	r3, [r7, #4]
20000512:	2b07      	cmp	r3, #7
20000514:	dddd      	ble.n	200004d2 <graphic_clear_screen+0xc>
        }
    }
    
}
20000516:	46c0      	nop			; (mov r8, r8)
20000518:	46bd      	mov	sp, r7
2000051a:	b002      	add	sp, #8
2000051c:	bd80      	pop	{r7, pc}

2000051e <pixel>:


void pixel(unsigned char x, unsigned char y, unsigned char set){
2000051e:	b590      	push	{r4, r7, lr}
20000520:	b085      	sub	sp, #20
20000522:	af00      	add	r7, sp, #0
20000524:	0004      	movs	r4, r0
20000526:	0008      	movs	r0, r1
20000528:	0011      	movs	r1, r2
2000052a:	1dfb      	adds	r3, r7, #7
2000052c:	1c22      	adds	r2, r4, #0
2000052e:	701a      	strb	r2, [r3, #0]
20000530:	1dbb      	adds	r3, r7, #6
20000532:	1c02      	adds	r2, r0, #0
20000534:	701a      	strb	r2, [r3, #0]
20000536:	1d7b      	adds	r3, r7, #5
20000538:	1c0a      	adds	r2, r1, #0
2000053a:	701a      	strb	r2, [r3, #0]
    if((x < 0 || y < 0) || (x > SCREEN_WIDTH || y > SCREEN_HEIGHT)) return;
2000053c:	1dfb      	adds	r3, r7, #7
2000053e:	781b      	ldrb	r3, [r3, #0]
20000540:	b25b      	sxtb	r3, r3
20000542:	2b00      	cmp	r3, #0
20000544:	da00      	bge.n	20000548 <pixel+0x2a>
20000546:	e107      	b.n	20000758 <pixel+0x23a>
20000548:	1dbb      	adds	r3, r7, #6
2000054a:	781b      	ldrb	r3, [r3, #0]
2000054c:	2b3f      	cmp	r3, #63	; 0x3f
2000054e:	d900      	bls.n	20000552 <pixel+0x34>
20000550:	e102      	b.n	20000758 <pixel+0x23a>
    
    unsigned char index = (y-1) / PAGE;
20000552:	1dbb      	adds	r3, r7, #6
20000554:	781b      	ldrb	r3, [r3, #0]
20000556:	3b01      	subs	r3, #1
20000558:	2b00      	cmp	r3, #0
2000055a:	da00      	bge.n	2000055e <pixel+0x40>
2000055c:	3307      	adds	r3, #7
2000055e:	10db      	asrs	r3, r3, #3
20000560:	001a      	movs	r2, r3
20000562:	230d      	movs	r3, #13
20000564:	18fb      	adds	r3, r7, r3
20000566:	701a      	strb	r2, [r3, #0]
    unsigned char mask;
    
    if((y-1) % 8 == 0){mask = 1;}
20000568:	1dbb      	adds	r3, r7, #6
2000056a:	781b      	ldrb	r3, [r3, #0]
2000056c:	3b01      	subs	r3, #1
2000056e:	001a      	movs	r2, r3
20000570:	2307      	movs	r3, #7
20000572:	4013      	ands	r3, r2
20000574:	d103      	bne.n	2000057e <pixel+0x60>
20000576:	230f      	movs	r3, #15
20000578:	18fb      	adds	r3, r7, r3
2000057a:	2201      	movs	r2, #1
2000057c:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 1){mask = 2;}
2000057e:	1dbb      	adds	r3, r7, #6
20000580:	781b      	ldrb	r3, [r3, #0]
20000582:	3b01      	subs	r3, #1
20000584:	4a76      	ldr	r2, [pc, #472]	; (20000760 <pixel+0x242>)
20000586:	4013      	ands	r3, r2
20000588:	d504      	bpl.n	20000594 <pixel+0x76>
2000058a:	3b01      	subs	r3, #1
2000058c:	2208      	movs	r2, #8
2000058e:	4252      	negs	r2, r2
20000590:	4313      	orrs	r3, r2
20000592:	3301      	adds	r3, #1
20000594:	2b01      	cmp	r3, #1
20000596:	d103      	bne.n	200005a0 <pixel+0x82>
20000598:	230f      	movs	r3, #15
2000059a:	18fb      	adds	r3, r7, r3
2000059c:	2202      	movs	r2, #2
2000059e:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 2){mask = 4;}
200005a0:	1dbb      	adds	r3, r7, #6
200005a2:	781b      	ldrb	r3, [r3, #0]
200005a4:	3b01      	subs	r3, #1
200005a6:	4a6e      	ldr	r2, [pc, #440]	; (20000760 <pixel+0x242>)
200005a8:	4013      	ands	r3, r2
200005aa:	d504      	bpl.n	200005b6 <pixel+0x98>
200005ac:	3b01      	subs	r3, #1
200005ae:	2208      	movs	r2, #8
200005b0:	4252      	negs	r2, r2
200005b2:	4313      	orrs	r3, r2
200005b4:	3301      	adds	r3, #1
200005b6:	2b02      	cmp	r3, #2
200005b8:	d103      	bne.n	200005c2 <pixel+0xa4>
200005ba:	230f      	movs	r3, #15
200005bc:	18fb      	adds	r3, r7, r3
200005be:	2204      	movs	r2, #4
200005c0:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 3){mask = 8;}
200005c2:	1dbb      	adds	r3, r7, #6
200005c4:	781b      	ldrb	r3, [r3, #0]
200005c6:	3b01      	subs	r3, #1
200005c8:	4a65      	ldr	r2, [pc, #404]	; (20000760 <pixel+0x242>)
200005ca:	4013      	ands	r3, r2
200005cc:	d504      	bpl.n	200005d8 <pixel+0xba>
200005ce:	3b01      	subs	r3, #1
200005d0:	2208      	movs	r2, #8
200005d2:	4252      	negs	r2, r2
200005d4:	4313      	orrs	r3, r2
200005d6:	3301      	adds	r3, #1
200005d8:	2b03      	cmp	r3, #3
200005da:	d103      	bne.n	200005e4 <pixel+0xc6>
200005dc:	230f      	movs	r3, #15
200005de:	18fb      	adds	r3, r7, r3
200005e0:	2208      	movs	r2, #8
200005e2:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 4){mask = 0x10;}
200005e4:	1dbb      	adds	r3, r7, #6
200005e6:	781b      	ldrb	r3, [r3, #0]
200005e8:	3b01      	subs	r3, #1
200005ea:	4a5d      	ldr	r2, [pc, #372]	; (20000760 <pixel+0x242>)
200005ec:	4013      	ands	r3, r2
200005ee:	d504      	bpl.n	200005fa <pixel+0xdc>
200005f0:	3b01      	subs	r3, #1
200005f2:	2208      	movs	r2, #8
200005f4:	4252      	negs	r2, r2
200005f6:	4313      	orrs	r3, r2
200005f8:	3301      	adds	r3, #1
200005fa:	2b04      	cmp	r3, #4
200005fc:	d103      	bne.n	20000606 <pixel+0xe8>
200005fe:	230f      	movs	r3, #15
20000600:	18fb      	adds	r3, r7, r3
20000602:	2210      	movs	r2, #16
20000604:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 5){mask = 0x20;}
20000606:	1dbb      	adds	r3, r7, #6
20000608:	781b      	ldrb	r3, [r3, #0]
2000060a:	3b01      	subs	r3, #1
2000060c:	4a54      	ldr	r2, [pc, #336]	; (20000760 <pixel+0x242>)
2000060e:	4013      	ands	r3, r2
20000610:	d504      	bpl.n	2000061c <pixel+0xfe>
20000612:	3b01      	subs	r3, #1
20000614:	2208      	movs	r2, #8
20000616:	4252      	negs	r2, r2
20000618:	4313      	orrs	r3, r2
2000061a:	3301      	adds	r3, #1
2000061c:	2b05      	cmp	r3, #5
2000061e:	d103      	bne.n	20000628 <pixel+0x10a>
20000620:	230f      	movs	r3, #15
20000622:	18fb      	adds	r3, r7, r3
20000624:	2220      	movs	r2, #32
20000626:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 6){mask = 0x40;}
20000628:	1dbb      	adds	r3, r7, #6
2000062a:	781b      	ldrb	r3, [r3, #0]
2000062c:	3b01      	subs	r3, #1
2000062e:	4a4c      	ldr	r2, [pc, #304]	; (20000760 <pixel+0x242>)
20000630:	4013      	ands	r3, r2
20000632:	d504      	bpl.n	2000063e <pixel+0x120>
20000634:	3b01      	subs	r3, #1
20000636:	2208      	movs	r2, #8
20000638:	4252      	negs	r2, r2
2000063a:	4313      	orrs	r3, r2
2000063c:	3301      	adds	r3, #1
2000063e:	2b06      	cmp	r3, #6
20000640:	d103      	bne.n	2000064a <pixel+0x12c>
20000642:	230f      	movs	r3, #15
20000644:	18fb      	adds	r3, r7, r3
20000646:	2240      	movs	r2, #64	; 0x40
20000648:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 7){mask = 0x80;}
2000064a:	1dbb      	adds	r3, r7, #6
2000064c:	781b      	ldrb	r3, [r3, #0]
2000064e:	3b01      	subs	r3, #1
20000650:	4a43      	ldr	r2, [pc, #268]	; (20000760 <pixel+0x242>)
20000652:	4013      	ands	r3, r2
20000654:	d504      	bpl.n	20000660 <pixel+0x142>
20000656:	3b01      	subs	r3, #1
20000658:	2208      	movs	r2, #8
2000065a:	4252      	negs	r2, r2
2000065c:	4313      	orrs	r3, r2
2000065e:	3301      	adds	r3, #1
20000660:	2b07      	cmp	r3, #7
20000662:	d103      	bne.n	2000066c <pixel+0x14e>
20000664:	230f      	movs	r3, #15
20000666:	18fb      	adds	r3, r7, r3
20000668:	2280      	movs	r2, #128	; 0x80
2000066a:	701a      	strb	r2, [r3, #0]
    
    if(set == 0){mask = ~mask;}
2000066c:	1d7b      	adds	r3, r7, #5
2000066e:	781b      	ldrb	r3, [r3, #0]
20000670:	2b00      	cmp	r3, #0
20000672:	d106      	bne.n	20000682 <pixel+0x164>
20000674:	230f      	movs	r3, #15
20000676:	18fb      	adds	r3, r7, r3
20000678:	220f      	movs	r2, #15
2000067a:	18ba      	adds	r2, r7, r2
2000067c:	7812      	ldrb	r2, [r2, #0]
2000067e:	43d2      	mvns	r2, r2
20000680:	701a      	strb	r2, [r3, #0]
    
    unsigned char controller;
    if(x > 64){
20000682:	1dfb      	adds	r3, r7, #7
20000684:	781b      	ldrb	r3, [r3, #0]
20000686:	2b40      	cmp	r3, #64	; 0x40
20000688:	d909      	bls.n	2000069e <pixel+0x180>
        controller = B_CS2;
2000068a:	230e      	movs	r3, #14
2000068c:	18fb      	adds	r3, r7, r3
2000068e:	2210      	movs	r2, #16
20000690:	701a      	strb	r2, [r3, #0]
        x = x - 65;
20000692:	1dfb      	adds	r3, r7, #7
20000694:	1dfa      	adds	r2, r7, #7
20000696:	7812      	ldrb	r2, [r2, #0]
20000698:	3a41      	subs	r2, #65	; 0x41
2000069a:	701a      	strb	r2, [r3, #0]
2000069c:	e008      	b.n	200006b0 <pixel+0x192>
        }
    else{
        controller = B_CS1;
2000069e:	230e      	movs	r3, #14
200006a0:	18fb      	adds	r3, r7, r3
200006a2:	2208      	movs	r2, #8
200006a4:	701a      	strb	r2, [r3, #0]
        x = x - 1;
200006a6:	1dfb      	adds	r3, r7, #7
200006a8:	1dfa      	adds	r2, r7, #7
200006aa:	7812      	ldrb	r2, [r2, #0]
200006ac:	3a01      	subs	r2, #1
200006ae:	701a      	strb	r2, [r3, #0]
        }
    
    graphic_write_command(LCD_SET_ADD | x, controller);
200006b0:	1dfb      	adds	r3, r7, #7
200006b2:	781b      	ldrb	r3, [r3, #0]
200006b4:	2240      	movs	r2, #64	; 0x40
200006b6:	4313      	orrs	r3, r2
200006b8:	b2da      	uxtb	r2, r3
200006ba:	230e      	movs	r3, #14
200006bc:	18fb      	adds	r3, r7, r3
200006be:	781b      	ldrb	r3, [r3, #0]
200006c0:	0019      	movs	r1, r3
200006c2:	0010      	movs	r0, r2
200006c4:	f7ff fe7c 	bl	200003c0 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200006c8:	230d      	movs	r3, #13
200006ca:	18fb      	adds	r3, r7, r3
200006cc:	781b      	ldrb	r3, [r3, #0]
200006ce:	2248      	movs	r2, #72	; 0x48
200006d0:	4252      	negs	r2, r2
200006d2:	4313      	orrs	r3, r2
200006d4:	b2da      	uxtb	r2, r3
200006d6:	230e      	movs	r3, #14
200006d8:	18fb      	adds	r3, r7, r3
200006da:	781b      	ldrb	r3, [r3, #0]
200006dc:	0019      	movs	r1, r3
200006de:	0010      	movs	r0, r2
200006e0:	f7ff fe6e 	bl	200003c0 <graphic_write_command>
	unsigned char temp = graphics_read_data(controller);
200006e4:	230c      	movs	r3, #12
200006e6:	18fc      	adds	r4, r7, r3
200006e8:	230e      	movs	r3, #14
200006ea:	18fb      	adds	r3, r7, r3
200006ec:	781b      	ldrb	r3, [r3, #0]
200006ee:	0018      	movs	r0, r3
200006f0:	f7ff fea9 	bl	20000446 <graphics_read_data>
200006f4:	0003      	movs	r3, r0
200006f6:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
200006f8:	1dfb      	adds	r3, r7, #7
200006fa:	781b      	ldrb	r3, [r3, #0]
200006fc:	2240      	movs	r2, #64	; 0x40
200006fe:	4313      	orrs	r3, r2
20000700:	b2da      	uxtb	r2, r3
20000702:	230e      	movs	r3, #14
20000704:	18fb      	adds	r3, r7, r3
20000706:	781b      	ldrb	r3, [r3, #0]
20000708:	0019      	movs	r1, r3
2000070a:	0010      	movs	r0, r2
2000070c:	f7ff fe58 	bl	200003c0 <graphic_write_command>
    
    if(set == 1)
20000710:	1d7b      	adds	r3, r7, #5
20000712:	781b      	ldrb	r3, [r3, #0]
20000714:	2b01      	cmp	r3, #1
20000716:	d10a      	bne.n	2000072e <pixel+0x210>
        {mask = mask | temp;}
20000718:	230f      	movs	r3, #15
2000071a:	18fb      	adds	r3, r7, r3
2000071c:	220f      	movs	r2, #15
2000071e:	18b9      	adds	r1, r7, r2
20000720:	220c      	movs	r2, #12
20000722:	18ba      	adds	r2, r7, r2
20000724:	7809      	ldrb	r1, [r1, #0]
20000726:	7812      	ldrb	r2, [r2, #0]
20000728:	430a      	orrs	r2, r1
2000072a:	701a      	strb	r2, [r3, #0]
2000072c:	e009      	b.n	20000742 <pixel+0x224>
    else
        {mask = mask & temp;}
2000072e:	230f      	movs	r3, #15
20000730:	18fb      	adds	r3, r7, r3
20000732:	220f      	movs	r2, #15
20000734:	18ba      	adds	r2, r7, r2
20000736:	210c      	movs	r1, #12
20000738:	1879      	adds	r1, r7, r1
2000073a:	7812      	ldrb	r2, [r2, #0]
2000073c:	7809      	ldrb	r1, [r1, #0]
2000073e:	400a      	ands	r2, r1
20000740:	701a      	strb	r2, [r3, #0]
    
    graphic_write_data(mask, controller);
20000742:	230e      	movs	r3, #14
20000744:	18fb      	adds	r3, r7, r3
20000746:	781a      	ldrb	r2, [r3, #0]
20000748:	230f      	movs	r3, #15
2000074a:	18fb      	adds	r3, r7, r3
2000074c:	781b      	ldrb	r3, [r3, #0]
2000074e:	0011      	movs	r1, r2
20000750:	0018      	movs	r0, r3
20000752:	f7ff fe55 	bl	20000400 <graphic_write_data>
20000756:	e000      	b.n	2000075a <pixel+0x23c>
    if((x < 0 || y < 0) || (x > SCREEN_WIDTH || y > SCREEN_HEIGHT)) return;
20000758:	46c0      	nop			; (mov r8, r8)
}
2000075a:	46bd      	mov	sp, r7
2000075c:	b005      	add	sp, #20
2000075e:	bd90      	pop	{r4, r7, pc}
20000760:	80000007 	andhi	r0, r0, r7

20000764 <draw_object>:
#include "object.h"
#include "graphic.h"

void draw_object(POBJECT this) {
20000764:	b580      	push	{r7, lr}
20000766:	b084      	sub	sp, #16
20000768:	af00      	add	r7, sp, #0
2000076a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
2000076c:	2300      	movs	r3, #0
2000076e:	60fb      	str	r3, [r7, #12]
20000770:	e020      	b.n	200007b4 <draw_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 1);
20000772:	687b      	ldr	r3, [r7, #4]
20000774:	681a      	ldr	r2, [r3, #0]
20000776:	68fb      	ldr	r3, [r7, #12]
20000778:	3304      	adds	r3, #4
2000077a:	005b      	lsls	r3, r3, #1
2000077c:	18d3      	adds	r3, r2, r3
2000077e:	3304      	adds	r3, #4
20000780:	781a      	ldrb	r2, [r3, #0]
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	68db      	ldr	r3, [r3, #12]
20000786:	b2db      	uxtb	r3, r3
20000788:	18d3      	adds	r3, r2, r3
2000078a:	b2d8      	uxtb	r0, r3
2000078c:	687b      	ldr	r3, [r7, #4]
2000078e:	681a      	ldr	r2, [r3, #0]
20000790:	68fb      	ldr	r3, [r7, #12]
20000792:	3304      	adds	r3, #4
20000794:	005b      	lsls	r3, r3, #1
20000796:	18d3      	adds	r3, r2, r3
20000798:	3305      	adds	r3, #5
2000079a:	781a      	ldrb	r2, [r3, #0]
2000079c:	687b      	ldr	r3, [r7, #4]
2000079e:	691b      	ldr	r3, [r3, #16]
200007a0:	b2db      	uxtb	r3, r3
200007a2:	18d3      	adds	r3, r2, r3
200007a4:	b2db      	uxtb	r3, r3
200007a6:	2201      	movs	r2, #1
200007a8:	0019      	movs	r1, r3
200007aa:	f7ff feb8 	bl	2000051e <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
200007ae:	68fb      	ldr	r3, [r7, #12]
200007b0:	3301      	adds	r3, #1
200007b2:	60fb      	str	r3, [r7, #12]
200007b4:	68fb      	ldr	r3, [r7, #12]
200007b6:	2b63      	cmp	r3, #99	; 0x63
200007b8:	dddb      	ble.n	20000772 <draw_object+0xe>
	}
}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	46bd      	mov	sp, r7
200007be:	b004      	add	sp, #16
200007c0:	bd80      	pop	{r7, pc}

200007c2 <clear_object>:
void clear_object(POBJECT this) {
200007c2:	b580      	push	{r7, lr}
200007c4:	b084      	sub	sp, #16
200007c6:	af00      	add	r7, sp, #0
200007c8:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
200007ca:	2300      	movs	r3, #0
200007cc:	60fb      	str	r3, [r7, #12]
200007ce:	e020      	b.n	20000812 <clear_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 0);
200007d0:	687b      	ldr	r3, [r7, #4]
200007d2:	681a      	ldr	r2, [r3, #0]
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	3304      	adds	r3, #4
200007d8:	005b      	lsls	r3, r3, #1
200007da:	18d3      	adds	r3, r2, r3
200007dc:	3304      	adds	r3, #4
200007de:	781a      	ldrb	r2, [r3, #0]
200007e0:	687b      	ldr	r3, [r7, #4]
200007e2:	68db      	ldr	r3, [r3, #12]
200007e4:	b2db      	uxtb	r3, r3
200007e6:	18d3      	adds	r3, r2, r3
200007e8:	b2d8      	uxtb	r0, r3
200007ea:	687b      	ldr	r3, [r7, #4]
200007ec:	681a      	ldr	r2, [r3, #0]
200007ee:	68fb      	ldr	r3, [r7, #12]
200007f0:	3304      	adds	r3, #4
200007f2:	005b      	lsls	r3, r3, #1
200007f4:	18d3      	adds	r3, r2, r3
200007f6:	3305      	adds	r3, #5
200007f8:	781a      	ldrb	r2, [r3, #0]
200007fa:	687b      	ldr	r3, [r7, #4]
200007fc:	691b      	ldr	r3, [r3, #16]
200007fe:	b2db      	uxtb	r3, r3
20000800:	18d3      	adds	r3, r2, r3
20000802:	b2db      	uxtb	r3, r3
20000804:	2200      	movs	r2, #0
20000806:	0019      	movs	r1, r3
20000808:	f7ff fe89 	bl	2000051e <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
2000080c:	68fb      	ldr	r3, [r7, #12]
2000080e:	3301      	adds	r3, #1
20000810:	60fb      	str	r3, [r7, #12]
20000812:	68fb      	ldr	r3, [r7, #12]
20000814:	2b63      	cmp	r3, #99	; 0x63
20000816:	dddb      	ble.n	200007d0 <clear_object+0xe>
	}
}
20000818:	46c0      	nop			; (mov r8, r8)
2000081a:	46bd      	mov	sp, r7
2000081c:	b004      	add	sp, #16
2000081e:	bd80      	pop	{r7, pc}

20000820 <set_object_speed>:

void set_object_speed(POBJECT this, int x, int y) {
20000820:	b580      	push	{r7, lr}
20000822:	b084      	sub	sp, #16
20000824:	af00      	add	r7, sp, #0
20000826:	60f8      	str	r0, [r7, #12]
20000828:	60b9      	str	r1, [r7, #8]
2000082a:	607a      	str	r2, [r7, #4]
	this->dirX = x;
2000082c:	68fb      	ldr	r3, [r7, #12]
2000082e:	68ba      	ldr	r2, [r7, #8]
20000830:	605a      	str	r2, [r3, #4]
	this->dirY = y;
20000832:	68fb      	ldr	r3, [r7, #12]
20000834:	687a      	ldr	r2, [r7, #4]
20000836:	609a      	str	r2, [r3, #8]
20000838:	46c0      	nop			; (mov r8, r8)
2000083a:	46bd      	mov	sp, r7
2000083c:	b004      	add	sp, #16
2000083e:	bd80      	pop	{r7, pc}

20000840 <delay_250ns>:
#include "timer.h"


void delay_250ns(void) {
20000840:	b580      	push	{r7, lr}
20000842:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000844:	4b0c      	ldr	r3, [pc, #48]	; (20000878 <delay_250ns+0x38>)
20000846:	2200      	movs	r2, #0
20000848:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
2000084a:	4b0c      	ldr	r3, [pc, #48]	; (2000087c <delay_250ns+0x3c>)
2000084c:	2231      	movs	r2, #49	; 0x31
2000084e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000850:	4b0b      	ldr	r3, [pc, #44]	; (20000880 <delay_250ns+0x40>)
20000852:	2200      	movs	r2, #0
20000854:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000856:	4b08      	ldr	r3, [pc, #32]	; (20000878 <delay_250ns+0x38>)
20000858:	2205      	movs	r2, #5
2000085a:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
2000085c:	46c0      	nop			; (mov r8, r8)
2000085e:	4b06      	ldr	r3, [pc, #24]	; (20000878 <delay_250ns+0x38>)
20000860:	681a      	ldr	r2, [r3, #0]
20000862:	2380      	movs	r3, #128	; 0x80
20000864:	025b      	lsls	r3, r3, #9
20000866:	4013      	ands	r3, r2
20000868:	d0f9      	beq.n	2000085e <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
2000086a:	4b03      	ldr	r3, [pc, #12]	; (20000878 <delay_250ns+0x38>)
2000086c:	2200      	movs	r2, #0
2000086e:	601a      	str	r2, [r3, #0]
}
20000870:	46c0      	nop			; (mov r8, r8)
20000872:	46bd      	mov	sp, r7
20000874:	bd80      	pop	{r7, pc}
20000876:	46c0      	nop			; (mov r8, r8)
20000878:	e000e010 	and	lr, r0, r0, lsl r0
2000087c:	e000e014 	and	lr, r0, r4, lsl r0
20000880:	e000e018 	and	lr, r0, r8, lsl r0

20000884 <delay_micro>:

void delay_micro(unsigned int us) {
20000884:	b580      	push	{r7, lr}
20000886:	b082      	sub	sp, #8
20000888:	af00      	add	r7, sp, #0
2000088a:	6078      	str	r0, [r7, #4]
	while(us--) {
2000088c:	e007      	b.n	2000089e <delay_micro+0x1a>
		delay_250ns();
2000088e:	f7ff ffd7 	bl	20000840 <delay_250ns>
		delay_250ns();
20000892:	f7ff ffd5 	bl	20000840 <delay_250ns>
		delay_250ns();
20000896:	f7ff ffd3 	bl	20000840 <delay_250ns>
		delay_250ns();
2000089a:	f7ff ffd1 	bl	20000840 <delay_250ns>
	while(us--) {
2000089e:	687b      	ldr	r3, [r7, #4]
200008a0:	1e5a      	subs	r2, r3, #1
200008a2:	607a      	str	r2, [r7, #4]
200008a4:	2b00      	cmp	r3, #0
200008a6:	d1f2      	bne.n	2000088e <delay_micro+0xa>
	}
}
200008a8:	46c0      	nop			; (mov r8, r8)
200008aa:	46bd      	mov	sp, r7
200008ac:	b002      	add	sp, #8
200008ae:	bd80      	pop	{r7, pc}

200008b0 <delay_milli>:

void delay_milli(unsigned int ms) {
200008b0:	b580      	push	{r7, lr}
200008b2:	b082      	sub	sp, #8
200008b4:	af00      	add	r7, sp, #0
200008b6:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_micro(ms);
200008b8:	687b      	ldr	r3, [r7, #4]
200008ba:	0018      	movs	r0, r3
200008bc:	f7ff ffe2 	bl	20000884 <delay_micro>
	#else
		delay_micro(1000 * ms);
	#endif
}
200008c0:	46c0      	nop			; (mov r8, r8)
200008c2:	46bd      	mov	sp, r7
200008c4:	b002      	add	sp, #8
200008c6:	bd80      	pop	{r7, pc}

200008c8 <delay_500ns>:

void delay_500ns(void) {
200008c8:	b580      	push	{r7, lr}
200008ca:	af00      	add	r7, sp, #0
	delay_250ns();
200008cc:	f7ff ffb8 	bl	20000840 <delay_250ns>
	delay_250ns();
200008d0:	f7ff ffb6 	bl	20000840 <delay_250ns>
}
200008d4:	46c0      	nop			; (mov r8, r8)
200008d6:	46bd      	mov	sp, r7
200008d8:	bd80      	pop	{r7, pc}
200008da:	46c0      	nop			; (mov r8, r8)

200008dc <move_paddle>:
	clear_object,
	move_paddle,
	set_object_speed
};

void move_paddle(POBJECT this) {
200008dc:	b580      	push	{r7, lr}
200008de:	b082      	sub	sp, #8
200008e0:	af00      	add	r7, sp, #0
200008e2:	6078      	str	r0, [r7, #4]
	clear_object(this);
200008e4:	687b      	ldr	r3, [r7, #4]
200008e6:	0018      	movs	r0, r3
200008e8:	f7ff ff6b 	bl	200007c2 <clear_object>
	
	// Move paddle in y direction only.
	this->posY += this->dirY;
200008ec:	687b      	ldr	r3, [r7, #4]
200008ee:	691a      	ldr	r2, [r3, #16]
200008f0:	687b      	ldr	r3, [r7, #4]
200008f2:	689b      	ldr	r3, [r3, #8]
200008f4:	18d2      	adds	r2, r2, r3
200008f6:	687b      	ldr	r3, [r7, #4]
200008f8:	611a      	str	r2, [r3, #16]
	
	// Wall collisions todo add width check with paddle.
	if(this->posY < 0) {
200008fa:	687b      	ldr	r3, [r7, #4]
200008fc:	691b      	ldr	r3, [r3, #16]
200008fe:	2b00      	cmp	r3, #0
20000900:	da03      	bge.n	2000090a <move_paddle+0x2e>
		this->posY = 0;
20000902:	687b      	ldr	r3, [r7, #4]
20000904:	2200      	movs	r2, #0
20000906:	611a      	str	r2, [r3, #16]
20000908:	e00e      	b.n	20000928 <move_paddle+0x4c>
	} else if(this->posY + this->geo->sizeY > 127) {
2000090a:	687b      	ldr	r3, [r7, #4]
2000090c:	691a      	ldr	r2, [r3, #16]
2000090e:	687b      	ldr	r3, [r7, #4]
20000910:	681b      	ldr	r3, [r3, #0]
20000912:	689b      	ldr	r3, [r3, #8]
20000914:	18d3      	adds	r3, r2, r3
20000916:	2b7f      	cmp	r3, #127	; 0x7f
20000918:	dd06      	ble.n	20000928 <move_paddle+0x4c>
		this->posY = 127 - this->geo->sizeY;
2000091a:	687b      	ldr	r3, [r7, #4]
2000091c:	681b      	ldr	r3, [r3, #0]
2000091e:	689b      	ldr	r3, [r3, #8]
20000920:	227f      	movs	r2, #127	; 0x7f
20000922:	1ad2      	subs	r2, r2, r3
20000924:	687b      	ldr	r3, [r7, #4]
20000926:	611a      	str	r2, [r3, #16]
	}
	
	this->draw(this);
20000928:	687b      	ldr	r3, [r7, #4]
2000092a:	695b      	ldr	r3, [r3, #20]
2000092c:	687a      	ldr	r2, [r7, #4]
2000092e:	0010      	movs	r0, r2
20000930:	4798      	blx	r3
20000932:	46c0      	nop			; (mov r8, r8)
20000934:	46bd      	mov	sp, r7
20000936:	b002      	add	sp, #8
20000938:	bd80      	pop	{r7, pc}
	...

2000093c <ball_geometry>:
2000093c:	0000000c 	andeq	r0, r0, ip
20000940:	00000004 	andeq	r0, r0, r4
20000944:	00000004 	andeq	r0, r0, r4
20000948:	02000100 	andeq	r0, r0, #0, 2
2000094c:	01010001 	tsteq	r1, r1
20000950:	03010201 	movweq	r0, #4609	; 0x1201
20000954:	01020002 	tsteq	r2, r2
20000958:	03020202 	movweq	r0, #8706	; 0x2202
2000095c:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000a10 <ball>:
20000a10:	2000093c 	andcs	r0, r0, ip, lsr r9
	...
20000a1c:	00000001 	andeq	r0, r0, r1
20000a20:	00000001 	andeq	r0, r0, r1
20000a24:	20000765 	andcs	r0, r0, r5, ror #14
20000a28:	200007c3 	andcs	r0, r0, r3, asr #15
20000a2c:	20000099 	mulcs	r0, r9, r0
20000a30:	20000821 	andcs	r0, r0, r1, lsr #16

20000a34 <paddle_geometry>:
20000a34:	00000064 	andeq	r0, r0, r4, rrx
20000a38:	00000004 	andeq	r0, r0, r4
20000a3c:	00000019 	andeq	r0, r0, r9, lsl r0
20000a40:	00010000 	andeq	r0, r1, r0
20000a44:	00030002 	andeq	r0, r3, r2
20000a48:	01010100 	mrseq	r0, (UNDEF: 17)
20000a4c:	01030102 	tsteq	r3, r2, lsl #2
20000a50:	02010200 	andeq	r0, r1, #0, 4
20000a54:	02030202 	andeq	r0, r3, #536870912	; 0x20000000
20000a58:	03010300 	movweq	r0, #4864	; 0x1300
20000a5c:	03030302 	movweq	r0, #13058	; 0x3302
20000a60:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
20000a64:	04030402 	streq	r0, [r3], #-1026	; 0xfffffbfe
20000a68:	05010500 	streq	r0, [r1, #-1280]	; 0xfffffb00
20000a6c:	05030502 	streq	r0, [r3, #-1282]	; 0xfffffafe
20000a70:	06010600 	streq	r0, [r1], -r0, lsl #12
20000a74:	06030602 	streq	r0, [r3], -r2, lsl #12
20000a78:	07010700 	streq	r0, [r1, -r0, lsl #14]
20000a7c:	07030702 	streq	r0, [r3, -r2, lsl #14]
20000a80:	08010800 	stmdaeq	r1, {fp}
20000a84:	08030802 	stmdaeq	r3, {r1, fp}
20000a88:	09010900 	stmdbeq	r1, {r8, fp}
20000a8c:	09030902 	stmdbeq	r3, {r1, r8, fp}
20000a90:	0a010a00 	beq	20043298 <rightPaddle+0x4276c>
20000a94:	0a030a02 	beq	200c32a4 <rightPaddle+0xc2778>
20000a98:	0b010b00 	bleq	200436a0 <rightPaddle+0x42b74>
20000a9c:	0b030b02 	bleq	200c36ac <rightPaddle+0xc2b80>
20000aa0:	0c010c00 	stceq	12, cr0, [r1], {-0}
20000aa4:	0c030c02 	stceq	12, cr0, [r3], {2}
20000aa8:	0d010d00 	stceq	13, cr0, [r1, #-0]
20000aac:	0d030d02 	stceq	13, cr0, [r3, #-8]
20000ab0:	0e010e00 	cdpeq	14, 0, cr0, cr1, cr0, {0}
20000ab4:	0e030e02 	cdpeq	14, 0, cr0, cr3, cr2, {0}
20000ab8:	0f010f00 	svceq	0x00010f00
20000abc:	0f030f02 	svceq	0x00030f02
20000ac0:	10011000 	andne	r1, r1, r0
20000ac4:	10031002 	andne	r1, r3, r2
20000ac8:	11011100 	mrsne	r1, (UNDEF: 17)
20000acc:	11031102 	tstne	r3, r2, lsl #2
20000ad0:	12011200 	andne	r1, r1, #0, 4
20000ad4:	12031202 	andne	r1, r3, #536870912	; 0x20000000
20000ad8:	13011300 	movwne	r1, #4864	; 0x1300
20000adc:	13031302 	movwne	r1, #13058	; 0x3302
20000ae0:	14011400 	strne	r1, [r1], #-1024	; 0xfffffc00
20000ae4:	14031402 	strne	r1, [r3], #-1026	; 0xfffffbfe
20000ae8:	15011500 	strne	r1, [r1, #-1280]	; 0xfffffb00
20000aec:	15031502 	strne	r1, [r3, #-1282]	; 0xfffffafe
20000af0:	16011600 	strne	r1, [r1], -r0, lsl #12
20000af4:	16031602 	strne	r1, [r3], -r2, lsl #12
20000af8:	17011700 	strne	r1, [r1, -r0, lsl #14]
20000afc:	17031702 	strne	r1, [r3, -r2, lsl #14]
20000b00:	18011800 	stmdane	r1, {fp, ip}
20000b04:	18031802 	stmdane	r3, {r1, fp, ip}

20000b08 <leftPaddle>:
20000b08:	20000a34 	andcs	r0, r0, r4, lsr sl
	...
20000b14:	00000001 	andeq	r0, r0, r1
20000b18:	00000020 	andeq	r0, r0, r0, lsr #32
20000b1c:	20000765 	andcs	r0, r0, r5, ror #14
20000b20:	200007c3 	andcs	r0, r0, r3, asr #15
20000b24:	200008dd 	ldrdcs	r0, [r0], -sp
20000b28:	20000821 	andcs	r0, r0, r1, lsr #16

20000b2c <rightPaddle>:
20000b2c:	20000a34 	andcs	r0, r0, r4, lsr sl
	...
20000b38:	0000007c 	andeq	r0, r0, ip, ror r0
20000b3c:	00000020 	andeq	r0, r0, r0, lsr #32
20000b40:	20000765 	andcs	r0, r0, r5, ror #14
20000b44:	200007c3 	andcs	r0, r0, r3, asr #15
20000b48:	200008dd 	ldrdcs	r0, [r0], -sp
20000b4c:	20000821 	andcs	r0, r0, r1, lsr #16

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000001fc 	strdeq	r0, [r0], -ip
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000087 	andeq	r0, r0, r7, lsl #1
  10:	0000270c 	andeq	r2, r0, ip, lsl #14
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	00000079 	andeq	r0, r0, r9, ror r0
  28:	00006d03 	andeq	r6, r0, r3, lsl #26
  2c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
  30:	00000049 	andeq	r0, r0, r9, asr #32
  34:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
  38:	00002106 	andeq	r2, r0, r6, lsl #2
  3c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
  40:	21070200 	mrscs	r0, (UNDEF: 39)
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	01790500 	cmneq	r9, r0, lsl #10
  4c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  50:	00000028 	andeq	r0, r0, r8, lsr #32
  54:	00013203 	andeq	r3, r1, r3, lsl #4
  58:	0b02d400 	bleq	b5060 <startup-0x1ff4afa0>
  5c:	00000090 	muleq	r0, r0, r0
  60:	00016f06 	andeq	r6, r1, r6, lsl #30
  64:	900c0200 	andls	r0, ip, r0, lsl #4
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000a06 	andeq	r0, r0, r6, lsl #20
  70:	900d0200 	andls	r0, sp, r0, lsl #4
  74:	04000000 	streq	r0, [r0], #-0
  78:	00001c06 	andeq	r1, r0, r6, lsl #24
  7c:	900e0200 	andls	r0, lr, r0, lsl #4
  80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  84:	00787004 	rsbseq	r7, r8, r4
  88:	00970f02 	addseq	r0, r7, r2, lsl #30
  8c:	000c0000 	andeq	r0, ip, r0
  90:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  94:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  98:	00000049 	andeq	r0, r0, r9, asr #32
  9c:	000000a7 	andeq	r0, r0, r7, lsr #1
  a0:	0000a709 	andeq	sl, r0, r9, lsl #14
  a4:	02006300 	andeq	r6, r0, #0, 6
  a8:	015c0704 	cmpeq	ip, r4, lsl #14
  ac:	1f050000 	svcne	0x00050000
  b0:	02000001 	andeq	r0, r0, #1
  b4:	0000b910 	andeq	fp, r0, r0, lsl r9
  b8:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
  bc:	03000000 	movweq	r0, #0
  c0:	0000017f 	andeq	r0, r0, pc, ror r1
  c4:	38120224 	ldmdacc	r2, {r2, r5, r9}
  c8:	04000001 	streq	r0, [r0], #-1
  cc:	006f6567 	rsbeq	r6, pc, r7, ror #10
  d0:	00ae1302 	adceq	r1, lr, r2, lsl #6
  d4:	06000000 	streq	r0, [r0], -r0
  d8:	0000016a 	andeq	r0, r0, sl, ror #2
  dc:	00901402 	addseq	r1, r0, r2, lsl #8
  e0:	06040000 	streq	r0, [r4], -r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	00901402 	addseq	r1, r0, r2, lsl #8
  ec:	06080000 	streq	r0, [r8], -r0
  f0:	00000165 	andeq	r0, r0, r5, ror #2
  f4:	00901502 	addseq	r1, r0, r2, lsl #10
  f8:	060c0000 	streq	r0, [ip], -r0
  fc:	00000005 	andeq	r0, r0, r5
 100:	00901502 	addseq	r1, r0, r2, lsl #10
 104:	06100000 	ldreq	r0, [r0], -r0
 108:	00000022 	andeq	r0, r0, r2, lsr #32
 10c:	01491602 	cmpeq	r9, r2, lsl #12
 110:	06140000 	ldreq	r0, [r4], -r0
 114:	00000202 	andeq	r0, r0, r2, lsl #4
 118:	01491702 	cmpeq	r9, r2, lsl #14
 11c:	06180000 	ldreq	r0, [r8], -r0
 120:	00000074 	andeq	r0, r0, r4, ror r0
 124:	01491802 	cmpeq	r9, r2, lsl #16
 128:	061c0000 	ldreq	r0, [ip], -r0
 12c:	00000063 	andeq	r0, r0, r3, rrx
 130:	01641902 	cmneq	r4, r2, lsl #18
 134:	00200000 	eoreq	r0, r0, r0
 138:	0001430b 	andeq	r4, r1, fp, lsl #6
 13c:	01430c00 	cmpeq	r3, r0, lsl #24
 140:	0a000000 	beq	148 <startup-0x1ffffeb8>
 144:	0000bf04 	andeq	fp, r0, r4, lsl #30
 148:	38040a00 	stmdacc	r4, {r9, fp}
 14c:	0b000001 	bleq	158 <startup-0x1ffffea8>
 150:	00000164 	andeq	r0, r0, r4, ror #2
 154:	0001430c 	andeq	r4, r1, ip, lsl #6
 158:	00900c00 	addseq	r0, r0, r0, lsl #24
 15c:	900c0000 	andls	r0, ip, r0
 160:	00000000 	andeq	r0, r0, r0
 164:	014f040a 	cmpeq	pc, sl, lsl #8
 168:	55050000 	strpl	r0, [r5, #-0]
 16c:	02000001 	andeq	r0, r0, #1
 170:	0000bf1a 	andeq	fp, r0, sl, lsl pc
 174:	01540500 	cmpeq	r4, r0, lsl #10
 178:	1a020000 	bne	80180 <startup-0x1ff7fe80>
 17c:	00000143 	andeq	r0, r0, r3, asr #2
 180:	00019c0d 	andeq	r9, r1, sp, lsl #24
 184:	6a050300 	bvs	140d8c <startup-0x1febf274>
 188:	0d000001 	stceq	0, cr0, [r0, #-4]
 18c:	00000144 	andeq	r0, r0, r4, asr #2
 190:	016a0404 	cmneq	sl, r4, lsl #8
 194:	100d0000 	andne	r0, sp, r0
 198:	04000000 	streq	r0, [r0], #-0
 19c:	00016a05 	andeq	r6, r1, r5, lsl #20
 1a0:	014f0e00 	cmpeq	pc, r0, lsl #28
 1a4:	1c010000 	stcne	0, cr0, [r1], {-0}
 1a8:	20000028 	andcs	r0, r0, r8, lsr #32
 1ac:	00000070 	andeq	r0, r0, r0, ror r0
 1b0:	01dd9c01 	bicseq	r9, sp, r1, lsl #24
 1b4:	700f0000 	andvc	r0, pc, r0
 1b8:	751d0100 	ldrvc	r0, [sp, #-256]	; 0xffffff00
 1bc:	02000001 	andeq	r0, r0, #1
 1c0:	700f7491 	mulvc	pc, r1, r4	; <UNPREDICTABLE>
 1c4:	1e01006c 	cdpne	0, 0, cr0, cr1, cr12, {3}
 1c8:	00000175 	andeq	r0, r0, r5, ror r1
 1cc:	0f709102 	svceq	0x00709102
 1d0:	01007270 	tsteq	r0, r0, ror r2
 1d4:	0001751f 	andeq	r7, r1, pc, lsl r5
 1d8:	6c910200 	lfmvs	f0, 4, [r1], {0}
 1dc:	01291000 			; <UNDEFINED> instruction: 0x01291000
 1e0:	14010000 	strne	r0, [r1], #-0
 1e4:	20000010 	andcs	r0, r0, r0, lsl r0
 1e8:	00000018 	andeq	r0, r0, r8, lsl r0
 1ec:	3c109c01 	ldccc	12, cr9, [r0], {1}
 1f0:	01000001 	tsteq	r0, r1
 1f4:	0000000a 	andeq	r0, r0, sl
 1f8:	00000c20 	andeq	r0, r0, r0, lsr #24
 1fc:	009c0100 	addseq	r0, ip, r0, lsl #2
 200:	00000201 	andeq	r0, r0, r1, lsl #4
 204:	00df0004 	sbcseq	r0, pc, r4
 208:	01040000 	mrseq	r0, (UNDEF: 4)
 20c:	00000087 	andeq	r0, r0, r7, lsl #1
 210:	0001a10c 	andeq	sl, r1, ip, lsl #2
 214:	00009800 	andeq	r9, r0, r0, lsl #16
 218:	0000dc20 	andeq	sp, r0, r0, lsr #24
 21c:	0000c200 	andeq	ip, r0, r0, lsl #4
 220:	006d0200 	rsbeq	r0, sp, r0, lsl #4
 224:	02020000 	andeq	r0, r2, #0
 228:	00004205 	andeq	r4, r0, r5, lsl #4
 22c:	00780300 	rsbseq	r0, r8, r0, lsl #6
 230:	00420602 	subeq	r0, r2, r2, lsl #12
 234:	03000000 	movweq	r0, #0
 238:	07020079 	smlsdxeq	r2, r9, r0, r0
 23c:	00000042 	andeq	r0, r0, r2, asr #32
 240:	01040001 	tsteq	r4, r1
 244:	00007908 	andeq	r7, r0, r8, lsl #18
 248:	01790500 	cmneq	r9, r0, lsl #10
 24c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 250:	00000021 	andeq	r0, r0, r1, lsr #32
 254:	00013202 	andeq	r3, r1, r2, lsl #4
 258:	0b02d400 	bleq	b5260 <startup-0x1ff4ada0>
 25c:	00000090 	muleq	r0, r0, r0
 260:	00016f06 	andeq	r6, r1, r6, lsl #30
 264:	900c0200 	andls	r0, ip, r0, lsl #4
 268:	00000000 	andeq	r0, r0, r0
 26c:	00000a06 	andeq	r0, r0, r6, lsl #20
 270:	900d0200 	andls	r0, sp, r0, lsl #4
 274:	04000000 	streq	r0, [r0], #-0
 278:	00001c06 	andeq	r1, r0, r6, lsl #24
 27c:	900e0200 	andls	r0, lr, r0, lsl #4
 280:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 284:	00787003 	rsbseq	r7, r8, r3
 288:	00970f02 	addseq	r0, r7, r2, lsl #30
 28c:	000c0000 	andeq	r0, ip, r0
 290:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 294:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 298:	00000049 	andeq	r0, r0, r9, asr #32
 29c:	000000a7 	andeq	r0, r0, r7, lsr #1
 2a0:	0000a709 	andeq	sl, r0, r9, lsl #14
 2a4:	04006300 	streq	r6, [r0], #-768	; 0xfffffd00
 2a8:	015c0704 	cmpeq	ip, r4, lsl #14
 2ac:	20050000 	andcs	r0, r5, r0
 2b0:	02000001 	andeq	r0, r0, #1
 2b4:	00005410 	andeq	r5, r0, r0, lsl r4
 2b8:	011f0500 	tsteq	pc, r0, lsl #10
 2bc:	10020000 	andne	r0, r2, r0
 2c0:	000000c4 	andeq	r0, r0, r4, asr #1
 2c4:	0054040a 	subseq	r0, r4, sl, lsl #8
 2c8:	7f020000 	svcvc	0x00020000
 2cc:	24000001 	strcs	r0, [r0], #-1
 2d0:	01431202 	cmpeq	r3, r2, lsl #4
 2d4:	67030000 	strvs	r0, [r3, -r0]
 2d8:	02006f65 	andeq	r6, r0, #404	; 0x194
 2dc:	0000b913 	andeq	fp, r0, r3, lsl r9
 2e0:	6a060000 	bvs	1802e8 <startup-0x1fe7fd18>
 2e4:	02000001 	andeq	r0, r0, #1
 2e8:	00009014 	andeq	r9, r0, r4, lsl r0
 2ec:	00060400 	andeq	r0, r6, r0, lsl #8
 2f0:	02000000 	andeq	r0, r0, #0
 2f4:	00009014 	andeq	r9, r0, r4, lsl r0
 2f8:	65060800 	strvs	r0, [r6, #-2048]	; 0xfffff800
 2fc:	02000001 	andeq	r0, r0, #1
 300:	00009015 	andeq	r9, r0, r5, lsl r0
 304:	05060c00 	streq	r0, [r6, #-3072]	; 0xfffff400
 308:	02000000 	andeq	r0, r0, #0
 30c:	00009015 	andeq	r9, r0, r5, lsl r0
 310:	22061000 	andcs	r1, r6, #0
 314:	02000000 	andeq	r0, r0, #0
 318:	00015416 	andeq	r5, r1, r6, lsl r4
 31c:	02061400 	andeq	r1, r6, #0, 8
 320:	02000002 	andeq	r0, r0, #2
 324:	00015417 	andeq	r5, r1, r7, lsl r4
 328:	74061800 	strvc	r1, [r6], #-2048	; 0xfffff800
 32c:	02000000 	andeq	r0, r0, #0
 330:	00015418 	andeq	r5, r1, r8, lsl r4
 334:	63061c00 	movwvs	r1, #27648	; 0x6c00
 338:	02000000 	andeq	r0, r0, #0
 33c:	00016f19 	andeq	r6, r1, r9, lsl pc
 340:	0b002000 	bleq	8348 <startup-0x1fff7cb8>
 344:	0000014e 	andeq	r0, r0, lr, asr #2
 348:	00014e0c 	andeq	r4, r1, ip, lsl #28
 34c:	040a0000 	streq	r0, [sl], #-0
 350:	000000ca 	andeq	r0, r0, sl, asr #1
 354:	0143040a 	cmpeq	r3, sl, lsl #8
 358:	6f0b0000 	svcvs	0x000b0000
 35c:	0c000001 	stceq	0, cr0, [r0], {1}
 360:	0000014e 	andeq	r0, r0, lr, asr #2
 364:	0000900c 	andeq	r9, r0, ip
 368:	00900c00 	addseq	r0, r0, r0, lsl #24
 36c:	0a000000 	beq	374 <startup-0x1ffffc8c>
 370:	00015a04 	andeq	r5, r1, r4, lsl #20
 374:	01550500 	cmpeq	r5, r0, lsl #10
 378:	1a020000 	bne	80380 <startup-0x1ff7fc80>
 37c:	000000ca 	andeq	r0, r0, sl, asr #1
 380:	00015405 	andeq	r5, r1, r5, lsl #8
 384:	4e1a0200 	cdpmi	2, 1, cr0, cr10, cr0, {0}
 388:	0d000001 	stceq	0, cr0, [r0, #-4]
 38c:	0000019c 	muleq	r0, ip, r1
 390:	01750503 	cmneq	r5, r3, lsl #10
 394:	440d0000 	strmi	r0, [sp], #-0
 398:	04000001 	streq	r0, [r0], #-1
 39c:	00017504 	andeq	r7, r1, r4, lsl #10
 3a0:	00100d00 	andseq	r0, r0, r0, lsl #26
 3a4:	05040000 	streq	r0, [r4, #-0]
 3a8:	00000175 	andeq	r0, r0, r5, ror r1
 3ac:	0001840e 	andeq	r8, r1, lr, lsl #8
 3b0:	ae040100 	adfges	f0, f4, f0
 3b4:	05000000 	streq	r0, [r0, #-0]
 3b8:	00093c03 	andeq	r3, r9, r3, lsl #24
 3bc:	018b0f20 	orreq	r0, fp, r0, lsr #30
 3c0:	0f010000 	svceq	0x00010000
 3c4:	0a100305 	beq	400fe0 <startup-0x1fbff020>
 3c8:	97102000 	ldrls	r2, [r0, -r0]
 3cc:	01000001 	tsteq	r0, r1
 3d0:	0000981c 	andeq	r9, r0, ip, lsl r8
 3d4:	0000dc20 	andeq	sp, r0, r0, lsr #24
 3d8:	119c0100 	orrsne	r0, ip, r0, lsl #2
 3dc:	00000192 	muleq	r0, r2, r1
 3e0:	01801c01 	orreq	r1, r0, r1, lsl #24
 3e4:	91020000 	mrsls	r0, (UNDEF: 2)
 3e8:	706c126c 	rsbvc	r1, ip, ip, ror #4
 3ec:	80280100 	eorhi	r0, r8, r0, lsl #2
 3f0:	02000001 	andeq	r0, r0, #1
 3f4:	72127491 	andsvc	r7, r2, #-1862270976	; 0x91000000
 3f8:	29010070 	stmdbcs	r1, {r4, r5, r6}
 3fc:	00000180 	andeq	r0, r0, r0, lsl #3
 400:	00709102 	rsbseq	r9, r0, r2, lsl #2
 404:	00026a00 	andeq	r6, r2, r0, lsl #20
 408:	d1000400 	tstle	r0, r0, lsl #8
 40c:	04000001 	streq	r0, [r0], #-1
 410:	00008701 	andeq	r8, r0, r1, lsl #14
 414:	024a0c00 	subeq	r0, sl, #0, 24
 418:	01740000 	cmneq	r4, r0
 41c:	05f02000 	ldrbeq	r2, [r0, #0]!
 420:	01700000 	cmneq	r0, r0
 424:	8b020000 	blhi	8042c <startup-0x1ff7fbd4>
 428:	02000002 	andeq	r0, r0, #2
 42c:	00002c26 	andeq	r2, r0, r6, lsr #24
 430:	08010300 	stmdaeq	r1, {r8, r9}
 434:	00000079 	andeq	r0, r0, r9, ror r0
 438:	00020804 	andeq	r0, r2, r4, lsl #16
 43c:	1e950100 	fmlnes	f0, f5, f0
 440:	46200005 	strtmi	r0, [r0], -r5
 444:	01000002 	tsteq	r0, r2
 448:	0000a79c 	muleq	r0, ip, r7
 44c:	00780500 	rsbseq	r0, r8, r0, lsl #10
 450:	002c9501 	eoreq	r9, ip, r1, lsl #10
 454:	91020000 	mrsls	r0, (UNDEF: 2)
 458:	00790567 	rsbseq	r0, r9, r7, ror #10
 45c:	002c9501 	eoreq	r9, ip, r1, lsl #10
 460:	91020000 	mrsls	r0, (UNDEF: 2)
 464:	65730566 	ldrbvs	r0, [r3, #-1382]!	; 0xfffffa9a
 468:	95010074 	strls	r0, [r1, #-116]	; 0xffffff8c
 46c:	0000002c 	andeq	r0, r0, ip, lsr #32
 470:	06659102 	strbteq	r9, [r5], -r2, lsl #2
 474:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 478:	002c9801 	eoreq	r9, ip, r1, lsl #16
 47c:	91020000 	mrsls	r0, (UNDEF: 2)
 480:	0286066d 	addeq	r0, r6, #114294784	; 0x6d00000
 484:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 488:	0000002c 	andeq	r0, r0, ip, lsr #32
 48c:	066f9102 	strbteq	r9, [pc], -r2, lsl #2
 490:	000002a8 	andeq	r0, r0, r8, lsr #5
 494:	002ca601 	eoreq	sl, ip, r1, lsl #12
 498:	91020000 	mrsls	r0, (UNDEF: 2)
 49c:	02b3066e 	adcseq	r0, r3, #115343360	; 0x6e00000
 4a0:	b2010000 	andlt	r0, r1, #0
 4a4:	0000002c 	andeq	r0, r0, ip, lsr #32
 4a8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 4ac:	0002e904 	andeq	lr, r2, r4, lsl #18
 4b0:	c6890100 	strgt	r0, [r9], r0, lsl #2
 4b4:	58200004 	stmdapl	r0!, {r2}
 4b8:	01000000 	mrseq	r0, (UNDEF: 0)
 4bc:	0000ed9c 	muleq	r0, ip, sp
 4c0:	04cc0700 	strbeq	r0, [ip], #1792	; 0x700
 4c4:	004a2000 	subeq	r2, sl, r0
 4c8:	de060000 	cdple	0, 0, cr0, cr6, cr0, {0}
 4cc:	01000002 	tsteq	r0, r2
 4d0:	0000ed8a 	andeq	lr, r0, sl, lsl #27
 4d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 4d8:	0004f007 	andeq	pc, r4, r7
 4dc:	00001a20 	andeq	r1, r0, r0, lsr #20
 4e0:	64610800 	strbtvs	r0, [r1], #-2048	; 0xfffff800
 4e4:	8d010064 	stchi	0, cr0, [r1, #-400]	; 0xfffffe70
 4e8:	000000ed 	andeq	r0, r0, sp, ror #1
 4ec:	00709102 	rsbseq	r9, r0, r2, lsl #2
 4f0:	04090000 	streq	r0, [r9], #-0
 4f4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 4f8:	02fe0a00 	rscseq	r0, lr, #0, 20
 4fc:	7b010000 	blvc	40504 <startup-0x1ffbfafc>
 500:	20000470 	andcs	r0, r0, r0, ror r4
 504:	00000056 	andeq	r0, r0, r6, asr r0
 508:	240b9c01 	strcs	r9, [fp], #-3073	; 0xfffff3ff
 50c:	01000002 	tsteq	r0, r2
 510:	00002176 	andeq	r2, r0, r6, ror r1
 514:	00044600 	andeq	r4, r4, r0, lsl #12
 518:	00002a20 	andeq	r2, r0, r0, lsr #20
 51c:	2d9c0100 	ldfcss	f0, [ip]
 520:	0c000001 	stceq	0, cr0, [r0], {1}
 524:	000002a8 	andeq	r0, r0, r8, lsr #5
 528:	00217601 	eoreq	r7, r1, r1, lsl #12
 52c:	91020000 	mrsls	r0, (UNDEF: 2)
 530:	cb040077 	blgt	100714 <startup-0x1feff8ec>
 534:	01000002 	tsteq	r0, r2
 538:	0004006e 	andeq	r0, r4, lr, rrx
 53c:	00004620 	andeq	r4, r0, r0, lsr #12
 540:	5f9c0100 	svcpl	0x009c0100
 544:	0c000001 	stceq	0, cr0, [r0], {1}
 548:	00000232 	andeq	r0, r0, r2, lsr r2
 54c:	00216e01 	eoreq	r6, r1, r1, lsl #28
 550:	91020000 	mrsls	r0, (UNDEF: 2)
 554:	02a80c77 	adceq	r0, r8, #30464	; 0x7700
 558:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
 55c:	00000021 	andeq	r0, r0, r1, lsr #32
 560:	00769102 	rsbseq	r9, r6, r2, lsl #2
 564:	0001da04 	andeq	sp, r1, r4, lsl #20
 568:	c0670100 	rsbgt	r0, r7, r0, lsl #2
 56c:	40200003 	eormi	r0, r0, r3
 570:	01000000 	mrseq	r0, (UNDEF: 0)
 574:	0001919c 	muleq	r1, ip, r1
 578:	01e80c00 	mvneq	r0, r0, lsl #24
 57c:	67010000 	strvs	r0, [r1, -r0]
 580:	00000021 	andeq	r0, r0, r1, lsr #32
 584:	0c779102 	ldfeqp	f1, [r7], #-8
 588:	000002a8 	andeq	r0, r0, r8, lsr #5
 58c:	00216701 	eoreq	r6, r1, r1, lsl #14
 590:	91020000 	mrsls	r0, (UNDEF: 2)
 594:	93040076 	movwls	r0, #16502	; 0x4076
 598:	01000002 	tsteq	r0, r2
 59c:	00034050 	andeq	r4, r3, r0, asr r0
 5a0:	00008020 	andeq	r8, r0, r0, lsr #32
 5a4:	c39c0100 	orrsgt	r0, ip, #0, 2
 5a8:	0c000001 	stceq	0, cr0, [r0], {1}
 5ac:	000002e3 	andeq	r0, r0, r3, ror #5
 5b0:	00215001 	eoreq	r5, r1, r1
 5b4:	91020000 	mrsls	r0, (UNDEF: 2)
 5b8:	02a80c77 	adceq	r0, r8, #30464	; 0x7700
 5bc:	50010000 	andpl	r0, r1, r0
 5c0:	00000021 	andeq	r0, r0, r1, lsr #32
 5c4:	00769102 	rsbseq	r9, r6, r2, lsl #2
 5c8:	0002be0b 	andeq	fp, r2, fp, lsl #28
 5cc:	21350100 	teqcs	r5, r0, lsl #2
 5d0:	b0000000 	andlt	r0, r0, r0
 5d4:	90200002 	eorls	r0, r0, r2
 5d8:	01000000 	mrseq	r0, (UNDEF: 0)
 5dc:	0001f89c 	muleq	r1, ip, r8
 5e0:	02a80c00 	adceq	r0, r8, #0, 24
 5e4:	35010000 	strcc	r0, [r1, #-0]
 5e8:	00000021 	andeq	r0, r0, r1, lsr #32
 5ec:	086f9102 	stmdaeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 5f0:	01005652 	tsteq	r0, r2, asr r6
 5f4:	0000213e 	andeq	r2, r0, lr, lsr r1
 5f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5fc:	02370a00 	eorseq	r0, r7, #0, 20
 600:	1f010000 	svcne	0x00010000
 604:	2000024a 	andcs	r0, r0, sl, asr #4
 608:	00000066 	andeq	r0, r0, r6, rrx
 60c:	a1049c01 	tstge	r4, r1, lsl #24
 610:	01000002 	tsteq	r0, r2
 614:	0001e00f 	andeq	lr, r1, pc
 618:	00006a20 	andeq	r6, r0, r0, lsr #20
 61c:	2d9c0100 	ldfcss	f0, [ip]
 620:	0c000002 	stceq	0, cr0, [r0], {2}
 624:	000002a8 	andeq	r0, r0, r8, lsr #5
 628:	00210f01 	eoreq	r0, r1, r1, lsl #30
 62c:	91020000 	mrsls	r0, (UNDEF: 2)
 630:	f00d0077 			; <UNDEFINED> instruction: 0xf00d0077
 634:	01000001 	tsteq	r0, r1
 638:	0001ac0b 	andeq	sl, r1, fp, lsl #24
 63c:	00003420 	andeq	r3, r0, r0, lsr #8
 640:	4f9c0100 	svcmi	0x009c0100
 644:	05000002 	streq	r0, [r0, #-2]
 648:	0b010078 	bleq	40830 <startup-0x1ffbf7d0>
 64c:	00000021 	andeq	r0, r0, r1, lsr #32
 650:	00779102 	rsbseq	r9, r7, r2, lsl #2
 654:	00020e0e 	andeq	r0, r2, lr, lsl #28
 658:	74070100 	strvc	r0, [r7], #-256	; 0xffffff00
 65c:	38200001 	stmdacc	r0!, {r0}
 660:	01000000 	mrseq	r0, (UNDEF: 0)
 664:	0078059c 			; <UNDEFINED> instruction: 0x0078059c
 668:	00210701 	eoreq	r0, r1, r1, lsl #14
 66c:	91020000 	mrsls	r0, (UNDEF: 2)
 670:	1e000077 	mcrne	0, 0, r0, cr0, cr7, {3}
 674:	04000002 	streq	r0, [r0], #-2
 678:	0002cb00 	andeq	ip, r2, r0, lsl #22
 67c:	87010400 	strhi	r0, [r1, -r0, lsl #8]
 680:	0c000000 	stceq	0, cr0, [r0], {-0}
 684:	00000322 	andeq	r0, r0, r2, lsr #6
 688:	20000764 	andcs	r0, r0, r4, ror #14
 68c:	000000dc 	ldrdeq	r0, [r0], -ip
 690:	000002dc 	ldrdeq	r0, [r0], -ip
 694:	00006d02 	andeq	r6, r0, r2, lsl #26
 698:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
 69c:	00000042 	andeq	r0, r0, r2, asr #32
 6a0:	02007803 	andeq	r7, r0, #196608	; 0x30000
 6a4:	00004206 	andeq	r4, r0, r6, lsl #4
 6a8:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
 6ac:	42070200 	andmi	r0, r7, #0, 4
 6b0:	01000000 	mrseq	r0, (UNDEF: 0)
 6b4:	08010400 	stmdaeq	r1, {sl}
 6b8:	00000079 	andeq	r0, r0, r9, ror r0
 6bc:	00017905 	andeq	r7, r1, r5, lsl #18
 6c0:	21080200 	mrscs	r0, R8_fiq
 6c4:	02000000 	andeq	r0, r0, #0
 6c8:	00000132 	andeq	r0, r0, r2, lsr r1
 6cc:	900b02d4 	ldrdls	r0, [fp], -r4
 6d0:	06000000 	streq	r0, [r0], -r0
 6d4:	0000016f 	andeq	r0, r0, pc, ror #2
 6d8:	00900c02 	addseq	r0, r0, r2, lsl #24
 6dc:	06000000 	streq	r0, [r0], -r0
 6e0:	0000000a 	andeq	r0, r0, sl
 6e4:	00900d02 	addseq	r0, r0, r2, lsl #26
 6e8:	06040000 	streq	r0, [r4], -r0
 6ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 6f0:	00900e02 	addseq	r0, r0, r2, lsl #28
 6f4:	03080000 	movweq	r0, #32768	; 0x8000
 6f8:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 6fc:	0000970f 	andeq	r9, r0, pc, lsl #14
 700:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 704:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 708:	49080074 	stmdbmi	r8, {r2, r4, r5, r6}
 70c:	a7000000 	strge	r0, [r0, -r0]
 710:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 714:	000000a7 	andeq	r0, r0, r7, lsr #1
 718:	04040063 	streq	r0, [r4], #-99	; 0xffffff9d
 71c:	00015c07 	andeq	r5, r1, r7, lsl #24
 720:	011f0500 	tsteq	pc, r0, lsl #10
 724:	10020000 	andne	r0, r2, r0
 728:	000000b9 	strheq	r0, [r0], -r9
 72c:	0054040a 	subseq	r0, r4, sl, lsl #8
 730:	7f020000 	svcvc	0x00020000
 734:	24000001 	strcs	r0, [r0], #-1
 738:	01381202 	teqeq	r8, r2, lsl #4
 73c:	67030000 	strvs	r0, [r3, -r0]
 740:	02006f65 	andeq	r6, r0, #404	; 0x194
 744:	0000ae13 	andeq	sl, r0, r3, lsl lr
 748:	6a060000 	bvs	180750 <startup-0x1fe7f8b0>
 74c:	02000001 	andeq	r0, r0, #1
 750:	00009014 	andeq	r9, r0, r4, lsl r0
 754:	00060400 	andeq	r0, r6, r0, lsl #8
 758:	02000000 	andeq	r0, r0, #0
 75c:	00009014 	andeq	r9, r0, r4, lsl r0
 760:	65060800 	strvs	r0, [r6, #-2048]	; 0xfffff800
 764:	02000001 	andeq	r0, r0, #1
 768:	00009015 	andeq	r9, r0, r5, lsl r0
 76c:	05060c00 	streq	r0, [r6, #-3072]	; 0xfffff400
 770:	02000000 	andeq	r0, r0, #0
 774:	00009015 	andeq	r9, r0, r5, lsl r0
 778:	22061000 	andcs	r1, r6, #0
 77c:	02000000 	andeq	r0, r0, #0
 780:	00014916 	andeq	r4, r1, r6, lsl r9
 784:	02061400 	andeq	r1, r6, #0, 8
 788:	02000002 	andeq	r0, r0, #2
 78c:	00014917 	andeq	r4, r1, r7, lsl r9
 790:	74061800 	strvc	r1, [r6], #-2048	; 0xfffff800
 794:	02000000 	andeq	r0, r0, #0
 798:	00014918 	andeq	r4, r1, r8, lsl r9
 79c:	63061c00 	movwvs	r1, #27648	; 0x6c00
 7a0:	02000000 	andeq	r0, r0, #0
 7a4:	00016419 	andeq	r6, r1, r9, lsl r4
 7a8:	0b002000 	bleq	87b0 <startup-0x1fff7850>
 7ac:	00000143 	andeq	r0, r0, r3, asr #2
 7b0:	0001430c 	andeq	r4, r1, ip, lsl #6
 7b4:	040a0000 	streq	r0, [sl], #-0
 7b8:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
 7bc:	0138040a 	teqeq	r8, sl, lsl #8
 7c0:	640b0000 	strvs	r0, [fp], #-0
 7c4:	0c000001 	stceq	0, cr0, [r0], {1}
 7c8:	00000143 	andeq	r0, r0, r3, asr #2
 7cc:	0000900c 	andeq	r9, r0, ip
 7d0:	00900c00 	addseq	r0, r0, r0, lsl #24
 7d4:	0a000000 	beq	7dc <startup-0x1ffff824>
 7d8:	00014f04 	andeq	r4, r1, r4, lsl #30
 7dc:	01540500 	cmpeq	r4, r0, lsl #10
 7e0:	1a020000 	bne	807e8 <startup-0x1ff7f818>
 7e4:	00000143 	andeq	r0, r0, r3, asr #2
 7e8:	0003110d 	andeq	r1, r3, sp, lsl #2
 7ec:	200f0100 	andcs	r0, pc, r0, lsl #2
 7f0:	20200008 	eorcs	r0, r0, r8
 7f4:	01000000 	mrseq	r0, (UNDEF: 0)
 7f8:	0001b19c 	muleq	r1, ip, r1
 7fc:	01920e00 	orrseq	r0, r2, r0, lsl #28
 800:	0f010000 	svceq	0x00010000
 804:	0000016a 	andeq	r0, r0, sl, ror #2
 808:	0f749102 	svceq	0x00749102
 80c:	0f010078 	svceq	0x00010078
 810:	00000090 	muleq	r0, r0, r0
 814:	0f709102 	svceq	0x00709102
 818:	0f010079 	svceq	0x00010079
 81c:	00000090 	muleq	r0, r0, r0
 820:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 824:	00035d10 	andeq	r5, r3, r0, lsl sp
 828:	c2090100 	andgt	r0, r9, #0, 2
 82c:	5e200007 	cdppl	0, 2, cr0, cr0, cr7, {0}
 830:	01000000 	mrseq	r0, (UNDEF: 0)
 834:	0001eb9c 	muleq	r1, ip, fp
 838:	01920e00 	orrseq	r0, r2, r0, lsl #28
 83c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 840:	0000016a 	andeq	r0, r0, sl, ror #2
 844:	116c9102 	cmnne	ip, r2, lsl #2
 848:	200007ca 	andcs	r0, r0, sl, asr #15
 84c:	0000004e 	andeq	r0, r0, lr, asr #32
 850:	01006912 	tsteq	r0, r2, lsl r9
 854:	0000900a 	andeq	r9, r0, sl
 858:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 85c:	6a130000 	bvs	4c0864 <startup-0x1fb3f79c>
 860:	01000003 	tsteq	r0, r3
 864:	00076404 	andeq	r6, r7, r4, lsl #8
 868:	00005e20 	andeq	r5, r0, r0, lsr #28
 86c:	0e9c0100 	fmleqe	f0, f4, f0
 870:	00000192 	muleq	r0, r2, r1
 874:	016a0401 	cmneq	sl, r1, lsl #8
 878:	91020000 	mrsls	r0, (UNDEF: 2)
 87c:	076c116c 	strbeq	r1, [ip, -ip, ror #2]!
 880:	004e2000 	subeq	r2, lr, r0
 884:	69120000 	ldmdbvs	r2, {}	; <UNPREDICTABLE>
 888:	90050100 	andls	r0, r5, r0, lsl #2
 88c:	02000000 	andeq	r0, r0, #0
 890:	00007491 	muleq	r0, r1, r4
 894:	00008d00 	andeq	r8, r0, r0, lsl #26
 898:	da000400 	ble	18a0 <startup-0x1fffe760>
 89c:	04000003 	streq	r0, [r0], #-3
 8a0:	00008701 	andeq	r8, r0, r1, lsl #14
 8a4:	03b30c00 			; <UNDEFINED> instruction: 0x03b30c00
 8a8:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
 8ac:	009a2000 	addseq	r2, sl, r0
 8b0:	037d0000 	cmneq	sp, #0
 8b4:	8f020000 	svchi	0x00020000
 8b8:	01000003 	tsteq	r0, r3
 8bc:	0008c820 	andeq	ip, r8, r0, lsr #16
 8c0:	00001220 	andeq	r1, r0, r0, lsr #4
 8c4:	039c0100 	orrseq	r0, ip, #0, 2
 8c8:	00000376 	andeq	r0, r0, r6, ror r3
 8cc:	08b01801 	ldmeq	r0!, {r0, fp, ip}
 8d0:	00182000 	andseq	r2, r8, r0
 8d4:	9c010000 	stcls	0, cr0, [r1], {-0}
 8d8:	00000055 	andeq	r0, r0, r5, asr r0
 8dc:	00736d04 	rsbseq	r6, r3, r4, lsl #26
 8e0:	00551801 	subseq	r1, r5, r1, lsl #16
 8e4:	91020000 	mrsls	r0, (UNDEF: 2)
 8e8:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
 8ec:	00038207 	andeq	r8, r3, r7, lsl #4
 8f0:	03a70300 			; <UNDEFINED> instruction: 0x03a70300
 8f4:	0f010000 	svceq	0x00010000
 8f8:	20000884 	andcs	r0, r0, r4, lsl #17
 8fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 900:	007f9c01 	rsbseq	r9, pc, r1, lsl #24
 904:	75040000 	strvc	r0, [r4, #-0]
 908:	0f010073 	svceq	0x00010073
 90c:	00000055 	andeq	r0, r0, r5, asr r0
 910:	00749102 	rsbseq	r9, r4, r2, lsl #2
 914:	00039b06 	andeq	r9, r3, r6, lsl #22
 918:	40040100 	andmi	r0, r4, r0, lsl #2
 91c:	44200008 	strtmi	r0, [r0], #-8
 920:	01000000 	mrseq	r0, (UNDEF: 0)
 924:	01e9009c 			; <UNDEFINED> instruction: 0x01e9009c
 928:	00040000 	andeq	r0, r4, r0
 92c:	00000450 	andeq	r0, r0, r0, asr r4
 930:	00870104 	addeq	r0, r7, r4, lsl #2
 934:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
 938:	dc000004 	stcle	0, cr0, [r0], {4}
 93c:	5e200008 	cdppl	0, 2, cr0, cr0, cr8, {0}
 940:	01000000 	mrseq	r0, (UNDEF: 0)
 944:	02000004 	andeq	r0, r0, #4
 948:	0000006d 	andeq	r0, r0, sp, rrx
 94c:	42050202 	andmi	r0, r5, #536870912	; 0x20000000
 950:	03000000 	movweq	r0, #0
 954:	06020078 			; <UNDEFINED> instruction: 0x06020078
 958:	00000042 	andeq	r0, r0, r2, asr #32
 95c:	00790300 	rsbseq	r0, r9, r0, lsl #6
 960:	00420702 	subeq	r0, r2, r2, lsl #14
 964:	00010000 	andeq	r0, r1, r0
 968:	79080104 	stmdbvc	r8, {r2, r8}
 96c:	05000000 	streq	r0, [r0, #-0]
 970:	00000179 	andeq	r0, r0, r9, ror r1
 974:	00210802 	eoreq	r0, r1, r2, lsl #16
 978:	32020000 	andcc	r0, r2, #0
 97c:	d4000001 	strle	r0, [r0], #-1
 980:	00900b02 	addseq	r0, r0, r2, lsl #22
 984:	6f060000 	svcvs	0x00060000
 988:	02000001 	andeq	r0, r0, #1
 98c:	0000900c 	andeq	r9, r0, ip
 990:	0a060000 	beq	180998 <startup-0x1fe7f668>
 994:	02000000 	andeq	r0, r0, #0
 998:	0000900d 	andeq	r9, r0, sp
 99c:	1c060400 	cfstrsne	mvf0, [r6], {-0}
 9a0:	02000000 	andeq	r0, r0, #0
 9a4:	0000900e 	andeq	r9, r0, lr
 9a8:	70030800 	andvc	r0, r3, r0, lsl #16
 9ac:	0f020078 	svceq	0x00020078
 9b0:	00000097 	muleq	r0, r7, r0
 9b4:	0407000c 	streq	r0, [r7], #-12
 9b8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 9bc:	00490800 	subeq	r0, r9, r0, lsl #16
 9c0:	00a70000 	adceq	r0, r7, r0
 9c4:	a7090000 	strge	r0, [r9, -r0]
 9c8:	63000000 	movwvs	r0, #0
 9cc:	07040400 	streq	r0, [r4, -r0, lsl #8]
 9d0:	0000015c 	andeq	r0, r0, ip, asr r1
 9d4:	00012005 	andeq	r2, r1, r5
 9d8:	54100200 	ldrpl	r0, [r0], #-512	; 0xfffffe00
 9dc:	05000000 	streq	r0, [r0, #-0]
 9e0:	0000011f 	andeq	r0, r0, pc, lsl r1
 9e4:	00c41002 	sbceq	r1, r4, r2
 9e8:	040a0000 	streq	r0, [sl], #-0
 9ec:	00000054 	andeq	r0, r0, r4, asr r0
 9f0:	00017f02 	andeq	r7, r1, r2, lsl #30
 9f4:	12022400 	andne	r2, r2, #0, 8
 9f8:	00000143 	andeq	r0, r0, r3, asr #2
 9fc:	6f656703 	svcvs	0x00656703
 a00:	b9130200 	ldmdblt	r3, {r9}
 a04:	00000000 	andeq	r0, r0, r0
 a08:	00016a06 	andeq	r6, r1, r6, lsl #20
 a0c:	90140200 	andsls	r0, r4, r0, lsl #4
 a10:	04000000 	streq	r0, [r0], #-0
 a14:	00000006 	andeq	r0, r0, r6
 a18:	90140200 	andsls	r0, r4, r0, lsl #4
 a1c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 a20:	00016506 	andeq	r6, r1, r6, lsl #10
 a24:	90150200 	andsls	r0, r5, r0, lsl #4
 a28:	0c000000 	stceq	0, cr0, [r0], {-0}
 a2c:	00000506 	andeq	r0, r0, r6, lsl #10
 a30:	90150200 	andsls	r0, r5, r0, lsl #4
 a34:	10000000 	andne	r0, r0, r0
 a38:	00002206 	andeq	r2, r0, r6, lsl #4
 a3c:	54160200 	ldrpl	r0, [r6], #-512	; 0xfffffe00
 a40:	14000001 	strne	r0, [r0], #-1
 a44:	00020206 	andeq	r0, r2, r6, lsl #4
 a48:	54170200 	ldrpl	r0, [r7], #-512	; 0xfffffe00
 a4c:	18000001 	stmdane	r0, {r0}
 a50:	00007406 	andeq	r7, r0, r6, lsl #8
 a54:	54180200 	ldrpl	r0, [r8], #-512	; 0xfffffe00
 a58:	1c000001 	stcne	0, cr0, [r0], {1}
 a5c:	00006306 	andeq	r6, r0, r6, lsl #6
 a60:	6f190200 	svcvs	0x00190200
 a64:	20000001 	andcs	r0, r0, r1
 a68:	014e0b00 	cmpeq	lr, r0, lsl #22
 a6c:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
 a70:	00000001 	andeq	r0, r0, r1
 a74:	00ca040a 	sbceq	r0, sl, sl, lsl #8
 a78:	040a0000 	streq	r0, [sl], #-0
 a7c:	00000143 	andeq	r0, r0, r3, asr #2
 a80:	00016f0b 	andeq	r6, r1, fp, lsl #30
 a84:	014e0c00 	cmpeq	lr, r0, lsl #24
 a88:	900c0000 	andls	r0, ip, r0
 a8c:	0c000000 	stceq	0, cr0, [r0], {-0}
 a90:	00000090 	muleq	r0, r0, r0
 a94:	5a040a00 	bpl	10329c <startup-0x1fefcd64>
 a98:	05000001 	streq	r0, [r0, #-1]
 a9c:	00000155 	andeq	r0, r0, r5, asr r1
 aa0:	00ca1a02 	sbceq	r1, sl, r2, lsl #20
 aa4:	54050000 	strpl	r0, [r5], #-0
 aa8:	02000001 	andeq	r0, r0, #1
 aac:	00014e1a 	andeq	r4, r1, sl, lsl lr
 ab0:	01440d00 	cmpeq	r4, r0, lsl #26
 ab4:	04030000 	streq	r0, [r3], #-0
 ab8:	00000175 	andeq	r0, r0, r5, ror r1
 abc:	0000100d 	andeq	r1, r0, sp
 ac0:	75050300 	strvc	r0, [r5, #-768]	; 0xfffffd00
 ac4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 ac8:	000003f9 	strdeq	r0, [r0], -r9
 acc:	00ae0301 	adceq	r0, lr, r1, lsl #6
 ad0:	03050000 	movweq	r0, #20480	; 0x5000
 ad4:	20000a34 	andcs	r0, r0, r4, lsr sl
 ad8:	00018b0f 	andeq	r8, r1, pc, lsl #22
 adc:	05230100 	streq	r0, [r3, #-256]!	; 0xffffff00
 ae0:	000b0803 	andeq	r0, fp, r3, lsl #16
 ae4:	01960f20 	orrseq	r0, r6, r0, lsr #30
 ae8:	2d010000 	stccs	0, cr0, [r1, #-0]
 aec:	0b2c0305 	bleq	b01708 <startup-0x1f4fe8f8>
 af0:	ed102000 	ldc	0, cr2, [r0, #-0]
 af4:	01000003 	tsteq	r0, r3
 af8:	0008dc37 	andeq	sp, r8, r7, lsr ip
 afc:	00005e20 	andeq	r5, r0, r0, lsr #28
 b00:	119c0100 	orrsne	r0, ip, r0, lsl #2
 b04:	00000192 	muleq	r0, r2, r1
 b08:	01803701 	orreq	r3, r0, r1, lsl #14
 b0c:	91020000 	mrsls	r0, (UNDEF: 2)
 b10:	Address 0x00000b10 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03011303 	movweq	r1, #4867	; 0x1303
  20:	3a0b0b0e 	bcc	2c2c60 <startup-0x1fd3d3a0>
  24:	010b3b0b 	tsteq	fp, fp, lsl #22
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	0b381349 	bleq	e04d60 <startup-0x1f1fb2a0>
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	3f13490b 	svccc	0x0013490b
  98:	00193c19 	andseq	r3, r9, r9, lsl ip
  9c:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	01111927 	tsteq	r1, r7, lsr #18
  ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b4:	0f000013 	svceq	0x00000013
  b8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c4:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
  c8:	03193f00 	tsteq	r9, #0, 30
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	1119270b 	tstne	r9, fp, lsl #14
  d4:	40061201 	andmi	r1, r6, r1, lsl #4
  d8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  dc:	01000000 	mrseq	r0, (UNDEF: 0)
  e0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  e4:	0e030b13 	vmoveq.32	d3[0], r0
  e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ec:	00001710 	andeq	r1, r0, r0, lsl r7
  f0:	03011302 	movweq	r1, #4866	; 0x1302
  f4:	3a0b0b0e 	bcc	2c2d34 <startup-0x1fd3d2cc>
  f8:	010b3b0b 	tsteq	fp, fp, lsl #22
  fc:	03000013 	movweq	r0, #19
 100:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 104:	0b3b0b3a 	bleq	ec2df4 <startup-0x1f13d20c>
 108:	0b381349 	bleq	e04e34 <startup-0x1f1fb1cc>
 10c:	24040000 	strcs	r0, [r4], #-0
 110:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 114:	000e030b 	andeq	r0, lr, fp, lsl #6
 118:	00160500 	andseq	r0, r6, r0, lsl #10
 11c:	0b3a0e03 	bleq	e83930 <startup-0x1f17c6d0>
 120:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 124:	0d060000 	stceq	0, cr0, [r6, #-0]
 128:	3a0e0300 	bcc	380d30 <startup-0x1fc7f2d0>
 12c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 130:	000b3813 	andeq	r3, fp, r3, lsl r8
 134:	00240700 	eoreq	r0, r4, r0, lsl #14
 138:	0b3e0b0b 	bleq	f82d6c <startup-0x1f07d294>
 13c:	00000803 	andeq	r0, r0, r3, lsl #16
 140:	49010108 	stmdbmi	r1, {r3, r8}
 144:	00130113 	andseq	r0, r3, r3, lsl r1
 148:	00210900 	eoreq	r0, r1, r0, lsl #18
 14c:	0b2f1349 	bleq	bc4e78 <startup-0x1f43b188>
 150:	0f0a0000 	svceq	0x000a0000
 154:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 158:	0b000013 	bleq	1ac <startup-0x1ffffe54>
 15c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 160:	00001301 	andeq	r1, r0, r1, lsl #6
 164:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 168:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 16c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 170:	0b3b0b3a 	bleq	ec2e60 <startup-0x1f13d1a0>
 174:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 178:	0000193c 	andeq	r1, r0, ip, lsr r9
 17c:	0300340e 	movweq	r3, #1038	; 0x40e
 180:	3b0b3a0e 	blcc	2ce9c0 <startup-0x1fd31640>
 184:	3f13490b 	svccc	0x0013490b
 188:	00180219 	andseq	r0, r8, r9, lsl r2
 18c:	00340f00 	eorseq	r0, r4, r0, lsl #30
 190:	0b3a1347 	bleq	e84eb4 <startup-0x1f17b14c>
 194:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 198:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 19c:	03193f01 	tsteq	r9, #1, 30
 1a0:	3b0b3a0e 	blcc	2ce9e0 <startup-0x1fd31620>
 1a4:	1119270b 	tstne	r9, fp, lsl #14
 1a8:	40061201 	andmi	r1, r6, r1, lsl #4
 1ac:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1b0:	05110000 	ldreq	r0, [r1, #-0]
 1b4:	3a0e0300 	bcc	380dbc <startup-0x1fc7f244>
 1b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1bc:	00180213 	andseq	r0, r8, r3, lsl r2
 1c0:	00341200 	eorseq	r1, r4, r0, lsl #4
 1c4:	0b3a0803 	bleq	e821d8 <startup-0x1f17de28>
 1c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1cc:	00001802 	andeq	r1, r0, r2, lsl #16
 1d0:	01110100 	tsteq	r1, r0, lsl #2
 1d4:	0b130e25 	bleq	4c3a70 <startup-0x1fb3c590>
 1d8:	01110e03 	tsteq	r1, r3, lsl #28
 1dc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 1e0:	16020000 	strne	r0, [r2], -r0
 1e4:	3a0e0300 	bcc	380dec <startup-0x1fc7f214>
 1e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1ec:	03000013 	movweq	r0, #19
 1f0:	0b0b0024 	bleq	2c0288 <startup-0x1fd3fd78>
 1f4:	0e030b3e 	vmoveq.16	d3[0], r0
 1f8:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 1fc:	03193f01 	tsteq	r9, #1, 30
 200:	3b0b3a0e 	blcc	2cea40 <startup-0x1fd315c0>
 204:	1119270b 	tstne	r9, fp, lsl #14
 208:	40061201 	andmi	r1, r6, r1, lsl #4
 20c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 210:	00001301 	andeq	r1, r0, r1, lsl #6
 214:	03000505 	movweq	r0, #1285	; 0x505
 218:	3b0b3a08 	blcc	2cea40 <startup-0x1fd315c0>
 21c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 220:	06000018 			; <UNDEFINED> instruction: 0x06000018
 224:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 228:	0b3b0b3a 	bleq	ec2f18 <startup-0x1f13d0e8>
 22c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 230:	0b070000 	bleq	1c0238 <startup-0x1fe3fdc8>
 234:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 238:	08000006 	stmdaeq	r0, {r1, r2}
 23c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 240:	0b3b0b3a 	bleq	ec2f30 <startup-0x1f13d0d0>
 244:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 248:	24090000 	strcs	r0, [r9], #-0
 24c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 250:	0008030b 	andeq	r0, r8, fp, lsl #6
 254:	002e0a00 	eoreq	r0, lr, r0, lsl #20
 258:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 25c:	0b3b0b3a 	bleq	ec2f4c <startup-0x1f13d0b4>
 260:	01111927 	tsteq	r1, r7, lsr #18
 264:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 268:	00194296 	mulseq	r9, r6, r2
 26c:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 270:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 274:	0b3b0b3a 	bleq	ec2f64 <startup-0x1f13d09c>
 278:	13491927 	movtne	r1, #39207	; 0x9927
 27c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 280:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 284:	00130119 	andseq	r0, r3, r9, lsl r1
 288:	00050c00 	andeq	r0, r5, r0, lsl #24
 28c:	0b3a0e03 	bleq	e83aa0 <startup-0x1f17c560>
 290:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 294:	00001802 	andeq	r1, r0, r2, lsl #16
 298:	3f012e0d 	svccc	0x00012e0d
 29c:	3a0e0319 	bcc	380f08 <startup-0x1fc7f0f8>
 2a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2a4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2a8:	97184006 	ldrls	r4, [r8, -r6]
 2ac:	13011942 	movwne	r1, #6466	; 0x1942
 2b0:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 2b4:	03193f01 	tsteq	r9, #1, 30
 2b8:	3b0b3a0e 	blcc	2ceaf8 <startup-0x1fd31508>
 2bc:	1119270b 	tstne	r9, fp, lsl #14
 2c0:	40061201 	andmi	r1, r6, r1, lsl #4
 2c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2c8:	01000000 	mrseq	r0, (UNDEF: 0)
 2cc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2d0:	0e030b13 	vmoveq.32	d3[0], r0
 2d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2d8:	00001710 	andeq	r1, r0, r0, lsl r7
 2dc:	03011302 	movweq	r1, #4866	; 0x1302
 2e0:	3a0b0b0e 	bcc	2c2f20 <startup-0x1fd3d0e0>
 2e4:	010b3b0b 	tsteq	fp, fp, lsl #22
 2e8:	03000013 	movweq	r0, #19
 2ec:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 2f0:	0b3b0b3a 	bleq	ec2fe0 <startup-0x1f13d020>
 2f4:	0b381349 	bleq	e05020 <startup-0x1f1fafe0>
 2f8:	24040000 	strcs	r0, [r4], #-0
 2fc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 300:	000e030b 	andeq	r0, lr, fp, lsl #6
 304:	00160500 	andseq	r0, r6, r0, lsl #10
 308:	0b3a0e03 	bleq	e83b1c <startup-0x1f17c4e4>
 30c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 310:	0d060000 	stceq	0, cr0, [r6, #-0]
 314:	3a0e0300 	bcc	380f1c <startup-0x1fc7f0e4>
 318:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 31c:	000b3813 	andeq	r3, fp, r3, lsl r8
 320:	00240700 	eoreq	r0, r4, r0, lsl #14
 324:	0b3e0b0b 	bleq	f82f58 <startup-0x1f07d0a8>
 328:	00000803 	andeq	r0, r0, r3, lsl #16
 32c:	49010108 	stmdbmi	r1, {r3, r8}
 330:	00130113 	andseq	r0, r3, r3, lsl r1
 334:	00210900 	eoreq	r0, r1, r0, lsl #18
 338:	0b2f1349 	bleq	bc5064 <startup-0x1f43af9c>
 33c:	0f0a0000 	svceq	0x000a0000
 340:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 344:	0b000013 	bleq	398 <startup-0x1ffffc68>
 348:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 34c:	00001301 	andeq	r1, r0, r1, lsl #6
 350:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 354:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 358:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 35c:	0b3a0e03 	bleq	e83b70 <startup-0x1f17c490>
 360:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 364:	06120111 			; <UNDEFINED> instruction: 0x06120111
 368:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 36c:	00130119 	andseq	r0, r3, r9, lsl r1
 370:	00050e00 	andeq	r0, r5, r0, lsl #28
 374:	0b3a0e03 	bleq	e83b88 <startup-0x1f17c478>
 378:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 37c:	00001802 	andeq	r1, r0, r2, lsl #16
 380:	0300050f 	movweq	r0, #1295	; 0x50f
 384:	3b0b3a08 	blcc	2cebac <startup-0x1fd31454>
 388:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 38c:	10000018 	andne	r0, r0, r8, lsl r0
 390:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 394:	0b3a0e03 	bleq	e83ba8 <startup-0x1f17c458>
 398:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 39c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3a0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3a4:	00130119 	andseq	r0, r3, r9, lsl r1
 3a8:	010b1100 	mrseq	r1, (UNDEF: 27)
 3ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3b0:	34120000 	ldrcc	r0, [r2], #-0
 3b4:	3a080300 	bcc	200fbc <startup-0x1fdff044>
 3b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3bc:	00180213 	andseq	r0, r8, r3, lsl r2
 3c0:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 3c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3c8:	0b3b0b3a 	bleq	ec30b8 <startup-0x1f13cf48>
 3cc:	01111927 	tsteq	r1, r7, lsr #18
 3d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3d4:	00194296 	mulseq	r9, r6, r2
 3d8:	11010000 	mrsne	r0, (UNDEF: 1)
 3dc:	130e2501 	movwne	r2, #58625	; 0xe501
 3e0:	110e030b 	tstne	lr, fp, lsl #6
 3e4:	10061201 	andne	r1, r6, r1, lsl #4
 3e8:	02000017 	andeq	r0, r0, #23
 3ec:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 3f0:	0b3a0e03 	bleq	e83c04 <startup-0x1f17c3fc>
 3f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 400:	03000019 	movweq	r0, #25
 404:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 408:	0b3a0e03 	bleq	e83c1c <startup-0x1f17c3e4>
 40c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 410:	06120111 			; <UNDEFINED> instruction: 0x06120111
 414:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 418:	00130119 	andseq	r0, r3, r9, lsl r1
 41c:	00050400 	andeq	r0, r5, r0, lsl #8
 420:	0b3a0803 	bleq	e82434 <startup-0x1f17dbcc>
 424:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 428:	00001802 	andeq	r1, r0, r2, lsl #16
 42c:	0b002405 	bleq	9448 <startup-0x1fff6bb8>
 430:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 434:	0600000e 	streq	r0, [r0], -lr
 438:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 43c:	0b3a0e03 	bleq	e83c50 <startup-0x1f17c3b0>
 440:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 444:	06120111 			; <UNDEFINED> instruction: 0x06120111
 448:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 44c:	00000019 	andeq	r0, r0, r9, lsl r0
 450:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 454:	030b130e 	movweq	r1, #45838	; 0xb30e
 458:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 45c:	00171006 	andseq	r1, r7, r6
 460:	01130200 	tsteq	r3, r0, lsl #4
 464:	0b0b0e03 	bleq	2c3c78 <startup-0x1fd3c388>
 468:	0b3b0b3a 	bleq	ec3158 <startup-0x1f13cea8>
 46c:	00001301 	andeq	r1, r0, r1, lsl #6
 470:	03000d03 	movweq	r0, #3331	; 0xd03
 474:	3b0b3a08 	blcc	2cec9c <startup-0x1fd31364>
 478:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 47c:	0400000b 	streq	r0, [r0], #-11
 480:	0b0b0024 	bleq	2c0518 <startup-0x1fd3fae8>
 484:	0e030b3e 	vmoveq.16	d3[0], r0
 488:	16050000 	strne	r0, [r5], -r0
 48c:	3a0e0300 	bcc	381094 <startup-0x1fc7ef6c>
 490:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 494:	06000013 			; <UNDEFINED> instruction: 0x06000013
 498:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 49c:	0b3b0b3a 	bleq	ec318c <startup-0x1f13ce74>
 4a0:	0b381349 	bleq	e051cc <startup-0x1f1fae34>
 4a4:	24070000 	strcs	r0, [r7], #-0
 4a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4ac:	0008030b 	andeq	r0, r8, fp, lsl #6
 4b0:	01010800 	tsteq	r1, r0, lsl #16
 4b4:	13011349 	movwne	r1, #4937	; 0x1349
 4b8:	21090000 	mrscs	r0, (UNDEF: 9)
 4bc:	2f134900 	svccs	0x00134900
 4c0:	0a00000b 	beq	4f4 <startup-0x1ffffb0c>
 4c4:	0b0b000f 	bleq	2c0508 <startup-0x1fd3faf8>
 4c8:	00001349 	andeq	r1, r0, r9, asr #6
 4cc:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 4d0:	00130119 	andseq	r0, r3, r9, lsl r1
 4d4:	00050c00 	andeq	r0, r5, r0, lsl #24
 4d8:	00001349 	andeq	r1, r0, r9, asr #6
 4dc:	0300340d 	movweq	r3, #1037	; 0x40d
 4e0:	3b0b3a0e 	blcc	2ced20 <startup-0x1fd312e0>
 4e4:	3f13490b 	svccc	0x0013490b
 4e8:	00193c19 	andseq	r3, r9, r9, lsl ip
 4ec:	00340e00 	eorseq	r0, r4, r0, lsl #28
 4f0:	0b3a0e03 	bleq	e83d04 <startup-0x1f17c2fc>
 4f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4f8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 4fc:	340f0000 	strcc	r0, [pc], #-0	; 504 <startup-0x1ffffafc>
 500:	3a134700 	bcc	4d2108 <startup-0x1fb2def8>
 504:	020b3b0b 	andeq	r3, fp, #11264	; 0x2c00
 508:	10000018 	andne	r0, r0, r8, lsl r0
 50c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 510:	0b3a0e03 	bleq	e83d24 <startup-0x1f17c2dc>
 514:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 518:	06120111 			; <UNDEFINED> instruction: 0x06120111
 51c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 520:	11000019 	tstne	r0, r9, lsl r0
 524:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 528:	0b3b0b3a 	bleq	ec3218 <startup-0x1f13cde8>
 52c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 530:	Address 0x00000530 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000088 	andeq	r0, r0, r8, lsl #1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02000002 	andeq	r0, r0, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000098 	mulcs	r0, r8, r0
  3c:	000000dc 	ldrdeq	r0, [r0], -ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	04050002 	streq	r0, [r5], #-2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000174 	andcs	r0, r0, r4, ror r1
  5c:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	06730002 	ldrbteq	r0, [r3], -r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000764 	andcs	r0, r0, r4, ror #14
  7c:	000000dc 	ldrdeq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	08950002 	ldmeq	r5, {r1}
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000840 	andcs	r0, r0, r0, asr #16
  9c:	0000009a 	muleq	r0, sl, r0
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	09260002 	stmdbeq	r6!, {r1}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200008dc 	ldrdcs	r0, [r0], -ip
  bc:	0000005e 	andeq	r0, r0, lr, asr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000098 	mulcs	r0, r8, r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000be 	strheq	r0, [r0], -lr
   4:	00740002 	rsbseq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  44:	5f6c6165 	svcpl	0x006c6165
  48:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  4c:	74730000 	ldrbtvc	r0, [r3], #-0
  50:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  54:	00632e70 	rsbeq	r2, r3, r0, ror lr
  58:	6f000001 	svcvs	0x00000001
  5c:	63656a62 	cmnvs	r5, #401408	; 0x62000
  60:	00682e74 	rsbeq	r2, r8, r4, ror lr
  64:	62000001 	andvs	r0, r0, #1
  68:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
  6c:	00010068 	andeq	r0, r1, r8, rrx
  70:	64617000 	strbtvs	r7, [r1], #-0
  74:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
  78:	00010068 	andeq	r0, r1, r8, rrx
  7c:	05000000 	streq	r0, [r0, #-0]
  80:	00000002 	andeq	r0, r0, r2
  84:	010a0320 	tsteq	sl, r0, lsr #6
  88:	03025e13 	movweq	r5, #11795	; 0x2e13
  8c:	00010100 	andeq	r0, r1, r0, lsl #2
  90:	00100205 	andseq	r0, r0, r5, lsl #4
  94:	13032000 	movwne	r2, #12288	; 0x3000
  98:	7a3d2f01 	bvc	f4bca4 <startup-0x1f0b435c>
  9c:	2f2f2f3d 	svccs	0x002f2f3d
  a0:	6767332f 	strbvs	r3, [r7, -pc, lsr #6]!
  a4:	01040200 	mrseq	r0, R12_usr
  a8:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
  ac:	02005901 	andeq	r5, r0, #16384	; 0x4000
  b0:	00590104 	subseq	r0, r9, r4, lsl #2
  b4:	59010402 	stmdbpl	r1, {r1, sl}
  b8:	01040200 	mrseq	r0, R12_usr
  bc:	00070239 	andeq	r0, r7, r9, lsr r2
  c0:	00aa0101 	adceq	r0, sl, r1, lsl #2
  c4:	00020000 	andeq	r0, r2, r0
  c8:	00000071 	andeq	r0, r0, r1, ror r0
  cc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  d0:	0101000d 	tsteq	r1, sp
  d4:	00000101 	andeq	r0, r0, r1, lsl #2
  d8:	00000100 	andeq	r0, r0, r0, lsl #2
  dc:	2f3a4301 	svccs	0x003a4301
  e0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  e4:	61482f73 	hvcvs	33523	; 0x82f3
  e8:	7375706d 	cmnvc	r5, #109	; 0x6d
  ec:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  f0:	706f746b 	rsbvc	r7, pc, fp, ror #8
  f4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  f8:	2f373130 	svccs	0x00373130
  fc:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 100:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 104:	6165722f 	cmnvs	r5, pc, lsr #4
 108:	6f705f6c 	svcvs	0x00705f6c
 10c:	0000676e 	andeq	r6, r0, lr, ror #14
 110:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 114:	0100632e 	tsteq	r0, lr, lsr #6
 118:	626f0000 	rsbvs	r0, pc, #0
 11c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 120:	0100682e 	tsteq	r0, lr, lsr #16
 124:	61620000 	cmnvs	r2, r0
 128:	682e6c6c 	stmdavs	lr!, {r2, r3, r5, r6, sl, fp, sp, lr}
 12c:	00000100 	andeq	r0, r0, r0, lsl #2
 130:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 134:	682e656c 	stmdavs	lr!, {r2, r3, r5, r6, r8, sl, sp, lr}
 138:	00000100 	andeq	r0, r0, r0, lsl #2
 13c:	02050000 	andeq	r0, r5, #0
 140:	20000098 	mulcs	r0, r8, r0
 144:	4b011b03 	blmi	46d58 <startup-0x1ffb92a8>
 148:	0077754c 	rsbseq	r7, r7, ip, asr #10
 14c:	06010402 	streq	r0, [r1], -r2, lsl #8
 150:	5c4b064a 	mcrrpl	6, 4, r0, fp, cr10
 154:	009f312f 	addseq	r3, pc, pc, lsr #2
 158:	06010402 	streq	r0, [r1], -r2, lsl #8
 15c:	5f9f0666 	svcpl	0x009f0666
 160:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 164:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 168:	02595e9f 	subseq	r5, r9, #2544	; 0x9f0
 16c:	01010008 	tsteq	r1, r8
 170:	00000168 	andeq	r0, r0, r8, ror #2
 174:	005f0002 	subseq	r0, pc, r2
 178:	01020000 	mrseq	r0, (UNDEF: 2)
 17c:	000d0efb 	strdeq	r0, [sp], -fp
 180:	01010101 	tsteq	r1, r1, lsl #2
 184:	01000000 	mrseq	r0, (UNDEF: 0)
 188:	43010000 	movwmi	r0, #4096	; 0x1000
 18c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 190:	2f737265 	svccs	0x00737265
 194:	706d6148 	rsbvc	r6, sp, r8, asr #2
 198:	442f7375 	strtmi	r7, [pc], #-885	; 1a0 <startup-0x1ffffe60>
 19c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 1a0:	442f706f 	strtmi	r7, [pc], #-111	; 1a8 <startup-0x1ffffe58>
 1a4:	31305441 	teqcc	r0, r1, asr #8
 1a8:	6f432f37 	svcvs	0x00432f37
 1ac:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 1b0:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 1b4:	5f6c6165 	svcpl	0x006c6165
 1b8:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 1bc:	72670000 	rsbvc	r0, r7, #0
 1c0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1c4:	00632e63 	rsbeq	r2, r3, r3, ror #28
 1c8:	67000001 	strvs	r0, [r0, -r1]
 1cc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1d0:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
 1d4:	00000100 	andeq	r0, r0, r0, lsl #2
 1d8:	02050000 	andeq	r0, r5, #0
 1dc:	20000174 	andcs	r0, r0, r4, ror r1
 1e0:	76e56718 	usatvc	r6, #5, r8, lsl #14
 1e4:	6768d767 	strbvs	sp, [r8, -r7, ror #14]!
 1e8:	0b033d4b 	bleq	cf71c <startup-0x1ff308e4>
 1ec:	2076033c 	rsbscs	r0, r6, ip, lsr r3
 1f0:	03443d4b 	movteq	r3, #19787	; 0x4d4b
 1f4:	3d4b2079 	stclcc	0, cr2, [fp, #-484]	; 0xfffffe1c
 1f8:	3d4b1c41 	stclcc	12, cr1, [fp, #-260]	; 0xfffffefc
 1fc:	3d2f4c3e 	stccc	12, cr4, [pc, #-248]!	; 10c <startup-0x1ffffef4>
 200:	313d3d3d 	teqcc	sp, sp, lsr sp
 204:	303d2f3d 	eorscc	r2, sp, sp, lsr pc
 208:	3d232661 	stccc	6, cr2, [r3, #-388]!	; 0xfffffe7c
 20c:	3d67ae3e 	stclcc	14, cr10, [r7, #-248]!	; 0xffffff08
 210:	2f593d3d 	svccs	0x00593d3d
 214:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 218:	313d4b3e 	teqcc	sp, lr, lsr fp
 21c:	3e313d4b 	cdpcc	13, 3, cr3, cr1, cr11, {2}
 220:	594b91ca 	stmdbpl	fp, {r1, r3, r6, r7, r8, ip, pc}^
 224:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
 228:	59313d59 	ldmdbpl	r1!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 22c:	3d3d313d 	ldfccs	f3, [sp, #-244]!	; 0xffffff0c
 230:	3d91763d 	ldccc	6, cr7, [r1, #244]	; 0xf4
 234:	4c833d59 	stcmi	13, cr3, [r3], {89}	; 0x59
 238:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 23c:	674c833d 	smlaldxvs	r8, ip, sp, r3
 240:	2f4c6759 	svccs	0x004c6759
 244:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 248:	4b4b4b3d 	blmi	12d2f44 <startup-0x1ed2d0bc>
 24c:	3e3d4b4b 	vsubcc.f64	d4, d13, d11
 250:	4bad3d3d 	blmi	feb4f74c <rightPaddle+0xdeb4ec20>
 254:	03040200 	movweq	r0, #16896	; 0x4200
 258:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 25c:	02004903 	andeq	r4, r0, #49152	; 0xc000
 260:	3c060104 	stfccs	f0, [r6], {4}
 264:	02040200 	andeq	r0, r4, #0, 4
 268:	02003906 	andeq	r3, r0, #98304	; 0x18000
 26c:	3c060104 	stfccs	f0, [r6], {4}
 270:	e54d4406 	strb	r4, [sp, #-1030]	; 0xfffffbfa
 274:	01040200 	mrseq	r0, R12_usr
 278:	5a066606 	bpl	199a98 <startup-0x1fe66568>
 27c:	040200af 	streq	r0, [r2], #-175	; 0xffffff51
 280:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
 284:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 288:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 28c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 290:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 294:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 298:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 29c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2a0:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 2a4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2a8:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 2ac:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2b0:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 2b4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2b8:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 2bc:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 2c0:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 2c4:	694b4b77 	stmdbvs	fp, {r0, r1, r2, r4, r5, r6, r8, r9, fp, lr}^
 2c8:	d7bb5b4b 	ldrle	r5, [fp, fp, asr #22]!
 2cc:	ae4bbc9f 	mcrge	12, 2, fp, cr11, cr15, {4}
 2d0:	ac5c03a0 	mrrcge	3, 10, r0, ip, cr0
 2d4:	02202503 	eoreq	r2, r0, #12582912	; 0xc00000
 2d8:	01010005 	tsteq	r1, r5
 2dc:	0000009d 	muleq	r0, sp, r0
 2e0:	005d0002 	subseq	r0, sp, r2
 2e4:	01020000 	mrseq	r0, (UNDEF: 2)
 2e8:	000d0efb 	strdeq	r0, [sp], -fp
 2ec:	01010101 	tsteq	r1, r1, lsl #2
 2f0:	01000000 	mrseq	r0, (UNDEF: 0)
 2f4:	43010000 	movwmi	r0, #4096	; 0x1000
 2f8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 2fc:	2f737265 	svccs	0x00737265
 300:	706d6148 	rsbvc	r6, sp, r8, asr #2
 304:	442f7375 	strtmi	r7, [pc], #-885	; 30c <startup-0x1ffffcf4>
 308:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 30c:	442f706f 	strtmi	r7, [pc], #-111	; 314 <startup-0x1ffffcec>
 310:	31305441 	teqcc	r0, r1, asr #8
 314:	6f432f37 	svcvs	0x00432f37
 318:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 31c:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 320:	5f6c6165 	svcpl	0x006c6165
 324:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 328:	626f0000 	rsbvs	r0, pc, #0
 32c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 330:	0100632e 	tsteq	r0, lr, lsr #6
 334:	626f0000 	rsbvs	r0, pc, #0
 338:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 33c:	0100682e 	tsteq	r0, lr, lsr #16
 340:	00000000 	andeq	r0, r0, r0
 344:	07640205 	strbeq	r0, [r4, -r5, lsl #4]!
 348:	4b152000 	blmi	548350 <startup-0x1fab7cb0>
 34c:	03040200 	movweq	r0, #16896	; 0x4200
 350:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 354:	00c70803 	sbceq	r0, r7, r3, lsl #16
 358:	06010402 	streq	r0, [r1], -r2, lsl #8
 35c:	4b3f063c 	blmi	fc1c54 <startup-0x1f03e3ac>
 360:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 364:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 368:	c7080304 	strgt	r0, [r8, -r4, lsl #6]
 36c:	01040200 	mrseq	r0, R12_usr
 370:	3f063c06 	svccc	0x00063c06
 374:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 378:	01000402 	tsteq	r0, r2, lsl #8
 37c:	00008001 	andeq	r8, r0, r1
 380:	50000200 	andpl	r0, r0, r0, lsl #4
 384:	02000000 	andeq	r0, r0, #0
 388:	0d0efb01 	vstreq	d15, [lr, #-4]
 38c:	01010100 	mrseq	r0, (UNDEF: 17)
 390:	00000001 	andeq	r0, r0, r1
 394:	01000001 	tsteq	r0, r1
 398:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff95d <rightPaddle+0xdfffee31>
 39c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3a0:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 3a4:	2f737570 	svccs	0x00737570
 3a8:	6b736544 	blvs	1cd98c0 <startup-0x1e326740>
 3ac:	2f706f74 	svccs	0x00706f74
 3b0:	30544144 	subscc	r4, r4, r4, asr #2
 3b4:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 3b8:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 3bc:	2f657469 	svccs	0x00657469
 3c0:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 3c4:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 3c8:	74000067 	strvc	r0, [r0], #-103	; 0xffffff99
 3cc:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 3d0:	0100632e 	tsteq	r0, lr, lsr #6
 3d4:	00000000 	andeq	r0, r0, r0
 3d8:	08400205 	stmdaeq	r0, {r0, r2, r9}^
 3dc:	2f152000 	svccs	0x00152000
 3e0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 3e4:	01040200 	mrseq	r0, R12_usr
 3e8:	69062006 	stmdbvs	r6, {r1, r2, sp}
 3ec:	214ba03d 	cmpcs	fp, sp, lsr r0
 3f0:	2a2f2f2f 	bcs	bcc0b4 <startup-0x1f433f4c>
 3f4:	4e4c4c5e 	mcrmi	12, 2, r4, cr12, cr14, {2}
 3f8:	2f2f2f4c 	svccs	0x002f2f4c
 3fc:	01000302 	tsteq	r0, r2, lsl #6
 400:	00008601 	andeq	r8, r0, r1, lsl #12
 404:	69000200 	stmdbvs	r0, {r9}
 408:	02000000 	andeq	r0, r0, #0
 40c:	0d0efb01 	vstreq	d15, [lr, #-4]
 410:	01010100 	mrseq	r0, (UNDEF: 17)
 414:	00000001 	andeq	r0, r0, r1
 418:	01000001 	tsteq	r0, r1
 41c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff9e1 <rightPaddle+0xdfffeeb5>
 420:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 424:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 428:	2f737570 	svccs	0x00737570
 42c:	6b736544 	blvs	1cd9944 <startup-0x1e3266bc>
 430:	2f706f74 	svccs	0x00706f74
 434:	30544144 	subscc	r4, r4, r4, asr #2
 438:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 43c:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 440:	2f657469 	svccs	0x00657469
 444:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 448:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 44c:	70000067 	andvc	r0, r0, r7, rrx
 450:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 454:	00632e65 	rsbeq	r2, r3, r5, ror #28
 458:	6f000001 	svcvs	0x00000001
 45c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 460:	00682e74 	rsbeq	r2, r8, r4, ror lr
 464:	70000001 	andvc	r0, r0, r1
 468:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 46c:	00682e65 	rsbeq	r2, r8, r5, ror #28
 470:	00000001 	andeq	r0, r0, r1
 474:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
 478:	03200008 			; <UNDEFINED> instruction: 0x03200008
 47c:	4d4b0136 	stfmie	f0, [fp, #-216]	; 0xffffff28
 480:	834b4b77 	movthi	r4, #47991	; 0xbb77
 484:	04025977 	streq	r5, [r2], #-2423	; 0xfffff689
 488:	Address 0x00000488 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	59726964 	ldmdbpl	r2!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	736f7000 	cmnvc	pc, #0
   8:	69730059 	ldmdbvs	r3!, {r0, r3, r4, r6}^
   c:	0058657a 	subseq	r6, r8, sl, ror r5
  10:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
  14:	64615074 	strbtvs	r5, [r1], #-116	; 0xffffff8c
  18:	00656c64 	rsbeq	r6, r5, r4, ror #24
  1c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  20:	72640059 	rsbvc	r0, r4, #89	; 0x59
  24:	43007761 	movwmi	r7, #1889	; 0x761
  28:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  2c:	2f737265 	svccs	0x00737265
  30:	706d6148 	rsbvc	r6, sp, r8, asr #2
  34:	442f7375 	strtmi	r7, [pc], #-885	; 3c <startup-0x1fffffc4>
  38:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  3c:	442f706f 	strtmi	r7, [pc], #-111	; 44 <startup-0x1fffffbc>
  40:	31305441 	teqcc	r0, r1, asr #8
  44:	6f432f37 	svcvs	0x00432f37
  48:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  4c:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  50:	5f6c6165 	svcpl	0x006c6165
  54:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  58:	6174732f 	cmnvs	r4, pc, lsr #6
  5c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  60:	7300632e 	movwvc	r6, #814	; 0x32e
  64:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
  68:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  6c:	6f507400 	svcvs	0x00507400
  70:	00746e69 	rsbseq	r6, r4, r9, ror #28
  74:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  78:	736e7500 	cmnvc	lr, #0, 10
  7c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  80:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  84:	47007261 	strmi	r7, [r0, -r1, ror #4]
  88:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  8c:	36203939 			; <UNDEFINED> instruction: 0x36203939
  90:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  94:	31303220 	teqcc	r0, r0, lsr #4
  98:	31323037 	teqcc	r2, r7, lsr r0
  9c:	72282035 	eorvc	r2, r8, #53	; 0x35
  a0:	61656c65 	cmnvs	r5, r5, ror #24
  a4:	20296573 	eorcs	r6, r9, r3, ror r5
  a8:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  ac:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  b0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  b4:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  b8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  bc:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  c0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  c4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  c8:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  cc:	205d3231 	subscs	r3, sp, r1, lsr r2
  d0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  d4:	20626d75 	rsbcs	r6, r2, r5, ror sp
  d8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  dc:	613d6863 	teqvs	sp, r3, ror #16
  e0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  e4:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  e8:	6f6c666d 	svcvs	0x006c666d
  ec:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  f0:	733d6962 	teqvc	sp, #1605632	; 0x188000
  f4:	2074666f 	rsbscs	r6, r4, pc, ror #12
  f8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  fc:	20626d75 	rsbcs	r6, r2, r5, ror sp
 100:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 104:	613d6863 	teqvs	sp, r3, ror #16
 108:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 10c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 110:	4f2d2067 	svcmi	0x002d2067
 114:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 118:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 11c:	50003939 	andpl	r3, r0, r9, lsr r9
 120:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; c <startup-0x1ffffff4>
 124:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 128:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 12c:	70615f74 	rsbvc	r5, r1, r4, ror pc
 130:	47740070 			; <UNDEFINED> instruction: 0x47740070
 134:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 138:	00797274 	rsbseq	r7, r9, r4, ror r2
 13c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 140:	00707574 	rsbseq	r7, r0, r4, ror r5
 144:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
 148:	64646150 	strbtvs	r6, [r4], #-336	; 0xfffffeb0
 14c:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
 150:	006e6961 	rsbeq	r6, lr, r1, ror #18
 154:	4a424f50 	bmi	1093e9c <startup-0x1ef6c164>
 158:	00544345 	subseq	r4, r4, r5, asr #6
 15c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 160:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 164:	736f7000 	cmnvc	pc, #0
 168:	69640058 	stmdbvs	r4!, {r3, r4, r6}^
 16c:	6e005872 	mcrvs	8, 0, r5, cr0, cr2, {3}
 170:	6f506d75 	svcvs	0x00506d75
 174:	73746e69 	cmnvc	r4, #1680	; 0x690
 178:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 17c:	7400544e 	strvc	r5, [r0], #-1102	; 0xfffffbb2
 180:	006a624f 	rsbeq	r6, sl, pc, asr #4
 184:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 188:	6f65675f 	svcvs	0x0065675f
 18c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 190:	68740079 	ldmdavs	r4!, {r0, r3, r4, r5, r6}^
 194:	6d007369 	stcvs	3, cr7, [r0, #-420]	; 0xfffffe5c
 198:	5f65766f 	svcpl	0x0065766f
 19c:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 1a0:	2f3a4300 	svccs	0x003a4300
 1a4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1a8:	61482f73 	hvcvs	33523	; 0x82f3
 1ac:	7375706d 	cmnvc	r5, #109	; 0x6d
 1b0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1b4:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1b8:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 1bc:	2f373130 	svccs	0x00373130
 1c0:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 1c4:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 1c8:	6165722f 	cmnvs	r5, pc, lsr #4
 1cc:	6f705f6c 	svcvs	0x00705f6c
 1d0:	622f676e 	eorvs	r6, pc, #28835840	; 0x1b80000
 1d4:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
 1d8:	72670063 	rsbvc	r0, r7, #99	; 0x63
 1dc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1e0:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 1e4:	5f657469 	svcpl	0x00657469
 1e8:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1ec:	00646e61 	rsbeq	r6, r4, r1, ror #28
 1f0:	70617267 	rsbvc	r7, r1, r7, ror #4
 1f4:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 1f8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 1fc:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 200:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 204:	00726165 	rsbseq	r6, r2, r5, ror #2
 208:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 20c:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
 210:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 214:	635f7363 	cmpvs	pc, #-1946157055	; 0x8c000001
 218:	5f6c7274 	svcpl	0x006c7274
 21c:	5f746962 	svcpl	0x00746962
 220:	00746573 	rsbseq	r6, r4, r3, ror r5
 224:	70617267 	rsbvc	r7, r1, r7, ror #4
 228:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 22c:	6165725f 	cmnvs	r5, pc, asr r2
 230:	61645f64 	cmnvs	r4, r4, ror #30
 234:	67006174 	smlsdxvs	r0, r4, r1, r6
 238:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 23c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 240:	5f746961 	svcpl	0x00746961
 244:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 248:	3a430079 	bcc	10c0434 <startup-0x1ef3fbcc>
 24c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 250:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 254:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 258:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 25c:	6f746b73 	svcvs	0x00746b73
 260:	41442f70 	hvcmi	17136	; 0x42f0
 264:	37313054 			; <UNDEFINED> instruction: 0x37313054
 268:	646f432f 	strbtvs	r4, [pc], #-815	; 270 <startup-0x1ffffd90>
 26c:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 270:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 274:	705f6c61 	subsvc	r6, pc, r1, ror #24
 278:	2f676e6f 	svccs	0x00676e6f
 27c:	70617267 	rsbvc	r7, r1, r7, ror #4
 280:	2e636968 	vnmulcs.f16	s13, s6, s17	; <UNPREDICTABLE>
 284:	616d0063 	cmnvs	sp, r3, rrx
 288:	75006b73 	strvc	r6, [r0, #-2931]	; 0xfffff48d
 28c:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 290:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
 294:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 298:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 29c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 2a0:	6c657300 	stclvs	3, cr7, [r5], #-0
 2a4:	5f746365 	svcpl	0x00746365
 2a8:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 2ac:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 2b0:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
 2b4:	00706d65 	rsbseq	r6, r0, r5, ror #26
 2b8:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 2bc:	72670078 	rsbvc	r0, r7, #120	; 0x78
 2c0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2c4:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2c8:	67006461 	strvs	r6, [r0, -r1, ror #8]
 2cc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2d0:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 2d4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 2d8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 2dc:	61700061 	cmnvs	r0, r1, rrx
 2e0:	76006567 	strvc	r6, [r0], -r7, ror #10
 2e4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 2e8:	61726700 	cmnvs	r2, r0, lsl #14
 2ec:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2f0:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 2f4:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 2f8:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 2fc:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 300:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 304:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 308:	61697469 	cmnvs	r9, r9, ror #8
 30c:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 310:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 314:	6a626f5f 	bvs	189c098 <startup-0x1e763f68>
 318:	5f746365 	svcpl	0x00746365
 31c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 320:	3a430064 	bcc	10c04b8 <startup-0x1ef3fb48>
 324:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 328:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 32c:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 330:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 334:	6f746b73 	svcvs	0x00746b73
 338:	41442f70 	hvcmi	17136	; 0x42f0
 33c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 340:	646f432f 	strbtvs	r4, [pc], #-815	; 348 <startup-0x1ffffcb8>
 344:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 348:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 34c:	705f6c61 	subsvc	r6, pc, r1, ror #24
 350:	2f676e6f 	svccs	0x00676e6f
 354:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 358:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
 35c:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 360:	6f5f7261 	svcvs	0x005f7261
 364:	63656a62 	cmnvs	r5, #401408	; 0x62000
 368:	72640074 	rsbvc	r0, r4, #116	; 0x74
 36c:	6f5f7761 	svcvs	0x005f7761
 370:	63656a62 	cmnvs	r5, #401408	; 0x62000
 374:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 378:	5f79616c 	svcpl	0x0079616c
 37c:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 380:	6e750069 	cdpvs	0, 7, cr0, cr5, cr9, {3}
 384:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 388:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 38c:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
 390:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 394:	3030355f 	eorscc	r3, r0, pc, asr r5
 398:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 39c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 3a0:	3035325f 	eorscc	r3, r5, pc, asr r2
 3a4:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 3a8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 3ac:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 3b0:	43006f72 	movwmi	r6, #3954	; 0xf72
 3b4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 3b8:	2f737265 	svccs	0x00737265
 3bc:	706d6148 	rsbvc	r6, sp, r8, asr #2
 3c0:	442f7375 	strtmi	r7, [pc], #-885	; 3c8 <startup-0x1ffffc38>
 3c4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 3c8:	442f706f 	strtmi	r7, [pc], #-111	; 3d0 <startup-0x1ffffc30>
 3cc:	31305441 	teqcc	r0, r1, asr #8
 3d0:	6f432f37 	svcvs	0x00432f37
 3d4:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 3d8:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 3dc:	5f6c6165 	svcpl	0x006c6165
 3e0:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 3e4:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
 3e8:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
 3ec:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 3f0:	61705f65 	cmnvs	r0, r5, ror #30
 3f4:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 3f8:	64617000 	strbtvs	r7, [r1], #-0
 3fc:	5f656c64 	svcpl	0x00656c64
 400:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 26c <startup-0x1ffffd94>
 404:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 408:	2f3a4300 	svccs	0x003a4300
 40c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 410:	61482f73 	hvcvs	33523	; 0x82f3
 414:	7375706d 	cmnvc	r5, #109	; 0x6d
 418:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 41c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 420:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 424:	2f373130 	svccs	0x00373130
 428:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 42c:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 430:	6165722f 	cmnvs	r5, pc, lsr #4
 434:	6f705f6c 	svcvs	0x00705f6c
 438:	702f676e 	eorvc	r6, pc, lr, ror #14
 43c:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 440:	00632e65 	rsbeq	r2, r3, r5, ror #28

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	00000070 	andeq	r0, r0, r0, ror r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	180e4101 	stmdane	lr, {r0, r8, lr}
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	20000098 	mulcs	r0, r8, r0
  78:	000000dc 	ldrdeq	r0, [r0], -ip
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	180e4101 	stmdane	lr, {r0, r8, lr}
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	0000000c 	andeq	r0, r0, ip
  90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  94:	7c020001 	stcvc	0, cr0, [r2], {1}
  98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	0000008c 	andeq	r0, r0, ip, lsl #1
  a4:	20000174 	andcs	r0, r0, r4, ror r1
  a8:	00000038 	andeq	r0, r0, r8, lsr r0
  ac:	40080e41 	andmi	r0, r8, r1, asr #28
  b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b4:	100e4101 	andne	r4, lr, r1, lsl #2
  b8:	00070d41 	andeq	r0, r7, r1, asr #26
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	0000008c 	andeq	r0, r0, ip, lsl #1
  c4:	200001ac 	andcs	r0, r0, ip, lsr #3
  c8:	00000034 	andeq	r0, r0, r4, lsr r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	100e4101 	andne	r4, lr, r1, lsl #2
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	0000008c 	andeq	r0, r0, ip, lsl #1
  e4:	200001e0 	andcs	r0, r0, r0, ror #3
  e8:	0000006a 	andeq	r0, r0, sl, rrx
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	0000008c 	andeq	r0, r0, ip, lsl #1
 104:	2000024a 	andcs	r0, r0, sl, asr #4
 108:	00000066 	andeq	r0, r0, r6, rrx
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	0000008c 	andeq	r0, r0, ip, lsl #1
 120:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
 124:	00000090 	muleq	r0, r0, r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	0000008c 	andeq	r0, r0, ip, lsl #1
 140:	20000340 	andcs	r0, r0, r0, asr #6
 144:	00000080 	andeq	r0, r0, r0, lsl #1
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	0000008c 	andeq	r0, r0, ip, lsl #1
 160:	200003c0 	andcs	r0, r0, r0, asr #7
 164:	00000040 	andeq	r0, r0, r0, asr #32
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	0000008c 	andeq	r0, r0, ip, lsl #1
 180:	20000400 	andcs	r0, r0, r0, lsl #8
 184:	00000046 	andeq	r0, r0, r6, asr #32
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	0000008c 	andeq	r0, r0, ip, lsl #1
 1a0:	20000446 	andcs	r0, r0, r6, asr #8
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	0000008c 	andeq	r0, r0, ip, lsl #1
 1c0:	20000470 	andcs	r0, r0, r0, ror r4
 1c4:	00000056 	andeq	r0, r0, r6, asr r0
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	0000008c 	andeq	r0, r0, ip, lsl #1
 1dc:	200004c6 	andcs	r0, r0, r6, asr #9
 1e0:	00000058 	andeq	r0, r0, r8, asr r0
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	100e4101 	andne	r4, lr, r1, lsl #2
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	0000008c 	andeq	r0, r0, ip, lsl #1
 1fc:	2000051e 	andcs	r0, r0, lr, lsl r5
 200:	00000246 	andeq	r0, r0, r6, asr #4
 204:	400c0e41 	andmi	r0, ip, r1, asr #28
 208:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 20c:	018e4002 	orreq	r4, lr, r2
 210:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 214:	0000070d 	andeq	r0, r0, sp, lsl #14
 218:	0000000c 	andeq	r0, r0, ip
 21c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 220:	7c020001 	stcvc	0, cr0, [r2], {1}
 224:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	00000218 	andeq	r0, r0, r8, lsl r2
 230:	20000764 	andcs	r0, r0, r4, ror #14
 234:	0000005e 	andeq	r0, r0, lr, asr r0
 238:	40080e41 	andmi	r0, r8, r1, asr #28
 23c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 240:	180e4101 	stmdane	lr, {r0, r8, lr}
 244:	00070d41 	andeq	r0, r7, r1, asr #26
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	00000218 	andeq	r0, r0, r8, lsl r2
 250:	200007c2 	andcs	r0, r0, r2, asr #15
 254:	0000005e 	andeq	r0, r0, lr, asr r0
 258:	40080e41 	andmi	r0, r8, r1, asr #28
 25c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 260:	180e4101 	stmdane	lr, {r0, r8, lr}
 264:	00070d41 	andeq	r0, r7, r1, asr #26
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	00000218 	andeq	r0, r0, r8, lsl r2
 270:	20000820 	andcs	r0, r0, r0, lsr #16
 274:	00000020 	andeq	r0, r0, r0, lsr #32
 278:	40080e41 	andmi	r0, r8, r1, asr #28
 27c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 280:	180e4101 	stmdane	lr, {r0, r8, lr}
 284:	00070d41 	andeq	r0, r7, r1, asr #26
 288:	0000000c 	andeq	r0, r0, ip
 28c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 290:	7c020001 	stcvc	0, cr0, [r2], {1}
 294:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 298:	00000018 	andeq	r0, r0, r8, lsl r0
 29c:	00000288 	andeq	r0, r0, r8, lsl #5
 2a0:	20000840 	andcs	r0, r0, r0, asr #16
 2a4:	00000044 	andeq	r0, r0, r4, asr #32
 2a8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000288 	andeq	r0, r0, r8, lsl #5
 2bc:	20000884 	andcs	r0, r0, r4, lsl #17
 2c0:	0000002c 	andeq	r0, r0, ip, lsr #32
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	100e4101 	andne	r4, lr, r1, lsl #2
 2d0:	00070d41 	andeq	r0, r7, r1, asr #26
 2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d8:	00000288 	andeq	r0, r0, r8, lsl #5
 2dc:	200008b0 			; <UNDEFINED> instruction: 0x200008b0
 2e0:	00000018 	andeq	r0, r0, r8, lsl r0
 2e4:	40080e41 	andmi	r0, r8, r1, asr #28
 2e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ec:	100e4101 	andne	r4, lr, r1, lsl #2
 2f0:	00070d41 	andeq	r0, r7, r1, asr #26
 2f4:	00000018 	andeq	r0, r0, r8, lsl r0
 2f8:	00000288 	andeq	r0, r0, r8, lsl #5
 2fc:	200008c8 	andcs	r0, r0, r8, asr #17
 300:	00000012 	andeq	r0, r0, r2, lsl r0
 304:	40080e41 	andmi	r0, r8, r1, asr #28
 308:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 30c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 310:	0000000c 	andeq	r0, r0, ip
 314:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 318:	7c020001 	stcvc	0, cr0, [r2], {1}
 31c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 320:	0000001c 	andeq	r0, r0, ip, lsl r0
 324:	00000310 	andeq	r0, r0, r0, lsl r3
 328:	200008dc 	ldrdcs	r0, [r0], -ip
 32c:	0000005e 	andeq	r0, r0, lr, asr r0
 330:	40080e41 	andmi	r0, r8, r1, asr #28
 334:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 338:	100e4101 	andne	r4, lr, r1, lsl #2
 33c:	00070d41 	andeq	r0, r7, r1, asr #26
