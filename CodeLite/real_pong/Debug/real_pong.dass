
./Debug/real_pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f810 	bl	20000028 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*GPIO_MODER = 0x55555555;
20000014:	4b02      	ldr	r3, [pc, #8]	; (20000020 <init_app+0x10>)
20000016:	4a03      	ldr	r2, [pc, #12]	; (20000024 <init_app+0x14>)
20000018:	601a      	str	r2, [r3, #0]
}
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	46bd      	mov	sp, r7
2000001e:	bd80      	pop	{r7, pc}
20000020:	40021000 	andmi	r1, r2, r0
20000024:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000028 <main>:

extern OBJECT ball;

void main(void) {
20000028:	b580      	push	{r7, lr}
2000002a:	b082      	sub	sp, #8
2000002c:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
2000002e:	4b0a      	ldr	r3, [pc, #40]	; (20000058 <main+0x30>)
20000030:	607b      	str	r3, [r7, #4]
	init_app();
20000032:	f7ff ffed 	bl	20000010 <init_app>
	graphic_initalize();
20000036:	f000 f9cd 	bl	200003d4 <graphic_initalize>
  #ifndef SIMULATOR
	graphic_clear_screen();
  #endif
  
	p->set_speed(p, 16, 16);
2000003a:	687b      	ldr	r3, [r7, #4]
2000003c:	6a1b      	ldr	r3, [r3, #32]
2000003e:	6878      	ldr	r0, [r7, #4]
20000040:	2210      	movs	r2, #16
20000042:	2110      	movs	r1, #16
20000044:	4798      	blx	r3
	while(1) {
		p->move(p);
20000046:	687b      	ldr	r3, [r7, #4]
20000048:	69db      	ldr	r3, [r3, #28]
2000004a:	687a      	ldr	r2, [r7, #4]
2000004c:	0010      	movs	r0, r2
2000004e:	4798      	blx	r3
		delay_milli(1);
20000050:	2001      	movs	r0, #1
20000052:	f000 fb87 	bl	20000764 <delay_milli>
		p->move(p);
20000056:	e7f6      	b.n	20000046 <main+0x1e>
20000058:	20000824 	andcs	r0, r0, r4, lsr #16

2000005c <move_ball>:
};

extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void move_ball(POBJECT this) {
2000005c:	b580      	push	{r7, lr}
2000005e:	b084      	sub	sp, #16
20000060:	af00      	add	r7, sp, #0
20000062:	6078      	str	r0, [r7, #4]
	clear_object(this);
20000064:	687b      	ldr	r3, [r7, #4]
20000066:	0018      	movs	r0, r3
20000068:	f000 fb05 	bl	20000676 <clear_object>
	
	this->posX += this->dirX;
2000006c:	687b      	ldr	r3, [r7, #4]
2000006e:	68da      	ldr	r2, [r3, #12]
20000070:	687b      	ldr	r3, [r7, #4]
20000072:	685b      	ldr	r3, [r3, #4]
20000074:	18d2      	adds	r2, r2, r3
20000076:	687b      	ldr	r3, [r7, #4]
20000078:	60da      	str	r2, [r3, #12]
	this->posY += this->dirY;
2000007a:	687b      	ldr	r3, [r7, #4]
2000007c:	691a      	ldr	r2, [r3, #16]
2000007e:	687b      	ldr	r3, [r7, #4]
20000080:	689b      	ldr	r3, [r3, #8]
20000082:	18d2      	adds	r2, r2, r3
20000084:	687b      	ldr	r3, [r7, #4]
20000086:	611a      	str	r2, [r3, #16]
	
	// Wall collisions
	if((this->posY < 0) ||  this->posY > 63 ) {
20000088:	687b      	ldr	r3, [r7, #4]
2000008a:	691b      	ldr	r3, [r3, #16]
2000008c:	2b00      	cmp	r3, #0
2000008e:	db03      	blt.n	20000098 <move_ball+0x3c>
20000090:	687b      	ldr	r3, [r7, #4]
20000092:	691b      	ldr	r3, [r3, #16]
20000094:	2b3f      	cmp	r3, #63	; 0x3f
20000096:	dd04      	ble.n	200000a2 <move_ball+0x46>
		this->dirY = -this->dirY;
20000098:	687b      	ldr	r3, [r7, #4]
2000009a:	689b      	ldr	r3, [r3, #8]
2000009c:	425a      	negs	r2, r3
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	609a      	str	r2, [r3, #8]
	// End game collisions
	if((this->posX < 0) ||  this->posX > 163 ) {
		// Handle game over.
	}
	
	POBJECT lp = &leftPaddle;
200000a2:	4b08      	ldr	r3, [pc, #32]	; (200000c4 <move_ball+0x68>)
200000a4:	60fb      	str	r3, [r7, #12]
	POBJECT rp = &rightPaddle;
200000a6:	4b08      	ldr	r3, [pc, #32]	; (200000c8 <move_ball+0x6c>)
200000a8:	60bb      	str	r3, [r7, #8]
	
	//For left paddle
	if(this->posX <= lp->posX) {
200000aa:	687b      	ldr	r3, [r7, #4]
200000ac:	68da      	ldr	r2, [r3, #12]
200000ae:	68fb      	ldr	r3, [r7, #12]
200000b0:	68db      	ldr	r3, [r3, #12]
		}
	}
	
	// TODO Paddle collisions
	
	this->draw(this);
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	695b      	ldr	r3, [r3, #20]
200000b6:	687a      	ldr	r2, [r7, #4]
200000b8:	0010      	movs	r0, r2
200000ba:	4798      	blx	r3
200000bc:	46c0      	nop			; (mov r8, r8)
200000be:	46bd      	mov	sp, r7
200000c0:	b004      	add	sp, #16
200000c2:	bd80      	pop	{r7, pc}
200000c4:	2000087c 	andcs	r0, r0, ip, ror r8
200000c8:	200008a0 	andcs	r0, r0, r0, lsr #17

200000cc <graphic_ctrl_bit_set>:
#include "graphic.h"

void graphic_ctrl_bit_set(uint8_t x) {
200000cc:	b580      	push	{r7, lr}
200000ce:	b082      	sub	sp, #8
200000d0:	af00      	add	r7, sp, #0
200000d2:	0002      	movs	r2, r0
200000d4:	1dfb      	adds	r3, r7, #7
200000d6:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW |= (x & ~B_SELECT);
200000d8:	4909      	ldr	r1, [pc, #36]	; (20000100 <graphic_ctrl_bit_set+0x34>)
200000da:	4b09      	ldr	r3, [pc, #36]	; (20000100 <graphic_ctrl_bit_set+0x34>)
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	b2db      	uxtb	r3, r3
200000e0:	b25a      	sxtb	r2, r3
200000e2:	1dfb      	adds	r3, r7, #7
200000e4:	781b      	ldrb	r3, [r3, #0]
200000e6:	b25b      	sxtb	r3, r3
200000e8:	2004      	movs	r0, #4
200000ea:	4383      	bics	r3, r0
200000ec:	b25b      	sxtb	r3, r3
200000ee:	4313      	orrs	r3, r2
200000f0:	b25b      	sxtb	r3, r3
200000f2:	b2db      	uxtb	r3, r3
200000f4:	700b      	strb	r3, [r1, #0]
}
200000f6:	46c0      	nop			; (mov r8, r8)
200000f8:	46bd      	mov	sp, r7
200000fa:	b002      	add	sp, #8
200000fc:	bd80      	pop	{r7, pc}
200000fe:	46c0      	nop			; (mov r8, r8)
20000100:	40021014 	andmi	r1, r2, r4, lsl r0

20000104 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x) {
20000104:	b580      	push	{r7, lr}
20000106:	b082      	sub	sp, #8
20000108:	af00      	add	r7, sp, #0
2000010a:	0002      	movs	r2, r0
2000010c:	1dfb      	adds	r3, r7, #7
2000010e:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW &= ~x;
20000110:	4908      	ldr	r1, [pc, #32]	; (20000134 <graphic_ctrl_bit_clear+0x30>)
20000112:	4b08      	ldr	r3, [pc, #32]	; (20000134 <graphic_ctrl_bit_clear+0x30>)
20000114:	781b      	ldrb	r3, [r3, #0]
20000116:	b2db      	uxtb	r3, r3
20000118:	b25b      	sxtb	r3, r3
2000011a:	1dfa      	adds	r2, r7, #7
2000011c:	7812      	ldrb	r2, [r2, #0]
2000011e:	b252      	sxtb	r2, r2
20000120:	43d2      	mvns	r2, r2
20000122:	b252      	sxtb	r2, r2
20000124:	4013      	ands	r3, r2
20000126:	b25b      	sxtb	r3, r3
20000128:	b2db      	uxtb	r3, r3
2000012a:	700b      	strb	r3, [r1, #0]
}
2000012c:	46c0      	nop			; (mov r8, r8)
2000012e:	46bd      	mov	sp, r7
20000130:	b002      	add	sp, #8
20000132:	bd80      	pop	{r7, pc}
20000134:	40021014 	andmi	r1, r2, r4, lsl r0

20000138 <select_cotroller>:

void select_cotroller(uint8_t controller) {
20000138:	b580      	push	{r7, lr}
2000013a:	b082      	sub	sp, #8
2000013c:	af00      	add	r7, sp, #0
2000013e:	0002      	movs	r2, r0
20000140:	1dfb      	adds	r3, r7, #7
20000142:	701a      	strb	r2, [r3, #0]
	if(controller == 0) {
20000144:	1dfb      	adds	r3, r7, #7
20000146:	781b      	ldrb	r3, [r3, #0]
20000148:	2b00      	cmp	r3, #0
2000014a:	d106      	bne.n	2000015a <select_cotroller+0x22>
		graphic_ctrl_bit_clear(B_CS1);
2000014c:	2008      	movs	r0, #8
2000014e:	f7ff ffd9 	bl	20000104 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_clear(B_CS2);
20000152:	2010      	movs	r0, #16
20000154:	f7ff ffd6 	bl	20000104 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_clear(B_CS2);
	} else if(controller == B_CS2) {
		graphic_ctrl_bit_clear(B_CS1);
		graphic_ctrl_bit_set(B_CS2);
	}
}
20000158:	e01f      	b.n	2000019a <select_cotroller+0x62>
	} else if(controller == (B_CS1 | B_CS2)) {
2000015a:	1dfb      	adds	r3, r7, #7
2000015c:	781b      	ldrb	r3, [r3, #0]
2000015e:	2b18      	cmp	r3, #24
20000160:	d106      	bne.n	20000170 <select_cotroller+0x38>
		graphic_ctrl_bit_set(B_CS1);
20000162:	2008      	movs	r0, #8
20000164:	f7ff ffb2 	bl	200000cc <graphic_ctrl_bit_set>
		graphic_ctrl_bit_set(B_CS2);
20000168:	2010      	movs	r0, #16
2000016a:	f7ff ffaf 	bl	200000cc <graphic_ctrl_bit_set>
}
2000016e:	e014      	b.n	2000019a <select_cotroller+0x62>
	} else if(controller == B_CS1) {
20000170:	1dfb      	adds	r3, r7, #7
20000172:	781b      	ldrb	r3, [r3, #0]
20000174:	2b08      	cmp	r3, #8
20000176:	d106      	bne.n	20000186 <select_cotroller+0x4e>
		graphic_ctrl_bit_set(B_CS1);
20000178:	2008      	movs	r0, #8
2000017a:	f7ff ffa7 	bl	200000cc <graphic_ctrl_bit_set>
		graphic_ctrl_bit_clear(B_CS2);
2000017e:	2010      	movs	r0, #16
20000180:	f7ff ffc0 	bl	20000104 <graphic_ctrl_bit_clear>
}
20000184:	e009      	b.n	2000019a <select_cotroller+0x62>
	} else if(controller == B_CS2) {
20000186:	1dfb      	adds	r3, r7, #7
20000188:	781b      	ldrb	r3, [r3, #0]
2000018a:	2b10      	cmp	r3, #16
2000018c:	d105      	bne.n	2000019a <select_cotroller+0x62>
		graphic_ctrl_bit_clear(B_CS1);
2000018e:	2008      	movs	r0, #8
20000190:	f7ff ffb8 	bl	20000104 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_set(B_CS2);
20000194:	2010      	movs	r0, #16
20000196:	f7ff ff99 	bl	200000cc <graphic_ctrl_bit_set>
}
2000019a:	46c0      	nop			; (mov r8, r8)
2000019c:	46bd      	mov	sp, r7
2000019e:	b002      	add	sp, #8
200001a0:	bd80      	pop	{r7, pc}

200001a2 <graphic_wait_ready>:

void graphic_wait_ready() {
200001a2:	b580      	push	{r7, lr}
200001a4:	b082      	sub	sp, #8
200001a6:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001a8:	2040      	movs	r0, #64	; 0x40
200001aa:	f7ff ffab 	bl	20000104 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
200001ae:	4b15      	ldr	r3, [pc, #84]	; (20000204 <graphic_wait_ready+0x62>)
200001b0:	4a15      	ldr	r2, [pc, #84]	; (20000208 <graphic_wait_ready+0x66>)
200001b2:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200001b4:	2001      	movs	r0, #1
200001b6:	f7ff ffa5 	bl	20000104 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200001ba:	2002      	movs	r0, #2
200001bc:	f7ff ff86 	bl	200000cc <graphic_ctrl_bit_set>
	delay_500ns();
200001c0:	f000 fadc 	bl	2000077c <delay_500ns>
	while(1) { // Wait for display not to be busy
		graphic_ctrl_bit_set(B_E);
200001c4:	2040      	movs	r0, #64	; 0x40
200001c6:	f7ff ff81 	bl	200000cc <graphic_ctrl_bit_set>
		delay_500ns();
200001ca:	f000 fad7 	bl	2000077c <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
200001ce:	2040      	movs	r0, #64	; 0x40
200001d0:	f7ff ff98 	bl	20000104 <graphic_ctrl_bit_clear>
		delay_500ns();		
200001d4:	f000 fad2 	bl	2000077c <delay_500ns>
		unsigned char i = *GPIO_IDR_HIGH;
200001d8:	4a0c      	ldr	r2, [pc, #48]	; (2000020c <graphic_wait_ready+0x6a>)
200001da:	1dfb      	adds	r3, r7, #7
200001dc:	7812      	ldrb	r2, [r2, #0]
200001de:	701a      	strb	r2, [r3, #0]
		if((*GPIO_IDR_HIGH & LCD_BUSY) == 0) {
200001e0:	4b0a      	ldr	r3, [pc, #40]	; (2000020c <graphic_wait_ready+0x6a>)
200001e2:	781b      	ldrb	r3, [r3, #0]
200001e4:	b2db      	uxtb	r3, r3
200001e6:	b25b      	sxtb	r3, r3
200001e8:	2b00      	cmp	r3, #0
200001ea:	da00      	bge.n	200001ee <graphic_wait_ready+0x4c>
	while(1) { // Wait for display not to be busy
200001ec:	e7ea      	b.n	200001c4 <graphic_wait_ready+0x22>
			break;
200001ee:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
200001f0:	2040      	movs	r0, #64	; 0x40
200001f2:	f7ff ff6b 	bl	200000cc <graphic_ctrl_bit_set>
	*GPIO_MODER = 0x55555555;
200001f6:	4b03      	ldr	r3, [pc, #12]	; (20000204 <graphic_wait_ready+0x62>)
200001f8:	4a05      	ldr	r2, [pc, #20]	; (20000210 <graphic_wait_ready+0x6e>)
200001fa:	601a      	str	r2, [r3, #0]
}
200001fc:	46c0      	nop			; (mov r8, r8)
200001fe:	46bd      	mov	sp, r7
20000200:	b002      	add	sp, #8
20000202:	bd80      	pop	{r7, pc}
20000204:	40021000 	andmi	r1, r2, r0
20000208:	00005555 	andeq	r5, r0, r5, asr r5
2000020c:	40021011 	andmi	r1, r2, r1, lsl r0
20000210:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000214 <graphic_read>:

unsigned char graphic_read(unsigned char controller) {
20000214:	b580      	push	{r7, lr}
20000216:	b084      	sub	sp, #16
20000218:	af00      	add	r7, sp, #0
2000021a:	0002      	movs	r2, r0
2000021c:	1dfb      	adds	r3, r7, #7
2000021e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000220:	2040      	movs	r0, #64	; 0x40
20000222:	f7ff ff6f 	bl	20000104 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
20000226:	4b1b      	ldr	r3, [pc, #108]	; (20000294 <graphic_read+0x80>)
20000228:	4a1b      	ldr	r2, [pc, #108]	; (20000298 <graphic_read+0x84>)
2000022a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
2000022c:	2003      	movs	r0, #3
2000022e:	f7ff ff4d 	bl	200000cc <graphic_ctrl_bit_set>
	select_cotroller(controller);
20000232:	1dfb      	adds	r3, r7, #7
20000234:	781b      	ldrb	r3, [r3, #0]
20000236:	0018      	movs	r0, r3
20000238:	f7ff ff7e 	bl	20000138 <select_cotroller>
	delay_500ns();
2000023c:	f000 fa9e 	bl	2000077c <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000240:	2040      	movs	r0, #64	; 0x40
20000242:	f7ff ff43 	bl	200000cc <graphic_ctrl_bit_set>
	delay_500ns();
20000246:	f000 fa99 	bl	2000077c <delay_500ns>
	unsigned char RV = *GPIO_IDR_HIGH;
2000024a:	4a14      	ldr	r2, [pc, #80]	; (2000029c <graphic_read+0x88>)
2000024c:	230f      	movs	r3, #15
2000024e:	18fb      	adds	r3, r7, r3
20000250:	7812      	ldrb	r2, [r2, #0]
20000252:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000254:	2040      	movs	r0, #64	; 0x40
20000256:	f7ff ff55 	bl	20000104 <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x55555555;
2000025a:	4b0e      	ldr	r3, [pc, #56]	; (20000294 <graphic_read+0x80>)
2000025c:	4a10      	ldr	r2, [pc, #64]	; (200002a0 <graphic_read+0x8c>)
2000025e:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1) {
20000260:	1dfb      	adds	r3, r7, #7
20000262:	781b      	ldrb	r3, [r3, #0]
20000264:	2b08      	cmp	r3, #8
20000266:	d104      	bne.n	20000272 <graphic_read+0x5e>
		select_cotroller(B_CS1);
20000268:	2008      	movs	r0, #8
2000026a:	f7ff ff65 	bl	20000138 <select_cotroller>
		graphic_wait_ready();
2000026e:	f7ff ff98 	bl	200001a2 <graphic_wait_ready>
	}
	if(controller == B_CS2) {
20000272:	1dfb      	adds	r3, r7, #7
20000274:	781b      	ldrb	r3, [r3, #0]
20000276:	2b10      	cmp	r3, #16
20000278:	d104      	bne.n	20000284 <graphic_read+0x70>
		select_cotroller(B_CS2);
2000027a:	2010      	movs	r0, #16
2000027c:	f7ff ff5c 	bl	20000138 <select_cotroller>
		graphic_wait_ready();
20000280:	f7ff ff8f 	bl	200001a2 <graphic_wait_ready>
	}
	return RV;
20000284:	230f      	movs	r3, #15
20000286:	18fb      	adds	r3, r7, r3
20000288:	781b      	ldrb	r3, [r3, #0]
}
2000028a:	0018      	movs	r0, r3
2000028c:	46bd      	mov	sp, r7
2000028e:	b004      	add	sp, #16
20000290:	bd80      	pop	{r7, pc}
20000292:	46c0      	nop			; (mov r8, r8)
20000294:	40021000 	andmi	r1, r2, r0
20000298:	00005555 	andeq	r5, r0, r5, asr r5
2000029c:	40021011 	andmi	r1, r2, r1, lsl r0
200002a0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002a4 <graphic_write>:

void graphic_write(unsigned char value, unsigned char controller) {
200002a4:	b580      	push	{r7, lr}
200002a6:	b082      	sub	sp, #8
200002a8:	af00      	add	r7, sp, #0
200002aa:	0002      	movs	r2, r0
200002ac:	1dfb      	adds	r3, r7, #7
200002ae:	701a      	strb	r2, [r3, #0]
200002b0:	1dbb      	adds	r3, r7, #6
200002b2:	1c0a      	adds	r2, r1, #0
200002b4:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_HIGH = value;
200002b6:	4a1a      	ldr	r2, [pc, #104]	; (20000320 <graphic_write+0x7c>)
200002b8:	1dfb      	adds	r3, r7, #7
200002ba:	781b      	ldrb	r3, [r3, #0]
200002bc:	7013      	strb	r3, [r2, #0]
	select_cotroller(controller);
200002be:	1dbb      	adds	r3, r7, #6
200002c0:	781b      	ldrb	r3, [r3, #0]
200002c2:	0018      	movs	r0, r3
200002c4:	f7ff ff38 	bl	20000138 <select_cotroller>
	delay_500ns();
200002c8:	f000 fa58 	bl	2000077c <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002cc:	2040      	movs	r0, #64	; 0x40
200002ce:	f7ff fefd 	bl	200000cc <graphic_ctrl_bit_set>
	delay_500ns();
200002d2:	f000 fa53 	bl	2000077c <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002d6:	2040      	movs	r0, #64	; 0x40
200002d8:	f7ff ff14 	bl	20000104 <graphic_ctrl_bit_clear>
	
	//Kanske inte ska vara så här för this statement
	if(controller & B_CS1) {
200002dc:	1dbb      	adds	r3, r7, #6
200002de:	781b      	ldrb	r3, [r3, #0]
200002e0:	2208      	movs	r2, #8
200002e2:	4013      	ands	r3, r2
200002e4:	d004      	beq.n	200002f0 <graphic_write+0x4c>
		select_cotroller(B_CS1);
200002e6:	2008      	movs	r0, #8
200002e8:	f7ff ff26 	bl	20000138 <select_cotroller>
		graphic_wait_ready();
200002ec:	f7ff ff59 	bl	200001a2 <graphic_wait_ready>
	}
	
	if(controller & B_CS2) {
200002f0:	1dbb      	adds	r3, r7, #6
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	2210      	movs	r2, #16
200002f6:	4013      	ands	r3, r2
200002f8:	d004      	beq.n	20000304 <graphic_write+0x60>
		select_cotroller(B_CS2);
200002fa:	2010      	movs	r0, #16
200002fc:	f7ff ff1c 	bl	20000138 <select_cotroller>
		graphic_wait_ready();
20000300:	f7ff ff4f 	bl	200001a2 <graphic_wait_ready>
	}
	
	*GPIO_ODR_HIGH = 0;
20000304:	4b06      	ldr	r3, [pc, #24]	; (20000320 <graphic_write+0x7c>)
20000306:	2200      	movs	r2, #0
20000308:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
2000030a:	2040      	movs	r0, #64	; 0x40
2000030c:	f7ff fede 	bl	200000cc <graphic_ctrl_bit_set>
	select_cotroller(0);
20000310:	2000      	movs	r0, #0
20000312:	f7ff ff11 	bl	20000138 <select_cotroller>
}
20000316:	46c0      	nop			; (mov r8, r8)
20000318:	46bd      	mov	sp, r7
2000031a:	b002      	add	sp, #8
2000031c:	bd80      	pop	{r7, pc}
2000031e:	46c0      	nop			; (mov r8, r8)
20000320:	40021015 	andmi	r1, r2, r5, lsl r0

20000324 <graphic_write_command>:

void graphic_write_command(unsigned char command, unsigned char controller) {
20000324:	b580      	push	{r7, lr}
20000326:	b082      	sub	sp, #8
20000328:	af00      	add	r7, sp, #0
2000032a:	0002      	movs	r2, r0
2000032c:	1dfb      	adds	r3, r7, #7
2000032e:	701a      	strb	r2, [r3, #0]
20000330:	1dbb      	adds	r3, r7, #6
20000332:	1c0a      	adds	r2, r1, #0
20000334:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000336:	2040      	movs	r0, #64	; 0x40
20000338:	f7ff fee4 	bl	20000104 <graphic_ctrl_bit_clear>
	select_cotroller(controller);
2000033c:	1dbb      	adds	r3, r7, #6
2000033e:	781b      	ldrb	r3, [r3, #0]
20000340:	0018      	movs	r0, r3
20000342:	f7ff fef9 	bl	20000138 <select_cotroller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000346:	2003      	movs	r0, #3
20000348:	f7ff fedc 	bl	20000104 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
2000034c:	1dbb      	adds	r3, r7, #6
2000034e:	781a      	ldrb	r2, [r3, #0]
20000350:	1dfb      	adds	r3, r7, #7
20000352:	781b      	ldrb	r3, [r3, #0]
20000354:	0011      	movs	r1, r2
20000356:	0018      	movs	r0, r3
20000358:	f7ff ffa4 	bl	200002a4 <graphic_write>
}
2000035c:	46c0      	nop			; (mov r8, r8)
2000035e:	46bd      	mov	sp, r7
20000360:	b002      	add	sp, #8
20000362:	bd80      	pop	{r7, pc}

20000364 <graphic_write_data>:

void graphic_write_data(unsigned char data, unsigned char controller) {
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
20000370:	1dbb      	adds	r3, r7, #6
20000372:	1c0a      	adds	r2, r1, #0
20000374:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000376:	2040      	movs	r0, #64	; 0x40
20000378:	f7ff fec4 	bl	20000104 <graphic_ctrl_bit_clear>
	select_cotroller(controller);
2000037c:	1dbb      	adds	r3, r7, #6
2000037e:	781b      	ldrb	r3, [r3, #0]
20000380:	0018      	movs	r0, r3
20000382:	f7ff fed9 	bl	20000138 <select_cotroller>
	graphic_ctrl_bit_set(B_RS);
20000386:	2001      	movs	r0, #1
20000388:	f7ff fea0 	bl	200000cc <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
2000038c:	2002      	movs	r0, #2
2000038e:	f7ff feb9 	bl	20000104 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
20000392:	1dbb      	adds	r3, r7, #6
20000394:	781a      	ldrb	r2, [r3, #0]
20000396:	1dfb      	adds	r3, r7, #7
20000398:	781b      	ldrb	r3, [r3, #0]
2000039a:	0011      	movs	r1, r2
2000039c:	0018      	movs	r0, r3
2000039e:	f7ff ff81 	bl	200002a4 <graphic_write>
}
200003a2:	46c0      	nop			; (mov r8, r8)
200003a4:	46bd      	mov	sp, r7
200003a6:	b002      	add	sp, #8
200003a8:	bd80      	pop	{r7, pc}

200003aa <graphic_read_data>:

unsigned char graphic_read_data(unsigned char controller) {
200003aa:	b580      	push	{r7, lr}
200003ac:	b082      	sub	sp, #8
200003ae:	af00      	add	r7, sp, #0
200003b0:	0002      	movs	r2, r0
200003b2:	1dfb      	adds	r3, r7, #7
200003b4:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
200003b6:	1dfb      	adds	r3, r7, #7
200003b8:	781b      	ldrb	r3, [r3, #0]
200003ba:	0018      	movs	r0, r3
200003bc:	f7ff ff2a 	bl	20000214 <graphic_read>
	return graphic_read(controller);
200003c0:	1dfb      	adds	r3, r7, #7
200003c2:	781b      	ldrb	r3, [r3, #0]
200003c4:	0018      	movs	r0, r3
200003c6:	f7ff ff25 	bl	20000214 <graphic_read>
200003ca:	0003      	movs	r3, r0
}
200003cc:	0018      	movs	r0, r3
200003ce:	46bd      	mov	sp, r7
200003d0:	b002      	add	sp, #8
200003d2:	bd80      	pop	{r7, pc}

200003d4 <graphic_initalize>:

void graphic_initalize(void) {
200003d4:	b580      	push	{r7, lr}
200003d6:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200003d8:	2040      	movs	r0, #64	; 0x40
200003da:	f7ff fe77 	bl	200000cc <graphic_ctrl_bit_set>
	delay_mikro(10);
200003de:	200a      	movs	r0, #10
200003e0:	f000 f9aa 	bl	20000738 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200003e4:	2078      	movs	r0, #120	; 0x78
200003e6:	f7ff fe8d 	bl	20000104 <graphic_ctrl_bit_clear>
	delay_milli(30);
200003ea:	201e      	movs	r0, #30
200003ec:	f000 f9ba 	bl	20000764 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200003f0:	2020      	movs	r0, #32
200003f2:	f7ff fe6b 	bl	200000cc <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200003f6:	2118      	movs	r1, #24
200003f8:	203e      	movs	r0, #62	; 0x3e
200003fa:	f7ff ff93 	bl	20000324 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200003fe:	2118      	movs	r1, #24
20000400:	203f      	movs	r0, #63	; 0x3f
20000402:	f7ff ff8f 	bl	20000324 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000406:	2118      	movs	r1, #24
20000408:	20c0      	movs	r0, #192	; 0xc0
2000040a:	f7ff ff8b 	bl	20000324 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000040e:	2118      	movs	r1, #24
20000410:	2040      	movs	r0, #64	; 0x40
20000412:	f7ff ff87 	bl	20000324 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000416:	2118      	movs	r1, #24
20000418:	20b8      	movs	r0, #184	; 0xb8
2000041a:	f7ff ff83 	bl	20000324 <graphic_write_command>
	select_cotroller(0);
2000041e:	2000      	movs	r0, #0
20000420:	f7ff fe8a 	bl	20000138 <select_cotroller>
}
20000424:	46c0      	nop			; (mov r8, r8)
20000426:	46bd      	mov	sp, r7
20000428:	bd80      	pop	{r7, pc}

2000042a <graphic_clear_screen>:

void graphic_clear_screen(void) {
2000042a:	b580      	push	{r7, lr}
2000042c:	b082      	sub	sp, #8
2000042e:	af00      	add	r7, sp, #0
	for(int page = 0; page <= 7; page++) {
20000430:	2300      	movs	r3, #0
20000432:	607b      	str	r3, [r7, #4]
20000434:	e01e      	b.n	20000474 <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000436:	687b      	ldr	r3, [r7, #4]
20000438:	b25b      	sxtb	r3, r3
2000043a:	2248      	movs	r2, #72	; 0x48
2000043c:	4252      	negs	r2, r2
2000043e:	4313      	orrs	r3, r2
20000440:	b25b      	sxtb	r3, r3
20000442:	b2db      	uxtb	r3, r3
20000444:	2118      	movs	r1, #24
20000446:	0018      	movs	r0, r3
20000448:	f7ff ff6c 	bl	20000324 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
2000044c:	2118      	movs	r1, #24
2000044e:	2040      	movs	r0, #64	; 0x40
20000450:	f7ff ff68 	bl	20000324 <graphic_write_command>
		for(int add = 0; add <= 63; add++) {
20000454:	2300      	movs	r3, #0
20000456:	603b      	str	r3, [r7, #0]
20000458:	e006      	b.n	20000468 <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
2000045a:	2118      	movs	r1, #24
2000045c:	2000      	movs	r0, #0
2000045e:	f7ff ff81 	bl	20000364 <graphic_write_data>
		for(int add = 0; add <= 63; add++) {
20000462:	683b      	ldr	r3, [r7, #0]
20000464:	3301      	adds	r3, #1
20000466:	603b      	str	r3, [r7, #0]
20000468:	683b      	ldr	r3, [r7, #0]
2000046a:	2b3f      	cmp	r3, #63	; 0x3f
2000046c:	ddf5      	ble.n	2000045a <graphic_clear_screen+0x30>
	for(int page = 0; page <= 7; page++) {
2000046e:	687b      	ldr	r3, [r7, #4]
20000470:	3301      	adds	r3, #1
20000472:	607b      	str	r3, [r7, #4]
20000474:	687b      	ldr	r3, [r7, #4]
20000476:	2b07      	cmp	r3, #7
20000478:	dddd      	ble.n	20000436 <graphic_clear_screen+0xc>
		}
	}
}
2000047a:	46c0      	nop			; (mov r8, r8)
2000047c:	46bd      	mov	sp, r7
2000047e:	b002      	add	sp, #8
20000480:	bd80      	pop	{r7, pc}

20000482 <pixel>:


void pixel(unsigned char x, unsigned char y, unsigned char set) {
20000482:	b590      	push	{r4, r7, lr}
20000484:	b085      	sub	sp, #20
20000486:	af00      	add	r7, sp, #0
20000488:	0004      	movs	r4, r0
2000048a:	0008      	movs	r0, r1
2000048c:	0011      	movs	r1, r2
2000048e:	1dfb      	adds	r3, r7, #7
20000490:	1c22      	adds	r2, r4, #0
20000492:	701a      	strb	r2, [r3, #0]
20000494:	1dbb      	adds	r3, r7, #6
20000496:	1c02      	adds	r2, r0, #0
20000498:	701a      	strb	r2, [r3, #0]
2000049a:	1d7b      	adds	r3, r7, #5
2000049c:	1c0a      	adds	r2, r1, #0
2000049e:	701a      	strb	r2, [r3, #0]
	if(x < 0 || y < 0) return;
	if(x > 127 || y > 63) return;
200004a0:	1dfb      	adds	r3, r7, #7
200004a2:	781b      	ldrb	r3, [r3, #0]
200004a4:	b25b      	sxtb	r3, r3
200004a6:	2b00      	cmp	r3, #0
200004a8:	da00      	bge.n	200004ac <pixel+0x2a>
200004aa:	e0ae      	b.n	2000060a <pixel+0x188>
200004ac:	1dbb      	adds	r3, r7, #6
200004ae:	781b      	ldrb	r3, [r3, #0]
200004b0:	2b3f      	cmp	r3, #63	; 0x3f
200004b2:	d900      	bls.n	200004b6 <pixel+0x34>
200004b4:	e0a9      	b.n	2000060a <pixel+0x188>
	unsigned char mask;
	unsigned char index = y / 8;
200004b6:	230d      	movs	r3, #13
200004b8:	18fb      	adds	r3, r7, r3
200004ba:	1dba      	adds	r2, r7, #6
200004bc:	7812      	ldrb	r2, [r2, #0]
200004be:	08d2      	lsrs	r2, r2, #3
200004c0:	701a      	strb	r2, [r3, #0]
	
	switch(y % 8) {
200004c2:	1dbb      	adds	r3, r7, #6
200004c4:	781b      	ldrb	r3, [r3, #0]
200004c6:	2207      	movs	r2, #7
200004c8:	4013      	ands	r3, r2
200004ca:	2b07      	cmp	r3, #7
200004cc:	d82c      	bhi.n	20000528 <pixel+0xa6>
200004ce:	009a      	lsls	r2, r3, #2
200004d0:	4b50      	ldr	r3, [pc, #320]	; (20000614 <pixel+0x192>)
200004d2:	18d3      	adds	r3, r2, r3
200004d4:	681b      	ldr	r3, [r3, #0]
200004d6:	469f      	mov	pc, r3
		case 0: mask = 1; break;
200004d8:	230f      	movs	r3, #15
200004da:	18fb      	adds	r3, r7, r3
200004dc:	2201      	movs	r2, #1
200004de:	701a      	strb	r2, [r3, #0]
200004e0:	e022      	b.n	20000528 <pixel+0xa6>
		case 1: mask = 2; break;
200004e2:	230f      	movs	r3, #15
200004e4:	18fb      	adds	r3, r7, r3
200004e6:	2202      	movs	r2, #2
200004e8:	701a      	strb	r2, [r3, #0]
200004ea:	e01d      	b.n	20000528 <pixel+0xa6>
		case 2: mask = 4; break;
200004ec:	230f      	movs	r3, #15
200004ee:	18fb      	adds	r3, r7, r3
200004f0:	2204      	movs	r2, #4
200004f2:	701a      	strb	r2, [r3, #0]
200004f4:	e018      	b.n	20000528 <pixel+0xa6>
		case 3: mask = 8; break;
200004f6:	230f      	movs	r3, #15
200004f8:	18fb      	adds	r3, r7, r3
200004fa:	2208      	movs	r2, #8
200004fc:	701a      	strb	r2, [r3, #0]
200004fe:	e013      	b.n	20000528 <pixel+0xa6>
		case 4: mask = 16; break;
20000500:	230f      	movs	r3, #15
20000502:	18fb      	adds	r3, r7, r3
20000504:	2210      	movs	r2, #16
20000506:	701a      	strb	r2, [r3, #0]
20000508:	e00e      	b.n	20000528 <pixel+0xa6>
		case 5: mask = 32; break;
2000050a:	230f      	movs	r3, #15
2000050c:	18fb      	adds	r3, r7, r3
2000050e:	2220      	movs	r2, #32
20000510:	701a      	strb	r2, [r3, #0]
20000512:	e009      	b.n	20000528 <pixel+0xa6>
		case 6: mask = 64; break;
20000514:	230f      	movs	r3, #15
20000516:	18fb      	adds	r3, r7, r3
20000518:	2240      	movs	r2, #64	; 0x40
2000051a:	701a      	strb	r2, [r3, #0]
2000051c:	e004      	b.n	20000528 <pixel+0xa6>
		case 7: mask = 128; break;
2000051e:	230f      	movs	r3, #15
20000520:	18fb      	adds	r3, r7, r3
20000522:	2280      	movs	r2, #128	; 0x80
20000524:	701a      	strb	r2, [r3, #0]
20000526:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0) {
20000528:	1d7b      	adds	r3, r7, #5
2000052a:	781b      	ldrb	r3, [r3, #0]
2000052c:	2b00      	cmp	r3, #0
2000052e:	d106      	bne.n	2000053e <pixel+0xbc>
		mask = ~mask;
20000530:	230f      	movs	r3, #15
20000532:	18fb      	adds	r3, r7, r3
20000534:	220f      	movs	r2, #15
20000536:	18ba      	adds	r2, r7, r2
20000538:	7812      	ldrb	r2, [r2, #0]
2000053a:	43d2      	mvns	r2, r2
2000053c:	701a      	strb	r2, [r3, #0]
	}
	
	unsigned char controller;
	if(x > 63) {
2000053e:	1dfb      	adds	r3, r7, #7
20000540:	781b      	ldrb	r3, [r3, #0]
20000542:	2b3f      	cmp	r3, #63	; 0x3f
20000544:	d909      	bls.n	2000055a <pixel+0xd8>
		controller = B_CS2;
20000546:	230e      	movs	r3, #14
20000548:	18fb      	adds	r3, r7, r3
2000054a:	2210      	movs	r2, #16
2000054c:	701a      	strb	r2, [r3, #0]
		x = x - 64;
2000054e:	1dfb      	adds	r3, r7, #7
20000550:	1dfa      	adds	r2, r7, #7
20000552:	7812      	ldrb	r2, [r2, #0]
20000554:	3a40      	subs	r2, #64	; 0x40
20000556:	701a      	strb	r2, [r3, #0]
20000558:	e003      	b.n	20000562 <pixel+0xe0>
	} else {
		controller = B_CS1;
2000055a:	230e      	movs	r3, #14
2000055c:	18fb      	adds	r3, r7, r3
2000055e:	2208      	movs	r2, #8
20000560:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x, controller);
20000562:	1dfb      	adds	r3, r7, #7
20000564:	781b      	ldrb	r3, [r3, #0]
20000566:	2240      	movs	r2, #64	; 0x40
20000568:	4313      	orrs	r3, r2
2000056a:	b2da      	uxtb	r2, r3
2000056c:	230e      	movs	r3, #14
2000056e:	18fb      	adds	r3, r7, r3
20000570:	781b      	ldrb	r3, [r3, #0]
20000572:	0019      	movs	r1, r3
20000574:	0010      	movs	r0, r2
20000576:	f7ff fed5 	bl	20000324 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
2000057a:	230d      	movs	r3, #13
2000057c:	18fb      	adds	r3, r7, r3
2000057e:	781b      	ldrb	r3, [r3, #0]
20000580:	2248      	movs	r2, #72	; 0x48
20000582:	4252      	negs	r2, r2
20000584:	4313      	orrs	r3, r2
20000586:	b2da      	uxtb	r2, r3
20000588:	230e      	movs	r3, #14
2000058a:	18fb      	adds	r3, r7, r3
2000058c:	781b      	ldrb	r3, [r3, #0]
2000058e:	0019      	movs	r1, r3
20000590:	0010      	movs	r0, r2
20000592:	f7ff fec7 	bl	20000324 <graphic_write_command>
	unsigned char temp = graphic_read_data(controller);
20000596:	230c      	movs	r3, #12
20000598:	18fc      	adds	r4, r7, r3
2000059a:	230e      	movs	r3, #14
2000059c:	18fb      	adds	r3, r7, r3
2000059e:	781b      	ldrb	r3, [r3, #0]
200005a0:	0018      	movs	r0, r3
200005a2:	f7ff ff02 	bl	200003aa <graphic_read_data>
200005a6:	0003      	movs	r3, r0
200005a8:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
200005aa:	1dfb      	adds	r3, r7, #7
200005ac:	781b      	ldrb	r3, [r3, #0]
200005ae:	2240      	movs	r2, #64	; 0x40
200005b0:	4313      	orrs	r3, r2
200005b2:	b2da      	uxtb	r2, r3
200005b4:	230e      	movs	r3, #14
200005b6:	18fb      	adds	r3, r7, r3
200005b8:	781b      	ldrb	r3, [r3, #0]
200005ba:	0019      	movs	r1, r3
200005bc:	0010      	movs	r0, r2
200005be:	f7ff feb1 	bl	20000324 <graphic_write_command>
	
	if(set) {
200005c2:	1d7b      	adds	r3, r7, #5
200005c4:	781b      	ldrb	r3, [r3, #0]
200005c6:	2b00      	cmp	r3, #0
200005c8:	d00a      	beq.n	200005e0 <pixel+0x15e>
		mask = mask | temp;
200005ca:	230f      	movs	r3, #15
200005cc:	18fb      	adds	r3, r7, r3
200005ce:	220f      	movs	r2, #15
200005d0:	18b9      	adds	r1, r7, r2
200005d2:	220c      	movs	r2, #12
200005d4:	18ba      	adds	r2, r7, r2
200005d6:	7809      	ldrb	r1, [r1, #0]
200005d8:	7812      	ldrb	r2, [r2, #0]
200005da:	430a      	orrs	r2, r1
200005dc:	701a      	strb	r2, [r3, #0]
200005de:	e009      	b.n	200005f4 <pixel+0x172>
	} else {
		mask = mask & temp;
200005e0:	230f      	movs	r3, #15
200005e2:	18fb      	adds	r3, r7, r3
200005e4:	220f      	movs	r2, #15
200005e6:	18ba      	adds	r2, r7, r2
200005e8:	210c      	movs	r1, #12
200005ea:	1879      	adds	r1, r7, r1
200005ec:	7812      	ldrb	r2, [r2, #0]
200005ee:	7809      	ldrb	r1, [r1, #0]
200005f0:	400a      	ands	r2, r1
200005f2:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
200005f4:	230e      	movs	r3, #14
200005f6:	18fb      	adds	r3, r7, r3
200005f8:	781a      	ldrb	r2, [r3, #0]
200005fa:	230f      	movs	r3, #15
200005fc:	18fb      	adds	r3, r7, r3
200005fe:	781b      	ldrb	r3, [r3, #0]
20000600:	0011      	movs	r1, r2
20000602:	0018      	movs	r0, r3
20000604:	f7ff feae 	bl	20000364 <graphic_write_data>
20000608:	e000      	b.n	2000060c <pixel+0x18a>
	if(x > 127 || y > 63) return;
2000060a:	46c0      	nop			; (mov r8, r8)
	
2000060c:	46bd      	mov	sp, r7
2000060e:	b005      	add	sp, #20
20000610:	bd90      	pop	{r4, r7, pc}
20000612:	46c0      	nop			; (mov r8, r8)
20000614:	200008c4 	andcs	r0, r0, r4, asr #17

20000618 <draw_object>:
#include "object.h"
#include "graphic.h"

void draw_object(POBJECT this) {
20000618:	b580      	push	{r7, lr}
2000061a:	b084      	sub	sp, #16
2000061c:	af00      	add	r7, sp, #0
2000061e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
20000620:	2300      	movs	r3, #0
20000622:	60fb      	str	r3, [r7, #12]
20000624:	e020      	b.n	20000668 <draw_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 1);
20000626:	687b      	ldr	r3, [r7, #4]
20000628:	681a      	ldr	r2, [r3, #0]
2000062a:	68fb      	ldr	r3, [r7, #12]
2000062c:	3304      	adds	r3, #4
2000062e:	005b      	lsls	r3, r3, #1
20000630:	18d3      	adds	r3, r2, r3
20000632:	3304      	adds	r3, #4
20000634:	781a      	ldrb	r2, [r3, #0]
20000636:	687b      	ldr	r3, [r7, #4]
20000638:	68db      	ldr	r3, [r3, #12]
2000063a:	b2db      	uxtb	r3, r3
2000063c:	18d3      	adds	r3, r2, r3
2000063e:	b2d8      	uxtb	r0, r3
20000640:	687b      	ldr	r3, [r7, #4]
20000642:	681a      	ldr	r2, [r3, #0]
20000644:	68fb      	ldr	r3, [r7, #12]
20000646:	3304      	adds	r3, #4
20000648:	005b      	lsls	r3, r3, #1
2000064a:	18d3      	adds	r3, r2, r3
2000064c:	3305      	adds	r3, #5
2000064e:	781a      	ldrb	r2, [r3, #0]
20000650:	687b      	ldr	r3, [r7, #4]
20000652:	691b      	ldr	r3, [r3, #16]
20000654:	b2db      	uxtb	r3, r3
20000656:	18d3      	adds	r3, r2, r3
20000658:	b2db      	uxtb	r3, r3
2000065a:	2201      	movs	r2, #1
2000065c:	0019      	movs	r1, r3
2000065e:	f7ff ff10 	bl	20000482 <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
20000662:	68fb      	ldr	r3, [r7, #12]
20000664:	3301      	adds	r3, #1
20000666:	60fb      	str	r3, [r7, #12]
20000668:	68fb      	ldr	r3, [r7, #12]
2000066a:	2b13      	cmp	r3, #19
2000066c:	dddb      	ble.n	20000626 <draw_object+0xe>
	}
}
2000066e:	46c0      	nop			; (mov r8, r8)
20000670:	46bd      	mov	sp, r7
20000672:	b004      	add	sp, #16
20000674:	bd80      	pop	{r7, pc}

20000676 <clear_object>:
void clear_object(POBJECT this) {
20000676:	b580      	push	{r7, lr}
20000678:	b084      	sub	sp, #16
2000067a:	af00      	add	r7, sp, #0
2000067c:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
2000067e:	2300      	movs	r3, #0
20000680:	60fb      	str	r3, [r7, #12]
20000682:	e020      	b.n	200006c6 <clear_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 0);
20000684:	687b      	ldr	r3, [r7, #4]
20000686:	681a      	ldr	r2, [r3, #0]
20000688:	68fb      	ldr	r3, [r7, #12]
2000068a:	3304      	adds	r3, #4
2000068c:	005b      	lsls	r3, r3, #1
2000068e:	18d3      	adds	r3, r2, r3
20000690:	3304      	adds	r3, #4
20000692:	781a      	ldrb	r2, [r3, #0]
20000694:	687b      	ldr	r3, [r7, #4]
20000696:	68db      	ldr	r3, [r3, #12]
20000698:	b2db      	uxtb	r3, r3
2000069a:	18d3      	adds	r3, r2, r3
2000069c:	b2d8      	uxtb	r0, r3
2000069e:	687b      	ldr	r3, [r7, #4]
200006a0:	681a      	ldr	r2, [r3, #0]
200006a2:	68fb      	ldr	r3, [r7, #12]
200006a4:	3304      	adds	r3, #4
200006a6:	005b      	lsls	r3, r3, #1
200006a8:	18d3      	adds	r3, r2, r3
200006aa:	3305      	adds	r3, #5
200006ac:	781a      	ldrb	r2, [r3, #0]
200006ae:	687b      	ldr	r3, [r7, #4]
200006b0:	691b      	ldr	r3, [r3, #16]
200006b2:	b2db      	uxtb	r3, r3
200006b4:	18d3      	adds	r3, r2, r3
200006b6:	b2db      	uxtb	r3, r3
200006b8:	2200      	movs	r2, #0
200006ba:	0019      	movs	r1, r3
200006bc:	f7ff fee1 	bl	20000482 <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
200006c0:	68fb      	ldr	r3, [r7, #12]
200006c2:	3301      	adds	r3, #1
200006c4:	60fb      	str	r3, [r7, #12]
200006c6:	68fb      	ldr	r3, [r7, #12]
200006c8:	2b13      	cmp	r3, #19
200006ca:	dddb      	ble.n	20000684 <clear_object+0xe>
	}
}
200006cc:	46c0      	nop			; (mov r8, r8)
200006ce:	46bd      	mov	sp, r7
200006d0:	b004      	add	sp, #16
200006d2:	bd80      	pop	{r7, pc}

200006d4 <set_object_speed>:

void set_object_speed(POBJECT this, int x, int y) {
200006d4:	b580      	push	{r7, lr}
200006d6:	b084      	sub	sp, #16
200006d8:	af00      	add	r7, sp, #0
200006da:	60f8      	str	r0, [r7, #12]
200006dc:	60b9      	str	r1, [r7, #8]
200006de:	607a      	str	r2, [r7, #4]
	this->dirX = x;
200006e0:	68fb      	ldr	r3, [r7, #12]
200006e2:	68ba      	ldr	r2, [r7, #8]
200006e4:	605a      	str	r2, [r3, #4]
	this->dirY = y;
200006e6:	68fb      	ldr	r3, [r7, #12]
200006e8:	687a      	ldr	r2, [r7, #4]
200006ea:	609a      	str	r2, [r3, #8]
200006ec:	46c0      	nop			; (mov r8, r8)
200006ee:	46bd      	mov	sp, r7
200006f0:	b004      	add	sp, #16
200006f2:	bd80      	pop	{r7, pc}

200006f4 <delay_250ns>:
#include "timer.h"


void delay_250ns(void) {
200006f4:	b580      	push	{r7, lr}
200006f6:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
200006f8:	4b0c      	ldr	r3, [pc, #48]	; (2000072c <delay_250ns+0x38>)
200006fa:	2200      	movs	r2, #0
200006fc:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
200006fe:	4b0c      	ldr	r3, [pc, #48]	; (20000730 <delay_250ns+0x3c>)
20000700:	2231      	movs	r2, #49	; 0x31
20000702:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000704:	4b0b      	ldr	r3, [pc, #44]	; (20000734 <delay_250ns+0x40>)
20000706:	2200      	movs	r2, #0
20000708:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000070a:	4b08      	ldr	r3, [pc, #32]	; (2000072c <delay_250ns+0x38>)
2000070c:	2205      	movs	r2, #5
2000070e:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
20000710:	46c0      	nop			; (mov r8, r8)
20000712:	4b06      	ldr	r3, [pc, #24]	; (2000072c <delay_250ns+0x38>)
20000714:	681a      	ldr	r2, [r3, #0]
20000716:	2380      	movs	r3, #128	; 0x80
20000718:	025b      	lsls	r3, r3, #9
2000071a:	4013      	ands	r3, r2
2000071c:	d0f9      	beq.n	20000712 <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
2000071e:	4b03      	ldr	r3, [pc, #12]	; (2000072c <delay_250ns+0x38>)
20000720:	2200      	movs	r2, #0
20000722:	601a      	str	r2, [r3, #0]
}
20000724:	46c0      	nop			; (mov r8, r8)
20000726:	46bd      	mov	sp, r7
20000728:	bd80      	pop	{r7, pc}
2000072a:	46c0      	nop			; (mov r8, r8)
2000072c:	e000e010 	and	lr, r0, r0, lsl r0
20000730:	e000e014 	and	lr, r0, r4, lsl r0
20000734:	e000e018 	and	lr, r0, r8, lsl r0

20000738 <delay_mikro>:

void delay_mikro(unsigned int us) {
20000738:	b580      	push	{r7, lr}
2000073a:	b082      	sub	sp, #8
2000073c:	af00      	add	r7, sp, #0
2000073e:	6078      	str	r0, [r7, #4]
	while(us--) {
20000740:	e007      	b.n	20000752 <delay_mikro+0x1a>
		delay_250ns();
20000742:	f7ff ffd7 	bl	200006f4 <delay_250ns>
		delay_250ns();
20000746:	f7ff ffd5 	bl	200006f4 <delay_250ns>
		delay_250ns();
2000074a:	f7ff ffd3 	bl	200006f4 <delay_250ns>
		delay_250ns();
2000074e:	f7ff ffd1 	bl	200006f4 <delay_250ns>
	while(us--) {
20000752:	687b      	ldr	r3, [r7, #4]
20000754:	1e5a      	subs	r2, r3, #1
20000756:	607a      	str	r2, [r7, #4]
20000758:	2b00      	cmp	r3, #0
2000075a:	d1f2      	bne.n	20000742 <delay_mikro+0xa>
	}
}
2000075c:	46c0      	nop			; (mov r8, r8)
2000075e:	46bd      	mov	sp, r7
20000760:	b002      	add	sp, #8
20000762:	bd80      	pop	{r7, pc}

20000764 <delay_milli>:

void delay_milli(unsigned int ms) {
20000764:	b580      	push	{r7, lr}
20000766:	b082      	sub	sp, #8
20000768:	af00      	add	r7, sp, #0
2000076a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_mikro(ms);
2000076c:	687b      	ldr	r3, [r7, #4]
2000076e:	0018      	movs	r0, r3
20000770:	f7ff ffe2 	bl	20000738 <delay_mikro>
	#else
		delay_mikro(1000 * ms);
	#endif
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b002      	add	sp, #8
2000077a:	bd80      	pop	{r7, pc}

2000077c <delay_500ns>:

void delay_500ns(void) {
2000077c:	b580      	push	{r7, lr}
2000077e:	af00      	add	r7, sp, #0
	delay_250ns();
20000780:	f7ff ffb8 	bl	200006f4 <delay_250ns>
	delay_250ns();
20000784:	f7ff ffb6 	bl	200006f4 <delay_250ns>
}
20000788:	46c0      	nop			; (mov r8, r8)
2000078a:	46bd      	mov	sp, r7
2000078c:	bd80      	pop	{r7, pc}
2000078e:	46c0      	nop			; (mov r8, r8)

20000790 <move_paddle>:
	clear_object,
	move_paddle,
	set_object_speed
};

void move_paddle(POBJECT this) {
20000790:	b580      	push	{r7, lr}
20000792:	b082      	sub	sp, #8
20000794:	af00      	add	r7, sp, #0
20000796:	6078      	str	r0, [r7, #4]
	clear_object(this);
20000798:	687b      	ldr	r3, [r7, #4]
2000079a:	0018      	movs	r0, r3
2000079c:	f7ff ff6b 	bl	20000676 <clear_object>
	
	// Move paddle in y direction only.
	this->posY += this->dirY;
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	691a      	ldr	r2, [r3, #16]
200007a4:	687b      	ldr	r3, [r7, #4]
200007a6:	689b      	ldr	r3, [r3, #8]
200007a8:	18d2      	adds	r2, r2, r3
200007aa:	687b      	ldr	r3, [r7, #4]
200007ac:	611a      	str	r2, [r3, #16]
	
	// Wall collisions todo add width check with paddle.
	if(this->posY < 0) {
200007ae:	687b      	ldr	r3, [r7, #4]
200007b0:	691b      	ldr	r3, [r3, #16]
200007b2:	2b00      	cmp	r3, #0
200007b4:	da03      	bge.n	200007be <move_paddle+0x2e>
		this->posY = 0;
200007b6:	687b      	ldr	r3, [r7, #4]
200007b8:	2200      	movs	r2, #0
200007ba:	611a      	str	r2, [r3, #16]
200007bc:	e00e      	b.n	200007dc <move_paddle+0x4c>
	} else if(this->posY + this->geo->sizeY > 127) {
200007be:	687b      	ldr	r3, [r7, #4]
200007c0:	691a      	ldr	r2, [r3, #16]
200007c2:	687b      	ldr	r3, [r7, #4]
200007c4:	681b      	ldr	r3, [r3, #0]
200007c6:	689b      	ldr	r3, [r3, #8]
200007c8:	18d3      	adds	r3, r2, r3
200007ca:	2b7f      	cmp	r3, #127	; 0x7f
200007cc:	dd06      	ble.n	200007dc <move_paddle+0x4c>
		this->posY = 127 - this->geo->sizeY;
200007ce:	687b      	ldr	r3, [r7, #4]
200007d0:	681b      	ldr	r3, [r3, #0]
200007d2:	689b      	ldr	r3, [r3, #8]
200007d4:	227f      	movs	r2, #127	; 0x7f
200007d6:	1ad2      	subs	r2, r2, r3
200007d8:	687b      	ldr	r3, [r7, #4]
200007da:	611a      	str	r2, [r3, #16]
	}
	
	this->draw(this);
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	695b      	ldr	r3, [r3, #20]
200007e0:	687a      	ldr	r2, [r7, #4]
200007e2:	0010      	movs	r0, r2
200007e4:	4798      	blx	r3
200007e6:	46c0      	nop			; (mov r8, r8)
200007e8:	46bd      	mov	sp, r7
200007ea:	b002      	add	sp, #8
200007ec:	bd80      	pop	{r7, pc}
	...

200007f0 <ball_geometry>:
200007f0:	0000000c 	andeq	r0, r0, ip
200007f4:	00000004 	andeq	r0, r0, r4
200007f8:	00000004 	andeq	r0, r0, r4
200007fc:	02000100 	andeq	r0, r0, #0, 2
20000800:	01010001 	tsteq	r1, r1
20000804:	03010201 	movweq	r0, #4609	; 0x1201
20000808:	01020002 	tsteq	r2, r2
2000080c:	03020202 	movweq	r0, #8706	; 0x2202
20000810:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000824 <ball>:
20000824:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
	...
20000830:	00000001 	andeq	r0, r0, r1
20000834:	00000001 	andeq	r0, r0, r1
20000838:	20000619 	andcs	r0, r0, r9, lsl r6
2000083c:	20000677 	andcs	r0, r0, r7, ror r6
20000840:	2000005d 	andcs	r0, r0, sp, asr r0
20000844:	200006d5 	ldrdcs	r0, [r0], -r5

20000848 <paddle_geometry>:
20000848:	0000000c 	andeq	r0, r0, ip
2000084c:	00000004 	andeq	r0, r0, r4
20000850:	00000004 	andeq	r0, r0, r4
20000854:	02000100 	andeq	r0, r0, #0, 2
20000858:	01010001 	tsteq	r1, r1
2000085c:	03010201 	movweq	r0, #4609	; 0x1201
20000860:	01020002 	tsteq	r2, r2
20000864:	03020202 	movweq	r0, #8706	; 0x2202
20000868:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

2000087c <leftPaddle>:
2000087c:	20000848 	andcs	r0, r0, r8, asr #16
	...
20000888:	00000001 	andeq	r0, r0, r1
2000088c:	00000001 	andeq	r0, r0, r1
20000890:	20000619 	andcs	r0, r0, r9, lsl r6
20000894:	20000677 	andcs	r0, r0, r7, ror r6
20000898:	20000791 	mulcs	r0, r1, r7
2000089c:	200006d5 	ldrdcs	r0, [r0], -r5

200008a0 <rightPaddle>:
200008a0:	20000848 	andcs	r0, r0, r8, asr #16
	...
200008ac:	00000001 	andeq	r0, r0, r1
200008b0:	00000001 	andeq	r0, r0, r1
200008b4:	20000619 	andcs	r0, r0, r9, lsl r6
200008b8:	20000677 	andcs	r0, r0, r7, ror r6
200008bc:	20000791 	mulcs	r0, r1, r7
200008c0:	200006d5 	ldrdcs	r0, [r0], -r5
200008c4:	200004d8 	ldrdcs	r0, [r0], -r8
200008c8:	200004e2 	andcs	r0, r0, r2, ror #9
200008cc:	200004ec 	andcs	r0, r0, ip, ror #9
200008d0:	200004f6 	strdcs	r0, [r0], -r6
200008d4:	20000500 	andcs	r0, r0, r0, lsl #10
200008d8:	2000050a 	andcs	r0, r0, sl, lsl #10
200008dc:	20000514 	andcs	r0, r0, r4, lsl r5
200008e0:	2000051e 	andcs	r0, r0, lr, lsl r5

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000001cc 	andeq	r0, r0, ip, asr #3
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000007b 	andeq	r0, r0, fp, ror r0
  10:	00001b0c 	andeq	r1, r0, ip, lsl #22
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	0000006d 	andeq	r0, r0, sp, rrx
  28:	00006103 	andeq	r6, r0, r3, lsl #2
  2c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
  30:	00000049 	andeq	r0, r0, r9, asr #32
  34:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
  38:	00002106 	andeq	r2, r0, r6, lsl #2
  3c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
  40:	21070200 	mrscs	r0, (UNDEF: 39)
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	01620500 	cmneq	r2, r0, lsl #10
  4c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  50:	00000028 	andeq	r0, r0, r8, lsr #32
  54:	00012603 	andeq	r2, r1, r3, lsl #12
  58:	0b023400 	bleq	8d060 <startup-0x1ff72fa0>
  5c:	00000090 	muleq	r0, r0, r0
  60:	00015806 	andeq	r5, r1, r6, lsl #16
  64:	900c0200 	andls	r0, ip, r0, lsl #4
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000a06 	andeq	r0, r0, r6, lsl #20
  70:	900d0200 	andls	r0, sp, r0, lsl #4
  74:	04000000 	streq	r0, [r0], #-0
  78:	00001006 	andeq	r1, r0, r6
  7c:	900e0200 	andls	r0, lr, r0, lsl #4
  80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  84:	00787004 	rsbseq	r7, r8, r4
  88:	00970f02 	addseq	r0, r7, r2, lsl #30
  8c:	000c0000 	andeq	r0, ip, r0
  90:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  94:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  98:	00000049 	andeq	r0, r0, r9, asr #32
  9c:	000000a7 	andeq	r0, r0, r7, lsr #1
  a0:	0000a709 	andeq	sl, r0, r9, lsl #14
  a4:	02001300 	andeq	r1, r0, #0, 6
  a8:	01450704 	cmpeq	r5, r4, lsl #14
  ac:	13050000 	movwne	r0, #20480	; 0x5000
  b0:	02000001 	andeq	r0, r0, #1
  b4:	0000b910 	andeq	fp, r0, r0, lsl r9
  b8:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
  bc:	03000000 	movweq	r0, #0
  c0:	00000168 	andeq	r0, r0, r8, ror #2
  c4:	38120224 	ldmdacc	r2, {r2, r5, r9}
  c8:	04000001 	streq	r0, [r0], #-1
  cc:	006f6567 	rsbeq	r6, pc, r7, ror #10
  d0:	00ae1302 	adceq	r1, lr, r2, lsl #6
  d4:	06000000 	streq	r0, [r0], -r0
  d8:	00000153 	andeq	r0, r0, r3, asr r1
  dc:	00901402 	addseq	r1, r0, r2, lsl #8
  e0:	06040000 	streq	r0, [r4], -r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	00901402 	addseq	r1, r0, r2, lsl #8
  ec:	06080000 	streq	r0, [r8], -r0
  f0:	0000014e 	andeq	r0, r0, lr, asr #2
  f4:	00901502 	addseq	r1, r0, r2, lsl #10
  f8:	060c0000 	streq	r0, [ip], -r0
  fc:	00000005 	andeq	r0, r0, r5
 100:	00901502 	addseq	r1, r0, r2, lsl #10
 104:	06100000 	ldreq	r0, [r0], -r0
 108:	00000016 	andeq	r0, r0, r6, lsl r0
 10c:	01491602 	cmpeq	r9, r2, lsl #12
 110:	06140000 	ldreq	r0, [r4], -r0
 114:	00000236 	andeq	r0, r0, r6, lsr r2
 118:	01491702 	cmpeq	r9, r2, lsl #14
 11c:	06180000 	ldreq	r0, [r8], -r0
 120:	00000068 	andeq	r0, r0, r8, rrx
 124:	01491802 	cmpeq	r9, r2, lsl #16
 128:	061c0000 	ldreq	r0, [ip], -r0
 12c:	00000057 	andeq	r0, r0, r7, asr r0
 130:	01641902 	cmneq	r4, r2, lsl #18
 134:	00200000 	eoreq	r0, r0, r0
 138:	0001430b 	andeq	r4, r1, fp, lsl #6
 13c:	01430c00 	cmpeq	r3, r0, lsl #24
 140:	0a000000 	beq	148 <startup-0x1ffffeb8>
 144:	0000bf04 	andeq	fp, r0, r4, lsl #30
 148:	38040a00 	stmdacc	r4, {r9, fp}
 14c:	0b000001 	bleq	158 <startup-0x1ffffea8>
 150:	00000164 	andeq	r0, r0, r4, ror #2
 154:	0001430c 	andeq	r4, r1, ip, lsl #6
 158:	00900c00 	addseq	r0, r0, r0, lsl #24
 15c:	900c0000 	andls	r0, ip, r0
 160:	00000000 	andeq	r0, r0, r0
 164:	014f040a 	cmpeq	pc, sl, lsl #8
 168:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
 16c:	02000001 	andeq	r0, r0, #1
 170:	0000bf1a 	andeq	fp, r0, sl, lsl pc
 174:	013d0500 	teqeq	sp, r0, lsl #10
 178:	1a020000 	bne	80180 <startup-0x1ff7fe80>
 17c:	00000143 	andeq	r0, r0, r3, asr #2
 180:	0001910d 	andeq	r9, r1, sp, lsl #2
 184:	6a050300 	bvs	140d8c <startup-0x1febf274>
 188:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 18c:	00000138 	andeq	r0, r0, r8, lsr r1
 190:	00281901 	eoreq	r1, r8, r1, lsl #18
 194:	00342000 	eorseq	r2, r4, r0
 198:	9c010000 	stcls	0, cr0, [r1], {-0}
 19c:	000001ad 	andeq	r0, r0, sp, lsr #3
 1a0:	0100700f 	tsteq	r0, pc
 1a4:	0001751a 	andeq	r7, r1, sl, lsl r5
 1a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 1ac:	011d1000 	tsteq	sp, r0
 1b0:	13010000 	movwne	r0, #4096	; 0x1000
 1b4:	20000010 	andcs	r0, r0, r0, lsl r0
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	30109c01 	andscc	r9, r0, r1, lsl #24
 1c0:	01000001 	tsteq	r0, r1
 1c4:	00000009 	andeq	r0, r0, r9
 1c8:	00000c20 	andeq	r0, r0, r0, lsr #24
 1cc:	009c0100 	addseq	r0, ip, r0, lsl #2
 1d0:	00000201 	andeq	r0, r0, r1, lsl #4
 1d4:	00df0004 	sbcseq	r0, pc, r4
 1d8:	01040000 	mrseq	r0, (UNDEF: 4)
 1dc:	0000007b 	andeq	r0, r0, fp, ror r0
 1e0:	0001960c 	andeq	r9, r1, ip, lsl #12
 1e4:	00005c00 	andeq	r5, r0, r0, lsl #24
 1e8:	00007020 	andeq	r7, r0, r0, lsr #32
 1ec:	0000a800 	andeq	sl, r0, r0, lsl #16
 1f0:	00610200 	rsbeq	r0, r1, r0, lsl #4
 1f4:	02020000 	andeq	r0, r2, #0
 1f8:	00004205 	andeq	r4, r0, r5, lsl #4
 1fc:	00780300 	rsbseq	r0, r8, r0, lsl #6
 200:	00420602 	subeq	r0, r2, r2, lsl #12
 204:	03000000 	movweq	r0, #0
 208:	07020079 	smlsdxeq	r2, r9, r0, r0
 20c:	00000042 	andeq	r0, r0, r2, asr #32
 210:	01040001 	tsteq	r4, r1
 214:	00006d08 	andeq	r6, r0, r8, lsl #26
 218:	01620500 	cmneq	r2, r0, lsl #10
 21c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 220:	00000021 	andeq	r0, r0, r1, lsr #32
 224:	00012602 	andeq	r2, r1, r2, lsl #12
 228:	0b023400 	bleq	8d230 <startup-0x1ff72dd0>
 22c:	00000090 	muleq	r0, r0, r0
 230:	00015806 	andeq	r5, r1, r6, lsl #16
 234:	900c0200 	andls	r0, ip, r0, lsl #4
 238:	00000000 	andeq	r0, r0, r0
 23c:	00000a06 	andeq	r0, r0, r6, lsl #20
 240:	900d0200 	andls	r0, sp, r0, lsl #4
 244:	04000000 	streq	r0, [r0], #-0
 248:	00001006 	andeq	r1, r0, r6
 24c:	900e0200 	andls	r0, lr, r0, lsl #4
 250:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 254:	00787003 	rsbseq	r7, r8, r3
 258:	00970f02 	addseq	r0, r7, r2, lsl #30
 25c:	000c0000 	andeq	r0, ip, r0
 260:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 264:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 268:	00000049 	andeq	r0, r0, r9, asr #32
 26c:	000000a7 	andeq	r0, r0, r7, lsr #1
 270:	0000a709 	andeq	sl, r0, r9, lsl #14
 274:	04001300 	streq	r1, [r0], #-768	; 0xfffffd00
 278:	01450704 	cmpeq	r5, r4, lsl #14
 27c:	14050000 	strne	r0, [r5], #-0
 280:	02000001 	andeq	r0, r0, #1
 284:	00005410 	andeq	r5, r0, r0, lsl r4
 288:	01130500 	tsteq	r3, r0, lsl #10
 28c:	10020000 	andne	r0, r2, r0
 290:	000000c4 	andeq	r0, r0, r4, asr #1
 294:	0054040a 	subseq	r0, r4, sl, lsl #8
 298:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
 29c:	24000001 	strcs	r0, [r0], #-1
 2a0:	01431202 	cmpeq	r3, r2, lsl #4
 2a4:	67030000 	strvs	r0, [r3, -r0]
 2a8:	02006f65 	andeq	r6, r0, #404	; 0x194
 2ac:	0000b913 	andeq	fp, r0, r3, lsl r9
 2b0:	53060000 	movwpl	r0, #24576	; 0x6000
 2b4:	02000001 	andeq	r0, r0, #1
 2b8:	00009014 	andeq	r9, r0, r4, lsl r0
 2bc:	00060400 	andeq	r0, r6, r0, lsl #8
 2c0:	02000000 	andeq	r0, r0, #0
 2c4:	00009014 	andeq	r9, r0, r4, lsl r0
 2c8:	4e060800 	cdpmi	8, 0, cr0, cr6, cr0, {0}
 2cc:	02000001 	andeq	r0, r0, #1
 2d0:	00009015 	andeq	r9, r0, r5, lsl r0
 2d4:	05060c00 	streq	r0, [r6, #-3072]	; 0xfffff400
 2d8:	02000000 	andeq	r0, r0, #0
 2dc:	00009015 	andeq	r9, r0, r5, lsl r0
 2e0:	16061000 	strne	r1, [r6], -r0
 2e4:	02000000 	andeq	r0, r0, #0
 2e8:	00015416 	andeq	r5, r1, r6, lsl r4
 2ec:	36061400 	strcc	r1, [r6], -r0, lsl #8
 2f0:	02000002 	andeq	r0, r0, #2
 2f4:	00015417 	andeq	r5, r1, r7, lsl r4
 2f8:	68061800 	stmdavs	r6, {fp, ip}
 2fc:	02000000 	andeq	r0, r0, #0
 300:	00015418 	andeq	r5, r1, r8, lsl r4
 304:	57061c00 	strpl	r1, [r6, -r0, lsl #24]
 308:	02000000 	andeq	r0, r0, #0
 30c:	00016f19 	andeq	r6, r1, r9, lsl pc
 310:	0b002000 	bleq	8318 <startup-0x1fff7ce8>
 314:	0000014e 	andeq	r0, r0, lr, asr #2
 318:	00014e0c 	andeq	r4, r1, ip, lsl #28
 31c:	040a0000 	streq	r0, [sl], #-0
 320:	000000ca 	andeq	r0, r0, sl, asr #1
 324:	0143040a 	cmpeq	r3, sl, lsl #8
 328:	6f0b0000 	svcvs	0x000b0000
 32c:	0c000001 	stceq	0, cr0, [r0], {1}
 330:	0000014e 	andeq	r0, r0, lr, asr #2
 334:	0000900c 	andeq	r9, r0, ip
 338:	00900c00 	addseq	r0, r0, r0, lsl #24
 33c:	0a000000 	beq	344 <startup-0x1ffffcbc>
 340:	00015a04 	andeq	r5, r1, r4, lsl #20
 344:	013e0500 	teqeq	lr, r0, lsl #10
 348:	1a020000 	bne	80350 <startup-0x1ff7fcb0>
 34c:	000000ca 	andeq	r0, r0, sl, asr #1
 350:	00013d05 	andeq	r3, r1, r5, lsl #26
 354:	4e1a0200 	cdpmi	2, 1, cr0, cr10, cr0, {0}
 358:	0d000001 	stceq	0, cr0, [r0, #-4]
 35c:	00000191 	muleq	r0, r1, r1
 360:	01750503 	cmneq	r5, r3, lsl #10
 364:	cf0d0000 	svcgt	0x000d0000
 368:	04000001 	streq	r0, [r0], #-1
 36c:	00017504 	andeq	r7, r1, r4, lsl #10
 370:	016d0d00 	cmneq	sp, r0, lsl #26
 374:	05040000 	streq	r0, [r4, #-0]
 378:	00000175 	andeq	r0, r0, r5, ror r1
 37c:	0001790e 	andeq	r7, r1, lr, lsl #18
 380:	ae040100 	adfges	f0, f4, f0
 384:	05000000 	streq	r0, [r0, #-0]
 388:	0007f003 	andeq	pc, r7, r3
 38c:	018b0f20 	orreq	r0, fp, r0, lsr #30
 390:	0f010000 	svceq	0x00010000
 394:	08240305 	stmdaeq	r4!, {r0, r2, r8, r9}
 398:	8c102000 	ldchi	0, cr2, [r0], {-0}
 39c:	01000001 	tsteq	r0, r1
 3a0:	00005c1c 	andeq	r5, r0, ip, lsl ip
 3a4:	00007020 	andeq	r7, r0, r0, lsr #32
 3a8:	119c0100 	orrsne	r0, ip, r0, lsl #2
 3ac:	00000187 	andeq	r0, r0, r7, lsl #3
 3b0:	01801c01 	orreq	r1, r0, r1, lsl #24
 3b4:	91020000 	mrsls	r0, (UNDEF: 2)
 3b8:	706c126c 	rsbvc	r1, ip, ip, ror #4
 3bc:	802c0100 	eorhi	r0, ip, r0, lsl #2
 3c0:	02000001 	andeq	r0, r0, #1
 3c4:	72127491 	andsvc	r7, r2, #-1862270976	; 0x91000000
 3c8:	2d010070 	stccs	0, cr0, [r1, #-448]	; 0xfffffe40
 3cc:	00000180 	andeq	r0, r0, r0, lsl #3
 3d0:	00709102 	rsbseq	r9, r0, r2, lsl #2
 3d4:	0002d300 	andeq	sp, r2, r0, lsl #6
 3d8:	d1000400 	tstle	r0, r0, lsl #8
 3dc:	04000001 	streq	r0, [r0], #-1
 3e0:	00007b01 	andeq	r7, r0, r1, lsl #22
 3e4:	025b0c00 	subseq	r0, fp, #0, 24
 3e8:	00cc0000 	sbceq	r0, ip, r0
 3ec:	054c2000 	strbeq	r2, [ip, #-0]
 3f0:	01430000 	mrseq	r0, (UNDEF: 67)
 3f4:	9c020000 	stcls	0, cr0, [r2], {-0}
 3f8:	02000002 	andeq	r0, r0, #2
 3fc:	00002c20 	andeq	r2, r0, r0, lsr #24
 400:	08010300 	stmdaeq	r1, {r8, r9}
 404:	0000006d 	andeq	r0, r0, sp, rrx
 408:	00020e04 	andeq	r0, r2, r4, lsl #28
 40c:	828a0100 	addhi	r0, sl, #0, 2
 410:	96200004 	strtls	r0, [r0], -r4
 414:	01000001 	tsteq	r0, r1
 418:	0000a79c 	muleq	r0, ip, r7
 41c:	00780500 	rsbseq	r0, r8, r0, lsl #10
 420:	002c8a01 	eoreq	r8, ip, r1, lsl #20
 424:	91020000 	mrsls	r0, (UNDEF: 2)
 428:	00790567 	rsbseq	r0, r9, r7, ror #10
 42c:	002c8a01 	eoreq	r8, ip, r1, lsl #20
 430:	91020000 	mrsls	r0, (UNDEF: 2)
 434:	65730566 	ldrbvs	r0, [r3, #-1382]!	; 0xfffffa9a
 438:	8a010074 	bhi	40610 <startup-0x1ffbf9f0>
 43c:	0000002c 	andeq	r0, r0, ip, lsr #32
 440:	06659102 	strbteq	r9, [r5], -r2, lsl #2
 444:	00000297 	muleq	r0, r7, r2
 448:	002c8d01 	eoreq	r8, ip, r1, lsl #26
 44c:	91020000 	mrsls	r0, (UNDEF: 2)
 450:	02b7066f 	adcseq	r0, r7, #116391936	; 0x6f00000
 454:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
 458:	0000002c 	andeq	r0, r0, ip, lsr #32
 45c:	066d9102 	strbteq	r9, [sp], -r2, lsl #2
 460:	00000330 	andeq	r0, r0, r0, lsr r3
 464:	002c9f01 	eoreq	r9, ip, r1, lsl #30
 468:	91020000 	mrsls	r0, (UNDEF: 2)
 46c:	02b2066e 	adcseq	r0, r2, #115343360	; 0x6e00000
 470:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
 474:	0000002c 	andeq	r0, r0, ip, lsr #32
 478:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 47c:	00030f04 	andeq	r0, r3, r4, lsl #30
 480:	2a7f0100 	bcs	1fc0888 <startup-0x1e03f778>
 484:	58200004 	stmdapl	r0!, {r2}
 488:	01000000 	mrseq	r0, (UNDEF: 0)
 48c:	0000ed9c 	muleq	r0, ip, sp
 490:	04300700 	ldrteq	r0, [r0], #-1792	; 0xfffff900
 494:	004a2000 	subeq	r2, sl, r0
 498:	f2060000 	vhadd.s8	d0, d6, d0
 49c:	01000002 	tsteq	r0, r2
 4a0:	0000ed80 	andeq	lr, r0, r0, lsl #27
 4a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 4a8:	00045407 	andeq	r5, r4, r7, lsl #8
 4ac:	00001a20 	andeq	r1, r0, r0, lsr #20
 4b0:	64610800 	strbtvs	r0, [r1], #-2048	; 0xfffff800
 4b4:	83010064 	movwhi	r0, #4196	; 0x1064
 4b8:	000000ed 	andeq	r0, r0, sp, ror #1
 4bc:	00709102 	rsbseq	r9, r0, r2, lsl #2
 4c0:	04090000 	streq	r0, [r9], #-0
 4c4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 4c8:	02f70400 	rscseq	r0, r7, #0, 8
 4cc:	71010000 	mrsvc	r0, (UNDEF: 1)
 4d0:	200003d4 	ldrdcs	r0, [r0], -r4
 4d4:	00000056 	andeq	r0, r0, r6, asr r0
 4d8:	01289c01 			; <UNDEFINED> instruction: 0x01289c01
 4dc:	f00a0000 			; <UNDEFINED> instruction: 0xf00a0000
 4e0:	01000001 	tsteq	r0, r1
 4e4:	0000ed73 	andeq	lr, r0, r3, ror sp
 4e8:	00011a00 	andeq	r1, r1, r0, lsl #20
 4ec:	0c000b00 			; <UNDEFINED> instruction: 0x0c000b00
 4f0:	00000324 	andeq	r0, r0, r4, lsr #6
 4f4:	00ed7501 	rsceq	r7, sp, r1, lsl #10
 4f8:	000b0000 	andeq	r0, fp, r0
 4fc:	01fc0d00 	mvnseq	r0, r0, lsl #26
 500:	6c010000 	stcvs	0, cr0, [r1], {-0}
 504:	0000002c 	andeq	r0, r0, ip, lsr #32
 508:	200003aa 	andcs	r0, r0, sl, lsr #7
 50c:	0000002a 	andeq	r0, r0, sl, lsr #32
 510:	01509c01 	cmpeq	r0, r1, lsl #24
 514:	300e0000 	andcc	r0, lr, r0
 518:	01000003 	tsteq	r0, r3
 51c:	00002c6c 	andeq	r2, r0, ip, ror #24
 520:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 524:	02ca0400 	sbceq	r0, sl, #0, 8
 528:	64010000 	strvs	r0, [r1], #-0
 52c:	20000364 	andcs	r0, r0, r4, ror #6
 530:	00000046 	andeq	r0, r0, r6, asr #32
 534:	01829c01 	orreq	r9, r2, r1, lsl #24
 538:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
 53c:	01000002 	tsteq	r0, r2
 540:	00002c64 	andeq	r2, r0, r4, ror #24
 544:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 548:	0003300e 	andeq	r3, r3, lr
 54c:	2c640100 	stfcse	f0, [r4], #-0
 550:	02000000 	andeq	r0, r0, #0
 554:	04007691 	streq	r7, [r0], #-1681	; 0xfffff96f
 558:	000001da 	ldrdeq	r0, [r0], -sl
 55c:	03245d01 			; <UNDEFINED> instruction: 0x03245d01
 560:	00402000 	subeq	r2, r0, r0
 564:	9c010000 	stcls	0, cr0, [r1], {-0}
 568:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 56c:	0001e80e 	andeq	lr, r1, lr, lsl #16
 570:	2c5d0100 	ldfcse	f0, [sp], {-0}
 574:	02000000 	andeq	r0, r0, #0
 578:	300e7791 	mulcc	lr, r1, r7
 57c:	01000003 	tsteq	r0, r3
 580:	00002c5d 	andeq	r2, r0, sp, asr ip
 584:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 588:	02a40400 	adceq	r0, r4, #0, 8
 58c:	45010000 	strmi	r0, [r1, #-0]
 590:	200002a4 	andcs	r0, r0, r4, lsr #5
 594:	00000080 	andeq	r0, r0, r0, lsl #1
 598:	01f39c01 	mvnseq	r9, r1, lsl #24
 59c:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
 5a0:	01000003 	tsteq	r0, r3
 5a4:	00002c45 	andeq	r2, r0, r5, asr #24
 5a8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5ac:	0003300e 	andeq	r3, r3, lr
 5b0:	2c450100 	stfcse	f0, [r5], {-0}
 5b4:	02000000 	andeq	r0, r0, #0
 5b8:	3c0c7691 	stccc	6, cr7, [ip], {145}	; 0x91
 5bc:	01000002 	tsteq	r0, r2
 5c0:	0000ed20 	andeq	lr, r0, r0, lsr #26
 5c4:	00000b00 	andeq	r0, r0, r0, lsl #22
 5c8:	0002bd0d 	andeq	fp, r2, sp, lsl #26
 5cc:	2c2f0100 	stfcss	f0, [pc], #-0	; 5d4 <startup-0x1ffffa2c>
 5d0:	14000000 	strne	r0, [r0], #-0
 5d4:	90200002 	eorls	r0, r0, r2
 5d8:	01000000 	mrseq	r0, (UNDEF: 0)
 5dc:	0002399c 	muleq	r2, ip, r9
 5e0:	03300e00 	teqeq	r0, #0, 28
 5e4:	2f010000 	svccs	0x00010000
 5e8:	0000002c 	andeq	r0, r0, ip, lsr #32
 5ec:	0a6f9102 	beq	1be49fc <startup-0x1e41b604>
 5f0:	0000023c 	andeq	r0, r0, ip, lsr r2
 5f4:	00ed2001 	rsceq	r2, sp, r1
 5f8:	022b0000 	eoreq	r0, fp, #0
 5fc:	000b0000 	andeq	r0, fp, r0
 600:	00565208 	subseq	r5, r6, r8, lsl #4
 604:	002c3701 	eoreq	r3, ip, r1, lsl #14
 608:	91020000 	mrsls	r0, (UNDEF: 2)
 60c:	48040077 	stmdami	r4, {r0, r1, r2, r4, r5, r6}
 610:	01000002 	tsteq	r0, r2
 614:	0001a21b 	andeq	sl, r1, fp, lsl r2
 618:	00007220 	andeq	r7, r0, r0, lsr #4
 61c:	729c0100 	addsvc	r0, ip, #0, 2
 620:	0a000002 	beq	630 <startup-0x1ffff9d0>
 624:	0000023c 	andeq	r0, r0, ip, lsr r2
 628:	00ed2001 	rsceq	r2, sp, r1
 62c:	025f0000 	subseq	r0, pc, #0
 630:	000b0000 	andeq	r0, fp, r0
 634:	0000180f 	andeq	r1, r0, pc, lsl #16
 638:	00690800 	rsbeq	r0, r9, r0, lsl #16
 63c:	002c2601 	eoreq	r2, ip, r1, lsl #12
 640:	91020000 	mrsls	r0, (UNDEF: 2)
 644:	04000077 	streq	r0, [r0], #-119	; 0xffffff89
 648:	00000214 	andeq	r0, r0, r4, lsl r2
 64c:	01380b01 	teqeq	r8, r1, lsl #22
 650:	006a2000 	rsbeq	r2, sl, r0
 654:	9c010000 	stcls	0, cr0, [r1], {-0}
 658:	00000296 	muleq	r0, r6, r2
 65c:	0003300e 	andeq	r3, r3, lr
 660:	210b0100 	mrscs	r0, (UNDEF: 27)
 664:	02000000 	andeq	r0, r0, #0
 668:	10007791 	mulne	r0, r1, r7
 66c:	00000225 	andeq	r0, r0, r5, lsr #4
 670:	01040701 	tsteq	r4, r1, lsl #14
 674:	00342000 	eorseq	r2, r4, r0
 678:	9c010000 	stcls	0, cr0, [r1], {-0}
 67c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 680:	01007805 	tsteq	r0, r5, lsl #16
 684:	00002107 	andeq	r2, r0, r7, lsl #2
 688:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 68c:	02dd1100 	sbcseq	r1, sp, #0, 2
 690:	03010000 	movweq	r0, #4096	; 0x1000
 694:	200000cc 	andcs	r0, r0, ip, asr #1
 698:	00000038 	andeq	r0, r0, r8, lsr r0
 69c:	78059c01 	stmdavc	r5, {r0, sl, fp, ip, pc}
 6a0:	21030100 	mrscs	r0, (UNDEF: 19)
 6a4:	02000000 	andeq	r0, r0, #0
 6a8:	00007791 	muleq	r0, r1, r7
 6ac:	0000021e 	andeq	r0, r0, lr, lsl r2
 6b0:	02e30004 	rsceq	r0, r3, #4
 6b4:	01040000 	mrseq	r0, (UNDEF: 4)
 6b8:	0000007b 	andeq	r0, r0, fp, ror r0
 6bc:	00034c0c 	andeq	r4, r3, ip, lsl #24
 6c0:	00061800 	andeq	r1, r6, r0, lsl #16
 6c4:	0000dc20 	andeq	sp, r0, r0, lsr #24
 6c8:	00027400 	andeq	r7, r2, r0, lsl #8
 6cc:	00610200 	rsbeq	r0, r1, r0, lsl #4
 6d0:	02020000 	andeq	r0, r2, #0
 6d4:	00004205 	andeq	r4, r0, r5, lsl #4
 6d8:	00780300 	rsbseq	r0, r8, r0, lsl #6
 6dc:	00420602 	subeq	r0, r2, r2, lsl #12
 6e0:	03000000 	movweq	r0, #0
 6e4:	07020079 	smlsdxeq	r2, r9, r0, r0
 6e8:	00000042 	andeq	r0, r0, r2, asr #32
 6ec:	01040001 	tsteq	r4, r1
 6f0:	00006d08 	andeq	r6, r0, r8, lsl #26
 6f4:	01620500 	cmneq	r2, r0, lsl #10
 6f8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 6fc:	00000021 	andeq	r0, r0, r1, lsr #32
 700:	00012602 	andeq	r2, r1, r2, lsl #12
 704:	0b023400 	bleq	8d70c <startup-0x1ff728f4>
 708:	00000090 	muleq	r0, r0, r0
 70c:	00015806 	andeq	r5, r1, r6, lsl #16
 710:	900c0200 	andls	r0, ip, r0, lsl #4
 714:	00000000 	andeq	r0, r0, r0
 718:	00000a06 	andeq	r0, r0, r6, lsl #20
 71c:	900d0200 	andls	r0, sp, r0, lsl #4
 720:	04000000 	streq	r0, [r0], #-0
 724:	00001006 	andeq	r1, r0, r6
 728:	900e0200 	andls	r0, lr, r0, lsl #4
 72c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 730:	00787003 	rsbseq	r7, r8, r3
 734:	00970f02 	addseq	r0, r7, r2, lsl #30
 738:	000c0000 	andeq	r0, ip, r0
 73c:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 740:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 744:	00000049 	andeq	r0, r0, r9, asr #32
 748:	000000a7 	andeq	r0, r0, r7, lsr #1
 74c:	0000a709 	andeq	sl, r0, r9, lsl #14
 750:	04001300 	streq	r1, [r0], #-768	; 0xfffffd00
 754:	01450704 	cmpeq	r5, r4, lsl #14
 758:	13050000 	movwne	r0, #20480	; 0x5000
 75c:	02000001 	andeq	r0, r0, #1
 760:	0000b910 	andeq	fp, r0, r0, lsl r9
 764:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
 768:	02000000 	andeq	r0, r0, #0
 76c:	00000168 	andeq	r0, r0, r8, ror #2
 770:	38120224 	ldmdacc	r2, {r2, r5, r9}
 774:	03000001 	movweq	r0, #1
 778:	006f6567 	rsbeq	r6, pc, r7, ror #10
 77c:	00ae1302 	adceq	r1, lr, r2, lsl #6
 780:	06000000 	streq	r0, [r0], -r0
 784:	00000153 	andeq	r0, r0, r3, asr r1
 788:	00901402 	addseq	r1, r0, r2, lsl #8
 78c:	06040000 	streq	r0, [r4], -r0
 790:	00000000 	andeq	r0, r0, r0
 794:	00901402 	addseq	r1, r0, r2, lsl #8
 798:	06080000 	streq	r0, [r8], -r0
 79c:	0000014e 	andeq	r0, r0, lr, asr #2
 7a0:	00901502 	addseq	r1, r0, r2, lsl #10
 7a4:	060c0000 	streq	r0, [ip], -r0
 7a8:	00000005 	andeq	r0, r0, r5
 7ac:	00901502 	addseq	r1, r0, r2, lsl #10
 7b0:	06100000 	ldreq	r0, [r0], -r0
 7b4:	00000016 	andeq	r0, r0, r6, lsl r0
 7b8:	01491602 	cmpeq	r9, r2, lsl #12
 7bc:	06140000 	ldreq	r0, [r4], -r0
 7c0:	00000236 	andeq	r0, r0, r6, lsr r2
 7c4:	01491702 	cmpeq	r9, r2, lsl #14
 7c8:	06180000 	ldreq	r0, [r8], -r0
 7cc:	00000068 	andeq	r0, r0, r8, rrx
 7d0:	01491802 	cmpeq	r9, r2, lsl #16
 7d4:	061c0000 	ldreq	r0, [ip], -r0
 7d8:	00000057 	andeq	r0, r0, r7, asr r0
 7dc:	01641902 	cmneq	r4, r2, lsl #18
 7e0:	00200000 	eoreq	r0, r0, r0
 7e4:	0001430b 	andeq	r4, r1, fp, lsl #6
 7e8:	01430c00 	cmpeq	r3, r0, lsl #24
 7ec:	0a000000 	beq	7f4 <startup-0x1ffff80c>
 7f0:	0000bf04 	andeq	fp, r0, r4, lsl #30
 7f4:	38040a00 	stmdacc	r4, {r9, fp}
 7f8:	0b000001 	bleq	804 <startup-0x1ffff7fc>
 7fc:	00000164 	andeq	r0, r0, r4, ror #2
 800:	0001430c 	andeq	r4, r1, ip, lsl #6
 804:	00900c00 	addseq	r0, r0, r0, lsl #24
 808:	900c0000 	andls	r0, ip, r0
 80c:	00000000 	andeq	r0, r0, r0
 810:	014f040a 	cmpeq	pc, sl, lsl #8
 814:	3d050000 	stccc	0, cr0, [r5, #-0]
 818:	02000001 	andeq	r0, r0, #1
 81c:	0001431a 	andeq	r4, r1, sl, lsl r3
 820:	033b0d00 	teqeq	fp, #0, 26
 824:	0f010000 	svceq	0x00010000
 828:	200006d4 	ldrdcs	r0, [r0], -r4
 82c:	00000020 	andeq	r0, r0, r0, lsr #32
 830:	01b19c01 			; <UNDEFINED> instruction: 0x01b19c01
 834:	870e0000 	strhi	r0, [lr, -r0]
 838:	01000001 	tsteq	r0, r1
 83c:	00016a0f 	andeq	r6, r1, pc, lsl #20
 840:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 844:	0100780f 	tsteq	r0, pc, lsl #16
 848:	0000900f 	andeq	r9, r0, pc
 84c:	70910200 	addsvc	r0, r1, r0, lsl #4
 850:	0100790f 	tsteq	r0, pc, lsl #18
 854:	0000900f 	andeq	r9, r0, pc
 858:	6c910200 	lfmvs	f0, 4, [r1], {0}
 85c:	03871000 	orreq	r1, r7, #0
 860:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 864:	20000676 	andcs	r0, r0, r6, ror r6
 868:	0000005e 	andeq	r0, r0, lr, asr r0
 86c:	01eb9c01 	mvneq	r9, r1, lsl #24
 870:	870e0000 	strhi	r0, [lr, -r0]
 874:	01000001 	tsteq	r0, r1
 878:	00016a09 	andeq	r6, r1, r9, lsl #20
 87c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 880:	00067e11 	andeq	r7, r6, r1, lsl lr
 884:	00004e20 	andeq	r4, r0, r0, lsr #28
 888:	00691200 	rsbeq	r1, r9, r0, lsl #4
 88c:	00900a01 	addseq	r0, r0, r1, lsl #20
 890:	91020000 	mrsls	r0, (UNDEF: 2)
 894:	13000074 	movwne	r0, #116	; 0x74
 898:	00000394 	muleq	r0, r4, r3
 89c:	06180401 	ldreq	r0, [r8], -r1, lsl #8
 8a0:	005e2000 	subseq	r2, lr, r0
 8a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 8a8:	0001870e 	andeq	r8, r1, lr, lsl #14
 8ac:	6a040100 	bvs	100cb4 <startup-0x1feff34c>
 8b0:	02000001 	andeq	r0, r0, #1
 8b4:	20116c91 	mulscs	r1, r1, ip
 8b8:	4e200006 	cdpmi	0, 2, cr0, cr0, cr6, {0}
 8bc:	12000000 	andne	r0, r0, #0
 8c0:	05010069 	streq	r0, [r1, #-105]	; 0xffffff97
 8c4:	00000090 	muleq	r0, r0, r0
 8c8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 8cc:	008d0000 	addeq	r0, sp, r0
 8d0:	00040000 	andeq	r0, r4, r0
 8d4:	000003f2 	strdeq	r0, [r0], -r2
 8d8:	007b0104 	rsbseq	r0, fp, r4, lsl #2
 8dc:	b90c0000 	stmdblt	ip, {}	; <UNPREDICTABLE>
 8e0:	f4000003 	vst4.8	{d0-d3}, [r0], r3
 8e4:	9a200006 	bls	800904 <startup-0x1f7ff6fc>
 8e8:	15000000 	strne	r0, [r0, #-0]
 8ec:	02000003 	andeq	r0, r0, #3
 8f0:	0000023c 	andeq	r0, r0, ip, lsr r2
 8f4:	077c2001 	ldrbeq	r2, [ip, -r1]!
 8f8:	00122000 	andseq	r2, r2, r0
 8fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 900:	00032403 	andeq	r2, r3, r3, lsl #8
 904:	64180100 	ldrvs	r0, [r8], #-256	; 0xffffff00
 908:	18200007 	stmdane	r0!, {r0, r1, r2}
 90c:	01000000 	mrseq	r0, (UNDEF: 0)
 910:	0000559c 	muleq	r0, ip, r5
 914:	736d0400 	cmnvc	sp, #0, 8
 918:	55180100 	ldrpl	r0, [r8, #-256]	; 0xffffff00
 91c:	02000000 	andeq	r0, r0, #0
 920:	05007491 	streq	r7, [r0, #-1169]	; 0xfffffb6f
 924:	03a00704 	moveq	r0, #4, 14	; 0x100000
 928:	f0030000 			; <UNDEFINED> instruction: 0xf0030000
 92c:	01000001 	tsteq	r0, r1
 930:	0007380f 	andeq	r3, r7, pc, lsl #16
 934:	00002c20 	andeq	r2, r0, r0, lsr #24
 938:	7f9c0100 	svcvc	0x009c0100
 93c:	04000000 	streq	r0, [r0], #-0
 940:	01007375 	tsteq	r0, r5, ror r3
 944:	0000550f 	andeq	r5, r0, pc, lsl #10
 948:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 94c:	03ad0600 			; <UNDEFINED> instruction: 0x03ad0600
 950:	04010000 	streq	r0, [r1], #-0
 954:	200006f4 	strdcs	r0, [r0], -r4
 958:	00000044 	andeq	r0, r0, r4, asr #32
 95c:	e9009c01 	stmdb	r0, {r0, sl, fp, ip, pc}
 960:	04000001 	streq	r0, [r0], #-1
 964:	00046800 	andeq	r6, r4, r0, lsl #16
 968:	7b010400 	blvc	41970 <startup-0x1ffbe690>
 96c:	0c000000 	stceq	0, cr0, [r0], {-0}
 970:	0000040f 	andeq	r0, r0, pc, lsl #8
 974:	20000790 	mulcs	r0, r0, r7
 978:	0000005e 	andeq	r0, r0, lr, asr r0
 97c:	00000399 	muleq	r0, r9, r3
 980:	00006102 	andeq	r6, r0, r2, lsl #2
 984:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
 988:	00000042 	andeq	r0, r0, r2, asr #32
 98c:	02007803 	andeq	r7, r0, #196608	; 0x30000
 990:	00004206 	andeq	r4, r0, r6, lsl #4
 994:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
 998:	42070200 	andmi	r0, r7, #0, 4
 99c:	01000000 	mrseq	r0, (UNDEF: 0)
 9a0:	08010400 	stmdaeq	r1, {sl}
 9a4:	0000006d 	andeq	r0, r0, sp, rrx
 9a8:	00016205 	andeq	r6, r1, r5, lsl #4
 9ac:	21080200 	mrscs	r0, R8_fiq
 9b0:	02000000 	andeq	r0, r0, #0
 9b4:	00000126 	andeq	r0, r0, r6, lsr #2
 9b8:	900b0234 	andls	r0, fp, r4, lsr r2
 9bc:	06000000 	streq	r0, [r0], -r0
 9c0:	00000158 	andeq	r0, r0, r8, asr r1
 9c4:	00900c02 	addseq	r0, r0, r2, lsl #24
 9c8:	06000000 	streq	r0, [r0], -r0
 9cc:	0000000a 	andeq	r0, r0, sl
 9d0:	00900d02 	addseq	r0, r0, r2, lsl #26
 9d4:	06040000 	streq	r0, [r4], -r0
 9d8:	00000010 	andeq	r0, r0, r0, lsl r0
 9dc:	00900e02 	addseq	r0, r0, r2, lsl #28
 9e0:	03080000 	movweq	r0, #32768	; 0x8000
 9e4:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 9e8:	0000970f 	andeq	r9, r0, pc, lsl #14
 9ec:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 9f0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 9f4:	49080074 	stmdbmi	r8, {r2, r4, r5, r6}
 9f8:	a7000000 	strge	r0, [r0, -r0]
 9fc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 a00:	000000a7 	andeq	r0, r0, r7, lsr #1
 a04:	04040013 	streq	r0, [r4], #-19	; 0xffffffed
 a08:	00014507 	andeq	r4, r1, r7, lsl #10
 a0c:	01140500 	tsteq	r4, r0, lsl #10
 a10:	10020000 	andne	r0, r2, r0
 a14:	00000054 	andeq	r0, r0, r4, asr r0
 a18:	00011305 	andeq	r1, r1, r5, lsl #6
 a1c:	c4100200 	ldrgt	r0, [r0], #-512	; 0xfffffe00
 a20:	0a000000 	beq	a28 <startup-0x1ffff5d8>
 a24:	00005404 	andeq	r5, r0, r4, lsl #8
 a28:	01680200 	cmneq	r8, r0, lsl #4
 a2c:	02240000 	eoreq	r0, r4, #0
 a30:	00014312 	andeq	r4, r1, r2, lsl r3
 a34:	65670300 	strbvs	r0, [r7, #-768]!	; 0xfffffd00
 a38:	1302006f 	movwne	r0, #8303	; 0x206f
 a3c:	000000b9 	strheq	r0, [r0], -r9
 a40:	01530600 	cmpeq	r3, r0, lsl #12
 a44:	14020000 	strne	r0, [r2], #-0
 a48:	00000090 	muleq	r0, r0, r0
 a4c:	00000604 	andeq	r0, r0, r4, lsl #12
 a50:	14020000 	strne	r0, [r2], #-0
 a54:	00000090 	muleq	r0, r0, r0
 a58:	014e0608 	cmpeq	lr, r8, lsl #12
 a5c:	15020000 	strne	r0, [r2, #-0]
 a60:	00000090 	muleq	r0, r0, r0
 a64:	0005060c 	andeq	r0, r5, ip, lsl #12
 a68:	15020000 	strne	r0, [r2, #-0]
 a6c:	00000090 	muleq	r0, r0, r0
 a70:	00160610 	andseq	r0, r6, r0, lsl r6
 a74:	16020000 	strne	r0, [r2], -r0
 a78:	00000154 	andeq	r0, r0, r4, asr r1
 a7c:	02360614 	eorseq	r0, r6, #20, 12	; 0x1400000
 a80:	17020000 	strne	r0, [r2, -r0]
 a84:	00000154 	andeq	r0, r0, r4, asr r1
 a88:	00680618 	rsbeq	r0, r8, r8, lsl r6
 a8c:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
 a90:	00000154 	andeq	r0, r0, r4, asr r1
 a94:	0057061c 	subseq	r0, r7, ip, lsl r6
 a98:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
 a9c:	0000016f 	andeq	r0, r0, pc, ror #2
 aa0:	4e0b0020 	cdpmi	0, 0, cr0, cr11, cr0, {1}
 aa4:	0c000001 	stceq	0, cr0, [r0], {1}
 aa8:	0000014e 	andeq	r0, r0, lr, asr #2
 aac:	ca040a00 	bgt	1032b4 <startup-0x1fefcd4c>
 ab0:	0a000000 	beq	ab8 <startup-0x1ffff548>
 ab4:	00014304 	andeq	r4, r1, r4, lsl #6
 ab8:	016f0b00 	cmneq	pc, r0, lsl #22
 abc:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
 ac0:	0c000001 	stceq	0, cr0, [r0], {1}
 ac4:	00000090 	muleq	r0, r0, r0
 ac8:	0000900c 	andeq	r9, r0, ip
 acc:	040a0000 	streq	r0, [sl], #-0
 ad0:	0000015a 	andeq	r0, r0, sl, asr r1
 ad4:	00013e05 	andeq	r3, r1, r5, lsl #28
 ad8:	ca1a0200 	bgt	6812e0 <startup-0x1f97ed20>
 adc:	05000000 	streq	r0, [r0, #-0]
 ae0:	0000013d 	andeq	r0, r0, sp, lsr r1
 ae4:	014e1a02 	cmpeq	lr, r2, lsl #20
 ae8:	cf0d0000 	svcgt	0x000d0000
 aec:	03000001 	movweq	r0, #1
 af0:	00017504 	andeq	r7, r1, r4, lsl #10
 af4:	016d0d00 	cmneq	sp, r0, lsl #26
 af8:	05030000 	streq	r0, [r3, #-0]
 afc:	00000175 	andeq	r0, r0, r5, ror r1
 b00:	0003ff0e 	andeq	pc, r3, lr, lsl #30
 b04:	ae030100 	adfges	f0, f3, f0
 b08:	05000000 	streq	r0, [r0, #-0]
 b0c:	00084803 	andeq	r4, r8, r3, lsl #16
 b10:	018b0f20 	orreq	r0, fp, r0, lsr #30
 b14:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
 b18:	087c0305 	ldmdaeq	ip!, {r0, r2, r8, r9}^
 b1c:	960f2000 	strls	r2, [pc], -r0
 b20:	01000001 	tsteq	r0, r1
 b24:	a0030518 	andge	r0, r3, r8, lsl r5
 b28:	10200008 	eorne	r0, r0, r8
 b2c:	000003f3 	strdeq	r0, [r0], -r3
 b30:	07902201 	ldreq	r2, [r0, r1, lsl #4]
 b34:	005e2000 	subseq	r2, lr, r0
 b38:	9c010000 	stcls	0, cr0, [r1], {-0}
 b3c:	00018711 	andeq	r8, r1, r1, lsl r7
 b40:	80220100 	eorhi	r0, r2, r0, lsl #2
 b44:	02000001 	andeq	r0, r0, #1
 b48:	00007491 	muleq	r0, r1, r4

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03011303 	movweq	r1, #4867	; 0x1303
  20:	3a0b0b0e 	bcc	2c2c60 <startup-0x1fd3d3a0>
  24:	010b3b0b 	tsteq	fp, fp, lsl #22
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	0b381349 	bleq	e04d60 <startup-0x1f1fb2a0>
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	3f13490b 	svccc	0x0013490b
  98:	00193c19 	andseq	r3, r9, r9, lsl ip
  9c:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	01111927 	tsteq	r1, r7, lsr #18
  ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b4:	0f000013 	svceq	0x00000013
  b8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c4:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
  c8:	03193f00 	tsteq	r9, #0, 30
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	1119270b 	tstne	r9, fp, lsl #14
  d4:	40061201 	andmi	r1, r6, r1, lsl #4
  d8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  dc:	01000000 	mrseq	r0, (UNDEF: 0)
  e0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  e4:	0e030b13 	vmoveq.32	d3[0], r0
  e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ec:	00001710 	andeq	r1, r0, r0, lsl r7
  f0:	03011302 	movweq	r1, #4866	; 0x1302
  f4:	3a0b0b0e 	bcc	2c2d34 <startup-0x1fd3d2cc>
  f8:	010b3b0b 	tsteq	fp, fp, lsl #22
  fc:	03000013 	movweq	r0, #19
 100:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 104:	0b3b0b3a 	bleq	ec2df4 <startup-0x1f13d20c>
 108:	0b381349 	bleq	e04e34 <startup-0x1f1fb1cc>
 10c:	24040000 	strcs	r0, [r4], #-0
 110:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 114:	000e030b 	andeq	r0, lr, fp, lsl #6
 118:	00160500 	andseq	r0, r6, r0, lsl #10
 11c:	0b3a0e03 	bleq	e83930 <startup-0x1f17c6d0>
 120:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 124:	0d060000 	stceq	0, cr0, [r6, #-0]
 128:	3a0e0300 	bcc	380d30 <startup-0x1fc7f2d0>
 12c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 130:	000b3813 	andeq	r3, fp, r3, lsl r8
 134:	00240700 	eoreq	r0, r4, r0, lsl #14
 138:	0b3e0b0b 	bleq	f82d6c <startup-0x1f07d294>
 13c:	00000803 	andeq	r0, r0, r3, lsl #16
 140:	49010108 	stmdbmi	r1, {r3, r8}
 144:	00130113 	andseq	r0, r3, r3, lsl r1
 148:	00210900 	eoreq	r0, r1, r0, lsl #18
 14c:	0b2f1349 	bleq	bc4e78 <startup-0x1f43b188>
 150:	0f0a0000 	svceq	0x000a0000
 154:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 158:	0b000013 	bleq	1ac <startup-0x1ffffe54>
 15c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 160:	00001301 	andeq	r1, r0, r1, lsl #6
 164:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 168:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 16c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 170:	0b3b0b3a 	bleq	ec2e60 <startup-0x1f13d1a0>
 174:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 178:	0000193c 	andeq	r1, r0, ip, lsr r9
 17c:	0300340e 	movweq	r3, #1038	; 0x40e
 180:	3b0b3a0e 	blcc	2ce9c0 <startup-0x1fd31640>
 184:	3f13490b 	svccc	0x0013490b
 188:	00180219 	andseq	r0, r8, r9, lsl r2
 18c:	00340f00 	eorseq	r0, r4, r0, lsl #30
 190:	0b3a1347 	bleq	e84eb4 <startup-0x1f17b14c>
 194:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 198:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 19c:	03193f01 	tsteq	r9, #1, 30
 1a0:	3b0b3a0e 	blcc	2ce9e0 <startup-0x1fd31620>
 1a4:	1119270b 	tstne	r9, fp, lsl #14
 1a8:	40061201 	andmi	r1, r6, r1, lsl #4
 1ac:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1b0:	05110000 	ldreq	r0, [r1, #-0]
 1b4:	3a0e0300 	bcc	380dbc <startup-0x1fc7f244>
 1b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1bc:	00180213 	andseq	r0, r8, r3, lsl r2
 1c0:	00341200 	eorseq	r1, r4, r0, lsl #4
 1c4:	0b3a0803 	bleq	e821d8 <startup-0x1f17de28>
 1c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1cc:	00001802 	andeq	r1, r0, r2, lsl #16
 1d0:	01110100 	tsteq	r1, r0, lsl #2
 1d4:	0b130e25 	bleq	4c3a70 <startup-0x1fb3c590>
 1d8:	01110e03 	tsteq	r1, r3, lsl #28
 1dc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 1e0:	16020000 	strne	r0, [r2], -r0
 1e4:	3a0e0300 	bcc	380dec <startup-0x1fc7f214>
 1e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1ec:	03000013 	movweq	r0, #19
 1f0:	0b0b0024 	bleq	2c0288 <startup-0x1fd3fd78>
 1f4:	0e030b3e 	vmoveq.16	d3[0], r0
 1f8:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 1fc:	03193f01 	tsteq	r9, #1, 30
 200:	3b0b3a0e 	blcc	2cea40 <startup-0x1fd315c0>
 204:	1119270b 	tstne	r9, fp, lsl #14
 208:	40061201 	andmi	r1, r6, r1, lsl #4
 20c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 210:	00001301 	andeq	r1, r0, r1, lsl #6
 214:	03000505 	movweq	r0, #1285	; 0x505
 218:	3b0b3a08 	blcc	2cea40 <startup-0x1fd315c0>
 21c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 220:	06000018 			; <UNDEFINED> instruction: 0x06000018
 224:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 228:	0b3b0b3a 	bleq	ec2f18 <startup-0x1f13d0e8>
 22c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 230:	0b070000 	bleq	1c0238 <startup-0x1fe3fdc8>
 234:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 238:	08000006 	stmdaeq	r0, {r1, r2}
 23c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 240:	0b3b0b3a 	bleq	ec2f30 <startup-0x1f13d0d0>
 244:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 248:	24090000 	strcs	r0, [r9], #-0
 24c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 250:	0008030b 	andeq	r0, r8, fp, lsl #6
 254:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 258:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 25c:	0b3b0b3a 	bleq	ec2f4c <startup-0x1f13d0b4>
 260:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 264:	00001301 	andeq	r1, r0, r1, lsl #6
 268:	0000180b 	andeq	r1, r0, fp, lsl #16
 26c:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
 270:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 274:	0b3b0b3a 	bleq	ec2f64 <startup-0x1f13d09c>
 278:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 27c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 280:	03193f01 	tsteq	r9, #1, 30
 284:	3b0b3a0e 	blcc	2ceac4 <startup-0x1fd3153c>
 288:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 28c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 290:	96184006 	ldrls	r4, [r8], -r6
 294:	13011942 	movwne	r1, #6466	; 0x1942
 298:	050e0000 	streq	r0, [lr, #-0]
 29c:	3a0e0300 	bcc	380ea4 <startup-0x1fc7f15c>
 2a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2a4:	00180213 	andseq	r0, r8, r3, lsl r2
 2a8:	010b0f00 	tsteq	fp, r0, lsl #30
 2ac:	00001755 	andeq	r1, r0, r5, asr r7
 2b0:	3f012e10 	svccc	0x00012e10
 2b4:	3a0e0319 	bcc	380f20 <startup-0x1fc7f0e0>
 2b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2bc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2c0:	97184006 	ldrls	r4, [r8, -r6]
 2c4:	13011942 	movwne	r1, #6466	; 0x1942
 2c8:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 2cc:	03193f01 	tsteq	r9, #1, 30
 2d0:	3b0b3a0e 	blcc	2ceb10 <startup-0x1fd314f0>
 2d4:	1119270b 	tstne	r9, fp, lsl #14
 2d8:	40061201 	andmi	r1, r6, r1, lsl #4
 2dc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2e0:	01000000 	mrseq	r0, (UNDEF: 0)
 2e4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2e8:	0e030b13 	vmoveq.32	d3[0], r0
 2ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f0:	00001710 	andeq	r1, r0, r0, lsl r7
 2f4:	03011302 	movweq	r1, #4866	; 0x1302
 2f8:	3a0b0b0e 	bcc	2c2f38 <startup-0x1fd3d0c8>
 2fc:	010b3b0b 	tsteq	fp, fp, lsl #22
 300:	03000013 	movweq	r0, #19
 304:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 308:	0b3b0b3a 	bleq	ec2ff8 <startup-0x1f13d008>
 30c:	0b381349 	bleq	e05038 <startup-0x1f1fafc8>
 310:	24040000 	strcs	r0, [r4], #-0
 314:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 318:	000e030b 	andeq	r0, lr, fp, lsl #6
 31c:	00160500 	andseq	r0, r6, r0, lsl #10
 320:	0b3a0e03 	bleq	e83b34 <startup-0x1f17c4cc>
 324:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 328:	0d060000 	stceq	0, cr0, [r6, #-0]
 32c:	3a0e0300 	bcc	380f34 <startup-0x1fc7f0cc>
 330:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 334:	000b3813 	andeq	r3, fp, r3, lsl r8
 338:	00240700 	eoreq	r0, r4, r0, lsl #14
 33c:	0b3e0b0b 	bleq	f82f70 <startup-0x1f07d090>
 340:	00000803 	andeq	r0, r0, r3, lsl #16
 344:	49010108 	stmdbmi	r1, {r3, r8}
 348:	00130113 	andseq	r0, r3, r3, lsl r1
 34c:	00210900 	eoreq	r0, r1, r0, lsl #18
 350:	0b2f1349 	bleq	bc507c <startup-0x1f43af84>
 354:	0f0a0000 	svceq	0x000a0000
 358:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 35c:	0b000013 	bleq	3b0 <startup-0x1ffffc50>
 360:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 364:	00001301 	andeq	r1, r0, r1, lsl #6
 368:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 36c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 370:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 374:	0b3a0e03 	bleq	e83b88 <startup-0x1f17c478>
 378:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 37c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 380:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 384:	00130119 	andseq	r0, r3, r9, lsl r1
 388:	00050e00 	andeq	r0, r5, r0, lsl #28
 38c:	0b3a0e03 	bleq	e83ba0 <startup-0x1f17c460>
 390:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 394:	00001802 	andeq	r1, r0, r2, lsl #16
 398:	0300050f 	movweq	r0, #1295	; 0x50f
 39c:	3b0b3a08 	blcc	2cebc4 <startup-0x1fd3143c>
 3a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 3a4:	10000018 	andne	r0, r0, r8, lsl r0
 3a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3ac:	0b3a0e03 	bleq	e83bc0 <startup-0x1f17c440>
 3b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3b8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3bc:	00130119 	andseq	r0, r3, r9, lsl r1
 3c0:	010b1100 	mrseq	r1, (UNDEF: 27)
 3c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3c8:	34120000 	ldrcc	r0, [r2], #-0
 3cc:	3a080300 	bcc	200fd4 <startup-0x1fdff02c>
 3d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3d4:	00180213 	andseq	r0, r8, r3, lsl r2
 3d8:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 3dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3e0:	0b3b0b3a 	bleq	ec30d0 <startup-0x1f13cf30>
 3e4:	01111927 	tsteq	r1, r7, lsr #18
 3e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3ec:	00194296 	mulseq	r9, r6, r2
 3f0:	11010000 	mrsne	r0, (UNDEF: 1)
 3f4:	130e2501 	movwne	r2, #58625	; 0xe501
 3f8:	110e030b 	tstne	lr, fp, lsl #6
 3fc:	10061201 	andne	r1, r6, r1, lsl #4
 400:	02000017 	andeq	r0, r0, #23
 404:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 408:	0b3a0e03 	bleq	e83c1c <startup-0x1f17c3e4>
 40c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 410:	06120111 			; <UNDEFINED> instruction: 0x06120111
 414:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 418:	03000019 	movweq	r0, #25
 41c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 420:	0b3a0e03 	bleq	e83c34 <startup-0x1f17c3cc>
 424:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 428:	06120111 			; <UNDEFINED> instruction: 0x06120111
 42c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 430:	00130119 	andseq	r0, r3, r9, lsl r1
 434:	00050400 	andeq	r0, r5, r0, lsl #8
 438:	0b3a0803 	bleq	e8244c <startup-0x1f17dbb4>
 43c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 440:	00001802 	andeq	r1, r0, r2, lsl #16
 444:	0b002405 	bleq	9460 <startup-0x1fff6ba0>
 448:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 44c:	0600000e 	streq	r0, [r0], -lr
 450:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 454:	0b3a0e03 	bleq	e83c68 <startup-0x1f17c398>
 458:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 45c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 460:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 464:	00000019 	andeq	r0, r0, r9, lsl r0
 468:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 46c:	030b130e 	movweq	r1, #45838	; 0xb30e
 470:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 474:	00171006 	andseq	r1, r7, r6
 478:	01130200 	tsteq	r3, r0, lsl #4
 47c:	0b0b0e03 	bleq	2c3c90 <startup-0x1fd3c370>
 480:	0b3b0b3a 	bleq	ec3170 <startup-0x1f13ce90>
 484:	00001301 	andeq	r1, r0, r1, lsl #6
 488:	03000d03 	movweq	r0, #3331	; 0xd03
 48c:	3b0b3a08 	blcc	2cecb4 <startup-0x1fd3134c>
 490:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 494:	0400000b 	streq	r0, [r0], #-11
 498:	0b0b0024 	bleq	2c0530 <startup-0x1fd3fad0>
 49c:	0e030b3e 	vmoveq.16	d3[0], r0
 4a0:	16050000 	strne	r0, [r5], -r0
 4a4:	3a0e0300 	bcc	3810ac <startup-0x1fc7ef54>
 4a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4ac:	06000013 			; <UNDEFINED> instruction: 0x06000013
 4b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 4b4:	0b3b0b3a 	bleq	ec31a4 <startup-0x1f13ce5c>
 4b8:	0b381349 	bleq	e051e4 <startup-0x1f1fae1c>
 4bc:	24070000 	strcs	r0, [r7], #-0
 4c0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4c4:	0008030b 	andeq	r0, r8, fp, lsl #6
 4c8:	01010800 	tsteq	r1, r0, lsl #16
 4cc:	13011349 	movwne	r1, #4937	; 0x1349
 4d0:	21090000 	mrscs	r0, (UNDEF: 9)
 4d4:	2f134900 	svccs	0x00134900
 4d8:	0a00000b 	beq	50c <startup-0x1ffffaf4>
 4dc:	0b0b000f 	bleq	2c0520 <startup-0x1fd3fae0>
 4e0:	00001349 	andeq	r1, r0, r9, asr #6
 4e4:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 4e8:	00130119 	andseq	r0, r3, r9, lsl r1
 4ec:	00050c00 	andeq	r0, r5, r0, lsl #24
 4f0:	00001349 	andeq	r1, r0, r9, asr #6
 4f4:	0300340d 	movweq	r3, #1037	; 0x40d
 4f8:	3b0b3a0e 	blcc	2ced38 <startup-0x1fd312c8>
 4fc:	3f13490b 	svccc	0x0013490b
 500:	00193c19 	andseq	r3, r9, r9, lsl ip
 504:	00340e00 	eorseq	r0, r4, r0, lsl #28
 508:	0b3a0e03 	bleq	e83d1c <startup-0x1f17c2e4>
 50c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 510:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 514:	340f0000 	strcc	r0, [pc], #-0	; 51c <startup-0x1ffffae4>
 518:	3a134700 	bcc	4d2120 <startup-0x1fb2dee0>
 51c:	020b3b0b 	andeq	r3, fp, #11264	; 0x2c00
 520:	10000018 	andne	r0, r0, r8, lsl r0
 524:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 528:	0b3a0e03 	bleq	e83d3c <startup-0x1f17c2c4>
 52c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 530:	06120111 			; <UNDEFINED> instruction: 0x06120111
 534:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 538:	11000019 	tstne	r0, r9, lsl r0
 53c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 540:	0b3b0b3a 	bleq	ec3230 <startup-0x1f13cdd0>
 544:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 548:	Address 0x00000548 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000004c 	andeq	r0, r0, ip, asr #32
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	01d00002 	bicseq	r0, r0, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000005c 	andcs	r0, r0, ip, asr r0
  3c:	00000070 	andeq	r0, r0, r0, ror r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	03d50002 	bicseq	r0, r5, #2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000cc 	andcs	r0, r0, ip, asr #1
  5c:	0000054c 	andeq	r0, r0, ip, asr #10
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	06ac0002 	strteq	r0, [ip], r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000618 	andcs	r0, r0, r8, lsl r6
  7c:	000000dc 	ldrdeq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	08ce0002 	stmiaeq	lr, {r1}^
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200006f4 	strdcs	r0, [r0], -r4
  9c:	0000009a 	muleq	r0, sl, r0
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	095f0002 	ldmdbeq	pc, {r1}^	; <UNPREDICTABLE>
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000790 	mulcs	r0, r0, r7
  bc:	0000005e 	andeq	r0, r0, lr, asr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000005c 	andcs	r0, r0, ip, asr r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
  18:	000000f8 	strdeq	r0, [r0], -r8
  1c:	00000120 	andeq	r0, r0, r0, lsr #2
  20:	00000122 	andeq	r0, r0, r2, lsr #2
  24:	00000124 	andeq	r0, r0, r4, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000a4 	andeq	r0, r0, r4, lsr #1
   4:	00680002 	rsbeq	r0, r8, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  44:	5f6c6165 	svcpl	0x006c6165
  48:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  4c:	74730000 	ldrbtvc	r0, [r3], #-0
  50:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  54:	00632e70 	rsbeq	r2, r3, r0, ror lr
  58:	6f000001 	svcvs	0x00000001
  5c:	63656a62 	cmnvs	r5, #401408	; 0x62000
  60:	00682e74 	rsbeq	r2, r8, r4, ror lr
  64:	62000001 	andvs	r0, r0, #1
  68:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
  6c:	00010068 	andeq	r0, r1, r8, rrx
  70:	05000000 	streq	r0, [r0, #-0]
  74:	00000002 	andeq	r0, r0, r2
  78:	01090320 	tsteq	r9, r0, lsr #6
  7c:	03025e13 	movweq	r5, #11795	; 0x2e13
  80:	00010100 	andeq	r0, r1, r0, lsl #2
  84:	00100205 	andseq	r0, r0, r5, lsl #4
  88:	12032000 	andne	r2, r3, #0
  8c:	783d2f01 	ldmdavc	sp!, {r0, r8, r9, sl, fp, sp}
  90:	332f2f3d 			; <UNDEFINED> instruction: 0x332f2f3d
  94:	01040200 	mrseq	r0, R12_usr
  98:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
  9c:	02005901 	andeq	r5, r0, #16384	; 0x4000
  a0:	023b0104 	eorseq	r0, fp, #4, 2
  a4:	01010003 	tsteq	r1, r3
  a8:	00000097 	muleq	r0, r7, r0
  ac:	00710002 	rsbseq	r0, r1, r2
  b0:	01020000 	mrseq	r0, (UNDEF: 2)
  b4:	000d0efb 	strdeq	r0, [sp], -fp
  b8:	01010101 	tsteq	r1, r1, lsl #2
  bc:	01000000 	mrseq	r0, (UNDEF: 0)
  c0:	43010000 	movwmi	r0, #4096	; 0x1000
  c4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  c8:	2f737265 	svccs	0x00737265
  cc:	706d6148 	rsbvc	r6, sp, r8, asr #2
  d0:	442f7375 	strtmi	r7, [pc], #-885	; d8 <startup-0x1fffff28>
  d4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  d8:	442f706f 	strtmi	r7, [pc], #-111	; e0 <startup-0x1fffff20>
  dc:	31305441 	teqcc	r0, r1, asr #8
  e0:	6f432f37 	svcvs	0x00432f37
  e4:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  e8:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  ec:	5f6c6165 	svcpl	0x006c6165
  f0:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  f4:	61620000 	cmnvs	r2, r0
  f8:	632e6c6c 			; <UNDEFINED> instruction: 0x632e6c6c
  fc:	00000100 	andeq	r0, r0, r0, lsl #2
 100:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 104:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 108:	00000100 	andeq	r0, r0, r0, lsl #2
 10c:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 110:	0100682e 	tsteq	r0, lr, lsr #16
 114:	61700000 	cmnvs	r0, r0
 118:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 11c:	0100682e 	tsteq	r0, lr, lsr #16
 120:	00000000 	andeq	r0, r0, r0
 124:	005c0205 	subseq	r0, ip, r5, lsl #4
 128:	1b032000 	blne	c8130 <startup-0x1ff37ed0>
 12c:	754c4b01 	strbvc	r4, [ip, #-2817]	; 0xfffff4ff
 130:	04020077 	streq	r0, [r2], #-119	; 0xffffff89
 134:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 138:	312f604b 			; <UNDEFINED> instruction: 0x312f604b
 13c:	08025952 	stmdaeq	r2, {r1, r4, r6, r8, fp, ip, lr}
 140:	2d010100 	stfcss	f0, [r1, #-0]
 144:	02000001 	andeq	r0, r0, #1
 148:	00005f00 	andeq	r5, r0, r0, lsl #30
 14c:	fb010200 	blx	40956 <startup-0x1ffbf6aa>
 150:	01000d0e 	tsteq	r0, lr, lsl #26
 154:	00010101 	andeq	r0, r1, r1, lsl #2
 158:	00010000 	andeq	r0, r1, r0
 15c:	3a430100 	bcc	10c0564 <startup-0x1ef3fa9c>
 160:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 164:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 168:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 16c:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 170:	6f746b73 	svcvs	0x00746b73
 174:	41442f70 	hvcmi	17136	; 0x42f0
 178:	37313054 			; <UNDEFINED> instruction: 0x37313054
 17c:	646f432f 	strbtvs	r4, [pc], #-815	; 184 <startup-0x1ffffe7c>
 180:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 184:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 188:	705f6c61 	subsvc	r6, pc, r1, ror #24
 18c:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 190:	61726700 	cmnvs	r2, r0, lsl #14
 194:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 198:	0100632e 	tsteq	r0, lr, lsr #6
 19c:	72670000 	rsbvc	r0, r7, #0
 1a0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1a4:	00682e63 	rsbeq	r2, r8, r3, ror #28
 1a8:	00000001 	andeq	r0, r0, r1
 1ac:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
 1b0:	14200000 	strtne	r0, [r0], #-0
 1b4:	6776e567 	ldrbvs	lr, [r6, -r7, ror #10]!
 1b8:	4b6768d7 	blmi	19da51c <startup-0x1e625ae4>
 1bc:	3c0b033d 	stccc	3, cr0, [fp], {61}	; 0x3d
 1c0:	4b207603 	blmi	81d9d4 <startup-0x1f7e262c>
 1c4:	7903443d 	stmdbvc	r3, {r0, r2, r3, r4, r5, sl, lr}
 1c8:	413d4b20 	teqmi	sp, r0, lsr #22
 1cc:	3e3d4b1c 	vmovcc.32	r4, d13[1]
 1d0:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
 1d4:	3d303d3d 	ldccc	13, cr3, [r0, #-244]!	; 0xffffff0c
 1d8:	4b2f3d2f 	blmi	bcf69c <startup-0x1f430964>
 1dc:	27667a03 	strbcs	r7, [r6, -r3, lsl #20]!
 1e0:	bc3d3d23 	ldclt	13, cr3, [sp], #-140	; 0xffffff74
 1e4:	3d3d3d67 	ldccc	13, cr3, [sp, #-412]!	; 0xfffffe64
 1e8:	2f3d2f59 	svccs	0x003d2f59
 1ec:	4b3d3d59 	blmi	f4f758 <startup-0x1f0b08a8>
 1f0:	3d4b303d 	stclcc	0, cr3, [fp, #-244]	; 0xffffff0c
 1f4:	91ca3d30 	bicls	r3, sl, r0, lsr sp
 1f8:	3d2f594b 			; <UNDEFINED> instruction: 0x3d2f594b
 1fc:	3d593f2f 	ldclcc	15, cr3, [r9, #-188]	; 0xffffff44
 200:	313d5931 	teqcc	sp, r1, lsr r9
 204:	763d3d3d 			; <UNDEFINED> instruction: 0x763d3d3d
 208:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 20c:	3d914c83 	ldccc	12, cr4, [r1, #524]	; 0x20c
 210:	833d3d59 	teqhi	sp, #5696	; 0x1640
 214:	6759674c 	ldrbvs	r6, [r9, -ip, asr #14]
 218:	3d3d2f4c 	ldccc	15, cr2, [sp, #-304]!	; 0xfffffed0
 21c:	4b3d3d3d 	blmi	f4f718 <startup-0x1f0b08e8>
 220:	4b4b4b4b 	blmi	12d2f54 <startup-0x1ed2d0ac>
 224:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
 228:	02004bad 	andeq	r4, r0, #177152	; 0x2b400
 22c:	003d0304 	eorseq	r0, sp, r4, lsl #6
 230:	49030402 	stmdbmi	r3, {r1, sl}
 234:	01040200 	mrseq	r0, R12_usr
 238:	02003c06 	andeq	r3, r0, #1536	; 0x600
 23c:	39060204 	stmdbcc	r6, {r2, r9}
 240:	01040200 	mrseq	r0, R12_usr
 244:	43063c06 	movwmi	r3, #27654	; 0x6c06
 248:	0200e64d 	andeq	lr, r0, #80740352	; 0x4d00000
 24c:	66060104 	strvs	r0, [r6], -r4, lsl #2
 250:	ad685a06 	vstmdbge	r8!, {s11-s16}
 254:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 258:	5b595959 	blpl	16567c4 <startup-0x1e9a983c>
 25c:	4b4b784b 	blmi	12de390 <startup-0x1ed21c70>
 260:	d7bb4d68 	ldrle	r4, [fp, r8, ror #26]!
 264:	ae4bbc9f 	mcrge	12, 2, fp, cr11, cr15, {4}
 268:	ac5a03a1 	mrrcge	3, 10, r0, sl, cr1
 26c:	02202803 	eoreq	r2, r0, #196608	; 0x30000
 270:	01010006 	tsteq	r1, r6
 274:	0000009d 	muleq	r0, sp, r0
 278:	005d0002 	subseq	r0, sp, r2
 27c:	01020000 	mrseq	r0, (UNDEF: 2)
 280:	000d0efb 	strdeq	r0, [sp], -fp
 284:	01010101 	tsteq	r1, r1, lsl #2
 288:	01000000 	mrseq	r0, (UNDEF: 0)
 28c:	43010000 	movwmi	r0, #4096	; 0x1000
 290:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 294:	2f737265 	svccs	0x00737265
 298:	706d6148 	rsbvc	r6, sp, r8, asr #2
 29c:	442f7375 	strtmi	r7, [pc], #-885	; 2a4 <startup-0x1ffffd5c>
 2a0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 2a4:	442f706f 	strtmi	r7, [pc], #-111	; 2ac <startup-0x1ffffd54>
 2a8:	31305441 	teqcc	r0, r1, asr #8
 2ac:	6f432f37 	svcvs	0x00432f37
 2b0:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 2b4:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 2b8:	5f6c6165 	svcpl	0x006c6165
 2bc:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 2c0:	626f0000 	rsbvs	r0, pc, #0
 2c4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2c8:	0100632e 	tsteq	r0, lr, lsr #6
 2cc:	626f0000 	rsbvs	r0, pc, #0
 2d0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2d4:	0100682e 	tsteq	r0, lr, lsr #16
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	06180205 	ldreq	r0, [r8], -r5, lsl #4
 2e0:	4b152000 	blmi	5482e8 <startup-0x1fab7d18>
 2e4:	03040200 	movweq	r0, #16896	; 0x4200
 2e8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 2ec:	00c70803 	sbceq	r0, r7, r3, lsl #16
 2f0:	06010402 	streq	r0, [r1], -r2, lsl #8
 2f4:	4b3f063c 	blmi	fc1bec <startup-0x1f03e414>
 2f8:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2fc:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 300:	c7080304 	strgt	r0, [r8, -r4, lsl #6]
 304:	01040200 	mrseq	r0, R12_usr
 308:	3f063c06 	svccc	0x00063c06
 30c:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 310:	01000402 	tsteq	r0, r2, lsl #8
 314:	00008001 	andeq	r8, r0, r1
 318:	50000200 	andpl	r0, r0, r0, lsl #4
 31c:	02000000 	andeq	r0, r0, #0
 320:	0d0efb01 	vstreq	d15, [lr, #-4]
 324:	01010100 	mrseq	r0, (UNDEF: 17)
 328:	00000001 	andeq	r0, r0, r1
 32c:	01000001 	tsteq	r0, r1
 330:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff8f5 <rightPaddle+0xdffff055>
 334:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 338:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 33c:	2f737570 	svccs	0x00737570
 340:	6b736544 	blvs	1cd9858 <startup-0x1e3267a8>
 344:	2f706f74 	svccs	0x00706f74
 348:	30544144 	subscc	r4, r4, r4, asr #2
 34c:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 350:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 354:	2f657469 	svccs	0x00657469
 358:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 35c:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 360:	74000067 	strvc	r0, [r0], #-103	; 0xffffff99
 364:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 368:	0100632e 	tsteq	r0, lr, lsr #6
 36c:	00000000 	andeq	r0, r0, r0
 370:	06f40205 	ldrbteq	r0, [r4], r5, lsl #4
 374:	2f152000 	svccs	0x00152000
 378:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 37c:	01040200 	mrseq	r0, R12_usr
 380:	69062006 	stmdbvs	r6, {r1, r2, sp}
 384:	214ba03d 	cmpcs	fp, sp, lsr r0
 388:	2a2f2f2f 	bcs	bcc04c <startup-0x1f433fb4>
 38c:	4e4c4c5e 	mcrmi	12, 2, r4, cr12, cr14, {2}
 390:	2f2f2f4c 	svccs	0x002f2f4c
 394:	01000302 	tsteq	r0, r2, lsl #6
 398:	00008601 	andeq	r8, r0, r1, lsl #12
 39c:	69000200 	stmdbvs	r0, {r9}
 3a0:	02000000 	andeq	r0, r0, #0
 3a4:	0d0efb01 	vstreq	d15, [lr, #-4]
 3a8:	01010100 	mrseq	r0, (UNDEF: 17)
 3ac:	00000001 	andeq	r0, r0, r1
 3b0:	01000001 	tsteq	r0, r1
 3b4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff979 <rightPaddle+0xdffff0d9>
 3b8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3bc:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 3c0:	2f737570 	svccs	0x00737570
 3c4:	6b736544 	blvs	1cd98dc <startup-0x1e326724>
 3c8:	2f706f74 	svccs	0x00706f74
 3cc:	30544144 	subscc	r4, r4, r4, asr #2
 3d0:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 3d4:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 3d8:	2f657469 	svccs	0x00657469
 3dc:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 3e0:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 3e4:	70000067 	andvc	r0, r0, r7, rrx
 3e8:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 3ec:	00632e65 	rsbeq	r2, r3, r5, ror #28
 3f0:	6f000001 	svcvs	0x00000001
 3f4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 3f8:	00682e74 	rsbeq	r2, r8, r4, ror lr
 3fc:	70000001 	andvc	r0, r0, r1
 400:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 404:	00682e65 	rsbeq	r2, r8, r5, ror #28
 408:	00000001 	andeq	r0, r0, r1
 40c:	90020500 	andls	r0, r2, r0, lsl #10
 410:	03200007 			; <UNDEFINED> instruction: 0x03200007
 414:	4d4b0121 	stfmie	f0, [fp, #-132]	; 0xffffff7c
 418:	834b4b77 	movthi	r4, #47991	; 0xbb77
 41c:	04025977 	streq	r5, [r2], #-2423	; 0xfffff689
 420:	Address 0x00000420 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	59726964 	ldmdbpl	r2!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	736f7000 	cmnvc	pc, #0
   8:	69730059 	ldmdbvs	r3!, {r0, r3, r4, r6}^
   c:	0058657a 	subseq	r6, r8, sl, ror r5
  10:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  14:	72640059 	rsbvc	r0, r4, #89	; 0x59
  18:	43007761 	movwmi	r7, #1889	; 0x761
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  44:	5f6c6165 	svcpl	0x006c6165
  48:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  4c:	6174732f 	cmnvs	r4, pc, lsr #6
  50:	70757472 	rsbsvc	r7, r5, r2, ror r4
  54:	7300632e 	movwvc	r6, #814	; 0x32e
  58:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
  5c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  60:	6f507400 	svcvs	0x00507400
  64:	00746e69 	rsbseq	r6, r4, r9, ror #28
  68:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  6c:	736e7500 	cmnvc	lr, #0, 10
  70:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  74:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  78:	47007261 	strmi	r7, [r0, -r1, ror #4]
  7c:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  80:	36203939 			; <UNDEFINED> instruction: 0x36203939
  84:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  88:	31303220 	teqcc	r0, r0, lsr #4
  8c:	31323037 	teqcc	r2, r7, lsr r0
  90:	72282035 	eorvc	r2, r8, #53	; 0x35
  94:	61656c65 	cmnvs	r5, r5, ror #24
  98:	20296573 	eorcs	r6, r9, r3, ror r5
  9c:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  a0:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  a4:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  a8:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  ac:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  b0:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  b4:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  b8:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  bc:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  c0:	205d3231 	subscs	r3, sp, r1, lsr r2
  c4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  c8:	20626d75 	rsbcs	r6, r2, r5, ror sp
  cc:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  d0:	613d6863 	teqvs	sp, r3, ror #16
  d4:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  d8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  dc:	6f6c666d 	svcvs	0x006c666d
  e0:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  e4:	733d6962 	teqvc	sp, #1605632	; 0x188000
  e8:	2074666f 	rsbscs	r6, r4, pc, ror #12
  ec:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  f0:	20626d75 	rsbcs	r6, r2, r5, ror sp
  f4:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  f8:	613d6863 	teqvs	sp, r3, ror #16
  fc:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 100:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 104:	4f2d2067 	svcmi	0x002d2067
 108:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 10c:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 110:	50003939 	andpl	r3, r0, r9, lsr r9
 114:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; 0 <startup-0x20000000>
 118:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 11c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 120:	70615f74 	rsbvc	r5, r1, r4, ror pc
 124:	47740070 			; <UNDEFINED> instruction: 0x47740070
 128:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 12c:	00797274 	rsbseq	r7, r9, r4, ror r2
 130:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 134:	00707574 	rsbseq	r7, r0, r4, ror r5
 138:	6e69616d 	powvsez	f6, f1, #5.0
 13c:	424f5000 	submi	r5, pc, #0
 140:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 144:	7a697300 	bvc	1a5cd4c <startup-0x1e5a32b4>
 148:	70797465 	rsbsvc	r7, r9, r5, ror #8
 14c:	6f700065 	svcvs	0x00700065
 150:	64005873 	strvs	r5, [r0], #-2163	; 0xfffff78d
 154:	00587269 	subseq	r7, r8, r9, ror #4
 158:	506d756e 	rsbpl	r7, sp, lr, ror #10
 15c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 160:	4f500073 	svcmi	0x00500073
 164:	00544e49 	subseq	r4, r4, r9, asr #28
 168:	6a624f74 	bvs	1893f40 <startup-0x1e76c0c0>
 16c:	67697200 	strbvs	r7, [r9, -r0, lsl #4]!
 170:	61507468 	cmpvs	r0, r8, ror #8
 174:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 178:	6c616200 	sfmvs	f6, 2, [r1], #-0
 17c:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 180:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 184:	74007972 	strvc	r7, [r0], #-2418	; 0xfffff68e
 188:	00736968 	rsbseq	r6, r3, r8, ror #18
 18c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 190:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 194:	3a43006c 	bcc	10c034c <startup-0x1ef3fcb4>
 198:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 19c:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 1a0:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 1a4:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 1a8:	6f746b73 	svcvs	0x00746b73
 1ac:	41442f70 	hvcmi	17136	; 0x42f0
 1b0:	37313054 			; <UNDEFINED> instruction: 0x37313054
 1b4:	646f432f 	strbtvs	r4, [pc], #-815	; 1bc <startup-0x1ffffe44>
 1b8:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 1bc:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 1c0:	705f6c61 	subsvc	r6, pc, r1, ror #24
 1c4:	2f676e6f 	svccs	0x00676e6f
 1c8:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 1cc:	6c00632e 	stcvs	3, cr6, [r0], {46}	; 0x2e
 1d0:	50746665 	rsbspl	r6, r4, r5, ror #12
 1d4:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 1d8:	72670065 	rsbvc	r0, r7, #101	; 0x65
 1dc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1e0:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 1e4:	5f657469 	svcpl	0x00657469
 1e8:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1ec:	00646e61 	rsbeq	r6, r4, r1, ror #28
 1f0:	616c6564 	cmnvs	ip, r4, ror #10
 1f4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1f8:	006f726b 	rsbeq	r7, pc, fp, ror #4
 1fc:	70617267 	rsbvc	r7, r1, r7, ror #4
 200:	5f636968 	svcpl	0x00636968
 204:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 208:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 20c:	69700061 	ldmdbvs	r0!, {r0, r5, r6}^
 210:	006c6578 	rsbeq	r6, ip, r8, ror r5
 214:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 218:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 21c:	6f72746f 	svcvs	0x0072746f
 220:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 224:	61726700 	cmnvs	r2, r0, lsl #14
 228:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 22c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 230:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 234:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 238:	00726165 	rsbseq	r6, r2, r5, ror #2
 23c:	616c6564 	cmnvs	ip, r4, ror #10
 240:	30355f79 	eorscc	r5, r5, r9, ror pc
 244:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 248:	70617267 	rsbvc	r7, r1, r7, ror #4
 24c:	5f636968 	svcpl	0x00636968
 250:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 254:	6165725f 	cmnvs	r5, pc, asr r2
 258:	43007964 	movwmi	r7, #2404	; 0x964
 25c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 260:	2f737265 	svccs	0x00737265
 264:	706d6148 	rsbvc	r6, sp, r8, asr #2
 268:	442f7375 	strtmi	r7, [pc], #-885	; 270 <startup-0x1ffffd90>
 26c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 270:	442f706f 	strtmi	r7, [pc], #-111	; 278 <startup-0x1ffffd88>
 274:	31305441 	teqcc	r0, r1, asr #8
 278:	6f432f37 	svcvs	0x00432f37
 27c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 280:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 284:	5f6c6165 	svcpl	0x006c6165
 288:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 28c:	6172672f 	cmnvs	r2, pc, lsr #14
 290:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 294:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 298:	006b7361 	rsbeq	r7, fp, r1, ror #6
 29c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 2a0:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 2a4:	70617267 	rsbvc	r7, r1, r7, ror #4
 2a8:	5f636968 	svcpl	0x00636968
 2ac:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2b0:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
 2b4:	6900706d 	stmdbvs	r0, {r0, r2, r3, r5, r6, ip, sp, lr}
 2b8:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 2bc:	61726700 	cmnvs	r2, r0, lsl #14
 2c0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2c4:	6165725f 	cmnvs	r5, pc, asr r2
 2c8:	72670064 	rsbvc	r0, r7, #100	; 0x64
 2cc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2d0:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 2d4:	5f657469 	svcpl	0x00657469
 2d8:	61746164 	cmnvs	r4, r4, ror #2
 2dc:	61726700 	cmnvs	r2, r0, lsl #14
 2e0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2e4:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 2e8:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2ec:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 2f0:	61700074 	cmnvs	r0, r4, ror r0
 2f4:	67006567 	strvs	r6, [r0, -r7, ror #10]
 2f8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2fc:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 300:	6174696e 	cmnvs	r4, lr, ror #18
 304:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 308:	6c617600 	stclvs	6, cr7, [r1], #-0
 30c:	67006575 	smlsdxvs	r0, r5, r5, r6
 310:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 314:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 318:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 31c:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 320:	006e6565 	rsbeq	r6, lr, r5, ror #10
 324:	616c6564 	cmnvs	ip, r4, ror #10
 328:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 32c:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 330:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 334:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 338:	73007265 	movwvc	r7, #613	; 0x265
 33c:	6f5f7465 	svcvs	0x005f7465
 340:	63656a62 	cmnvs	r5, #401408	; 0x62000
 344:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 348:	00646565 	rsbeq	r6, r4, r5, ror #10
 34c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff911 <rightPaddle+0xdffff071>
 350:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 354:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 358:	2f737570 	svccs	0x00737570
 35c:	6b736544 	blvs	1cd9874 <startup-0x1e32678c>
 360:	2f706f74 	svccs	0x00706f74
 364:	30544144 	subscc	r4, r4, r4, asr #2
 368:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 36c:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 370:	2f657469 	svccs	0x00657469
 374:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 378:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 37c:	626f2f67 	rsbvs	r2, pc, #412	; 0x19c
 380:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 384:	6300632e 	movwvs	r6, #814	; 0x32e
 388:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 38c:	6a626f5f 	bvs	189c110 <startup-0x1e763ef0>
 390:	00746365 	rsbseq	r6, r4, r5, ror #6
 394:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 398:	6a626f5f 	bvs	189c11c <startup-0x1e763ee4>
 39c:	00746365 	rsbseq	r6, r4, r5, ror #6
 3a0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 3a4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 3a8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 3ac:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 3b0:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 3b4:	736e3035 	cmnvc	lr, #53	; 0x35
 3b8:	2f3a4300 	svccs	0x003a4300
 3bc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 3c0:	61482f73 	hvcvs	33523	; 0x82f3
 3c4:	7375706d 	cmnvc	r5, #109	; 0x6d
 3c8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 3cc:	706f746b 	rsbvc	r7, pc, fp, ror #8
 3d0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 3d4:	2f373130 	svccs	0x00373130
 3d8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 3dc:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 3e0:	6165722f 	cmnvs	r5, pc, lsr #4
 3e4:	6f705f6c 	svcvs	0x00705f6c
 3e8:	742f676e 	strtvc	r6, [pc], #-1902	; 3f0 <startup-0x1ffffc10>
 3ec:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 3f0:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 3f4:	5f65766f 	svcpl	0x0065766f
 3f8:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 3fc:	7000656c 	andvc	r6, r0, ip, ror #10
 400:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 404:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
 408:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 40c:	43007972 	movwmi	r7, #2418	; 0x972
 410:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 414:	2f737265 	svccs	0x00737265
 418:	706d6148 	rsbvc	r6, sp, r8, asr #2
 41c:	442f7375 	strtmi	r7, [pc], #-885	; 424 <startup-0x1ffffbdc>
 420:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 424:	442f706f 	strtmi	r7, [pc], #-111	; 42c <startup-0x1ffffbd4>
 428:	31305441 	teqcc	r0, r1, asr #8
 42c:	6f432f37 	svcvs	0x00432f37
 430:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 434:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 438:	5f6c6165 	svcpl	0x006c6165
 43c:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 440:	6461702f 	strbtvs	r7, [r1], #-47	; 0xffffffd1
 444:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
 448:	Address 0x00000448 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	00000034 	andeq	r0, r0, r4, lsr r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	100e4101 	andne	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	2000005c 	andcs	r0, r0, ip, asr r0
  78:	00000070 	andeq	r0, r0, r0, ror r0
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	180e4101 	stmdane	lr, {r0, r8, lr}
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	0000000c 	andeq	r0, r0, ip
  90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  94:	7c020001 	stcvc	0, cr0, [r2], {1}
  98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	0000008c 	andeq	r0, r0, ip, lsl #1
  a4:	200000cc 	andcs	r0, r0, ip, asr #1
  a8:	00000038 	andeq	r0, r0, r8, lsr r0
  ac:	40080e41 	andmi	r0, r8, r1, asr #28
  b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b4:	100e4101 	andne	r4, lr, r1, lsl #2
  b8:	00070d41 	andeq	r0, r7, r1, asr #26
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	0000008c 	andeq	r0, r0, ip, lsl #1
  c4:	20000104 	andcs	r0, r0, r4, lsl #2
  c8:	00000034 	andeq	r0, r0, r4, lsr r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	100e4101 	andne	r4, lr, r1, lsl #2
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	0000008c 	andeq	r0, r0, ip, lsl #1
  e4:	20000138 	andcs	r0, r0, r8, lsr r1
  e8:	0000006a 	andeq	r0, r0, sl, rrx
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	0000008c 	andeq	r0, r0, ip, lsl #1
 104:	200001a2 	andcs	r0, r0, r2, lsr #3
 108:	00000072 	andeq	r0, r0, r2, ror r0
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	100e4101 	andne	r4, lr, r1, lsl #2
 118:	00070d41 	andeq	r0, r7, r1, asr #26
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	0000008c 	andeq	r0, r0, ip, lsl #1
 124:	20000214 	andcs	r0, r0, r4, lsl r2
 128:	00000090 	muleq	r0, r0, r0
 12c:	40080e41 	andmi	r0, r8, r1, asr #28
 130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 134:	180e4101 	stmdane	lr, {r0, r8, lr}
 138:	00070d41 	andeq	r0, r7, r1, asr #26
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	0000008c 	andeq	r0, r0, ip, lsl #1
 144:	200002a4 	andcs	r0, r0, r4, lsr #5
 148:	00000080 	andeq	r0, r0, r0, lsl #1
 14c:	40080e41 	andmi	r0, r8, r1, asr #28
 150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 154:	100e4101 	andne	r4, lr, r1, lsl #2
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	0000008c 	andeq	r0, r0, ip, lsl #1
 164:	20000324 	andcs	r0, r0, r4, lsr #6
 168:	00000040 	andeq	r0, r0, r0, asr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 174:	100e4101 	andne	r4, lr, r1, lsl #2
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	0000008c 	andeq	r0, r0, ip, lsl #1
 184:	20000364 	andcs	r0, r0, r4, ror #6
 188:	00000046 	andeq	r0, r0, r6, asr #32
 18c:	40080e41 	andmi	r0, r8, r1, asr #28
 190:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 194:	100e4101 	andne	r4, lr, r1, lsl #2
 198:	00070d41 	andeq	r0, r7, r1, asr #26
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1a4:	200003aa 	andcs	r0, r0, sl, lsr #7
 1a8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	100e4101 	andne	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1c4:	200003d4 	ldrdcs	r0, [r0], -r4
 1c8:	00000056 	andeq	r0, r0, r6, asr r0
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	0000008c 	andeq	r0, r0, ip, lsl #1
 1e0:	2000042a 	andcs	r0, r0, sl, lsr #8
 1e4:	00000058 	andeq	r0, r0, r8, asr r0
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	100e4101 	andne	r4, lr, r1, lsl #2
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	00000020 	andeq	r0, r0, r0, lsr #32
 1fc:	0000008c 	andeq	r0, r0, ip, lsl #1
 200:	20000482 	andcs	r0, r0, r2, lsl #9
 204:	00000196 	muleq	r0, r6, r1
 208:	400c0e41 	andmi	r0, ip, r1, asr #28
 20c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 210:	018e4002 	orreq	r4, lr, r2
 214:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 218:	0000070d 	andeq	r0, r0, sp, lsl #14
 21c:	0000000c 	andeq	r0, r0, ip
 220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 224:	7c020001 	stcvc	0, cr0, [r2], {1}
 228:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 22c:	0000001c 	andeq	r0, r0, ip, lsl r0
 230:	0000021c 	andeq	r0, r0, ip, lsl r2
 234:	20000618 	andcs	r0, r0, r8, lsl r6
 238:	0000005e 	andeq	r0, r0, lr, asr r0
 23c:	40080e41 	andmi	r0, r8, r1, asr #28
 240:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 244:	180e4101 	stmdane	lr, {r0, r8, lr}
 248:	00070d41 	andeq	r0, r7, r1, asr #26
 24c:	0000001c 	andeq	r0, r0, ip, lsl r0
 250:	0000021c 	andeq	r0, r0, ip, lsl r2
 254:	20000676 	andcs	r0, r0, r6, ror r6
 258:	0000005e 	andeq	r0, r0, lr, asr r0
 25c:	40080e41 	andmi	r0, r8, r1, asr #28
 260:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 264:	180e4101 	stmdane	lr, {r0, r8, lr}
 268:	00070d41 	andeq	r0, r7, r1, asr #26
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	0000021c 	andeq	r0, r0, ip, lsl r2
 274:	200006d4 	ldrdcs	r0, [r0], -r4
 278:	00000020 	andeq	r0, r0, r0, lsr #32
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	180e4101 	stmdane	lr, {r0, r8, lr}
 288:	00070d41 	andeq	r0, r7, r1, asr #26
 28c:	0000000c 	andeq	r0, r0, ip
 290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 294:	7c020001 	stcvc	0, cr0, [r2], {1}
 298:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	0000028c 	andeq	r0, r0, ip, lsl #5
 2a4:	200006f4 	strdcs	r0, [r0], -r4
 2a8:	00000044 	andeq	r0, r0, r4, asr #32
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	0000028c 	andeq	r0, r0, ip, lsl #5
 2c0:	20000738 	andcs	r0, r0, r8, lsr r7
 2c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	100e4101 	andne	r4, lr, r1, lsl #2
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	0000028c 	andeq	r0, r0, ip, lsl #5
 2e0:	20000764 	andcs	r0, r0, r4, ror #14
 2e4:	00000018 	andeq	r0, r0, r8, lsl r0
 2e8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f0:	100e4101 	andne	r4, lr, r1, lsl #2
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	00000018 	andeq	r0, r0, r8, lsl r0
 2fc:	0000028c 	andeq	r0, r0, ip, lsl #5
 300:	2000077c 	andcs	r0, r0, ip, ror r7
 304:	00000012 	andeq	r0, r0, r2, lsl r0
 308:	40080e41 	andmi	r0, r8, r1, asr #28
 30c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 310:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 314:	0000000c 	andeq	r0, r0, ip
 318:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 31c:	7c020001 	stcvc	0, cr0, [r2], {1}
 320:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	00000314 	andeq	r0, r0, r4, lsl r3
 32c:	20000790 	mulcs	r0, r0, r7
 330:	0000005e 	andeq	r0, r0, lr, asr r0
 334:	40080e41 	andmi	r0, r8, r1, asr #28
 338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 33c:	100e4101 	andne	r4, lr, r1, lsl #2
 340:	00070d41 	andeq	r0, r7, r1, asr #26
