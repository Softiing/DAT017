
./Debug/real_pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f842 	bl	2000008c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	// Setup display
	*GPIO_E_MODER = 0x55555555;
20000014:	4b17      	ldr	r3, [pc, #92]	; (20000074 <init_app+0x64>)
20000016:	4a18      	ldr	r2, [pc, #96]	; (20000078 <init_app+0x68>)
20000018:	601a      	str	r2, [r3, #0]
	
	// Setup for keypad
	*GPIO_D_MODER &= 0x0000FFFF;
2000001a:	4b18      	ldr	r3, [pc, #96]	; (2000007c <init_app+0x6c>)
2000001c:	4a17      	ldr	r2, [pc, #92]	; (2000007c <init_app+0x6c>)
2000001e:	6812      	ldr	r2, [r2, #0]
20000020:	0412      	lsls	r2, r2, #16
20000022:	0c12      	lsrs	r2, r2, #16
20000024:	601a      	str	r2, [r3, #0]
	*GPIO_D_MODER |= 0x55000000;
20000026:	4b15      	ldr	r3, [pc, #84]	; (2000007c <init_app+0x6c>)
20000028:	4a14      	ldr	r2, [pc, #80]	; (2000007c <init_app+0x6c>)
2000002a:	6812      	ldr	r2, [r2, #0]
2000002c:	21aa      	movs	r1, #170	; 0xaa
2000002e:	05c9      	lsls	r1, r1, #23
20000030:	430a      	orrs	r2, r1
20000032:	601a      	str	r2, [r3, #0]
	
	*GPIO_D_OTYPER &= 0x00FF;
20000034:	4a12      	ldr	r2, [pc, #72]	; (20000080 <init_app+0x70>)
20000036:	4b12      	ldr	r3, [pc, #72]	; (20000080 <init_app+0x70>)
20000038:	881b      	ldrh	r3, [r3, #0]
2000003a:	b29b      	uxth	r3, r3
2000003c:	21ff      	movs	r1, #255	; 0xff
2000003e:	400b      	ands	r3, r1
20000040:	b29b      	uxth	r3, r3
20000042:	8013      	strh	r3, [r2, #0]
	*GPIO_D_OTYPER |= 0x7000;
20000044:	490e      	ldr	r1, [pc, #56]	; (20000080 <init_app+0x70>)
20000046:	4b0e      	ldr	r3, [pc, #56]	; (20000080 <init_app+0x70>)
20000048:	881b      	ldrh	r3, [r3, #0]
2000004a:	b29b      	uxth	r3, r3
2000004c:	22e0      	movs	r2, #224	; 0xe0
2000004e:	01d2      	lsls	r2, r2, #7
20000050:	4313      	orrs	r3, r2
20000052:	b29b      	uxth	r3, r3
20000054:	800b      	strh	r3, [r1, #0]
	
	*GPIO_D_PUPDR &= 0x0000FFFF;
20000056:	4b0b      	ldr	r3, [pc, #44]	; (20000084 <init_app+0x74>)
20000058:	4a0a      	ldr	r2, [pc, #40]	; (20000084 <init_app+0x74>)
2000005a:	6812      	ldr	r2, [r2, #0]
2000005c:	0412      	lsls	r2, r2, #16
2000005e:	0c12      	lsrs	r2, r2, #16
20000060:	601a      	str	r2, [r3, #0]
	*GPIO_D_PUPDR |= 0xAAAA0000;
20000062:	4b08      	ldr	r3, [pc, #32]	; (20000084 <init_app+0x74>)
20000064:	4a07      	ldr	r2, [pc, #28]	; (20000084 <init_app+0x74>)
20000066:	6812      	ldr	r2, [r2, #0]
20000068:	4907      	ldr	r1, [pc, #28]	; (20000088 <init_app+0x78>)
2000006a:	430a      	orrs	r2, r1
2000006c:	601a      	str	r2, [r3, #0]
}
2000006e:	46c0      	nop			; (mov r8, r8)
20000070:	46bd      	mov	sp, r7
20000072:	bd80      	pop	{r7, pc}
20000074:	40021000 	andmi	r1, r2, r0
20000078:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000007c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000080:	40020c04 	andmi	r0, r2, r4, lsl #24
20000084:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000088:	aaaa0000 	bge	1ea80090 <startup-0x157ff70>

2000008c <main>:

extern OBJECT ball;
extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void main(void) {
2000008c:	b580      	push	{r7, lr}
2000008e:	b086      	sub	sp, #24
20000090:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
20000092:	4b39      	ldr	r3, [pc, #228]	; (20000178 <main+0xec>)
20000094:	613b      	str	r3, [r7, #16]
	POBJECT pl = &leftPaddle;
20000096:	4b39      	ldr	r3, [pc, #228]	; (2000017c <main+0xf0>)
20000098:	60fb      	str	r3, [r7, #12]
	POBJECT pr = &rightPaddle;
2000009a:	4b39      	ldr	r3, [pc, #228]	; (20000180 <main+0xf4>)
2000009c:	60bb      	str	r3, [r7, #8]
	init_app();
2000009e:	f7ff ffb7 	bl	20000010 <init_app>
	graphic_initialize();
200000a2:	f000 fa5b 	bl	2000055c <graphic_initialize>
  #ifndef SIMULATOR
	graphic_clear_screen();
  #endif
  
	p->set_speed(p, 16, 16);
200000a6:	693b      	ldr	r3, [r7, #16]
200000a8:	6a1b      	ldr	r3, [r3, #32]
200000aa:	6938      	ldr	r0, [r7, #16]
200000ac:	2210      	movs	r2, #16
200000ae:	2110      	movs	r1, #16
200000b0:	4798      	blx	r3
	while(1) {
		// Update from keypad
		unsigned char *pressedKeys = keyb();
200000b2:	f000 fd0b 	bl	20000acc <keyb>
200000b6:	0003      	movs	r3, r0
200000b8:	607b      	str	r3, [r7, #4]
		pl->set_speed(pl,0,0);
200000ba:	68fb      	ldr	r3, [r7, #12]
200000bc:	6a1b      	ldr	r3, [r3, #32]
200000be:	68f8      	ldr	r0, [r7, #12]
200000c0:	2200      	movs	r2, #0
200000c2:	2100      	movs	r1, #0
200000c4:	4798      	blx	r3
		pr->set_speed(pr,0,0);
200000c6:	68bb      	ldr	r3, [r7, #8]
200000c8:	6a1b      	ldr	r3, [r3, #32]
200000ca:	68b8      	ldr	r0, [r7, #8]
200000cc:	2200      	movs	r2, #0
200000ce:	2100      	movs	r1, #0
200000d0:	4798      	blx	r3
		for(unsigned char i = 0; i < 4; i++) {
200000d2:	2317      	movs	r3, #23
200000d4:	18fb      	adds	r3, r7, r3
200000d6:	2200      	movs	r2, #0
200000d8:	701a      	strb	r2, [r3, #0]
200000da:	e035      	b.n	20000148 <main+0xbc>
			switch(pressedKeys[i]) {
200000dc:	2317      	movs	r3, #23
200000de:	18fb      	adds	r3, r7, r3
200000e0:	781b      	ldrb	r3, [r3, #0]
200000e2:	687a      	ldr	r2, [r7, #4]
200000e4:	18d3      	adds	r3, r2, r3
200000e6:	781b      	ldrb	r3, [r3, #0]
200000e8:	2b04      	cmp	r3, #4
200000ea:	d00f      	beq.n	2000010c <main+0x80>
200000ec:	dc02      	bgt.n	200000f4 <main+0x68>
200000ee:	2b01      	cmp	r3, #1
200000f0:	d005      	beq.n	200000fe <main+0x72>
200000f2:	e022      	b.n	2000013a <main+0xae>
200000f4:	2b0c      	cmp	r3, #12
200000f6:	d011      	beq.n	2000011c <main+0x90>
200000f8:	2b0d      	cmp	r3, #13
200000fa:	d016      	beq.n	2000012a <main+0x9e>
200000fc:	e01d      	b.n	2000013a <main+0xae>
				case 0x01: pl->set_speed(pl,0,10); break;
200000fe:	68fb      	ldr	r3, [r7, #12]
20000100:	6a1b      	ldr	r3, [r3, #32]
20000102:	68f8      	ldr	r0, [r7, #12]
20000104:	220a      	movs	r2, #10
20000106:	2100      	movs	r1, #0
20000108:	4798      	blx	r3
2000010a:	e016      	b.n	2000013a <main+0xae>
				case 0x04: pl->set_speed(pl,0,-10); break;
2000010c:	68fb      	ldr	r3, [r7, #12]
2000010e:	6a1b      	ldr	r3, [r3, #32]
20000110:	220a      	movs	r2, #10
20000112:	4252      	negs	r2, r2
20000114:	68f8      	ldr	r0, [r7, #12]
20000116:	2100      	movs	r1, #0
20000118:	4798      	blx	r3
2000011a:	e00e      	b.n	2000013a <main+0xae>
				case 0x0C: pr->set_speed(pr,0,10); break;
2000011c:	68bb      	ldr	r3, [r7, #8]
2000011e:	6a1b      	ldr	r3, [r3, #32]
20000120:	68b8      	ldr	r0, [r7, #8]
20000122:	220a      	movs	r2, #10
20000124:	2100      	movs	r1, #0
20000126:	4798      	blx	r3
20000128:	e007      	b.n	2000013a <main+0xae>
				case 0x0D: pr->set_speed(pr,0,-10); break;
2000012a:	68bb      	ldr	r3, [r7, #8]
2000012c:	6a1b      	ldr	r3, [r3, #32]
2000012e:	220a      	movs	r2, #10
20000130:	4252      	negs	r2, r2
20000132:	68b8      	ldr	r0, [r7, #8]
20000134:	2100      	movs	r1, #0
20000136:	4798      	blx	r3
20000138:	46c0      	nop			; (mov r8, r8)
		for(unsigned char i = 0; i < 4; i++) {
2000013a:	2317      	movs	r3, #23
2000013c:	18fb      	adds	r3, r7, r3
2000013e:	781a      	ldrb	r2, [r3, #0]
20000140:	2317      	movs	r3, #23
20000142:	18fb      	adds	r3, r7, r3
20000144:	3201      	adds	r2, #1
20000146:	701a      	strb	r2, [r3, #0]
20000148:	2317      	movs	r3, #23
2000014a:	18fb      	adds	r3, r7, r3
2000014c:	781b      	ldrb	r3, [r3, #0]
2000014e:	2b03      	cmp	r3, #3
20000150:	d9c4      	bls.n	200000dc <main+0x50>
			}
		}
		p->move(p);
20000152:	693b      	ldr	r3, [r7, #16]
20000154:	69db      	ldr	r3, [r3, #28]
20000156:	693a      	ldr	r2, [r7, #16]
20000158:	0010      	movs	r0, r2
2000015a:	4798      	blx	r3
		pl->move(pl);
2000015c:	68fb      	ldr	r3, [r7, #12]
2000015e:	69db      	ldr	r3, [r3, #28]
20000160:	68fa      	ldr	r2, [r7, #12]
20000162:	0010      	movs	r0, r2
20000164:	4798      	blx	r3
		pr->move(pr);
20000166:	68bb      	ldr	r3, [r7, #8]
20000168:	69db      	ldr	r3, [r3, #28]
2000016a:	68ba      	ldr	r2, [r7, #8]
2000016c:	0010      	movs	r0, r2
2000016e:	4798      	blx	r3
		delay_milli(50);
20000170:	2032      	movs	r0, #50	; 0x32
20000172:	f000 fc13 	bl	2000099c <delay_milli>
	while(1) {
20000176:	e79c      	b.n	200000b2 <main+0x26>
20000178:	20000c38 	andcs	r0, r0, r8, lsr ip
2000017c:	20000d30 	andcs	r0, r0, r0, lsr sp
20000180:	20000d54 	andcs	r0, r0, r4, asr sp

20000184 <move_ball>:
};

extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void move_ball(POBJECT this) {
20000184:	b580      	push	{r7, lr}
20000186:	b084      	sub	sp, #16
20000188:	af00      	add	r7, sp, #0
2000018a:	6078      	str	r0, [r7, #4]
	clear_object(this);
2000018c:	687b      	ldr	r3, [r7, #4]
2000018e:	0018      	movs	r0, r3
20000190:	f000 fb8d 	bl	200008ae <clear_object>
	
	this->posX += this->dirX;
20000194:	687b      	ldr	r3, [r7, #4]
20000196:	68da      	ldr	r2, [r3, #12]
20000198:	687b      	ldr	r3, [r7, #4]
2000019a:	685b      	ldr	r3, [r3, #4]
2000019c:	18d2      	adds	r2, r2, r3
2000019e:	687b      	ldr	r3, [r7, #4]
200001a0:	60da      	str	r2, [r3, #12]
	this->posY += this->dirY;
200001a2:	687b      	ldr	r3, [r7, #4]
200001a4:	691a      	ldr	r2, [r3, #16]
200001a6:	687b      	ldr	r3, [r7, #4]
200001a8:	689b      	ldr	r3, [r3, #8]
200001aa:	18d2      	adds	r2, r2, r3
200001ac:	687b      	ldr	r3, [r7, #4]
200001ae:	611a      	str	r2, [r3, #16]
	
	// Wall collisions
	if((this->posY < 0) ||  this->posY > 63 ) {
200001b0:	687b      	ldr	r3, [r7, #4]
200001b2:	691b      	ldr	r3, [r3, #16]
200001b4:	2b00      	cmp	r3, #0
200001b6:	db03      	blt.n	200001c0 <move_ball+0x3c>
200001b8:	687b      	ldr	r3, [r7, #4]
200001ba:	691b      	ldr	r3, [r3, #16]
200001bc:	2b3f      	cmp	r3, #63	; 0x3f
200001be:	dd04      	ble.n	200001ca <move_ball+0x46>
		this->dirY = -this->dirY;
200001c0:	687b      	ldr	r3, [r7, #4]
200001c2:	689b      	ldr	r3, [r3, #8]
200001c4:	425a      	negs	r2, r3
200001c6:	687b      	ldr	r3, [r7, #4]
200001c8:	609a      	str	r2, [r3, #8]
	}
	
	// Define left and right paddle
	POBJECT lp = &leftPaddle;
200001ca:	4b23      	ldr	r3, [pc, #140]	; (20000258 <move_ball+0xd4>)
200001cc:	60fb      	str	r3, [r7, #12]
	POBJECT rp = &rightPaddle;
200001ce:	4b23      	ldr	r3, [pc, #140]	; (2000025c <move_ball+0xd8>)
200001d0:	60bb      	str	r3, [r7, #8]
	
	//For left paddle
	if(this->posX <= lp->posX + lp->geo->sizeX) {
200001d2:	687b      	ldr	r3, [r7, #4]
200001d4:	68da      	ldr	r2, [r3, #12]
200001d6:	68fb      	ldr	r3, [r7, #12]
200001d8:	68d9      	ldr	r1, [r3, #12]
200001da:	68fb      	ldr	r3, [r7, #12]
200001dc:	681b      	ldr	r3, [r3, #0]
200001de:	685b      	ldr	r3, [r3, #4]
200001e0:	18cb      	adds	r3, r1, r3
200001e2:	429a      	cmp	r2, r3
200001e4:	dc14      	bgt.n	20000210 <move_ball+0x8c>
		if((this->posY >= lp->posY) && (this->posY <= lp->posY + lp->geo->sizeY)) {
200001e6:	687b      	ldr	r3, [r7, #4]
200001e8:	691a      	ldr	r2, [r3, #16]
200001ea:	68fb      	ldr	r3, [r7, #12]
200001ec:	691b      	ldr	r3, [r3, #16]
200001ee:	429a      	cmp	r2, r3
200001f0:	db0e      	blt.n	20000210 <move_ball+0x8c>
200001f2:	687b      	ldr	r3, [r7, #4]
200001f4:	691a      	ldr	r2, [r3, #16]
200001f6:	68fb      	ldr	r3, [r7, #12]
200001f8:	6919      	ldr	r1, [r3, #16]
200001fa:	68fb      	ldr	r3, [r7, #12]
200001fc:	681b      	ldr	r3, [r3, #0]
200001fe:	689b      	ldr	r3, [r3, #8]
20000200:	18cb      	adds	r3, r1, r3
20000202:	429a      	cmp	r2, r3
20000204:	dc04      	bgt.n	20000210 <move_ball+0x8c>
			this->dirX = -this->dirX;
20000206:	687b      	ldr	r3, [r7, #4]
20000208:	685b      	ldr	r3, [r3, #4]
2000020a:	425a      	negs	r2, r3
2000020c:	687b      	ldr	r3, [r7, #4]
2000020e:	605a      	str	r2, [r3, #4]
			// Left player lost
		}
	}
	
	//For right paddle
	if(this->posX >= rp->posX) {
20000210:	687b      	ldr	r3, [r7, #4]
20000212:	68da      	ldr	r2, [r3, #12]
20000214:	68bb      	ldr	r3, [r7, #8]
20000216:	68db      	ldr	r3, [r3, #12]
20000218:	429a      	cmp	r2, r3
2000021a:	db14      	blt.n	20000246 <move_ball+0xc2>
		if((this->posY >= rp->posY) && (this->posY <= rp->posY + rp->geo->sizeY)) {
2000021c:	687b      	ldr	r3, [r7, #4]
2000021e:	691a      	ldr	r2, [r3, #16]
20000220:	68bb      	ldr	r3, [r7, #8]
20000222:	691b      	ldr	r3, [r3, #16]
20000224:	429a      	cmp	r2, r3
20000226:	db0e      	blt.n	20000246 <move_ball+0xc2>
20000228:	687b      	ldr	r3, [r7, #4]
2000022a:	691a      	ldr	r2, [r3, #16]
2000022c:	68bb      	ldr	r3, [r7, #8]
2000022e:	6919      	ldr	r1, [r3, #16]
20000230:	68bb      	ldr	r3, [r7, #8]
20000232:	681b      	ldr	r3, [r3, #0]
20000234:	689b      	ldr	r3, [r3, #8]
20000236:	18cb      	adds	r3, r1, r3
20000238:	429a      	cmp	r2, r3
2000023a:	dc04      	bgt.n	20000246 <move_ball+0xc2>
			this->dirX = -this->dirX;
2000023c:	687b      	ldr	r3, [r7, #4]
2000023e:	685b      	ldr	r3, [r3, #4]
20000240:	425a      	negs	r2, r3
20000242:	687b      	ldr	r3, [r7, #4]
20000244:	605a      	str	r2, [r3, #4]
		} else {
			// Right player lost
		}
	}
	
	this->draw(this);
20000246:	687b      	ldr	r3, [r7, #4]
20000248:	695b      	ldr	r3, [r3, #20]
2000024a:	687a      	ldr	r2, [r7, #4]
2000024c:	0010      	movs	r0, r2
2000024e:	4798      	blx	r3
20000250:	46c0      	nop			; (mov r8, r8)
20000252:	46bd      	mov	sp, r7
20000254:	b004      	add	sp, #16
20000256:	bd80      	pop	{r7, pc}
20000258:	20000d30 	andcs	r0, r0, r0, lsr sp
2000025c:	20000d54 	andcs	r0, r0, r4, asr sp

20000260 <graphics_ctrl_bit_set>:
#include "graphic.h"


typedef unsigned char uint8_t;

void graphics_ctrl_bit_set(uint8_t x){
20000260:	b580      	push	{r7, lr}
20000262:	b082      	sub	sp, #8
20000264:	af00      	add	r7, sp, #0
20000266:	0002      	movs	r2, r0
20000268:	1dfb      	adds	r3, r7, #7
2000026a:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= (x & ~B_SELECT);
2000026c:	4909      	ldr	r1, [pc, #36]	; (20000294 <graphics_ctrl_bit_set+0x34>)
2000026e:	4b09      	ldr	r3, [pc, #36]	; (20000294 <graphics_ctrl_bit_set+0x34>)
20000270:	781b      	ldrb	r3, [r3, #0]
20000272:	b2db      	uxtb	r3, r3
20000274:	b25a      	sxtb	r2, r3
20000276:	1dfb      	adds	r3, r7, #7
20000278:	781b      	ldrb	r3, [r3, #0]
2000027a:	b25b      	sxtb	r3, r3
2000027c:	2004      	movs	r0, #4
2000027e:	4383      	bics	r3, r0
20000280:	b25b      	sxtb	r3, r3
20000282:	4313      	orrs	r3, r2
20000284:	b25b      	sxtb	r3, r3
20000286:	b2db      	uxtb	r3, r3
20000288:	700b      	strb	r3, [r1, #0]
}
2000028a:	46c0      	nop			; (mov r8, r8)
2000028c:	46bd      	mov	sp, r7
2000028e:	b002      	add	sp, #8
20000290:	bd80      	pop	{r7, pc}
20000292:	46c0      	nop			; (mov r8, r8)
20000294:	40021014 	andmi	r1, r2, r4, lsl r0

20000298 <graphics_ctrl_bit_clear>:

void graphics_ctrl_bit_clear(uint8_t x){
20000298:	b580      	push	{r7, lr}
2000029a:	b082      	sub	sp, #8
2000029c:	af00      	add	r7, sp, #0
2000029e:	0002      	movs	r2, r0
200002a0:	1dfb      	adds	r3, r7, #7
200002a2:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ~x;
200002a4:	4908      	ldr	r1, [pc, #32]	; (200002c8 <graphics_ctrl_bit_clear+0x30>)
200002a6:	4b08      	ldr	r3, [pc, #32]	; (200002c8 <graphics_ctrl_bit_clear+0x30>)
200002a8:	781b      	ldrb	r3, [r3, #0]
200002aa:	b2db      	uxtb	r3, r3
200002ac:	b25b      	sxtb	r3, r3
200002ae:	1dfa      	adds	r2, r7, #7
200002b0:	7812      	ldrb	r2, [r2, #0]
200002b2:	b252      	sxtb	r2, r2
200002b4:	43d2      	mvns	r2, r2
200002b6:	b252      	sxtb	r2, r2
200002b8:	4013      	ands	r3, r2
200002ba:	b25b      	sxtb	r3, r3
200002bc:	b2db      	uxtb	r3, r3
200002be:	700b      	strb	r3, [r1, #0]
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	40021014 	andmi	r1, r2, r4, lsl r0

200002cc <select_controller>:

void select_controller(uint8_t controller){
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	0002      	movs	r2, r0
200002d4:	1dfb      	adds	r3, r7, #7
200002d6:	701a      	strb	r2, [r3, #0]
    if(controller == 0) {
200002d8:	1dfb      	adds	r3, r7, #7
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	2b00      	cmp	r3, #0
200002de:	d106      	bne.n	200002ee <select_controller+0x22>
        graphics_ctrl_bit_clear(B_CS1);
200002e0:	2008      	movs	r0, #8
200002e2:	f7ff ffd9 	bl	20000298 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
200002e6:	2010      	movs	r0, #16
200002e8:	f7ff ffd6 	bl	20000298 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
    } else if(controller == B_CS2) {
        graphics_ctrl_bit_clear(B_CS1);
        graphics_ctrl_bit_set(B_CS2);
    }
}
200002ec:	e01f      	b.n	2000032e <select_controller+0x62>
    } else if(controller == (B_CS1 | B_CS2)) {
200002ee:	1dfb      	adds	r3, r7, #7
200002f0:	781b      	ldrb	r3, [r3, #0]
200002f2:	2b18      	cmp	r3, #24
200002f4:	d106      	bne.n	20000304 <select_controller+0x38>
        graphics_ctrl_bit_set(B_CS1);
200002f6:	2008      	movs	r0, #8
200002f8:	f7ff ffb2 	bl	20000260 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_set(B_CS2);
200002fc:	2010      	movs	r0, #16
200002fe:	f7ff ffaf 	bl	20000260 <graphics_ctrl_bit_set>
}
20000302:	e014      	b.n	2000032e <select_controller+0x62>
    } else if(controller == B_CS1) {
20000304:	1dfb      	adds	r3, r7, #7
20000306:	781b      	ldrb	r3, [r3, #0]
20000308:	2b08      	cmp	r3, #8
2000030a:	d106      	bne.n	2000031a <select_controller+0x4e>
        graphics_ctrl_bit_set(B_CS1);
2000030c:	2008      	movs	r0, #8
2000030e:	f7ff ffa7 	bl	20000260 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_clear(B_CS2);
20000312:	2010      	movs	r0, #16
20000314:	f7ff ffc0 	bl	20000298 <graphics_ctrl_bit_clear>
}
20000318:	e009      	b.n	2000032e <select_controller+0x62>
    } else if(controller == B_CS2) {
2000031a:	1dfb      	adds	r3, r7, #7
2000031c:	781b      	ldrb	r3, [r3, #0]
2000031e:	2b10      	cmp	r3, #16
20000320:	d105      	bne.n	2000032e <select_controller+0x62>
        graphics_ctrl_bit_clear(B_CS1);
20000322:	2008      	movs	r0, #8
20000324:	f7ff ffb8 	bl	20000298 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_set(B_CS2);
20000328:	2010      	movs	r0, #16
2000032a:	f7ff ff99 	bl	20000260 <graphics_ctrl_bit_set>
}
2000032e:	46c0      	nop			; (mov r8, r8)
20000330:	46bd      	mov	sp, r7
20000332:	b002      	add	sp, #8
20000334:	bd80      	pop	{r7, pc}

20000336 <graphic_wait_ready>:

void graphic_wait_ready(){
20000336:	b580      	push	{r7, lr}
20000338:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_clear(B_E);
2000033a:	2040      	movs	r0, #64	; 0x40
2000033c:	f7ff ffac 	bl	20000298 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000340:	4b12      	ldr	r3, [pc, #72]	; (2000038c <graphic_wait_ready+0x56>)
20000342:	4a13      	ldr	r2, [pc, #76]	; (20000390 <graphic_wait_ready+0x5a>)
20000344:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_RS);
20000346:	2001      	movs	r0, #1
20000348:	f7ff ffa6 	bl	20000298 <graphics_ctrl_bit_clear>
    graphics_ctrl_bit_set(B_RW);
2000034c:	2002      	movs	r0, #2
2000034e:	f7ff ff87 	bl	20000260 <graphics_ctrl_bit_set>
    delay_500ns();
20000352:	f000 fb2f 	bl	200009b4 <delay_500ns>
    
    while(1) { // Wait for display not to be busy
        graphics_ctrl_bit_set(B_E);
20000356:	2040      	movs	r0, #64	; 0x40
20000358:	f7ff ff82 	bl	20000260 <graphics_ctrl_bit_set>
        delay_500ns();
2000035c:	f000 fb2a 	bl	200009b4 <delay_500ns>
        graphics_ctrl_bit_clear(B_E);
20000360:	2040      	movs	r0, #64	; 0x40
20000362:	f7ff ff99 	bl	20000298 <graphics_ctrl_bit_clear>
        delay_500ns();
20000366:	f000 fb25 	bl	200009b4 <delay_500ns>
        //unsigned char i = *GPIO_IDR_HIGH;
        if((*GPIO_E_IDR_HIGH & LCD_BUSY) == 0) {
2000036a:	4b0a      	ldr	r3, [pc, #40]	; (20000394 <graphic_wait_ready+0x5e>)
2000036c:	781b      	ldrb	r3, [r3, #0]
2000036e:	b2db      	uxtb	r3, r3
20000370:	b25b      	sxtb	r3, r3
20000372:	2b00      	cmp	r3, #0
20000374:	da00      	bge.n	20000378 <graphic_wait_ready+0x42>
        graphics_ctrl_bit_set(B_E);
20000376:	e7ee      	b.n	20000356 <graphic_wait_ready+0x20>
            break;
20000378:	46c0      	nop			; (mov r8, r8)
        }
    }
    graphics_ctrl_bit_set(B_E);
2000037a:	2040      	movs	r0, #64	; 0x40
2000037c:	f7ff ff70 	bl	20000260 <graphics_ctrl_bit_set>
    *GPIO_E_MODER = 0x55555555;
20000380:	4b02      	ldr	r3, [pc, #8]	; (2000038c <graphic_wait_ready+0x56>)
20000382:	4a05      	ldr	r2, [pc, #20]	; (20000398 <graphic_wait_ready+0x62>)
20000384:	601a      	str	r2, [r3, #0]
    
}
20000386:	46c0      	nop			; (mov r8, r8)
20000388:	46bd      	mov	sp, r7
2000038a:	bd80      	pop	{r7, pc}
2000038c:	40021000 	andmi	r1, r2, r0
20000390:	00005555 	andeq	r5, r0, r5, asr r5
20000394:	40021011 	andmi	r1, r2, r1, lsl r0
20000398:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000039c <graphic_read>:

uint8_t graphic_read(uint8_t controller){
2000039c:	b580      	push	{r7, lr}
2000039e:	b084      	sub	sp, #16
200003a0:	af00      	add	r7, sp, #0
200003a2:	0002      	movs	r2, r0
200003a4:	1dfb      	adds	r3, r7, #7
200003a6:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200003a8:	2040      	movs	r0, #64	; 0x40
200003aa:	f7ff ff75 	bl	20000298 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
200003ae:	4b1b      	ldr	r3, [pc, #108]	; (2000041c <graphic_read+0x80>)
200003b0:	4a1b      	ldr	r2, [pc, #108]	; (20000420 <graphic_read+0x84>)
200003b2:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_set(B_RS | B_RW);
200003b4:	2003      	movs	r0, #3
200003b6:	f7ff ff53 	bl	20000260 <graphics_ctrl_bit_set>
    select_controller(controller);
200003ba:	1dfb      	adds	r3, r7, #7
200003bc:	781b      	ldrb	r3, [r3, #0]
200003be:	0018      	movs	r0, r3
200003c0:	f7ff ff84 	bl	200002cc <select_controller>
    delay_500ns();
200003c4:	f000 faf6 	bl	200009b4 <delay_500ns>
    graphics_ctrl_bit_set(B_E);
200003c8:	2040      	movs	r0, #64	; 0x40
200003ca:	f7ff ff49 	bl	20000260 <graphics_ctrl_bit_set>
    delay_500ns();
200003ce:	f000 faf1 	bl	200009b4 <delay_500ns>
    
    uint8_t RV = *GPIO_E_IDR_HIGH;
200003d2:	4a14      	ldr	r2, [pc, #80]	; (20000424 <graphic_read+0x88>)
200003d4:	230f      	movs	r3, #15
200003d6:	18fb      	adds	r3, r7, r3
200003d8:	7812      	ldrb	r2, [r2, #0]
200003da:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200003dc:	2040      	movs	r0, #64	; 0x40
200003de:	f7ff ff5b 	bl	20000298 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
200003e2:	4b0e      	ldr	r3, [pc, #56]	; (2000041c <graphic_read+0x80>)
200003e4:	4a10      	ldr	r2, [pc, #64]	; (20000428 <graphic_read+0x8c>)
200003e6:	601a      	str	r2, [r3, #0]
    
    if(controller == B_CS1){
200003e8:	1dfb      	adds	r3, r7, #7
200003ea:	781b      	ldrb	r3, [r3, #0]
200003ec:	2b08      	cmp	r3, #8
200003ee:	d104      	bne.n	200003fa <graphic_read+0x5e>
        select_controller(B_CS1);
200003f0:	2008      	movs	r0, #8
200003f2:	f7ff ff6b 	bl	200002cc <select_controller>
        graphic_wait_ready();
200003f6:	f7ff ff9e 	bl	20000336 <graphic_wait_ready>
    }
    
    if(controller == B_CS2){
200003fa:	1dfb      	adds	r3, r7, #7
200003fc:	781b      	ldrb	r3, [r3, #0]
200003fe:	2b10      	cmp	r3, #16
20000400:	d104      	bne.n	2000040c <graphic_read+0x70>
        select_controller(B_CS2);
20000402:	2010      	movs	r0, #16
20000404:	f7ff ff62 	bl	200002cc <select_controller>
        graphic_wait_ready();
20000408:	f7ff ff95 	bl	20000336 <graphic_wait_ready>
    }
    
    return RV;
2000040c:	230f      	movs	r3, #15
2000040e:	18fb      	adds	r3, r7, r3
20000410:	781b      	ldrb	r3, [r3, #0]
    
}
20000412:	0018      	movs	r0, r3
20000414:	46bd      	mov	sp, r7
20000416:	b004      	add	sp, #16
20000418:	bd80      	pop	{r7, pc}
2000041a:	46c0      	nop			; (mov r8, r8)
2000041c:	40021000 	andmi	r1, r2, r0
20000420:	00005555 	andeq	r5, r0, r5, asr r5
20000424:	40021011 	andmi	r1, r2, r1, lsl r0
20000428:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000042c <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
2000042c:	b580      	push	{r7, lr}
2000042e:	b082      	sub	sp, #8
20000430:	af00      	add	r7, sp, #0
20000432:	0002      	movs	r2, r0
20000434:	1dfb      	adds	r3, r7, #7
20000436:	701a      	strb	r2, [r3, #0]
20000438:	1dbb      	adds	r3, r7, #6
2000043a:	1c0a      	adds	r2, r1, #0
2000043c:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
2000043e:	4a1a      	ldr	r2, [pc, #104]	; (200004a8 <graphic_write+0x7c>)
20000440:	1dfb      	adds	r3, r7, #7
20000442:	781b      	ldrb	r3, [r3, #0]
20000444:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000446:	1dbb      	adds	r3, r7, #6
20000448:	781b      	ldrb	r3, [r3, #0]
2000044a:	0018      	movs	r0, r3
2000044c:	f7ff ff3e 	bl	200002cc <select_controller>
    delay_500ns();
20000450:	f000 fab0 	bl	200009b4 <delay_500ns>
    graphics_ctrl_bit_set(B_E);
20000454:	2040      	movs	r0, #64	; 0x40
20000456:	f7ff ff03 	bl	20000260 <graphics_ctrl_bit_set>
    delay_500ns();
2000045a:	f000 faab 	bl	200009b4 <delay_500ns>
    graphics_ctrl_bit_clear(B_E);
2000045e:	2040      	movs	r0, #64	; 0x40
20000460:	f7ff ff1a 	bl	20000298 <graphics_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000464:	1dbb      	adds	r3, r7, #6
20000466:	781b      	ldrb	r3, [r3, #0]
20000468:	2208      	movs	r2, #8
2000046a:	4013      	ands	r3, r2
2000046c:	d004      	beq.n	20000478 <graphic_write+0x4c>
        select_controller(B_CS1);
2000046e:	2008      	movs	r0, #8
20000470:	f7ff ff2c 	bl	200002cc <select_controller>
        graphic_wait_ready();
20000474:	f7ff ff5f 	bl	20000336 <graphic_wait_ready>
    }
    
    if(controller & B_CS2){
20000478:	1dbb      	adds	r3, r7, #6
2000047a:	781b      	ldrb	r3, [r3, #0]
2000047c:	2210      	movs	r2, #16
2000047e:	4013      	ands	r3, r2
20000480:	d004      	beq.n	2000048c <graphic_write+0x60>
        select_controller(B_CS2);
20000482:	2010      	movs	r0, #16
20000484:	f7ff ff22 	bl	200002cc <select_controller>
        graphic_wait_ready();
20000488:	f7ff ff55 	bl	20000336 <graphic_wait_ready>
    }
    
    *GPIO_E_ODR_HIGH = 0;
2000048c:	4b06      	ldr	r3, [pc, #24]	; (200004a8 <graphic_write+0x7c>)
2000048e:	2200      	movs	r2, #0
20000490:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_set(B_E);
20000492:	2040      	movs	r0, #64	; 0x40
20000494:	f7ff fee4 	bl	20000260 <graphics_ctrl_bit_set>
    select_controller(0);
20000498:	2000      	movs	r0, #0
2000049a:	f7ff ff17 	bl	200002cc <select_controller>
}
2000049e:	46c0      	nop			; (mov r8, r8)
200004a0:	46bd      	mov	sp, r7
200004a2:	b002      	add	sp, #8
200004a4:	bd80      	pop	{r7, pc}
200004a6:	46c0      	nop			; (mov r8, r8)
200004a8:	40021015 	andmi	r1, r2, r5, lsl r0

200004ac <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
200004ac:	b580      	push	{r7, lr}
200004ae:	b082      	sub	sp, #8
200004b0:	af00      	add	r7, sp, #0
200004b2:	0002      	movs	r2, r0
200004b4:	1dfb      	adds	r3, r7, #7
200004b6:	701a      	strb	r2, [r3, #0]
200004b8:	1dbb      	adds	r3, r7, #6
200004ba:	1c0a      	adds	r2, r1, #0
200004bc:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200004be:	2040      	movs	r0, #64	; 0x40
200004c0:	f7ff feea 	bl	20000298 <graphics_ctrl_bit_clear>
    select_controller(controller);
200004c4:	1dbb      	adds	r3, r7, #6
200004c6:	781b      	ldrb	r3, [r3, #0]
200004c8:	0018      	movs	r0, r3
200004ca:	f7ff feff 	bl	200002cc <select_controller>
    graphics_ctrl_bit_clear(B_RS | B_RW);
200004ce:	2003      	movs	r0, #3
200004d0:	f7ff fee2 	bl	20000298 <graphics_ctrl_bit_clear>
    graphic_write(command, controller);
200004d4:	1dbb      	adds	r3, r7, #6
200004d6:	781a      	ldrb	r2, [r3, #0]
200004d8:	1dfb      	adds	r3, r7, #7
200004da:	781b      	ldrb	r3, [r3, #0]
200004dc:	0011      	movs	r1, r2
200004de:	0018      	movs	r0, r3
200004e0:	f7ff ffa4 	bl	2000042c <graphic_write>
}
200004e4:	46c0      	nop			; (mov r8, r8)
200004e6:	46bd      	mov	sp, r7
200004e8:	b002      	add	sp, #8
200004ea:	bd80      	pop	{r7, pc}

200004ec <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200004ec:	b580      	push	{r7, lr}
200004ee:	b082      	sub	sp, #8
200004f0:	af00      	add	r7, sp, #0
200004f2:	0002      	movs	r2, r0
200004f4:	1dfb      	adds	r3, r7, #7
200004f6:	701a      	strb	r2, [r3, #0]
200004f8:	1dbb      	adds	r3, r7, #6
200004fa:	1c0a      	adds	r2, r1, #0
200004fc:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200004fe:	2040      	movs	r0, #64	; 0x40
20000500:	f7ff feca 	bl	20000298 <graphics_ctrl_bit_clear>
    select_controller(controller);
20000504:	1dbb      	adds	r3, r7, #6
20000506:	781b      	ldrb	r3, [r3, #0]
20000508:	0018      	movs	r0, r3
2000050a:	f7ff fedf 	bl	200002cc <select_controller>
    graphics_ctrl_bit_set(B_RS);
2000050e:	2001      	movs	r0, #1
20000510:	f7ff fea6 	bl	20000260 <graphics_ctrl_bit_set>
    graphics_ctrl_bit_clear(B_RW);
20000514:	2002      	movs	r0, #2
20000516:	f7ff febf 	bl	20000298 <graphics_ctrl_bit_clear>
    graphic_write(data, controller);
2000051a:	1dbb      	adds	r3, r7, #6
2000051c:	781a      	ldrb	r2, [r3, #0]
2000051e:	1dfb      	adds	r3, r7, #7
20000520:	781b      	ldrb	r3, [r3, #0]
20000522:	0011      	movs	r1, r2
20000524:	0018      	movs	r0, r3
20000526:	f7ff ff81 	bl	2000042c <graphic_write>
}
2000052a:	46c0      	nop			; (mov r8, r8)
2000052c:	46bd      	mov	sp, r7
2000052e:	b002      	add	sp, #8
20000530:	bd80      	pop	{r7, pc}

20000532 <graphics_read_data>:

uint8_t graphics_read_data(uint8_t controller){
20000532:	b580      	push	{r7, lr}
20000534:	b082      	sub	sp, #8
20000536:	af00      	add	r7, sp, #0
20000538:	0002      	movs	r2, r0
2000053a:	1dfb      	adds	r3, r7, #7
2000053c:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
2000053e:	1dfb      	adds	r3, r7, #7
20000540:	781b      	ldrb	r3, [r3, #0]
20000542:	0018      	movs	r0, r3
20000544:	f7ff ff2a 	bl	2000039c <graphic_read>
    return graphic_read(controller);
20000548:	1dfb      	adds	r3, r7, #7
2000054a:	781b      	ldrb	r3, [r3, #0]
2000054c:	0018      	movs	r0, r3
2000054e:	f7ff ff25 	bl	2000039c <graphic_read>
20000552:	0003      	movs	r3, r0
}
20000554:	0018      	movs	r0, r3
20000556:	46bd      	mov	sp, r7
20000558:	b002      	add	sp, #8
2000055a:	bd80      	pop	{r7, pc}

2000055c <graphic_initialize>:

void graphic_initialize(void){
2000055c:	b580      	push	{r7, lr}
2000055e:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_set(B_E);
20000560:	2040      	movs	r0, #64	; 0x40
20000562:	f7ff fe7d 	bl	20000260 <graphics_ctrl_bit_set>
    delay_micro(10);
20000566:	200a      	movs	r0, #10
20000568:	f000 fa02 	bl	20000970 <delay_micro>
    graphics_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000056c:	2078      	movs	r0, #120	; 0x78
2000056e:	f7ff fe93 	bl	20000298 <graphics_ctrl_bit_clear>
    delay_milli(30);
20000572:	201e      	movs	r0, #30
20000574:	f000 fa12 	bl	2000099c <delay_milli>
    graphics_ctrl_bit_set(B_RST);
20000578:	2020      	movs	r0, #32
2000057a:	f7ff fe71 	bl	20000260 <graphics_ctrl_bit_set>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
2000057e:	2118      	movs	r1, #24
20000580:	203e      	movs	r0, #62	; 0x3e
20000582:	f7ff ff93 	bl	200004ac <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000586:	2118      	movs	r1, #24
20000588:	203f      	movs	r0, #63	; 0x3f
2000058a:	f7ff ff8f 	bl	200004ac <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
2000058e:	2118      	movs	r1, #24
20000590:	20c0      	movs	r0, #192	; 0xc0
20000592:	f7ff ff8b 	bl	200004ac <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000596:	2118      	movs	r1, #24
20000598:	2040      	movs	r0, #64	; 0x40
2000059a:	f7ff ff87 	bl	200004ac <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
2000059e:	2118      	movs	r1, #24
200005a0:	20b8      	movs	r0, #184	; 0xb8
200005a2:	f7ff ff83 	bl	200004ac <graphic_write_command>
    select_controller(0);
200005a6:	2000      	movs	r0, #0
200005a8:	f7ff fe90 	bl	200002cc <select_controller>
}
200005ac:	46c0      	nop			; (mov r8, r8)
200005ae:	46bd      	mov	sp, r7
200005b0:	bd80      	pop	{r7, pc}

200005b2 <graphic_clear_screen>:

void graphic_clear_screen(void){
200005b2:	b580      	push	{r7, lr}
200005b4:	b082      	sub	sp, #8
200005b6:	af00      	add	r7, sp, #0
    for(int page = 0; page < PAGE; page++){
200005b8:	2300      	movs	r3, #0
200005ba:	607b      	str	r3, [r7, #4]
200005bc:	e01e      	b.n	200005fc <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
200005be:	687b      	ldr	r3, [r7, #4]
200005c0:	b25b      	sxtb	r3, r3
200005c2:	2248      	movs	r2, #72	; 0x48
200005c4:	4252      	negs	r2, r2
200005c6:	4313      	orrs	r3, r2
200005c8:	b25b      	sxtb	r3, r3
200005ca:	b2db      	uxtb	r3, r3
200005cc:	2118      	movs	r1, #24
200005ce:	0018      	movs	r0, r3
200005d0:	f7ff ff6c 	bl	200004ac <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
200005d4:	2118      	movs	r1, #24
200005d6:	2040      	movs	r0, #64	; 0x40
200005d8:	f7ff ff68 	bl	200004ac <graphic_write_command>
        for(int add = 0; add < ADD; add++){
200005dc:	2300      	movs	r3, #0
200005de:	603b      	str	r3, [r7, #0]
200005e0:	e006      	b.n	200005f0 <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
200005e2:	2118      	movs	r1, #24
200005e4:	2000      	movs	r0, #0
200005e6:	f7ff ff81 	bl	200004ec <graphic_write_data>
        for(int add = 0; add < ADD; add++){
200005ea:	683b      	ldr	r3, [r7, #0]
200005ec:	3301      	adds	r3, #1
200005ee:	603b      	str	r3, [r7, #0]
200005f0:	683b      	ldr	r3, [r7, #0]
200005f2:	2b3e      	cmp	r3, #62	; 0x3e
200005f4:	ddf5      	ble.n	200005e2 <graphic_clear_screen+0x30>
    for(int page = 0; page < PAGE; page++){
200005f6:	687b      	ldr	r3, [r7, #4]
200005f8:	3301      	adds	r3, #1
200005fa:	607b      	str	r3, [r7, #4]
200005fc:	687b      	ldr	r3, [r7, #4]
200005fe:	2b07      	cmp	r3, #7
20000600:	dddd      	ble.n	200005be <graphic_clear_screen+0xc>
        }
    }
    
}
20000602:	46c0      	nop			; (mov r8, r8)
20000604:	46bd      	mov	sp, r7
20000606:	b002      	add	sp, #8
20000608:	bd80      	pop	{r7, pc}

2000060a <pixel>:


void pixel(unsigned char x, unsigned char y, unsigned char set){
2000060a:	b590      	push	{r4, r7, lr}
2000060c:	b085      	sub	sp, #20
2000060e:	af00      	add	r7, sp, #0
20000610:	0004      	movs	r4, r0
20000612:	0008      	movs	r0, r1
20000614:	0011      	movs	r1, r2
20000616:	1dfb      	adds	r3, r7, #7
20000618:	1c22      	adds	r2, r4, #0
2000061a:	701a      	strb	r2, [r3, #0]
2000061c:	1dbb      	adds	r3, r7, #6
2000061e:	1c02      	adds	r2, r0, #0
20000620:	701a      	strb	r2, [r3, #0]
20000622:	1d7b      	adds	r3, r7, #5
20000624:	1c0a      	adds	r2, r1, #0
20000626:	701a      	strb	r2, [r3, #0]
    if((x < 0 || y < 0) || (x > SCREEN_WIDTH || y > SCREEN_HEIGHT)) return;
20000628:	1dfb      	adds	r3, r7, #7
2000062a:	781b      	ldrb	r3, [r3, #0]
2000062c:	b25b      	sxtb	r3, r3
2000062e:	2b00      	cmp	r3, #0
20000630:	da00      	bge.n	20000634 <pixel+0x2a>
20000632:	e107      	b.n	20000844 <pixel+0x23a>
20000634:	1dbb      	adds	r3, r7, #6
20000636:	781b      	ldrb	r3, [r3, #0]
20000638:	2b3f      	cmp	r3, #63	; 0x3f
2000063a:	d900      	bls.n	2000063e <pixel+0x34>
2000063c:	e102      	b.n	20000844 <pixel+0x23a>
    
    unsigned char index = (y-1) / PAGE;
2000063e:	1dbb      	adds	r3, r7, #6
20000640:	781b      	ldrb	r3, [r3, #0]
20000642:	3b01      	subs	r3, #1
20000644:	2b00      	cmp	r3, #0
20000646:	da00      	bge.n	2000064a <pixel+0x40>
20000648:	3307      	adds	r3, #7
2000064a:	10db      	asrs	r3, r3, #3
2000064c:	001a      	movs	r2, r3
2000064e:	230d      	movs	r3, #13
20000650:	18fb      	adds	r3, r7, r3
20000652:	701a      	strb	r2, [r3, #0]
    unsigned char mask;
    
    if((y-1) % 8 == 0){mask = 1;}
20000654:	1dbb      	adds	r3, r7, #6
20000656:	781b      	ldrb	r3, [r3, #0]
20000658:	3b01      	subs	r3, #1
2000065a:	001a      	movs	r2, r3
2000065c:	2307      	movs	r3, #7
2000065e:	4013      	ands	r3, r2
20000660:	d103      	bne.n	2000066a <pixel+0x60>
20000662:	230f      	movs	r3, #15
20000664:	18fb      	adds	r3, r7, r3
20000666:	2201      	movs	r2, #1
20000668:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 1){mask = 2;}
2000066a:	1dbb      	adds	r3, r7, #6
2000066c:	781b      	ldrb	r3, [r3, #0]
2000066e:	3b01      	subs	r3, #1
20000670:	4a76      	ldr	r2, [pc, #472]	; (2000084c <pixel+0x242>)
20000672:	4013      	ands	r3, r2
20000674:	d504      	bpl.n	20000680 <pixel+0x76>
20000676:	3b01      	subs	r3, #1
20000678:	2208      	movs	r2, #8
2000067a:	4252      	negs	r2, r2
2000067c:	4313      	orrs	r3, r2
2000067e:	3301      	adds	r3, #1
20000680:	2b01      	cmp	r3, #1
20000682:	d103      	bne.n	2000068c <pixel+0x82>
20000684:	230f      	movs	r3, #15
20000686:	18fb      	adds	r3, r7, r3
20000688:	2202      	movs	r2, #2
2000068a:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 2){mask = 4;}
2000068c:	1dbb      	adds	r3, r7, #6
2000068e:	781b      	ldrb	r3, [r3, #0]
20000690:	3b01      	subs	r3, #1
20000692:	4a6e      	ldr	r2, [pc, #440]	; (2000084c <pixel+0x242>)
20000694:	4013      	ands	r3, r2
20000696:	d504      	bpl.n	200006a2 <pixel+0x98>
20000698:	3b01      	subs	r3, #1
2000069a:	2208      	movs	r2, #8
2000069c:	4252      	negs	r2, r2
2000069e:	4313      	orrs	r3, r2
200006a0:	3301      	adds	r3, #1
200006a2:	2b02      	cmp	r3, #2
200006a4:	d103      	bne.n	200006ae <pixel+0xa4>
200006a6:	230f      	movs	r3, #15
200006a8:	18fb      	adds	r3, r7, r3
200006aa:	2204      	movs	r2, #4
200006ac:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 3){mask = 8;}
200006ae:	1dbb      	adds	r3, r7, #6
200006b0:	781b      	ldrb	r3, [r3, #0]
200006b2:	3b01      	subs	r3, #1
200006b4:	4a65      	ldr	r2, [pc, #404]	; (2000084c <pixel+0x242>)
200006b6:	4013      	ands	r3, r2
200006b8:	d504      	bpl.n	200006c4 <pixel+0xba>
200006ba:	3b01      	subs	r3, #1
200006bc:	2208      	movs	r2, #8
200006be:	4252      	negs	r2, r2
200006c0:	4313      	orrs	r3, r2
200006c2:	3301      	adds	r3, #1
200006c4:	2b03      	cmp	r3, #3
200006c6:	d103      	bne.n	200006d0 <pixel+0xc6>
200006c8:	230f      	movs	r3, #15
200006ca:	18fb      	adds	r3, r7, r3
200006cc:	2208      	movs	r2, #8
200006ce:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 4){mask = 0x10;}
200006d0:	1dbb      	adds	r3, r7, #6
200006d2:	781b      	ldrb	r3, [r3, #0]
200006d4:	3b01      	subs	r3, #1
200006d6:	4a5d      	ldr	r2, [pc, #372]	; (2000084c <pixel+0x242>)
200006d8:	4013      	ands	r3, r2
200006da:	d504      	bpl.n	200006e6 <pixel+0xdc>
200006dc:	3b01      	subs	r3, #1
200006de:	2208      	movs	r2, #8
200006e0:	4252      	negs	r2, r2
200006e2:	4313      	orrs	r3, r2
200006e4:	3301      	adds	r3, #1
200006e6:	2b04      	cmp	r3, #4
200006e8:	d103      	bne.n	200006f2 <pixel+0xe8>
200006ea:	230f      	movs	r3, #15
200006ec:	18fb      	adds	r3, r7, r3
200006ee:	2210      	movs	r2, #16
200006f0:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 5){mask = 0x20;}
200006f2:	1dbb      	adds	r3, r7, #6
200006f4:	781b      	ldrb	r3, [r3, #0]
200006f6:	3b01      	subs	r3, #1
200006f8:	4a54      	ldr	r2, [pc, #336]	; (2000084c <pixel+0x242>)
200006fa:	4013      	ands	r3, r2
200006fc:	d504      	bpl.n	20000708 <pixel+0xfe>
200006fe:	3b01      	subs	r3, #1
20000700:	2208      	movs	r2, #8
20000702:	4252      	negs	r2, r2
20000704:	4313      	orrs	r3, r2
20000706:	3301      	adds	r3, #1
20000708:	2b05      	cmp	r3, #5
2000070a:	d103      	bne.n	20000714 <pixel+0x10a>
2000070c:	230f      	movs	r3, #15
2000070e:	18fb      	adds	r3, r7, r3
20000710:	2220      	movs	r2, #32
20000712:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 6){mask = 0x40;}
20000714:	1dbb      	adds	r3, r7, #6
20000716:	781b      	ldrb	r3, [r3, #0]
20000718:	3b01      	subs	r3, #1
2000071a:	4a4c      	ldr	r2, [pc, #304]	; (2000084c <pixel+0x242>)
2000071c:	4013      	ands	r3, r2
2000071e:	d504      	bpl.n	2000072a <pixel+0x120>
20000720:	3b01      	subs	r3, #1
20000722:	2208      	movs	r2, #8
20000724:	4252      	negs	r2, r2
20000726:	4313      	orrs	r3, r2
20000728:	3301      	adds	r3, #1
2000072a:	2b06      	cmp	r3, #6
2000072c:	d103      	bne.n	20000736 <pixel+0x12c>
2000072e:	230f      	movs	r3, #15
20000730:	18fb      	adds	r3, r7, r3
20000732:	2240      	movs	r2, #64	; 0x40
20000734:	701a      	strb	r2, [r3, #0]
    if((y-1) % 8 == 7){mask = 0x80;}
20000736:	1dbb      	adds	r3, r7, #6
20000738:	781b      	ldrb	r3, [r3, #0]
2000073a:	3b01      	subs	r3, #1
2000073c:	4a43      	ldr	r2, [pc, #268]	; (2000084c <pixel+0x242>)
2000073e:	4013      	ands	r3, r2
20000740:	d504      	bpl.n	2000074c <pixel+0x142>
20000742:	3b01      	subs	r3, #1
20000744:	2208      	movs	r2, #8
20000746:	4252      	negs	r2, r2
20000748:	4313      	orrs	r3, r2
2000074a:	3301      	adds	r3, #1
2000074c:	2b07      	cmp	r3, #7
2000074e:	d103      	bne.n	20000758 <pixel+0x14e>
20000750:	230f      	movs	r3, #15
20000752:	18fb      	adds	r3, r7, r3
20000754:	2280      	movs	r2, #128	; 0x80
20000756:	701a      	strb	r2, [r3, #0]
    
    if(set == 0){mask = ~mask;}
20000758:	1d7b      	adds	r3, r7, #5
2000075a:	781b      	ldrb	r3, [r3, #0]
2000075c:	2b00      	cmp	r3, #0
2000075e:	d106      	bne.n	2000076e <pixel+0x164>
20000760:	230f      	movs	r3, #15
20000762:	18fb      	adds	r3, r7, r3
20000764:	220f      	movs	r2, #15
20000766:	18ba      	adds	r2, r7, r2
20000768:	7812      	ldrb	r2, [r2, #0]
2000076a:	43d2      	mvns	r2, r2
2000076c:	701a      	strb	r2, [r3, #0]
    
    unsigned char controller;
    if(x > 64){
2000076e:	1dfb      	adds	r3, r7, #7
20000770:	781b      	ldrb	r3, [r3, #0]
20000772:	2b40      	cmp	r3, #64	; 0x40
20000774:	d909      	bls.n	2000078a <pixel+0x180>
        controller = B_CS2;
20000776:	230e      	movs	r3, #14
20000778:	18fb      	adds	r3, r7, r3
2000077a:	2210      	movs	r2, #16
2000077c:	701a      	strb	r2, [r3, #0]
        x = x - 65;
2000077e:	1dfb      	adds	r3, r7, #7
20000780:	1dfa      	adds	r2, r7, #7
20000782:	7812      	ldrb	r2, [r2, #0]
20000784:	3a41      	subs	r2, #65	; 0x41
20000786:	701a      	strb	r2, [r3, #0]
20000788:	e008      	b.n	2000079c <pixel+0x192>
        }
    else{
        controller = B_CS1;
2000078a:	230e      	movs	r3, #14
2000078c:	18fb      	adds	r3, r7, r3
2000078e:	2208      	movs	r2, #8
20000790:	701a      	strb	r2, [r3, #0]
        x = x - 1;
20000792:	1dfb      	adds	r3, r7, #7
20000794:	1dfa      	adds	r2, r7, #7
20000796:	7812      	ldrb	r2, [r2, #0]
20000798:	3a01      	subs	r2, #1
2000079a:	701a      	strb	r2, [r3, #0]
        }
    
    graphic_write_command(LCD_SET_ADD | x, controller);
2000079c:	1dfb      	adds	r3, r7, #7
2000079e:	781b      	ldrb	r3, [r3, #0]
200007a0:	2240      	movs	r2, #64	; 0x40
200007a2:	4313      	orrs	r3, r2
200007a4:	b2da      	uxtb	r2, r3
200007a6:	230e      	movs	r3, #14
200007a8:	18fb      	adds	r3, r7, r3
200007aa:	781b      	ldrb	r3, [r3, #0]
200007ac:	0019      	movs	r1, r3
200007ae:	0010      	movs	r0, r2
200007b0:	f7ff fe7c 	bl	200004ac <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200007b4:	230d      	movs	r3, #13
200007b6:	18fb      	adds	r3, r7, r3
200007b8:	781b      	ldrb	r3, [r3, #0]
200007ba:	2248      	movs	r2, #72	; 0x48
200007bc:	4252      	negs	r2, r2
200007be:	4313      	orrs	r3, r2
200007c0:	b2da      	uxtb	r2, r3
200007c2:	230e      	movs	r3, #14
200007c4:	18fb      	adds	r3, r7, r3
200007c6:	781b      	ldrb	r3, [r3, #0]
200007c8:	0019      	movs	r1, r3
200007ca:	0010      	movs	r0, r2
200007cc:	f7ff fe6e 	bl	200004ac <graphic_write_command>
	unsigned char temp = graphics_read_data(controller);
200007d0:	230c      	movs	r3, #12
200007d2:	18fc      	adds	r4, r7, r3
200007d4:	230e      	movs	r3, #14
200007d6:	18fb      	adds	r3, r7, r3
200007d8:	781b      	ldrb	r3, [r3, #0]
200007da:	0018      	movs	r0, r3
200007dc:	f7ff fea9 	bl	20000532 <graphics_read_data>
200007e0:	0003      	movs	r3, r0
200007e2:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
200007e4:	1dfb      	adds	r3, r7, #7
200007e6:	781b      	ldrb	r3, [r3, #0]
200007e8:	2240      	movs	r2, #64	; 0x40
200007ea:	4313      	orrs	r3, r2
200007ec:	b2da      	uxtb	r2, r3
200007ee:	230e      	movs	r3, #14
200007f0:	18fb      	adds	r3, r7, r3
200007f2:	781b      	ldrb	r3, [r3, #0]
200007f4:	0019      	movs	r1, r3
200007f6:	0010      	movs	r0, r2
200007f8:	f7ff fe58 	bl	200004ac <graphic_write_command>
    
    if(set == 1)
200007fc:	1d7b      	adds	r3, r7, #5
200007fe:	781b      	ldrb	r3, [r3, #0]
20000800:	2b01      	cmp	r3, #1
20000802:	d10a      	bne.n	2000081a <pixel+0x210>
        {mask = mask | temp;}
20000804:	230f      	movs	r3, #15
20000806:	18fb      	adds	r3, r7, r3
20000808:	220f      	movs	r2, #15
2000080a:	18b9      	adds	r1, r7, r2
2000080c:	220c      	movs	r2, #12
2000080e:	18ba      	adds	r2, r7, r2
20000810:	7809      	ldrb	r1, [r1, #0]
20000812:	7812      	ldrb	r2, [r2, #0]
20000814:	430a      	orrs	r2, r1
20000816:	701a      	strb	r2, [r3, #0]
20000818:	e009      	b.n	2000082e <pixel+0x224>
    else
        {mask = mask & temp;}
2000081a:	230f      	movs	r3, #15
2000081c:	18fb      	adds	r3, r7, r3
2000081e:	220f      	movs	r2, #15
20000820:	18ba      	adds	r2, r7, r2
20000822:	210c      	movs	r1, #12
20000824:	1879      	adds	r1, r7, r1
20000826:	7812      	ldrb	r2, [r2, #0]
20000828:	7809      	ldrb	r1, [r1, #0]
2000082a:	400a      	ands	r2, r1
2000082c:	701a      	strb	r2, [r3, #0]
    
    graphic_write_data(mask, controller);
2000082e:	230e      	movs	r3, #14
20000830:	18fb      	adds	r3, r7, r3
20000832:	781a      	ldrb	r2, [r3, #0]
20000834:	230f      	movs	r3, #15
20000836:	18fb      	adds	r3, r7, r3
20000838:	781b      	ldrb	r3, [r3, #0]
2000083a:	0011      	movs	r1, r2
2000083c:	0018      	movs	r0, r3
2000083e:	f7ff fe55 	bl	200004ec <graphic_write_data>
20000842:	e000      	b.n	20000846 <pixel+0x23c>
    if((x < 0 || y < 0) || (x > SCREEN_WIDTH || y > SCREEN_HEIGHT)) return;
20000844:	46c0      	nop			; (mov r8, r8)
}
20000846:	46bd      	mov	sp, r7
20000848:	b005      	add	sp, #20
2000084a:	bd90      	pop	{r4, r7, pc}
2000084c:	80000007 	andhi	r0, r0, r7

20000850 <draw_object>:
#include "object.h"
#include "graphic.h"

void draw_object(POBJECT this) {
20000850:	b580      	push	{r7, lr}
20000852:	b084      	sub	sp, #16
20000854:	af00      	add	r7, sp, #0
20000856:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
20000858:	2300      	movs	r3, #0
2000085a:	60fb      	str	r3, [r7, #12]
2000085c:	e020      	b.n	200008a0 <draw_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 1);
2000085e:	687b      	ldr	r3, [r7, #4]
20000860:	681a      	ldr	r2, [r3, #0]
20000862:	68fb      	ldr	r3, [r7, #12]
20000864:	3304      	adds	r3, #4
20000866:	005b      	lsls	r3, r3, #1
20000868:	18d3      	adds	r3, r2, r3
2000086a:	3304      	adds	r3, #4
2000086c:	781a      	ldrb	r2, [r3, #0]
2000086e:	687b      	ldr	r3, [r7, #4]
20000870:	68db      	ldr	r3, [r3, #12]
20000872:	b2db      	uxtb	r3, r3
20000874:	18d3      	adds	r3, r2, r3
20000876:	b2d8      	uxtb	r0, r3
20000878:	687b      	ldr	r3, [r7, #4]
2000087a:	681a      	ldr	r2, [r3, #0]
2000087c:	68fb      	ldr	r3, [r7, #12]
2000087e:	3304      	adds	r3, #4
20000880:	005b      	lsls	r3, r3, #1
20000882:	18d3      	adds	r3, r2, r3
20000884:	3305      	adds	r3, #5
20000886:	781a      	ldrb	r2, [r3, #0]
20000888:	687b      	ldr	r3, [r7, #4]
2000088a:	691b      	ldr	r3, [r3, #16]
2000088c:	b2db      	uxtb	r3, r3
2000088e:	18d3      	adds	r3, r2, r3
20000890:	b2db      	uxtb	r3, r3
20000892:	2201      	movs	r2, #1
20000894:	0019      	movs	r1, r3
20000896:	f7ff feb8 	bl	2000060a <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
2000089a:	68fb      	ldr	r3, [r7, #12]
2000089c:	3301      	adds	r3, #1
2000089e:	60fb      	str	r3, [r7, #12]
200008a0:	68fb      	ldr	r3, [r7, #12]
200008a2:	2b63      	cmp	r3, #99	; 0x63
200008a4:	dddb      	ble.n	2000085e <draw_object+0xe>
	}
}
200008a6:	46c0      	nop			; (mov r8, r8)
200008a8:	46bd      	mov	sp, r7
200008aa:	b004      	add	sp, #16
200008ac:	bd80      	pop	{r7, pc}

200008ae <clear_object>:
void clear_object(POBJECT this) {
200008ae:	b580      	push	{r7, lr}
200008b0:	b084      	sub	sp, #16
200008b2:	af00      	add	r7, sp, #0
200008b4:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
200008b6:	2300      	movs	r3, #0
200008b8:	60fb      	str	r3, [r7, #12]
200008ba:	e020      	b.n	200008fe <clear_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 0);
200008bc:	687b      	ldr	r3, [r7, #4]
200008be:	681a      	ldr	r2, [r3, #0]
200008c0:	68fb      	ldr	r3, [r7, #12]
200008c2:	3304      	adds	r3, #4
200008c4:	005b      	lsls	r3, r3, #1
200008c6:	18d3      	adds	r3, r2, r3
200008c8:	3304      	adds	r3, #4
200008ca:	781a      	ldrb	r2, [r3, #0]
200008cc:	687b      	ldr	r3, [r7, #4]
200008ce:	68db      	ldr	r3, [r3, #12]
200008d0:	b2db      	uxtb	r3, r3
200008d2:	18d3      	adds	r3, r2, r3
200008d4:	b2d8      	uxtb	r0, r3
200008d6:	687b      	ldr	r3, [r7, #4]
200008d8:	681a      	ldr	r2, [r3, #0]
200008da:	68fb      	ldr	r3, [r7, #12]
200008dc:	3304      	adds	r3, #4
200008de:	005b      	lsls	r3, r3, #1
200008e0:	18d3      	adds	r3, r2, r3
200008e2:	3305      	adds	r3, #5
200008e4:	781a      	ldrb	r2, [r3, #0]
200008e6:	687b      	ldr	r3, [r7, #4]
200008e8:	691b      	ldr	r3, [r3, #16]
200008ea:	b2db      	uxtb	r3, r3
200008ec:	18d3      	adds	r3, r2, r3
200008ee:	b2db      	uxtb	r3, r3
200008f0:	2200      	movs	r2, #0
200008f2:	0019      	movs	r1, r3
200008f4:	f7ff fe89 	bl	2000060a <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
200008f8:	68fb      	ldr	r3, [r7, #12]
200008fa:	3301      	adds	r3, #1
200008fc:	60fb      	str	r3, [r7, #12]
200008fe:	68fb      	ldr	r3, [r7, #12]
20000900:	2b63      	cmp	r3, #99	; 0x63
20000902:	dddb      	ble.n	200008bc <clear_object+0xe>
	}
}
20000904:	46c0      	nop			; (mov r8, r8)
20000906:	46bd      	mov	sp, r7
20000908:	b004      	add	sp, #16
2000090a:	bd80      	pop	{r7, pc}

2000090c <set_object_speed>:

void set_object_speed(POBJECT this, int x, int y) {
2000090c:	b580      	push	{r7, lr}
2000090e:	b084      	sub	sp, #16
20000910:	af00      	add	r7, sp, #0
20000912:	60f8      	str	r0, [r7, #12]
20000914:	60b9      	str	r1, [r7, #8]
20000916:	607a      	str	r2, [r7, #4]
	this->dirX = x;
20000918:	68fb      	ldr	r3, [r7, #12]
2000091a:	68ba      	ldr	r2, [r7, #8]
2000091c:	605a      	str	r2, [r3, #4]
	this->dirY = y;
2000091e:	68fb      	ldr	r3, [r7, #12]
20000920:	687a      	ldr	r2, [r7, #4]
20000922:	609a      	str	r2, [r3, #8]
20000924:	46c0      	nop			; (mov r8, r8)
20000926:	46bd      	mov	sp, r7
20000928:	b004      	add	sp, #16
2000092a:	bd80      	pop	{r7, pc}

2000092c <delay_250ns>:
#include "timer.h"


void delay_250ns(void) {
2000092c:	b580      	push	{r7, lr}
2000092e:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000930:	4b0c      	ldr	r3, [pc, #48]	; (20000964 <delay_250ns+0x38>)
20000932:	2200      	movs	r2, #0
20000934:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
20000936:	4b0c      	ldr	r3, [pc, #48]	; (20000968 <delay_250ns+0x3c>)
20000938:	2231      	movs	r2, #49	; 0x31
2000093a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000093c:	4b0b      	ldr	r3, [pc, #44]	; (2000096c <delay_250ns+0x40>)
2000093e:	2200      	movs	r2, #0
20000940:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000942:	4b08      	ldr	r3, [pc, #32]	; (20000964 <delay_250ns+0x38>)
20000944:	2205      	movs	r2, #5
20000946:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
20000948:	46c0      	nop			; (mov r8, r8)
2000094a:	4b06      	ldr	r3, [pc, #24]	; (20000964 <delay_250ns+0x38>)
2000094c:	681a      	ldr	r2, [r3, #0]
2000094e:	2380      	movs	r3, #128	; 0x80
20000950:	025b      	lsls	r3, r3, #9
20000952:	4013      	ands	r3, r2
20000954:	d0f9      	beq.n	2000094a <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
20000956:	4b03      	ldr	r3, [pc, #12]	; (20000964 <delay_250ns+0x38>)
20000958:	2200      	movs	r2, #0
2000095a:	601a      	str	r2, [r3, #0]
}
2000095c:	46c0      	nop			; (mov r8, r8)
2000095e:	46bd      	mov	sp, r7
20000960:	bd80      	pop	{r7, pc}
20000962:	46c0      	nop			; (mov r8, r8)
20000964:	e000e010 	and	lr, r0, r0, lsl r0
20000968:	e000e014 	and	lr, r0, r4, lsl r0
2000096c:	e000e018 	and	lr, r0, r8, lsl r0

20000970 <delay_micro>:

void delay_micro(unsigned int us) {
20000970:	b580      	push	{r7, lr}
20000972:	b082      	sub	sp, #8
20000974:	af00      	add	r7, sp, #0
20000976:	6078      	str	r0, [r7, #4]
	while(us--) {
20000978:	e007      	b.n	2000098a <delay_micro+0x1a>
		delay_250ns();
2000097a:	f7ff ffd7 	bl	2000092c <delay_250ns>
		delay_250ns();
2000097e:	f7ff ffd5 	bl	2000092c <delay_250ns>
		delay_250ns();
20000982:	f7ff ffd3 	bl	2000092c <delay_250ns>
		delay_250ns();
20000986:	f7ff ffd1 	bl	2000092c <delay_250ns>
	while(us--) {
2000098a:	687b      	ldr	r3, [r7, #4]
2000098c:	1e5a      	subs	r2, r3, #1
2000098e:	607a      	str	r2, [r7, #4]
20000990:	2b00      	cmp	r3, #0
20000992:	d1f2      	bne.n	2000097a <delay_micro+0xa>
	}
}
20000994:	46c0      	nop			; (mov r8, r8)
20000996:	46bd      	mov	sp, r7
20000998:	b002      	add	sp, #8
2000099a:	bd80      	pop	{r7, pc}

2000099c <delay_milli>:

void delay_milli(unsigned int ms) {
2000099c:	b580      	push	{r7, lr}
2000099e:	b082      	sub	sp, #8
200009a0:	af00      	add	r7, sp, #0
200009a2:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_micro(ms);
200009a4:	687b      	ldr	r3, [r7, #4]
200009a6:	0018      	movs	r0, r3
200009a8:	f7ff ffe2 	bl	20000970 <delay_micro>
	#else
		delay_micro(1000 * ms);
	#endif
}
200009ac:	46c0      	nop			; (mov r8, r8)
200009ae:	46bd      	mov	sp, r7
200009b0:	b002      	add	sp, #8
200009b2:	bd80      	pop	{r7, pc}

200009b4 <delay_500ns>:

void delay_500ns(void) {
200009b4:	b580      	push	{r7, lr}
200009b6:	af00      	add	r7, sp, #0
	delay_250ns();
200009b8:	f7ff ffb8 	bl	2000092c <delay_250ns>
	delay_250ns();
200009bc:	f7ff ffb6 	bl	2000092c <delay_250ns>
}
200009c0:	46c0      	nop			; (mov r8, r8)
200009c2:	46bd      	mov	sp, r7
200009c4:	bd80      	pop	{r7, pc}
200009c6:	46c0      	nop			; (mov r8, r8)

200009c8 <move_paddle>:
	clear_object,
	move_paddle,
	set_object_speed
};

void move_paddle(POBJECT this) {
200009c8:	b580      	push	{r7, lr}
200009ca:	b082      	sub	sp, #8
200009cc:	af00      	add	r7, sp, #0
200009ce:	6078      	str	r0, [r7, #4]
	clear_object(this);
200009d0:	687b      	ldr	r3, [r7, #4]
200009d2:	0018      	movs	r0, r3
200009d4:	f7ff ff6b 	bl	200008ae <clear_object>
	
	// Move paddle in y direction only.
	this->posY += this->dirY;
200009d8:	687b      	ldr	r3, [r7, #4]
200009da:	691a      	ldr	r2, [r3, #16]
200009dc:	687b      	ldr	r3, [r7, #4]
200009de:	689b      	ldr	r3, [r3, #8]
200009e0:	18d2      	adds	r2, r2, r3
200009e2:	687b      	ldr	r3, [r7, #4]
200009e4:	611a      	str	r2, [r3, #16]
	
	// Wall collisions todo add width check with paddle.
	if(this->posY < 0) {
200009e6:	687b      	ldr	r3, [r7, #4]
200009e8:	691b      	ldr	r3, [r3, #16]
200009ea:	2b00      	cmp	r3, #0
200009ec:	da03      	bge.n	200009f6 <move_paddle+0x2e>
		this->posY = 0;
200009ee:	687b      	ldr	r3, [r7, #4]
200009f0:	2200      	movs	r2, #0
200009f2:	611a      	str	r2, [r3, #16]
200009f4:	e00e      	b.n	20000a14 <move_paddle+0x4c>
	} else if(this->posY + this->geo->sizeY > 127) {
200009f6:	687b      	ldr	r3, [r7, #4]
200009f8:	691a      	ldr	r2, [r3, #16]
200009fa:	687b      	ldr	r3, [r7, #4]
200009fc:	681b      	ldr	r3, [r3, #0]
200009fe:	689b      	ldr	r3, [r3, #8]
20000a00:	18d3      	adds	r3, r2, r3
20000a02:	2b7f      	cmp	r3, #127	; 0x7f
20000a04:	dd06      	ble.n	20000a14 <move_paddle+0x4c>
		this->posY = 127 - this->geo->sizeY;
20000a06:	687b      	ldr	r3, [r7, #4]
20000a08:	681b      	ldr	r3, [r3, #0]
20000a0a:	689b      	ldr	r3, [r3, #8]
20000a0c:	227f      	movs	r2, #127	; 0x7f
20000a0e:	1ad2      	subs	r2, r2, r3
20000a10:	687b      	ldr	r3, [r7, #4]
20000a12:	611a      	str	r2, [r3, #16]
	}
	
	this->draw(this);
20000a14:	687b      	ldr	r3, [r7, #4]
20000a16:	695b      	ldr	r3, [r3, #20]
20000a18:	687a      	ldr	r2, [r7, #4]
20000a1a:	0010      	movs	r0, r2
20000a1c:	4798      	blx	r3
20000a1e:	46c0      	nop			; (mov r8, r8)
20000a20:	46bd      	mov	sp, r7
20000a22:	b002      	add	sp, #8
20000a24:	bd80      	pop	{r7, pc}
	...

20000a28 <activateRow>:
#include "keypad.h"

void activateRow(unsigned char row) {
20000a28:	b580      	push	{r7, lr}
20000a2a:	b082      	sub	sp, #8
20000a2c:	af00      	add	r7, sp, #0
20000a2e:	0002      	movs	r2, r0
20000a30:	1dfb      	adds	r3, r7, #7
20000a32:	701a      	strb	r2, [r3, #0]
	switch(row) {
20000a34:	1dfb      	adds	r3, r7, #7
20000a36:	781b      	ldrb	r3, [r3, #0]
20000a38:	2b04      	cmp	r3, #4
20000a3a:	d818      	bhi.n	20000a6e <activateRow+0x46>
20000a3c:	009a      	lsls	r2, r3, #2
20000a3e:	4b0e      	ldr	r3, [pc, #56]	; (20000a78 <activateRow+0x50>)
20000a40:	18d3      	adds	r3, r2, r3
20000a42:	681b      	ldr	r3, [r3, #0]
20000a44:	469f      	mov	pc, r3
		case 0: *GPIO_D_ODR_HIGH = 0x00; break;
20000a46:	4b0d      	ldr	r3, [pc, #52]	; (20000a7c <activateRow+0x54>)
20000a48:	2200      	movs	r2, #0
20000a4a:	701a      	strb	r2, [r3, #0]
20000a4c:	e00f      	b.n	20000a6e <activateRow+0x46>
		case 1: *GPIO_D_ODR_HIGH = 0x10; break;
20000a4e:	4b0b      	ldr	r3, [pc, #44]	; (20000a7c <activateRow+0x54>)
20000a50:	2210      	movs	r2, #16
20000a52:	701a      	strb	r2, [r3, #0]
20000a54:	e00b      	b.n	20000a6e <activateRow+0x46>
		case 2: *GPIO_D_ODR_HIGH = 0x20; break;
20000a56:	4b09      	ldr	r3, [pc, #36]	; (20000a7c <activateRow+0x54>)
20000a58:	2220      	movs	r2, #32
20000a5a:	701a      	strb	r2, [r3, #0]
20000a5c:	e007      	b.n	20000a6e <activateRow+0x46>
		case 3: *GPIO_D_ODR_HIGH = 0x40; break;
20000a5e:	4b07      	ldr	r3, [pc, #28]	; (20000a7c <activateRow+0x54>)
20000a60:	2240      	movs	r2, #64	; 0x40
20000a62:	701a      	strb	r2, [r3, #0]
20000a64:	e003      	b.n	20000a6e <activateRow+0x46>
		case 4: *GPIO_D_ODR_HIGH = 0x80; break;
20000a66:	4b05      	ldr	r3, [pc, #20]	; (20000a7c <activateRow+0x54>)
20000a68:	2280      	movs	r2, #128	; 0x80
20000a6a:	701a      	strb	r2, [r3, #0]
20000a6c:	46c0      	nop			; (mov r8, r8)
	}
}
20000a6e:	46c0      	nop			; (mov r8, r8)
20000a70:	46bd      	mov	sp, r7
20000a72:	b002      	add	sp, #8
20000a74:	bd80      	pop	{r7, pc}
20000a76:	46c0      	nop			; (mov r8, r8)
20000a78:	20000d7c 	andcs	r0, r0, ip, ror sp
20000a7c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000a80 <readColumn>:

unsigned char readColumn(void) {
20000a80:	b580      	push	{r7, lr}
20000a82:	b082      	sub	sp, #8
20000a84:	af00      	add	r7, sp, #0
	unsigned char idr = *GPIO_D_IDR_HIGH;
20000a86:	4a10      	ldr	r2, [pc, #64]	; (20000ac8 <readColumn+0x48>)
20000a88:	1dfb      	adds	r3, r7, #7
20000a8a:	7812      	ldrb	r2, [r2, #0]
20000a8c:	701a      	strb	r2, [r3, #0]
	if(idr == 0x01) return 1;
20000a8e:	1dfb      	adds	r3, r7, #7
20000a90:	781b      	ldrb	r3, [r3, #0]
20000a92:	2b01      	cmp	r3, #1
20000a94:	d101      	bne.n	20000a9a <readColumn+0x1a>
20000a96:	2301      	movs	r3, #1
20000a98:	e012      	b.n	20000ac0 <readColumn+0x40>
	if(idr == 0x02) return 2;
20000a9a:	1dfb      	adds	r3, r7, #7
20000a9c:	781b      	ldrb	r3, [r3, #0]
20000a9e:	2b02      	cmp	r3, #2
20000aa0:	d101      	bne.n	20000aa6 <readColumn+0x26>
20000aa2:	2302      	movs	r3, #2
20000aa4:	e00c      	b.n	20000ac0 <readColumn+0x40>
	if(idr == 0x04) return 3;
20000aa6:	1dfb      	adds	r3, r7, #7
20000aa8:	781b      	ldrb	r3, [r3, #0]
20000aaa:	2b04      	cmp	r3, #4
20000aac:	d101      	bne.n	20000ab2 <readColumn+0x32>
20000aae:	2303      	movs	r3, #3
20000ab0:	e006      	b.n	20000ac0 <readColumn+0x40>
	if(idr == 0x08) return 4;
20000ab2:	1dfb      	adds	r3, r7, #7
20000ab4:	781b      	ldrb	r3, [r3, #0]
20000ab6:	2b08      	cmp	r3, #8
20000ab8:	d101      	bne.n	20000abe <readColumn+0x3e>
20000aba:	2304      	movs	r3, #4
20000abc:	e000      	b.n	20000ac0 <readColumn+0x40>
	return 0;
20000abe:	2300      	movs	r3, #0
}
20000ac0:	0018      	movs	r0, r3
20000ac2:	46bd      	mov	sp, r7
20000ac4:	b002      	add	sp, #8
20000ac6:	bd80      	pop	{r7, pc}
20000ac8:	40020c11 	andmi	r0, r2, r1, lsl ip

20000acc <keyb>:

unsigned char * keyb(void) {
20000acc:	b590      	push	{r4, r7, lr}
20000ace:	b087      	sub	sp, #28
20000ad0:	af00      	add	r7, sp, #0
	unsigned char keys[] = {0x1,0x2,0x3,0xA,0x4,0x5,0x6,0xB,0x7,0x8,0x9,0xC,0xE,0x0,0xF,0xD};
20000ad2:	1d3b      	adds	r3, r7, #4
20000ad4:	4a21      	ldr	r2, [pc, #132]	; (20000b5c <keyb+0x90>)
20000ad6:	ca13      	ldmia	r2!, {r0, r1, r4}
20000ad8:	c313      	stmia	r3!, {r0, r1, r4}
20000ada:	6812      	ldr	r2, [r2, #0]
20000adc:	601a      	str	r2, [r3, #0]
	static unsigned char returnKeys[4] = {0xFF,0xFF,0xFF,0xFF};
	for(char row = 1; row <= 4; row++) {
20000ade:	2317      	movs	r3, #23
20000ae0:	18fb      	adds	r3, r7, r3
20000ae2:	2201      	movs	r2, #1
20000ae4:	701a      	strb	r2, [r3, #0]
20000ae6:	e02c      	b.n	20000b42 <keyb+0x76>
		activateRow(row);
20000ae8:	2317      	movs	r3, #23
20000aea:	18fb      	adds	r3, r7, r3
20000aec:	781b      	ldrb	r3, [r3, #0]
20000aee:	0018      	movs	r0, r3
20000af0:	f7ff ff9a 	bl	20000a28 <activateRow>
		char column = readColumn();
20000af4:	2316      	movs	r3, #22
20000af6:	18fc      	adds	r4, r7, r3
20000af8:	f7ff ffc2 	bl	20000a80 <readColumn>
20000afc:	0003      	movs	r3, r0
20000afe:	7023      	strb	r3, [r4, #0]
		if(column != 0) {
20000b00:	2316      	movs	r3, #22
20000b02:	18fb      	adds	r3, r7, r3
20000b04:	781b      	ldrb	r3, [r3, #0]
20000b06:	2b00      	cmp	r3, #0
20000b08:	d014      	beq.n	20000b34 <keyb+0x68>
			activateRow(0);
20000b0a:	2000      	movs	r0, #0
20000b0c:	f7ff ff8c 	bl	20000a28 <activateRow>
			returnKeys[row-4] = keys[4 * (row - 1) + (column - 1)];
20000b10:	2317      	movs	r3, #23
20000b12:	18fb      	adds	r3, r7, r3
20000b14:	781b      	ldrb	r3, [r3, #0]
20000b16:	3b04      	subs	r3, #4
20000b18:	2217      	movs	r2, #23
20000b1a:	18ba      	adds	r2, r7, r2
20000b1c:	7812      	ldrb	r2, [r2, #0]
20000b1e:	3a01      	subs	r2, #1
20000b20:	0091      	lsls	r1, r2, #2
20000b22:	2216      	movs	r2, #22
20000b24:	18ba      	adds	r2, r7, r2
20000b26:	7812      	ldrb	r2, [r2, #0]
20000b28:	3a01      	subs	r2, #1
20000b2a:	188a      	adds	r2, r1, r2
20000b2c:	1d39      	adds	r1, r7, #4
20000b2e:	5c89      	ldrb	r1, [r1, r2]
20000b30:	4a0b      	ldr	r2, [pc, #44]	; (20000b60 <keyb+0x94>)
20000b32:	54d1      	strb	r1, [r2, r3]
	for(char row = 1; row <= 4; row++) {
20000b34:	2317      	movs	r3, #23
20000b36:	18fb      	adds	r3, r7, r3
20000b38:	781a      	ldrb	r2, [r3, #0]
20000b3a:	2317      	movs	r3, #23
20000b3c:	18fb      	adds	r3, r7, r3
20000b3e:	3201      	adds	r2, #1
20000b40:	701a      	strb	r2, [r3, #0]
20000b42:	2317      	movs	r3, #23
20000b44:	18fb      	adds	r3, r7, r3
20000b46:	781b      	ldrb	r3, [r3, #0]
20000b48:	2b04      	cmp	r3, #4
20000b4a:	d9cd      	bls.n	20000ae8 <keyb+0x1c>
		}
	}
	activateRow(0);
20000b4c:	2000      	movs	r0, #0
20000b4e:	f7ff ff6b 	bl	20000a28 <activateRow>
	return returnKeys;
20000b52:	4b03      	ldr	r3, [pc, #12]	; (20000b60 <keyb+0x94>)
20000b54:	0018      	movs	r0, r3
20000b56:	46bd      	mov	sp, r7
20000b58:	b007      	add	sp, #28
20000b5a:	bd90      	pop	{r4, r7, pc}
20000b5c:	20000d90 	mulcs	r0, r0, sp
20000b60:	20000d78 	andcs	r0, r0, r8, ror sp

20000b64 <ball_geometry>:
20000b64:	0000000c 	andeq	r0, r0, ip
20000b68:	00000004 	andeq	r0, r0, r4
20000b6c:	00000004 	andeq	r0, r0, r4
20000b70:	02000100 	andeq	r0, r0, #0, 2
20000b74:	01010001 	tsteq	r1, r1
20000b78:	03010201 	movweq	r0, #4609	; 0x1201
20000b7c:	01020002 	tsteq	r2, r2
20000b80:	03020202 	movweq	r0, #8706	; 0x2202
20000b84:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000c38 <ball>:
20000c38:	20000b64 	andcs	r0, r0, r4, ror #22
	...
20000c44:	00000001 	andeq	r0, r0, r1
20000c48:	00000001 	andeq	r0, r0, r1
20000c4c:	20000851 	andcs	r0, r0, r1, asr r8
20000c50:	200008af 	andcs	r0, r0, pc, lsr #17
20000c54:	20000185 	andcs	r0, r0, r5, lsl #3
20000c58:	2000090d 	andcs	r0, r0, sp, lsl #18

20000c5c <paddle_geometry>:
20000c5c:	00000064 	andeq	r0, r0, r4, rrx
20000c60:	00000004 	andeq	r0, r0, r4
20000c64:	00000019 	andeq	r0, r0, r9, lsl r0
20000c68:	00010000 	andeq	r0, r1, r0
20000c6c:	00030002 	andeq	r0, r3, r2
20000c70:	01010100 	mrseq	r0, (UNDEF: 17)
20000c74:	01030102 	tsteq	r3, r2, lsl #2
20000c78:	02010200 	andeq	r0, r1, #0, 4
20000c7c:	02030202 	andeq	r0, r3, #536870912	; 0x20000000
20000c80:	03010300 	movweq	r0, #4864	; 0x1300
20000c84:	03030302 	movweq	r0, #13058	; 0x3302
20000c88:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
20000c8c:	04030402 	streq	r0, [r3], #-1026	; 0xfffffbfe
20000c90:	05010500 	streq	r0, [r1, #-1280]	; 0xfffffb00
20000c94:	05030502 	streq	r0, [r3, #-1282]	; 0xfffffafe
20000c98:	06010600 	streq	r0, [r1], -r0, lsl #12
20000c9c:	06030602 	streq	r0, [r3], -r2, lsl #12
20000ca0:	07010700 	streq	r0, [r1, -r0, lsl #14]
20000ca4:	07030702 	streq	r0, [r3, -r2, lsl #14]
20000ca8:	08010800 	stmdaeq	r1, {fp}
20000cac:	08030802 	stmdaeq	r3, {r1, fp}
20000cb0:	09010900 	stmdbeq	r1, {r8, fp}
20000cb4:	09030902 	stmdbeq	r3, {r1, r8, fp}
20000cb8:	0a010a00 	beq	200434c0 <returnKeys.4003+0x42748>
20000cbc:	0a030a02 	beq	200c34cc <returnKeys.4003+0xc2754>
20000cc0:	0b010b00 	bleq	200438c8 <returnKeys.4003+0x42b50>
20000cc4:	0b030b02 	bleq	200c38d4 <returnKeys.4003+0xc2b5c>
20000cc8:	0c010c00 	stceq	12, cr0, [r1], {-0}
20000ccc:	0c030c02 	stceq	12, cr0, [r3], {2}
20000cd0:	0d010d00 	stceq	13, cr0, [r1, #-0]
20000cd4:	0d030d02 	stceq	13, cr0, [r3, #-8]
20000cd8:	0e010e00 	cdpeq	14, 0, cr0, cr1, cr0, {0}
20000cdc:	0e030e02 	cdpeq	14, 0, cr0, cr3, cr2, {0}
20000ce0:	0f010f00 	svceq	0x00010f00
20000ce4:	0f030f02 	svceq	0x00030f02
20000ce8:	10011000 	andne	r1, r1, r0
20000cec:	10031002 	andne	r1, r3, r2
20000cf0:	11011100 	mrsne	r1, (UNDEF: 17)
20000cf4:	11031102 	tstne	r3, r2, lsl #2
20000cf8:	12011200 	andne	r1, r1, #0, 4
20000cfc:	12031202 	andne	r1, r3, #536870912	; 0x20000000
20000d00:	13011300 	movwne	r1, #4864	; 0x1300
20000d04:	13031302 	movwne	r1, #13058	; 0x3302
20000d08:	14011400 	strne	r1, [r1], #-1024	; 0xfffffc00
20000d0c:	14031402 	strne	r1, [r3], #-1026	; 0xfffffbfe
20000d10:	15011500 	strne	r1, [r1, #-1280]	; 0xfffffb00
20000d14:	15031502 	strne	r1, [r3, #-1282]	; 0xfffffafe
20000d18:	16011600 	strne	r1, [r1], -r0, lsl #12
20000d1c:	16031602 	strne	r1, [r3], -r2, lsl #12
20000d20:	17011700 	strne	r1, [r1, -r0, lsl #14]
20000d24:	17031702 	strne	r1, [r3, -r2, lsl #14]
20000d28:	18011800 	stmdane	r1, {fp, ip}
20000d2c:	18031802 	stmdane	r3, {r1, fp, ip}

20000d30 <leftPaddle>:
20000d30:	20000c5c 	andcs	r0, r0, ip, asr ip
	...
20000d3c:	00000001 	andeq	r0, r0, r1
20000d40:	00000020 	andeq	r0, r0, r0, lsr #32
20000d44:	20000851 	andcs	r0, r0, r1, asr r8
20000d48:	200008af 	andcs	r0, r0, pc, lsr #17
20000d4c:	200009c9 	andcs	r0, r0, r9, asr #19
20000d50:	2000090d 	andcs	r0, r0, sp, lsl #18

20000d54 <rightPaddle>:
20000d54:	20000c5c 	andcs	r0, r0, ip, asr ip
	...
20000d60:	0000007c 	andeq	r0, r0, ip, ror r0
20000d64:	00000020 	andeq	r0, r0, r0, lsr #32
20000d68:	20000851 	andcs	r0, r0, r1, asr r8
20000d6c:	200008af 	andcs	r0, r0, pc, lsr #17
20000d70:	200009c9 	andcs	r0, r0, r9, asr #19
20000d74:	2000090d 	andcs	r0, r0, sp, lsl #18

20000d78 <returnKeys.4003>:
20000d78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20000d7c:	20000a46 	andcs	r0, r0, r6, asr #20
20000d80:	20000a4e 	andcs	r0, r0, lr, asr #20
20000d84:	20000a56 	andcs	r0, r0, r6, asr sl
20000d88:	20000a5e 	andcs	r0, r0, lr, asr sl
20000d8c:	20000a66 	andcs	r0, r0, r6, ror #20
20000d90:	0a030201 	beq	200c159c <returnKeys.4003+0xc0824>
20000d94:	0b060504 	bleq	201821ac <returnKeys.4003+0x181434>
20000d98:	0c090807 	stceq	8, cr0, [r9], {7}
20000d9c:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000d6c <rightPaddle+0x18>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000230 	andeq	r0, r0, r0, lsr r2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000087 	andeq	r0, r0, r7, lsl #1
  10:	0000270c 	andeq	r2, r0, ip, lsl #14
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	00000079 	andeq	r0, r0, r9, ror r0
  28:	00006d03 	andeq	r6, r0, r3, lsl #26
  2c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
  30:	00000049 	andeq	r0, r0, r9, asr #32
  34:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
  38:	00002106 	andeq	r2, r0, r6, lsl #2
  3c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
  40:	21070200 	mrscs	r0, (UNDEF: 39)
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	01850500 	orreq	r0, r5, r0, lsl #10
  4c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  50:	00000028 	andeq	r0, r0, r8, lsr #32
  54:	00013203 	andeq	r3, r1, r3, lsl #4
  58:	0b02d400 	bleq	b5060 <startup-0x1ff4afa0>
  5c:	00000090 	muleq	r0, r0, r0
  60:	00017b06 	andeq	r7, r1, r6, lsl #22
  64:	900c0200 	andls	r0, ip, r0, lsl #4
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000a06 	andeq	r0, r0, r6, lsl #20
  70:	900d0200 	andls	r0, sp, r0, lsl #4
  74:	04000000 	streq	r0, [r0], #-0
  78:	00001c06 	andeq	r1, r0, r6, lsl #24
  7c:	900e0200 	andls	r0, lr, r0, lsl #4
  80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  84:	00787004 	rsbseq	r7, r8, r4
  88:	00970f02 	addseq	r0, r7, r2, lsl #30
  8c:	000c0000 	andeq	r0, ip, r0
  90:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  94:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  98:	00000049 	andeq	r0, r0, r9, asr #32
  9c:	000000a7 	andeq	r0, r0, r7, lsr #1
  a0:	0000a709 	andeq	sl, r0, r9, lsl #14
  a4:	02006300 	andeq	r6, r0, #0, 6
  a8:	01680704 	cmneq	r8, r4, lsl #14
  ac:	1f050000 	svcne	0x00050000
  b0:	02000001 	andeq	r0, r0, #1
  b4:	0000b910 	andeq	fp, r0, r0, lsl r9
  b8:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
  bc:	03000000 	movweq	r0, #0
  c0:	0000018b 	andeq	r0, r0, fp, lsl #3
  c4:	38120224 	ldmdacc	r2, {r2, r5, r9}
  c8:	04000001 	streq	r0, [r0], #-1
  cc:	006f6567 	rsbeq	r6, pc, r7, ror #10
  d0:	00ae1302 	adceq	r1, lr, r2, lsl #6
  d4:	06000000 	streq	r0, [r0], -r0
  d8:	00000176 	andeq	r0, r0, r6, ror r1
  dc:	00901402 	addseq	r1, r0, r2, lsl #8
  e0:	06040000 	streq	r0, [r4], -r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	00901402 	addseq	r1, r0, r2, lsl #8
  ec:	06080000 	streq	r0, [r8], -r0
  f0:	00000171 	andeq	r0, r0, r1, ror r1
  f4:	00901502 	addseq	r1, r0, r2, lsl #10
  f8:	060c0000 	streq	r0, [ip], -r0
  fc:	00000005 	andeq	r0, r0, r5
 100:	00901502 	addseq	r1, r0, r2, lsl #10
 104:	06100000 	ldreq	r0, [r0], -r0
 108:	00000022 	andeq	r0, r0, r2, lsr #32
 10c:	01491602 	cmpeq	r9, r2, lsl #12
 110:	06140000 	ldreq	r0, [r4], -r0
 114:	0000020e 	andeq	r0, r0, lr, lsl #4
 118:	01491702 	cmpeq	r9, r2, lsl #14
 11c:	06180000 	ldreq	r0, [r8], -r0
 120:	00000074 	andeq	r0, r0, r4, ror r0
 124:	01491802 	cmpeq	r9, r2, lsl #16
 128:	061c0000 	ldreq	r0, [ip], -r0
 12c:	00000063 	andeq	r0, r0, r3, rrx
 130:	01641902 	cmneq	r4, r2, lsl #18
 134:	00200000 	eoreq	r0, r0, r0
 138:	0001430b 	andeq	r4, r1, fp, lsl #6
 13c:	01430c00 	cmpeq	r3, r0, lsl #24
 140:	0a000000 	beq	148 <startup-0x1ffffeb8>
 144:	0000bf04 	andeq	fp, r0, r4, lsl #30
 148:	38040a00 	stmdacc	r4, {r9, fp}
 14c:	0b000001 	bleq	158 <startup-0x1ffffea8>
 150:	00000164 	andeq	r0, r0, r4, ror #2
 154:	0001430c 	andeq	r4, r1, ip, lsl #6
 158:	00900c00 	addseq	r0, r0, r0, lsl #24
 15c:	900c0000 	andls	r0, ip, r0
 160:	00000000 	andeq	r0, r0, r0
 164:	014f040a 	cmpeq	pc, sl, lsl #8
 168:	61050000 	mrsvs	r0, (UNDEF: 5)
 16c:	02000001 	andeq	r0, r0, #1
 170:	0000bf1a 	andeq	fp, r0, sl, lsl pc
 174:	01600500 	cmneq	r0, r0, lsl #10
 178:	1a020000 	bne	80180 <startup-0x1ff7fe80>
 17c:	00000143 	andeq	r0, r0, r3, asr #2
 180:	0001a80d 	andeq	sl, r1, sp, lsl #16
 184:	6a050300 	bvs	140d8c <startup-0x1febf274>
 188:	0d000001 	stceq	0, cr0, [r0, #-4]
 18c:	00000150 	andeq	r0, r0, r0, asr r1
 190:	016a0404 	cmneq	sl, r4, lsl #8
 194:	100d0000 	andne	r0, sp, r0
 198:	04000000 	streq	r0, [r0], #-0
 19c:	00016a05 	andeq	r6, r1, r5, lsl #20
 1a0:	015b0e00 	cmpeq	fp, r0, lsl #28
 1a4:	2a010000 	bcs	401ac <startup-0x1ffbfe54>
 1a8:	2000008c 	andcs	r0, r0, ip, lsl #1
 1ac:	000000f8 	strdeq	r0, [r0], -r8
 1b0:	020b9c01 	andeq	r9, fp, #256	; 0x100
 1b4:	700f0000 	andvc	r0, pc, r0
 1b8:	752b0100 	strvc	r0, [fp, #-256]!	; 0xffffff00
 1bc:	02000001 	andeq	r0, r0, #1
 1c0:	700f7091 	mulvc	pc, r1, r0	; <UNPREDICTABLE>
 1c4:	2c01006c 	stccs	0, cr0, [r1], {108}	; 0x6c
 1c8:	00000175 	andeq	r0, r0, r5, ror r1
 1cc:	0f6c9102 	svceq	0x006c9102
 1d0:	01007270 	tsteq	r0, r0, ror r2
 1d4:	0001752d 	andeq	r7, r1, sp, lsr #10
 1d8:	68910200 	ldmvs	r1, {r9}
 1dc:	0000b210 	andeq	fp, r0, r0, lsl r2
 1e0:	0000c420 	andeq	ip, r0, r0, lsr #8
 1e4:	013c1100 	teqeq	ip, r0, lsl #2
 1e8:	37010000 	strcc	r0, [r1, -r0]
 1ec:	0000020b 	andeq	r0, r0, fp, lsl #4
 1f0:	10649102 	rsbne	r9, r4, r2, lsl #2
 1f4:	200000d2 	ldrdcs	r0, [r0], -r2
 1f8:	00000080 	andeq	r0, r0, r0, lsl #1
 1fc:	0100690f 	tsteq	r0, pc, lsl #18
 200:	0000213a 	andeq	r2, r0, sl, lsr r1
 204:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 208:	0a000000 	beq	210 <startup-0x1ffffdf0>
 20c:	00002104 	andeq	r2, r0, r4, lsl #2
 210:	01291200 			; <UNDEFINED> instruction: 0x01291200
 214:	15010000 	strne	r0, [r1, #-0]
 218:	20000010 	andcs	r0, r0, r0, lsl r0
 21c:	0000007c 	andeq	r0, r0, ip, ror r0
 220:	48129c01 	ldmdami	r2, {r0, sl, fp, ip, pc}
 224:	01000001 	tsteq	r0, r1
 228:	0000000b 	andeq	r0, r0, fp
 22c:	00000c20 	andeq	r0, r0, r0, lsr #24
 230:	009c0100 	addseq	r0, ip, r0, lsl #2
 234:	00000201 	andeq	r0, r0, r1, lsl #4
 238:	00f70004 	rscseq	r0, r7, r4
 23c:	01040000 	mrseq	r0, (UNDEF: 4)
 240:	00000087 	andeq	r0, r0, r7, lsl #1
 244:	0001ad0c 	andeq	sl, r1, ip, lsl #26
 248:	00018400 	andeq	r8, r1, r0, lsl #8
 24c:	0000dc20 	andeq	sp, r0, r0, lsr #24
 250:	0000ca00 	andeq	ip, r0, r0, lsl #20
 254:	006d0200 	rsbeq	r0, sp, r0, lsl #4
 258:	02020000 	andeq	r0, r2, #0
 25c:	00004205 	andeq	r4, r0, r5, lsl #4
 260:	00780300 	rsbseq	r0, r8, r0, lsl #6
 264:	00420602 	subeq	r0, r2, r2, lsl #12
 268:	03000000 	movweq	r0, #0
 26c:	07020079 	smlsdxeq	r2, r9, r0, r0
 270:	00000042 	andeq	r0, r0, r2, asr #32
 274:	01040001 	tsteq	r4, r1
 278:	00007908 	andeq	r7, r0, r8, lsl #18
 27c:	01850500 	orreq	r0, r5, r0, lsl #10
 280:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 284:	00000021 	andeq	r0, r0, r1, lsr #32
 288:	00013202 	andeq	r3, r1, r2, lsl #4
 28c:	0b02d400 	bleq	b5294 <startup-0x1ff4ad6c>
 290:	00000090 	muleq	r0, r0, r0
 294:	00017b06 	andeq	r7, r1, r6, lsl #22
 298:	900c0200 	andls	r0, ip, r0, lsl #4
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	00000a06 	andeq	r0, r0, r6, lsl #20
 2a4:	900d0200 	andls	r0, sp, r0, lsl #4
 2a8:	04000000 	streq	r0, [r0], #-0
 2ac:	00001c06 	andeq	r1, r0, r6, lsl #24
 2b0:	900e0200 	andls	r0, lr, r0, lsl #4
 2b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 2b8:	00787003 	rsbseq	r7, r8, r3
 2bc:	00970f02 	addseq	r0, r7, r2, lsl #30
 2c0:	000c0000 	andeq	r0, ip, r0
 2c4:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 2c8:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 2cc:	00000049 	andeq	r0, r0, r9, asr #32
 2d0:	000000a7 	andeq	r0, r0, r7, lsr #1
 2d4:	0000a709 	andeq	sl, r0, r9, lsl #14
 2d8:	04006300 	streq	r6, [r0], #-768	; 0xfffffd00
 2dc:	01680704 	cmneq	r8, r4, lsl #14
 2e0:	20050000 	andcs	r0, r5, r0
 2e4:	02000001 	andeq	r0, r0, #1
 2e8:	00005410 	andeq	r5, r0, r0, lsl r4
 2ec:	011f0500 	tsteq	pc, r0, lsl #10
 2f0:	10020000 	andne	r0, r2, r0
 2f4:	000000c4 	andeq	r0, r0, r4, asr #1
 2f8:	0054040a 	subseq	r0, r4, sl, lsl #8
 2fc:	8b020000 	blhi	80304 <startup-0x1ff7fcfc>
 300:	24000001 	strcs	r0, [r0], #-1
 304:	01431202 	cmpeq	r3, r2, lsl #4
 308:	67030000 	strvs	r0, [r3, -r0]
 30c:	02006f65 	andeq	r6, r0, #404	; 0x194
 310:	0000b913 	andeq	fp, r0, r3, lsl r9
 314:	76060000 	strvc	r0, [r6], -r0
 318:	02000001 	andeq	r0, r0, #1
 31c:	00009014 	andeq	r9, r0, r4, lsl r0
 320:	00060400 	andeq	r0, r6, r0, lsl #8
 324:	02000000 	andeq	r0, r0, #0
 328:	00009014 	andeq	r9, r0, r4, lsl r0
 32c:	71060800 	tstvc	r6, r0, lsl #16
 330:	02000001 	andeq	r0, r0, #1
 334:	00009015 	andeq	r9, r0, r5, lsl r0
 338:	05060c00 	streq	r0, [r6, #-3072]	; 0xfffff400
 33c:	02000000 	andeq	r0, r0, #0
 340:	00009015 	andeq	r9, r0, r5, lsl r0
 344:	22061000 	andcs	r1, r6, #0
 348:	02000000 	andeq	r0, r0, #0
 34c:	00015416 	andeq	r5, r1, r6, lsl r4
 350:	0e061400 	cfcpyseq	mvf1, mvf6
 354:	02000002 	andeq	r0, r0, #2
 358:	00015417 	andeq	r5, r1, r7, lsl r4
 35c:	74061800 	strvc	r1, [r6], #-2048	; 0xfffff800
 360:	02000000 	andeq	r0, r0, #0
 364:	00015418 	andeq	r5, r1, r8, lsl r4
 368:	63061c00 	movwvs	r1, #27648	; 0x6c00
 36c:	02000000 	andeq	r0, r0, #0
 370:	00016f19 	andeq	r6, r1, r9, lsl pc
 374:	0b002000 	bleq	837c <startup-0x1fff7c84>
 378:	0000014e 	andeq	r0, r0, lr, asr #2
 37c:	00014e0c 	andeq	r4, r1, ip, lsl #28
 380:	040a0000 	streq	r0, [sl], #-0
 384:	000000ca 	andeq	r0, r0, sl, asr #1
 388:	0143040a 	cmpeq	r3, sl, lsl #8
 38c:	6f0b0000 	svcvs	0x000b0000
 390:	0c000001 	stceq	0, cr0, [r0], {1}
 394:	0000014e 	andeq	r0, r0, lr, asr #2
 398:	0000900c 	andeq	r9, r0, ip
 39c:	00900c00 	addseq	r0, r0, r0, lsl #24
 3a0:	0a000000 	beq	3a8 <startup-0x1ffffc58>
 3a4:	00015a04 	andeq	r5, r1, r4, lsl #20
 3a8:	01610500 	cmneq	r1, r0, lsl #10
 3ac:	1a020000 	bne	803b4 <startup-0x1ff7fc4c>
 3b0:	000000ca 	andeq	r0, r0, sl, asr #1
 3b4:	00016005 	andeq	r6, r1, r5
 3b8:	4e1a0200 	cdpmi	2, 1, cr0, cr10, cr0, {0}
 3bc:	0d000001 	stceq	0, cr0, [r0, #-4]
 3c0:	000001a8 	andeq	r0, r0, r8, lsr #3
 3c4:	01750503 	cmneq	r5, r3, lsl #10
 3c8:	500d0000 	andpl	r0, sp, r0
 3cc:	04000001 	streq	r0, [r0], #-1
 3d0:	00017504 	andeq	r7, r1, r4, lsl #10
 3d4:	00100d00 	andseq	r0, r0, r0, lsl #26
 3d8:	05040000 	streq	r0, [r4, #-0]
 3dc:	00000175 	andeq	r0, r0, r5, ror r1
 3e0:	0001900e 	andeq	r9, r1, lr
 3e4:	ae040100 	adfges	f0, f4, f0
 3e8:	05000000 	streq	r0, [r0, #-0]
 3ec:	000b6403 	andeq	r6, fp, r3, lsl #8
 3f0:	018b0f20 	orreq	r0, fp, r0, lsr #30
 3f4:	0f010000 	svceq	0x00010000
 3f8:	0c380305 	ldceq	3, cr0, [r8], #-20	; 0xffffffec
 3fc:	a3102000 	tstge	r0, #0
 400:	01000001 	tsteq	r0, r1
 404:	0001841c 	andeq	r8, r1, ip, lsl r4
 408:	0000dc20 	andeq	sp, r0, r0, lsr #24
 40c:	119c0100 	orrsne	r0, ip, r0, lsl #2
 410:	0000019e 	muleq	r0, lr, r1
 414:	01801c01 	orreq	r1, r0, r1, lsl #24
 418:	91020000 	mrsls	r0, (UNDEF: 2)
 41c:	706c126c 	rsbvc	r1, ip, ip, ror #4
 420:	80280100 	eorhi	r0, r8, r0, lsl #2
 424:	02000001 	andeq	r0, r0, #1
 428:	72127491 	andsvc	r7, r2, #-1862270976	; 0x91000000
 42c:	29010070 	stmdbcs	r1, {r4, r5, r6}
 430:	00000180 	andeq	r0, r0, r0, lsl #3
 434:	00709102 	rsbseq	r9, r0, r2, lsl #2
 438:	00026a00 	andeq	r6, r2, r0, lsl #20
 43c:	e9000400 	stmdb	r0, {sl}
 440:	04000001 	streq	r0, [r0], #-1
 444:	00008701 	andeq	r8, r0, r1, lsl #14
 448:	02560c00 	subseq	r0, r6, #0, 24
 44c:	02600000 	rsbeq	r0, r0, #0
 450:	05f02000 	ldrbeq	r2, [r0, #0]!
 454:	01780000 	cmneq	r8, r0
 458:	97020000 	strls	r0, [r2, -r0]
 45c:	02000002 	andeq	r0, r0, #2
 460:	00002c26 	andeq	r2, r0, r6, lsr #24
 464:	08010300 	stmdaeq	r1, {r8, r9}
 468:	00000079 	andeq	r0, r0, r9, ror r0
 46c:	00021404 	andeq	r1, r2, r4, lsl #8
 470:	0a950100 	beq	fe540878 <returnKeys.4003+0xde53fb00>
 474:	46200006 	strtmi	r0, [r0], -r6
 478:	01000002 	tsteq	r0, r2
 47c:	0000a79c 	muleq	r0, ip, r7
 480:	00780500 	rsbseq	r0, r8, r0, lsl #10
 484:	002c9501 	eoreq	r9, ip, r1, lsl #10
 488:	91020000 	mrsls	r0, (UNDEF: 2)
 48c:	00790567 	rsbseq	r0, r9, r7, ror #10
 490:	002c9501 	eoreq	r9, ip, r1, lsl #10
 494:	91020000 	mrsls	r0, (UNDEF: 2)
 498:	65730566 	ldrbvs	r0, [r3, #-1382]!	; 0xfffffa9a
 49c:	95010074 	strls	r0, [r1, #-116]	; 0xffffff8c
 4a0:	0000002c 	andeq	r0, r0, ip, lsr #32
 4a4:	06659102 	strbteq	r9, [r5], -r2, lsl #2
 4a8:	000002c4 	andeq	r0, r0, r4, asr #5
 4ac:	002c9801 	eoreq	r9, ip, r1, lsl #16
 4b0:	91020000 	mrsls	r0, (UNDEF: 2)
 4b4:	0292066d 	addseq	r0, r2, #114294784	; 0x6d00000
 4b8:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 4bc:	0000002c 	andeq	r0, r0, ip, lsr #32
 4c0:	066f9102 	strbteq	r9, [pc], -r2, lsl #2
 4c4:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 4c8:	002ca601 	eoreq	sl, ip, r1, lsl #12
 4cc:	91020000 	mrsls	r0, (UNDEF: 2)
 4d0:	02bf066e 	adcseq	r0, pc, #115343360	; 0x6e00000
 4d4:	b2010000 	andlt	r0, r1, #0
 4d8:	0000002c 	andeq	r0, r0, ip, lsr #32
 4dc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 4e0:	0002f504 	andeq	pc, r2, r4, lsl #10
 4e4:	b2890100 	addlt	r0, r9, #0, 2
 4e8:	58200005 	stmdapl	r0!, {r0, r2}
 4ec:	01000000 	mrseq	r0, (UNDEF: 0)
 4f0:	0000ed9c 	muleq	r0, ip, sp
 4f4:	05b80700 	ldreq	r0, [r8, #1792]!	; 0x700
 4f8:	004a2000 	subeq	r2, sl, r0
 4fc:	ea060000 	b	180504 <startup-0x1fe7fafc>
 500:	01000002 	tsteq	r0, r2
 504:	0000ed8a 	andeq	lr, r0, sl, lsl #27
 508:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 50c:	0005dc07 	andeq	sp, r5, r7, lsl #24
 510:	00001a20 	andeq	r1, r0, r0, lsr #20
 514:	64610800 	strbtvs	r0, [r1], #-2048	; 0xfffff800
 518:	8d010064 	stchi	0, cr0, [r1, #-400]	; 0xfffffe70
 51c:	000000ed 	andeq	r0, r0, sp, ror #1
 520:	00709102 	rsbseq	r9, r0, r2, lsl #2
 524:	04090000 	streq	r0, [r9], #-0
 528:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 52c:	030a0a00 	movweq	r0, #43520	; 0xaa00
 530:	7b010000 	blvc	40538 <startup-0x1ffbfac8>
 534:	2000055c 	andcs	r0, r0, ip, asr r5
 538:	00000056 	andeq	r0, r0, r6, asr r0
 53c:	300b9c01 	andcc	r9, fp, r1, lsl #24
 540:	01000002 	tsteq	r0, r2
 544:	00002176 	andeq	r2, r0, r6, ror r1
 548:	00053200 	andeq	r3, r5, r0, lsl #4
 54c:	00002a20 	andeq	r2, r0, r0, lsr #20
 550:	2d9c0100 	ldfcss	f0, [ip]
 554:	0c000001 	stceq	0, cr0, [r0], {1}
 558:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 55c:	00217601 	eoreq	r7, r1, r1, lsl #12
 560:	91020000 	mrsls	r0, (UNDEF: 2)
 564:	d7040077 	smlsdxle	r4, r7, r0, r0
 568:	01000002 	tsteq	r0, r2
 56c:	0004ec6e 	andeq	lr, r4, lr, ror #24
 570:	00004620 	andeq	r4, r0, r0, lsr #12
 574:	5f9c0100 	svcpl	0x009c0100
 578:	0c000001 	stceq	0, cr0, [r0], {1}
 57c:	0000023e 	andeq	r0, r0, lr, lsr r2
 580:	00216e01 	eoreq	r6, r1, r1, lsl #28
 584:	91020000 	mrsls	r0, (UNDEF: 2)
 588:	02b40c77 	adcseq	r0, r4, #30464	; 0x7700
 58c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
 590:	00000021 	andeq	r0, r0, r1, lsr #32
 594:	00769102 	rsbseq	r9, r6, r2, lsl #2
 598:	0001e604 	andeq	lr, r1, r4, lsl #12
 59c:	ac670100 	stfgee	f0, [r7], #-0
 5a0:	40200004 	eormi	r0, r0, r4
 5a4:	01000000 	mrseq	r0, (UNDEF: 0)
 5a8:	0001919c 	muleq	r1, ip, r1
 5ac:	01f40c00 	mvnseq	r0, r0, lsl #24
 5b0:	67010000 	strvs	r0, [r1, -r0]
 5b4:	00000021 	andeq	r0, r0, r1, lsr #32
 5b8:	0c779102 	ldfeqp	f1, [r7], #-8
 5bc:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 5c0:	00216701 	eoreq	r6, r1, r1, lsl #14
 5c4:	91020000 	mrsls	r0, (UNDEF: 2)
 5c8:	9f040076 	svcls	0x00040076
 5cc:	01000002 	tsteq	r0, r2
 5d0:	00042c50 	andeq	r2, r4, r0, asr ip
 5d4:	00008020 	andeq	r8, r0, r0, lsr #32
 5d8:	c39c0100 	orrsgt	r0, ip, #0, 2
 5dc:	0c000001 	stceq	0, cr0, [r0], {1}
 5e0:	000002ef 	andeq	r0, r0, pc, ror #5
 5e4:	00215001 	eoreq	r5, r1, r1
 5e8:	91020000 	mrsls	r0, (UNDEF: 2)
 5ec:	02b40c77 	adcseq	r0, r4, #30464	; 0x7700
 5f0:	50010000 	andpl	r0, r1, r0
 5f4:	00000021 	andeq	r0, r0, r1, lsr #32
 5f8:	00769102 	rsbseq	r9, r6, r2, lsl #2
 5fc:	0002ca0b 	andeq	ip, r2, fp, lsl #20
 600:	21350100 	teqcs	r5, r0, lsl #2
 604:	9c000000 	stcls	0, cr0, [r0], {-0}
 608:	90200003 	eorls	r0, r0, r3
 60c:	01000000 	mrseq	r0, (UNDEF: 0)
 610:	0001f89c 	muleq	r1, ip, r8
 614:	02b40c00 	adcseq	r0, r4, #0, 24
 618:	35010000 	strcc	r0, [r1, #-0]
 61c:	00000021 	andeq	r0, r0, r1, lsr #32
 620:	086f9102 	stmdaeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 624:	01005652 	tsteq	r0, r2, asr r6
 628:	0000213e 	andeq	r2, r0, lr, lsr r1
 62c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 630:	02430a00 	subeq	r0, r3, #0, 20
 634:	1f010000 	svcne	0x00010000
 638:	20000336 	andcs	r0, r0, r6, lsr r3
 63c:	00000066 	andeq	r0, r0, r6, rrx
 640:	ad049c01 	stcge	12, cr9, [r4, #-4]
 644:	01000002 	tsteq	r0, r2
 648:	0002cc0f 	andeq	ip, r2, pc, lsl #24
 64c:	00006a20 	andeq	r6, r0, r0, lsr #20
 650:	2d9c0100 	ldfcss	f0, [ip]
 654:	0c000002 	stceq	0, cr0, [r0], {2}
 658:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 65c:	00210f01 	eoreq	r0, r1, r1, lsl #30
 660:	91020000 	mrsls	r0, (UNDEF: 2)
 664:	fc0d0077 	stc2	0, cr0, [sp], {119}	; 0x77
 668:	01000001 	tsteq	r0, r1
 66c:	0002980b 	andeq	r9, r2, fp, lsl #16
 670:	00003420 	andeq	r3, r0, r0, lsr #8
 674:	4f9c0100 	svcmi	0x009c0100
 678:	05000002 	streq	r0, [r0, #-2]
 67c:	0b010078 	bleq	40864 <startup-0x1ffbf79c>
 680:	00000021 	andeq	r0, r0, r1, lsr #32
 684:	00779102 	rsbseq	r9, r7, r2, lsl #2
 688:	00021a0e 	andeq	r1, r2, lr, lsl #20
 68c:	60070100 	andvs	r0, r7, r0, lsl #2
 690:	38200002 	stmdacc	r0!, {r1}
 694:	01000000 	mrseq	r0, (UNDEF: 0)
 698:	0078059c 			; <UNDEFINED> instruction: 0x0078059c
 69c:	00210701 	eoreq	r0, r1, r1, lsl #14
 6a0:	91020000 	mrsls	r0, (UNDEF: 2)
 6a4:	1e000077 	mcrne	0, 0, r0, cr0, cr7, {3}
 6a8:	04000002 	streq	r0, [r0], #-2
 6ac:	0002e300 	andeq	lr, r2, r0, lsl #6
 6b0:	87010400 	strhi	r0, [r1, -r0, lsl #8]
 6b4:	0c000000 	stceq	0, cr0, [r0], {-0}
 6b8:	0000032e 	andeq	r0, r0, lr, lsr #6
 6bc:	20000850 	andcs	r0, r0, r0, asr r8
 6c0:	000000dc 	ldrdeq	r0, [r0], -ip
 6c4:	000002e4 	andeq	r0, r0, r4, ror #5
 6c8:	00006d02 	andeq	r6, r0, r2, lsl #26
 6cc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
 6d0:	00000042 	andeq	r0, r0, r2, asr #32
 6d4:	02007803 	andeq	r7, r0, #196608	; 0x30000
 6d8:	00004206 	andeq	r4, r0, r6, lsl #4
 6dc:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
 6e0:	42070200 	andmi	r0, r7, #0, 4
 6e4:	01000000 	mrseq	r0, (UNDEF: 0)
 6e8:	08010400 	stmdaeq	r1, {sl}
 6ec:	00000079 	andeq	r0, r0, r9, ror r0
 6f0:	00018505 	andeq	r8, r1, r5, lsl #10
 6f4:	21080200 	mrscs	r0, R8_fiq
 6f8:	02000000 	andeq	r0, r0, #0
 6fc:	00000132 	andeq	r0, r0, r2, lsr r1
 700:	900b02d4 	ldrdls	r0, [fp], -r4
 704:	06000000 	streq	r0, [r0], -r0
 708:	0000017b 	andeq	r0, r0, fp, ror r1
 70c:	00900c02 	addseq	r0, r0, r2, lsl #24
 710:	06000000 	streq	r0, [r0], -r0
 714:	0000000a 	andeq	r0, r0, sl
 718:	00900d02 	addseq	r0, r0, r2, lsl #26
 71c:	06040000 	streq	r0, [r4], -r0
 720:	0000001c 	andeq	r0, r0, ip, lsl r0
 724:	00900e02 	addseq	r0, r0, r2, lsl #28
 728:	03080000 	movweq	r0, #32768	; 0x8000
 72c:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 730:	0000970f 	andeq	r9, r0, pc, lsl #14
 734:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 738:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 73c:	49080074 	stmdbmi	r8, {r2, r4, r5, r6}
 740:	a7000000 	strge	r0, [r0, -r0]
 744:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 748:	000000a7 	andeq	r0, r0, r7, lsr #1
 74c:	04040063 	streq	r0, [r4], #-99	; 0xffffff9d
 750:	00016807 	andeq	r6, r1, r7, lsl #16
 754:	011f0500 	tsteq	pc, r0, lsl #10
 758:	10020000 	andne	r0, r2, r0
 75c:	000000b9 	strheq	r0, [r0], -r9
 760:	0054040a 	subseq	r0, r4, sl, lsl #8
 764:	8b020000 	blhi	8076c <startup-0x1ff7f894>
 768:	24000001 	strcs	r0, [r0], #-1
 76c:	01381202 	teqeq	r8, r2, lsl #4
 770:	67030000 	strvs	r0, [r3, -r0]
 774:	02006f65 	andeq	r6, r0, #404	; 0x194
 778:	0000ae13 	andeq	sl, r0, r3, lsl lr
 77c:	76060000 	strvc	r0, [r6], -r0
 780:	02000001 	andeq	r0, r0, #1
 784:	00009014 	andeq	r9, r0, r4, lsl r0
 788:	00060400 	andeq	r0, r6, r0, lsl #8
 78c:	02000000 	andeq	r0, r0, #0
 790:	00009014 	andeq	r9, r0, r4, lsl r0
 794:	71060800 	tstvc	r6, r0, lsl #16
 798:	02000001 	andeq	r0, r0, #1
 79c:	00009015 	andeq	r9, r0, r5, lsl r0
 7a0:	05060c00 	streq	r0, [r6, #-3072]	; 0xfffff400
 7a4:	02000000 	andeq	r0, r0, #0
 7a8:	00009015 	andeq	r9, r0, r5, lsl r0
 7ac:	22061000 	andcs	r1, r6, #0
 7b0:	02000000 	andeq	r0, r0, #0
 7b4:	00014916 	andeq	r4, r1, r6, lsl r9
 7b8:	0e061400 	cfcpyseq	mvf1, mvf6
 7bc:	02000002 	andeq	r0, r0, #2
 7c0:	00014917 	andeq	r4, r1, r7, lsl r9
 7c4:	74061800 	strvc	r1, [r6], #-2048	; 0xfffff800
 7c8:	02000000 	andeq	r0, r0, #0
 7cc:	00014918 	andeq	r4, r1, r8, lsl r9
 7d0:	63061c00 	movwvs	r1, #27648	; 0x6c00
 7d4:	02000000 	andeq	r0, r0, #0
 7d8:	00016419 	andeq	r6, r1, r9, lsl r4
 7dc:	0b002000 	bleq	87e4 <startup-0x1fff781c>
 7e0:	00000143 	andeq	r0, r0, r3, asr #2
 7e4:	0001430c 	andeq	r4, r1, ip, lsl #6
 7e8:	040a0000 	streq	r0, [sl], #-0
 7ec:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
 7f0:	0138040a 	teqeq	r8, sl, lsl #8
 7f4:	640b0000 	strvs	r0, [fp], #-0
 7f8:	0c000001 	stceq	0, cr0, [r0], {1}
 7fc:	00000143 	andeq	r0, r0, r3, asr #2
 800:	0000900c 	andeq	r9, r0, ip
 804:	00900c00 	addseq	r0, r0, r0, lsl #24
 808:	0a000000 	beq	810 <startup-0x1ffff7f0>
 80c:	00014f04 	andeq	r4, r1, r4, lsl #30
 810:	01600500 	cmneq	r0, r0, lsl #10
 814:	1a020000 	bne	8081c <startup-0x1ff7f7e4>
 818:	00000143 	andeq	r0, r0, r3, asr #2
 81c:	00031d0d 	andeq	r1, r3, sp, lsl #26
 820:	0c0f0100 	stfeqs	f0, [pc], {-0}
 824:	20200009 	eorcs	r0, r0, r9
 828:	01000000 	mrseq	r0, (UNDEF: 0)
 82c:	0001b19c 	muleq	r1, ip, r1
 830:	019e0e00 	orrseq	r0, lr, r0, lsl #28
 834:	0f010000 	svceq	0x00010000
 838:	0000016a 	andeq	r0, r0, sl, ror #2
 83c:	0f749102 	svceq	0x00749102
 840:	0f010078 	svceq	0x00010078
 844:	00000090 	muleq	r0, r0, r0
 848:	0f709102 	svceq	0x00709102
 84c:	0f010079 	svceq	0x00010079
 850:	00000090 	muleq	r0, r0, r0
 854:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 858:	00036910 	andeq	r6, r3, r0, lsl r9
 85c:	ae090100 	adfgee	f0, f1, f0
 860:	5e200008 	cdppl	0, 2, cr0, cr0, cr8, {0}
 864:	01000000 	mrseq	r0, (UNDEF: 0)
 868:	0001eb9c 	muleq	r1, ip, fp
 86c:	019e0e00 	orrseq	r0, lr, r0, lsl #28
 870:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 874:	0000016a 	andeq	r0, r0, sl, ror #2
 878:	116c9102 	cmnne	ip, r2, lsl #2
 87c:	200008b6 			; <UNDEFINED> instruction: 0x200008b6
 880:	0000004e 	andeq	r0, r0, lr, asr #32
 884:	01006912 	tsteq	r0, r2, lsl r9
 888:	0000900a 	andeq	r9, r0, sl
 88c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 890:	76130000 	ldrvc	r0, [r3], -r0
 894:	01000003 	tsteq	r0, r3
 898:	00085004 	andeq	r5, r8, r4
 89c:	00005e20 	andeq	r5, r0, r0, lsr #28
 8a0:	0e9c0100 	fmleqe	f0, f4, f0
 8a4:	0000019e 	muleq	r0, lr, r1
 8a8:	016a0401 	cmneq	sl, r1, lsl #8
 8ac:	91020000 	mrsls	r0, (UNDEF: 2)
 8b0:	0858116c 	ldmdaeq	r8, {r2, r3, r5, r6, r8, ip}^
 8b4:	004e2000 	subeq	r2, lr, r0
 8b8:	69120000 	ldmdbvs	r2, {}	; <UNPREDICTABLE>
 8bc:	90050100 	andls	r0, r5, r0, lsl #2
 8c0:	02000000 	andeq	r0, r0, #0
 8c4:	00007491 	muleq	r0, r1, r4
 8c8:	00008d00 	andeq	r8, r0, r0, lsl #26
 8cc:	f2000400 	vshl.s8	d0, d0, d0
 8d0:	04000003 	streq	r0, [r0], #-3
 8d4:	00008701 	andeq	r8, r0, r1, lsl #14
 8d8:	03bf0c00 			; <UNDEFINED> instruction: 0x03bf0c00
 8dc:	092c0000 	stmdbeq	ip!, {}	; <UNPREDICTABLE>
 8e0:	009a2000 	addseq	r2, sl, r0
 8e4:	03850000 	orreq	r0, r5, #0
 8e8:	9b020000 	blls	808f0 <startup-0x1ff7f710>
 8ec:	01000003 	tsteq	r0, r3
 8f0:	0009b420 	andeq	fp, r9, r0, lsr #8
 8f4:	00001220 	andeq	r1, r0, r0, lsr #4
 8f8:	039c0100 	orrseq	r0, ip, #0, 2
 8fc:	00000382 	andeq	r0, r0, r2, lsl #7
 900:	099c1801 	ldmibeq	ip, {r0, fp, ip}
 904:	00182000 	andseq	r2, r8, r0
 908:	9c010000 	stcls	0, cr0, [r1], {-0}
 90c:	00000055 	andeq	r0, r0, r5, asr r0
 910:	00736d04 	rsbseq	r6, r3, r4, lsl #26
 914:	00551801 	subseq	r1, r5, r1, lsl #16
 918:	91020000 	mrsls	r0, (UNDEF: 2)
 91c:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
 920:	00038e07 	andeq	r8, r3, r7, lsl #28
 924:	03b30300 			; <UNDEFINED> instruction: 0x03b30300
 928:	0f010000 	svceq	0x00010000
 92c:	20000970 	andcs	r0, r0, r0, ror r9
 930:	0000002c 	andeq	r0, r0, ip, lsr #32
 934:	007f9c01 	rsbseq	r9, pc, r1, lsl #24
 938:	75040000 	strvc	r0, [r4, #-0]
 93c:	0f010073 	svceq	0x00010073
 940:	00000055 	andeq	r0, r0, r5, asr r0
 944:	00749102 	rsbseq	r9, r4, r2, lsl #2
 948:	0003a706 	andeq	sl, r3, r6, lsl #14
 94c:	2c040100 	stfcss	f0, [r4], {-0}
 950:	44200009 	strtmi	r0, [r0], #-9
 954:	01000000 	mrseq	r0, (UNDEF: 0)
 958:	01e9009c 			; <UNDEFINED> instruction: 0x01e9009c
 95c:	00040000 	andeq	r0, r4, r0
 960:	00000468 	andeq	r0, r0, r8, ror #8
 964:	00870104 	addeq	r0, r7, r4, lsl #2
 968:	150c0000 	strne	r0, [ip, #-0]
 96c:	c8000004 	stmdagt	r0, {r2}
 970:	5e200009 	cdppl	0, 2, cr0, cr0, cr9, {0}
 974:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 978:	02000004 	andeq	r0, r0, #4
 97c:	0000006d 	andeq	r0, r0, sp, rrx
 980:	42050202 	andmi	r0, r5, #536870912	; 0x20000000
 984:	03000000 	movweq	r0, #0
 988:	06020078 			; <UNDEFINED> instruction: 0x06020078
 98c:	00000042 	andeq	r0, r0, r2, asr #32
 990:	00790300 	rsbseq	r0, r9, r0, lsl #6
 994:	00420702 	subeq	r0, r2, r2, lsl #14
 998:	00010000 	andeq	r0, r1, r0
 99c:	79080104 	stmdbvc	r8, {r2, r8}
 9a0:	05000000 	streq	r0, [r0, #-0]
 9a4:	00000185 	andeq	r0, r0, r5, lsl #3
 9a8:	00210802 	eoreq	r0, r1, r2, lsl #16
 9ac:	32020000 	andcc	r0, r2, #0
 9b0:	d4000001 	strle	r0, [r0], #-1
 9b4:	00900b02 	addseq	r0, r0, r2, lsl #22
 9b8:	7b060000 	blvc	1809c0 <startup-0x1fe7f640>
 9bc:	02000001 	andeq	r0, r0, #1
 9c0:	0000900c 	andeq	r9, r0, ip
 9c4:	0a060000 	beq	1809cc <startup-0x1fe7f634>
 9c8:	02000000 	andeq	r0, r0, #0
 9cc:	0000900d 	andeq	r9, r0, sp
 9d0:	1c060400 	cfstrsne	mvf0, [r6], {-0}
 9d4:	02000000 	andeq	r0, r0, #0
 9d8:	0000900e 	andeq	r9, r0, lr
 9dc:	70030800 	andvc	r0, r3, r0, lsl #16
 9e0:	0f020078 	svceq	0x00020078
 9e4:	00000097 	muleq	r0, r7, r0
 9e8:	0407000c 	streq	r0, [r7], #-12
 9ec:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 9f0:	00490800 	subeq	r0, r9, r0, lsl #16
 9f4:	00a70000 	adceq	r0, r7, r0
 9f8:	a7090000 	strge	r0, [r9, -r0]
 9fc:	63000000 	movwvs	r0, #0
 a00:	07040400 	streq	r0, [r4, -r0, lsl #8]
 a04:	00000168 	andeq	r0, r0, r8, ror #2
 a08:	00012005 	andeq	r2, r1, r5
 a0c:	54100200 	ldrpl	r0, [r0], #-512	; 0xfffffe00
 a10:	05000000 	streq	r0, [r0, #-0]
 a14:	0000011f 	andeq	r0, r0, pc, lsl r1
 a18:	00c41002 	sbceq	r1, r4, r2
 a1c:	040a0000 	streq	r0, [sl], #-0
 a20:	00000054 	andeq	r0, r0, r4, asr r0
 a24:	00018b02 	andeq	r8, r1, r2, lsl #22
 a28:	12022400 	andne	r2, r2, #0, 8
 a2c:	00000143 	andeq	r0, r0, r3, asr #2
 a30:	6f656703 	svcvs	0x00656703
 a34:	b9130200 	ldmdblt	r3, {r9}
 a38:	00000000 	andeq	r0, r0, r0
 a3c:	00017606 	andeq	r7, r1, r6, lsl #12
 a40:	90140200 	andsls	r0, r4, r0, lsl #4
 a44:	04000000 	streq	r0, [r0], #-0
 a48:	00000006 	andeq	r0, r0, r6
 a4c:	90140200 	andsls	r0, r4, r0, lsl #4
 a50:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 a54:	00017106 	andeq	r7, r1, r6, lsl #2
 a58:	90150200 	andsls	r0, r5, r0, lsl #4
 a5c:	0c000000 	stceq	0, cr0, [r0], {-0}
 a60:	00000506 	andeq	r0, r0, r6, lsl #10
 a64:	90150200 	andsls	r0, r5, r0, lsl #4
 a68:	10000000 	andne	r0, r0, r0
 a6c:	00002206 	andeq	r2, r0, r6, lsl #4
 a70:	54160200 	ldrpl	r0, [r6], #-512	; 0xfffffe00
 a74:	14000001 	strne	r0, [r0], #-1
 a78:	00020e06 	andeq	r0, r2, r6, lsl #28
 a7c:	54170200 	ldrpl	r0, [r7], #-512	; 0xfffffe00
 a80:	18000001 	stmdane	r0, {r0}
 a84:	00007406 	andeq	r7, r0, r6, lsl #8
 a88:	54180200 	ldrpl	r0, [r8], #-512	; 0xfffffe00
 a8c:	1c000001 	stcne	0, cr0, [r0], {1}
 a90:	00006306 	andeq	r6, r0, r6, lsl #6
 a94:	6f190200 	svcvs	0x00190200
 a98:	20000001 	andcs	r0, r0, r1
 a9c:	014e0b00 	cmpeq	lr, r0, lsl #22
 aa0:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
 aa4:	00000001 	andeq	r0, r0, r1
 aa8:	00ca040a 	sbceq	r0, sl, sl, lsl #8
 aac:	040a0000 	streq	r0, [sl], #-0
 ab0:	00000143 	andeq	r0, r0, r3, asr #2
 ab4:	00016f0b 	andeq	r6, r1, fp, lsl #30
 ab8:	014e0c00 	cmpeq	lr, r0, lsl #24
 abc:	900c0000 	andls	r0, ip, r0
 ac0:	0c000000 	stceq	0, cr0, [r0], {-0}
 ac4:	00000090 	muleq	r0, r0, r0
 ac8:	5a040a00 	bpl	1032d0 <startup-0x1fefcd30>
 acc:	05000001 	streq	r0, [r0, #-1]
 ad0:	00000161 	andeq	r0, r0, r1, ror #2
 ad4:	00ca1a02 	sbceq	r1, sl, r2, lsl #20
 ad8:	60050000 	andvs	r0, r5, r0
 adc:	02000001 	andeq	r0, r0, #1
 ae0:	00014e1a 	andeq	r4, r1, sl, lsl lr
 ae4:	01500d00 	cmpeq	r0, r0, lsl #26
 ae8:	04030000 	streq	r0, [r3], #-0
 aec:	00000175 	andeq	r0, r0, r5, ror r1
 af0:	0000100d 	andeq	r1, r0, sp
 af4:	75050300 	strvc	r0, [r5, #-768]	; 0xfffffd00
 af8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 afc:	00000405 	andeq	r0, r0, r5, lsl #8
 b00:	00ae0301 	adceq	r0, lr, r1, lsl #6
 b04:	03050000 	movweq	r0, #20480	; 0x5000
 b08:	20000c5c 	andcs	r0, r0, ip, asr ip
 b0c:	00018b0f 	andeq	r8, r1, pc, lsl #22
 b10:	05230100 	streq	r0, [r3, #-256]!	; 0xffffff00
 b14:	000d3003 	andeq	r3, sp, r3
 b18:	01960f20 	orrseq	r0, r6, r0, lsr #30
 b1c:	2d010000 	stccs	0, cr0, [r1, #-0]
 b20:	0d540305 	ldcleq	3, cr0, [r4, #-20]	; 0xffffffec
 b24:	f9102000 			; <UNDEFINED> instruction: 0xf9102000
 b28:	01000003 	tsteq	r0, r3
 b2c:	0009c837 	andeq	ip, r9, r7, lsr r8
 b30:	00005e20 	andeq	r5, r0, r0, lsr #28
 b34:	119c0100 	orrsne	r0, ip, r0, lsl #2
 b38:	0000019e 	muleq	r0, lr, r1
 b3c:	01803701 	orreq	r3, r0, r1, lsl #14
 b40:	91020000 	mrsls	r0, (UNDEF: 2)
 b44:	0a000074 	beq	d1c <startup-0x1ffff2e4>
 b48:	04000001 	streq	r0, [r0], #-1
 b4c:	00054b00 	andeq	r4, r5, r0, lsl #22
 b50:	87010400 	strhi	r0, [r1, -r0, lsl #8]
 b54:	0c000000 	stceq	0, cr0, [r0], {-0}
 b58:	0000046b 	andeq	r0, r0, fp, ror #8
 b5c:	20000a28 	andcs	r0, r0, r8, lsr #20
 b60:	0000013c 	andeq	r0, r0, ip, lsr r1
 b64:	00000493 	muleq	r0, r3, r4
 b68:	00045002 	andeq	r5, r4, r2
 b6c:	8a160100 	bhi	580f74 <startup-0x1fa7f08c>
 b70:	cc000000 	stcgt	0, cr0, [r0], {-0}
 b74:	9820000a 	stmdals	r0!, {r1, r3}
 b78:	01000000 	mrseq	r0, (UNDEF: 0)
 b7c:	00008a9c 	muleq	r0, ip, sl
 b80:	04ad0300 	strteq	r0, [sp], #768	; 0x300
 b84:	17010000 	strne	r0, [r1, -r0]
 b88:	00000097 	muleq	r0, r7, r0
 b8c:	035c9102 	cmpeq	ip, #-2147483648	; 0x80000000
 b90:	00000455 	andeq	r0, r0, r5, asr r4
 b94:	00ae1801 	adceq	r1, lr, r1, lsl #16
 b98:	03050000 	movweq	r0, #20480	; 0x5000
 b9c:	20000d78 	andcs	r0, r0, r8, ror sp
 ba0:	000ade04 	andeq	sp, sl, r4, lsl #28
 ba4:	00006e20 	andeq	r6, r0, r0, lsr #28
 ba8:	6f720500 	svcvs	0x00720500
 bac:	19010077 	stmdbne	r1, {r0, r1, r2, r4, r5, r6}
 bb0:	000000be 	strheq	r0, [r0], -lr
 bb4:	046f9102 	strbteq	r9, [pc], #-258	; bbc <startup-0x1ffff444>
 bb8:	20000ae8 	andcs	r0, r0, r8, ror #21
 bbc:	0000004c 	andeq	r0, r0, ip, asr #32
 bc0:	0004a603 	andeq	sl, r4, r3, lsl #12
 bc4:	be1b0100 	muflte	f0, f3, f0
 bc8:	02000000 	andeq	r0, r0, #0
 bcc:	00006e91 	muleq	r0, r1, lr
 bd0:	90040600 	andls	r0, r4, r0, lsl #12
 bd4:	07000000 	streq	r0, [r0, -r0]
 bd8:	00790801 	rsbseq	r0, r9, r1, lsl #16
 bdc:	90080000 	andls	r0, r8, r0
 be0:	a7000000 	strge	r0, [r0, -r0]
 be4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 be8:	000000a7 	andeq	r0, r0, r7, lsr #1
 bec:	0407000f 	streq	r0, [r7], #-15
 bf0:	00016807 	andeq	r6, r1, r7, lsl #16
 bf4:	00900800 	addseq	r0, r0, r0, lsl #16
 bf8:	00be0000 	adcseq	r0, lr, r0
 bfc:	a7090000 	strge	r0, [r9, -r0]
 c00:	03000000 	movweq	r0, #0
 c04:	08010700 	stmdaeq	r1, {r8, r9, sl}
 c08:	00000082 	andeq	r0, r0, r2, lsl #1
 c0c:	0004600a 	andeq	r6, r4, sl
 c10:	900d0100 	andls	r0, sp, r0, lsl #2
 c14:	80000000 	andhi	r0, r0, r0
 c18:	4c20000a 	stcmi	0, cr0, [r0], #-40	; 0xffffffd8
 c1c:	01000000 	mrseq	r0, (UNDEF: 0)
 c20:	0000ed9c 	muleq	r0, ip, sp
 c24:	64690500 	strbtvs	r0, [r9], #-1280	; 0xfffffb00
 c28:	0e010072 	mcreq	0, 0, r0, cr1, cr2, {3}
 c2c:	00000090 	muleq	r0, r0, r0
 c30:	00779102 	rsbseq	r9, r7, r2, lsl #2
 c34:	0004b20b 	andeq	fp, r4, fp, lsl #4
 c38:	28030100 	stmdacs	r3, {r8}
 c3c:	5820000a 	stmdapl	r0!, {r1, r3}
 c40:	01000000 	mrseq	r0, (UNDEF: 0)
 c44:	6f720c9c 	svcvs	0x00720c9c
 c48:	03010077 	movweq	r0, #4215	; 0x1077
 c4c:	00000090 	muleq	r0, r0, r0
 c50:	00779102 	rsbseq	r9, r7, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03011303 	movweq	r1, #4867	; 0x1303
  20:	3a0b0b0e 	bcc	2c2c60 <startup-0x1fd3d3a0>
  24:	010b3b0b 	tsteq	fp, fp, lsl #22
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	0b381349 	bleq	e04d60 <startup-0x1f1fb2a0>
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	3f13490b 	svccc	0x0013490b
  98:	00193c19 	andseq	r3, r9, r9, lsl ip
  9c:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	01111927 	tsteq	r1, r7, lsr #18
  ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b4:	0f000013 	svceq	0x00000013
  b8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c4:	0b100000 	bleq	4000cc <startup-0x1fbfff34>
  c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  cc:	11000006 	tstne	r0, r6
  d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  d4:	0b3b0b3a 	bleq	ec2dc4 <startup-0x1f13d23c>
  d8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  dc:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
  e0:	03193f00 	tsteq	r9, #0, 30
  e4:	3b0b3a0e 	blcc	2ce924 <startup-0x1fd316dc>
  e8:	1119270b 	tstne	r9, fp, lsl #14
  ec:	40061201 	andmi	r1, r6, r1, lsl #4
  f0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  f4:	01000000 	mrseq	r0, (UNDEF: 0)
  f8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  fc:	0e030b13 	vmoveq.32	d3[0], r0
 100:	06120111 			; <UNDEFINED> instruction: 0x06120111
 104:	00001710 	andeq	r1, r0, r0, lsl r7
 108:	03011302 	movweq	r1, #4866	; 0x1302
 10c:	3a0b0b0e 	bcc	2c2d4c <startup-0x1fd3d2b4>
 110:	010b3b0b 	tsteq	fp, fp, lsl #22
 114:	03000013 	movweq	r0, #19
 118:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	0b381349 	bleq	e04e4c <startup-0x1f1fb1b4>
 124:	24040000 	strcs	r0, [r4], #-0
 128:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 12c:	000e030b 	andeq	r0, lr, fp, lsl #6
 130:	00160500 	andseq	r0, r6, r0, lsl #10
 134:	0b3a0e03 	bleq	e83948 <startup-0x1f17c6b8>
 138:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 13c:	0d060000 	stceq	0, cr0, [r6, #-0]
 140:	3a0e0300 	bcc	380d48 <startup-0x1fc7f2b8>
 144:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 148:	000b3813 	andeq	r3, fp, r3, lsl r8
 14c:	00240700 	eoreq	r0, r4, r0, lsl #14
 150:	0b3e0b0b 	bleq	f82d84 <startup-0x1f07d27c>
 154:	00000803 	andeq	r0, r0, r3, lsl #16
 158:	49010108 	stmdbmi	r1, {r3, r8}
 15c:	00130113 	andseq	r0, r3, r3, lsl r1
 160:	00210900 	eoreq	r0, r1, r0, lsl #18
 164:	0b2f1349 	bleq	bc4e90 <startup-0x1f43b170>
 168:	0f0a0000 	svceq	0x000a0000
 16c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 170:	0b000013 	bleq	1c4 <startup-0x1ffffe3c>
 174:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 178:	00001301 	andeq	r1, r0, r1, lsl #6
 17c:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 180:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 184:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 188:	0b3b0b3a 	bleq	ec2e78 <startup-0x1f13d188>
 18c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 190:	0000193c 	andeq	r1, r0, ip, lsr r9
 194:	0300340e 	movweq	r3, #1038	; 0x40e
 198:	3b0b3a0e 	blcc	2ce9d8 <startup-0x1fd31628>
 19c:	3f13490b 	svccc	0x0013490b
 1a0:	00180219 	andseq	r0, r8, r9, lsl r2
 1a4:	00340f00 	eorseq	r0, r4, r0, lsl #30
 1a8:	0b3a1347 	bleq	e84ecc <startup-0x1f17b134>
 1ac:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 1b0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 1b4:	03193f01 	tsteq	r9, #1, 30
 1b8:	3b0b3a0e 	blcc	2ce9f8 <startup-0x1fd31608>
 1bc:	1119270b 	tstne	r9, fp, lsl #14
 1c0:	40061201 	andmi	r1, r6, r1, lsl #4
 1c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1c8:	05110000 	ldreq	r0, [r1, #-0]
 1cc:	3a0e0300 	bcc	380dd4 <startup-0x1fc7f22c>
 1d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d4:	00180213 	andseq	r0, r8, r3, lsl r2
 1d8:	00341200 	eorseq	r1, r4, r0, lsl #4
 1dc:	0b3a0803 	bleq	e821f0 <startup-0x1f17de10>
 1e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1e4:	00001802 	andeq	r1, r0, r2, lsl #16
 1e8:	01110100 	tsteq	r1, r0, lsl #2
 1ec:	0b130e25 	bleq	4c3a88 <startup-0x1fb3c578>
 1f0:	01110e03 	tsteq	r1, r3, lsl #28
 1f4:	17100612 			; <UNDEFINED> instruction: 0x17100612
 1f8:	16020000 	strne	r0, [r2], -r0
 1fc:	3a0e0300 	bcc	380e04 <startup-0x1fc7f1fc>
 200:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 204:	03000013 	movweq	r0, #19
 208:	0b0b0024 	bleq	2c02a0 <startup-0x1fd3fd60>
 20c:	0e030b3e 	vmoveq.16	d3[0], r0
 210:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 214:	03193f01 	tsteq	r9, #1, 30
 218:	3b0b3a0e 	blcc	2cea58 <startup-0x1fd315a8>
 21c:	1119270b 	tstne	r9, fp, lsl #14
 220:	40061201 	andmi	r1, r6, r1, lsl #4
 224:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 228:	00001301 	andeq	r1, r0, r1, lsl #6
 22c:	03000505 	movweq	r0, #1285	; 0x505
 230:	3b0b3a08 	blcc	2cea58 <startup-0x1fd315a8>
 234:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 238:	06000018 			; <UNDEFINED> instruction: 0x06000018
 23c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 240:	0b3b0b3a 	bleq	ec2f30 <startup-0x1f13d0d0>
 244:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 248:	0b070000 	bleq	1c0250 <startup-0x1fe3fdb0>
 24c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 250:	08000006 	stmdaeq	r0, {r1, r2}
 254:	08030034 	stmdaeq	r3, {r2, r4, r5}
 258:	0b3b0b3a 	bleq	ec2f48 <startup-0x1f13d0b8>
 25c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 260:	24090000 	strcs	r0, [r9], #-0
 264:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 268:	0008030b 	andeq	r0, r8, fp, lsl #6
 26c:	002e0a00 	eoreq	r0, lr, r0, lsl #20
 270:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 274:	0b3b0b3a 	bleq	ec2f64 <startup-0x1f13d09c>
 278:	01111927 	tsteq	r1, r7, lsr #18
 27c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 280:	00194296 	mulseq	r9, r6, r2
 284:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 288:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 28c:	0b3b0b3a 	bleq	ec2f7c <startup-0x1f13d084>
 290:	13491927 	movtne	r1, #39207	; 0x9927
 294:	06120111 			; <UNDEFINED> instruction: 0x06120111
 298:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 29c:	00130119 	andseq	r0, r3, r9, lsl r1
 2a0:	00050c00 	andeq	r0, r5, r0, lsl #24
 2a4:	0b3a0e03 	bleq	e83ab8 <startup-0x1f17c548>
 2a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2ac:	00001802 	andeq	r1, r0, r2, lsl #16
 2b0:	3f012e0d 	svccc	0x00012e0d
 2b4:	3a0e0319 	bcc	380f20 <startup-0x1fc7f0e0>
 2b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2bc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2c0:	97184006 	ldrls	r4, [r8, -r6]
 2c4:	13011942 	movwne	r1, #6466	; 0x1942
 2c8:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 2cc:	03193f01 	tsteq	r9, #1, 30
 2d0:	3b0b3a0e 	blcc	2ceb10 <startup-0x1fd314f0>
 2d4:	1119270b 	tstne	r9, fp, lsl #14
 2d8:	40061201 	andmi	r1, r6, r1, lsl #4
 2dc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2e0:	01000000 	mrseq	r0, (UNDEF: 0)
 2e4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2e8:	0e030b13 	vmoveq.32	d3[0], r0
 2ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f0:	00001710 	andeq	r1, r0, r0, lsl r7
 2f4:	03011302 	movweq	r1, #4866	; 0x1302
 2f8:	3a0b0b0e 	bcc	2c2f38 <startup-0x1fd3d0c8>
 2fc:	010b3b0b 	tsteq	fp, fp, lsl #22
 300:	03000013 	movweq	r0, #19
 304:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 308:	0b3b0b3a 	bleq	ec2ff8 <startup-0x1f13d008>
 30c:	0b381349 	bleq	e05038 <startup-0x1f1fafc8>
 310:	24040000 	strcs	r0, [r4], #-0
 314:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 318:	000e030b 	andeq	r0, lr, fp, lsl #6
 31c:	00160500 	andseq	r0, r6, r0, lsl #10
 320:	0b3a0e03 	bleq	e83b34 <startup-0x1f17c4cc>
 324:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 328:	0d060000 	stceq	0, cr0, [r6, #-0]
 32c:	3a0e0300 	bcc	380f34 <startup-0x1fc7f0cc>
 330:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 334:	000b3813 	andeq	r3, fp, r3, lsl r8
 338:	00240700 	eoreq	r0, r4, r0, lsl #14
 33c:	0b3e0b0b 	bleq	f82f70 <startup-0x1f07d090>
 340:	00000803 	andeq	r0, r0, r3, lsl #16
 344:	49010108 	stmdbmi	r1, {r3, r8}
 348:	00130113 	andseq	r0, r3, r3, lsl r1
 34c:	00210900 	eoreq	r0, r1, r0, lsl #18
 350:	0b2f1349 	bleq	bc507c <startup-0x1f43af84>
 354:	0f0a0000 	svceq	0x000a0000
 358:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 35c:	0b000013 	bleq	3b0 <startup-0x1ffffc50>
 360:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 364:	00001301 	andeq	r1, r0, r1, lsl #6
 368:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 36c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 370:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 374:	0b3a0e03 	bleq	e83b88 <startup-0x1f17c478>
 378:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 37c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 380:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 384:	00130119 	andseq	r0, r3, r9, lsl r1
 388:	00050e00 	andeq	r0, r5, r0, lsl #28
 38c:	0b3a0e03 	bleq	e83ba0 <startup-0x1f17c460>
 390:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 394:	00001802 	andeq	r1, r0, r2, lsl #16
 398:	0300050f 	movweq	r0, #1295	; 0x50f
 39c:	3b0b3a08 	blcc	2cebc4 <startup-0x1fd3143c>
 3a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 3a4:	10000018 	andne	r0, r0, r8, lsl r0
 3a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3ac:	0b3a0e03 	bleq	e83bc0 <startup-0x1f17c440>
 3b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3b8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3bc:	00130119 	andseq	r0, r3, r9, lsl r1
 3c0:	010b1100 	mrseq	r1, (UNDEF: 27)
 3c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3c8:	34120000 	ldrcc	r0, [r2], #-0
 3cc:	3a080300 	bcc	200fd4 <startup-0x1fdff02c>
 3d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3d4:	00180213 	andseq	r0, r8, r3, lsl r2
 3d8:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 3dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3e0:	0b3b0b3a 	bleq	ec30d0 <startup-0x1f13cf30>
 3e4:	01111927 	tsteq	r1, r7, lsr #18
 3e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3ec:	00194296 	mulseq	r9, r6, r2
 3f0:	11010000 	mrsne	r0, (UNDEF: 1)
 3f4:	130e2501 	movwne	r2, #58625	; 0xe501
 3f8:	110e030b 	tstne	lr, fp, lsl #6
 3fc:	10061201 	andne	r1, r6, r1, lsl #4
 400:	02000017 	andeq	r0, r0, #23
 404:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 408:	0b3a0e03 	bleq	e83c1c <startup-0x1f17c3e4>
 40c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 410:	06120111 			; <UNDEFINED> instruction: 0x06120111
 414:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 418:	03000019 	movweq	r0, #25
 41c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 420:	0b3a0e03 	bleq	e83c34 <startup-0x1f17c3cc>
 424:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 428:	06120111 			; <UNDEFINED> instruction: 0x06120111
 42c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 430:	00130119 	andseq	r0, r3, r9, lsl r1
 434:	00050400 	andeq	r0, r5, r0, lsl #8
 438:	0b3a0803 	bleq	e8244c <startup-0x1f17dbb4>
 43c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 440:	00001802 	andeq	r1, r0, r2, lsl #16
 444:	0b002405 	bleq	9460 <startup-0x1fff6ba0>
 448:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 44c:	0600000e 	streq	r0, [r0], -lr
 450:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 454:	0b3a0e03 	bleq	e83c68 <startup-0x1f17c398>
 458:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 45c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 460:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 464:	00000019 	andeq	r0, r0, r9, lsl r0
 468:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 46c:	030b130e 	movweq	r1, #45838	; 0xb30e
 470:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 474:	00171006 	andseq	r1, r7, r6
 478:	01130200 	tsteq	r3, r0, lsl #4
 47c:	0b0b0e03 	bleq	2c3c90 <startup-0x1fd3c370>
 480:	0b3b0b3a 	bleq	ec3170 <startup-0x1f13ce90>
 484:	00001301 	andeq	r1, r0, r1, lsl #6
 488:	03000d03 	movweq	r0, #3331	; 0xd03
 48c:	3b0b3a08 	blcc	2cecb4 <startup-0x1fd3134c>
 490:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 494:	0400000b 	streq	r0, [r0], #-11
 498:	0b0b0024 	bleq	2c0530 <startup-0x1fd3fad0>
 49c:	0e030b3e 	vmoveq.16	d3[0], r0
 4a0:	16050000 	strne	r0, [r5], -r0
 4a4:	3a0e0300 	bcc	3810ac <startup-0x1fc7ef54>
 4a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4ac:	06000013 			; <UNDEFINED> instruction: 0x06000013
 4b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 4b4:	0b3b0b3a 	bleq	ec31a4 <startup-0x1f13ce5c>
 4b8:	0b381349 	bleq	e051e4 <startup-0x1f1fae1c>
 4bc:	24070000 	strcs	r0, [r7], #-0
 4c0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4c4:	0008030b 	andeq	r0, r8, fp, lsl #6
 4c8:	01010800 	tsteq	r1, r0, lsl #16
 4cc:	13011349 	movwne	r1, #4937	; 0x1349
 4d0:	21090000 	mrscs	r0, (UNDEF: 9)
 4d4:	2f134900 	svccs	0x00134900
 4d8:	0a00000b 	beq	50c <startup-0x1ffffaf4>
 4dc:	0b0b000f 	bleq	2c0520 <startup-0x1fd3fae0>
 4e0:	00001349 	andeq	r1, r0, r9, asr #6
 4e4:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 4e8:	00130119 	andseq	r0, r3, r9, lsl r1
 4ec:	00050c00 	andeq	r0, r5, r0, lsl #24
 4f0:	00001349 	andeq	r1, r0, r9, asr #6
 4f4:	0300340d 	movweq	r3, #1037	; 0x40d
 4f8:	3b0b3a0e 	blcc	2ced38 <startup-0x1fd312c8>
 4fc:	3f13490b 	svccc	0x0013490b
 500:	00193c19 	andseq	r3, r9, r9, lsl ip
 504:	00340e00 	eorseq	r0, r4, r0, lsl #28
 508:	0b3a0e03 	bleq	e83d1c <startup-0x1f17c2e4>
 50c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 510:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 514:	340f0000 	strcc	r0, [pc], #-0	; 51c <startup-0x1ffffae4>
 518:	3a134700 	bcc	4d2120 <startup-0x1fb2dee0>
 51c:	020b3b0b 	andeq	r3, fp, #11264	; 0x2c00
 520:	10000018 	andne	r0, r0, r8, lsl r0
 524:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 528:	0b3a0e03 	bleq	e83d3c <startup-0x1f17c2c4>
 52c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 530:	06120111 			; <UNDEFINED> instruction: 0x06120111
 534:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 538:	11000019 	tstne	r0, r9, lsl r0
 53c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 540:	0b3b0b3a 	bleq	ec3230 <startup-0x1f13cdd0>
 544:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 548:	01000000 	mrseq	r0, (UNDEF: 0)
 54c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 550:	0e030b13 	vmoveq.32	d3[0], r0
 554:	06120111 			; <UNDEFINED> instruction: 0x06120111
 558:	00001710 	andeq	r1, r0, r0, lsl r7
 55c:	3f012e02 	svccc	0x00012e02
 560:	3a0e0319 	bcc	3811cc <startup-0x1fc7ee34>
 564:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 568:	11134919 	tstne	r3, r9, lsl r9
 56c:	40061201 	andmi	r1, r6, r1, lsl #4
 570:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 574:	00001301 	andeq	r1, r0, r1, lsl #6
 578:	03003403 	movweq	r3, #1027	; 0x403
 57c:	3b0b3a0e 	blcc	2cedbc <startup-0x1fd31244>
 580:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 584:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
 588:	0111010b 	tsteq	r1, fp, lsl #2
 58c:	00000612 	andeq	r0, r0, r2, lsl r6
 590:	03003405 	movweq	r3, #1029	; 0x405
 594:	3b0b3a08 	blcc	2cedbc <startup-0x1fd31244>
 598:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 59c:	06000018 			; <UNDEFINED> instruction: 0x06000018
 5a0:	0b0b000f 	bleq	2c05e4 <startup-0x1fd3fa1c>
 5a4:	00001349 	andeq	r1, r0, r9, asr #6
 5a8:	0b002407 	bleq	95cc <startup-0x1fff6a34>
 5ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5b0:	0800000e 	stmdaeq	r0, {r1, r2, r3}
 5b4:	13490101 	movtne	r0, #37121	; 0x9101
 5b8:	00001301 	andeq	r1, r0, r1, lsl #6
 5bc:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 5c0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 5c4:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 5c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5cc:	0b3b0b3a 	bleq	ec32bc <startup-0x1f13cd44>
 5d0:	13491927 	movtne	r1, #39207	; 0x9927
 5d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5d8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5dc:	00130119 	andseq	r0, r3, r9, lsl r1
 5e0:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 5e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5e8:	0b3b0b3a 	bleq	ec32d8 <startup-0x1f13cd28>
 5ec:	01111927 	tsteq	r1, r7, lsr #18
 5f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5f4:	00194297 	mulseq	r9, r7, r2
 5f8:	00050c00 	andeq	r0, r5, r0, lsl #24
 5fc:	0b3a0803 	bleq	e82610 <startup-0x1f17d9f0>
 600:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 604:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000174 	andeq	r0, r0, r4, ror r1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02340002 	eorseq	r0, r4, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000184 	andcs	r0, r0, r4, lsl #3
  3c:	000000dc 	ldrdeq	r0, [r0], -ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	04390002 	ldrteq	r0, [r9], #-2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000260 	andcs	r0, r0, r0, ror #4
  5c:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	06a70002 	strteq	r0, [r7], r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000850 	andcs	r0, r0, r0, asr r8
  7c:	000000dc 	ldrdeq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	08c90002 	stmiaeq	r9, {r1}^
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	2000092c 	andcs	r0, r0, ip, lsr #18
  9c:	0000009a 	muleq	r0, sl, r0
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	095a0002 	ldmdbeq	sl, {r1}^
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200009c8 	andcs	r0, r0, r8, asr #19
  bc:	0000005e 	andeq	r0, r0, lr, asr r0
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	0b470002 	bleq	11c00dc <startup-0x1ee3ff24>
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000a28 	andcs	r0, r0, r8, lsr #20
  dc:	0000013c 	andeq	r0, r0, ip, lsr r1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000184 	andcs	r0, r0, r4, lsl #3
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000c6 	andeq	r0, r0, r6, asr #1
   4:	00740002 	rsbseq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  44:	5f6c6165 	svcpl	0x006c6165
  48:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  4c:	74730000 	ldrbtvc	r0, [r3], #-0
  50:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  54:	00632e70 	rsbeq	r2, r3, r0, ror lr
  58:	6f000001 	svcvs	0x00000001
  5c:	63656a62 	cmnvs	r5, #401408	; 0x62000
  60:	00682e74 	rsbeq	r2, r8, r4, ror lr
  64:	62000001 	andvs	r0, r0, #1
  68:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
  6c:	00010068 	andeq	r0, r1, r8, rrx
  70:	64617000 	strbtvs	r7, [r1], #-0
  74:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
  78:	00010068 	andeq	r0, r1, r8, rrx
  7c:	05000000 	streq	r0, [r0, #-0]
  80:	00000002 	andeq	r0, r0, r2
  84:	010b0320 	tsteq	fp, r0, lsr #6
  88:	03025e13 	movweq	r5, #11795	; 0x2e13
  8c:	00010100 	andeq	r0, r1, r0, lsl #2
  90:	00100205 	andseq	r0, r0, r5, lsl #4
  94:	14032000 	strne	r2, [r3], #-0
  98:	673f3001 	ldrvs	r3, [pc, -r1]!
  9c:	67928376 			; <UNDEFINED> instruction: 0x67928376
  a0:	2f3dec67 	svccs	0x003dec67
  a4:	332f2f2f 			; <UNDEFINED> instruction: 0x332f2f2f
  a8:	67674b69 	strbvs	r4, [r7, -r9, ror #22]!
  ac:	75130859 	ldrvc	r0, [r3, #-2137]	; 0xfffff7a7
  b0:	02007583 	andeq	r7, r0, #549453824	; 0x20c00000
  b4:	007d0204 	rsbseq	r0, sp, r4, lsl #4
  b8:	06010402 	streq	r0, [r1], -r2, lsl #8
  bc:	59600674 	stmdbpl	r0!, {r2, r4, r5, r6, r9, sl}^
  c0:	70035959 	andvc	r5, r3, r9, asr r9
  c4:	0007023c 	andeq	r0, r7, ip, lsr r2
  c8:	00aa0101 	adceq	r0, sl, r1, lsl #2
  cc:	00020000 	andeq	r0, r2, r0
  d0:	00000071 	andeq	r0, r0, r1, ror r0
  d4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  d8:	0101000d 	tsteq	r1, sp
  dc:	00000101 	andeq	r0, r0, r1, lsl #2
  e0:	00000100 	andeq	r0, r0, r0, lsl #2
  e4:	2f3a4301 	svccs	0x003a4301
  e8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  ec:	61482f73 	hvcvs	33523	; 0x82f3
  f0:	7375706d 	cmnvc	r5, #109	; 0x6d
  f4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  f8:	706f746b 	rsbvc	r7, pc, fp, ror #8
  fc:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 100:	2f373130 	svccs	0x00373130
 104:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 108:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 10c:	6165722f 	cmnvs	r5, pc, lsr #4
 110:	6f705f6c 	svcvs	0x00705f6c
 114:	0000676e 	andeq	r6, r0, lr, ror #14
 118:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 11c:	0100632e 	tsteq	r0, lr, lsr #6
 120:	626f0000 	rsbvs	r0, pc, #0
 124:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 128:	0100682e 	tsteq	r0, lr, lsr #16
 12c:	61620000 	cmnvs	r2, r0
 130:	682e6c6c 	stmdavs	lr!, {r2, r3, r5, r6, sl, fp, sp, lr}
 134:	00000100 	andeq	r0, r0, r0, lsl #2
 138:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 13c:	682e656c 	stmdavs	lr!, {r2, r3, r5, r6, r8, sl, sp, lr}
 140:	00000100 	andeq	r0, r0, r0, lsl #2
 144:	02050000 	andeq	r0, r5, #0
 148:	20000184 	andcs	r0, r0, r4, lsl #3
 14c:	4b011b03 	blmi	46d60 <startup-0x1ffb92a0>
 150:	0077754c 	rsbseq	r7, r7, ip, asr #10
 154:	06010402 	streq	r0, [r1], -r2, lsl #8
 158:	5c4b064a 	mcrrpl	6, 4, r0, fp, cr10
 15c:	009f312f 	addseq	r3, pc, pc, lsr #2
 160:	06010402 	streq	r0, [r1], -r2, lsl #8
 164:	5f9f0666 	svcpl	0x009f0666
 168:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 16c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 170:	02595e9f 	subseq	r5, r9, #2544	; 0x9f0
 174:	01010008 	tsteq	r1, r8
 178:	00000168 	andeq	r0, r0, r8, ror #2
 17c:	005f0002 	subseq	r0, pc, r2
 180:	01020000 	mrseq	r0, (UNDEF: 2)
 184:	000d0efb 	strdeq	r0, [sp], -fp
 188:	01010101 	tsteq	r1, r1, lsl #2
 18c:	01000000 	mrseq	r0, (UNDEF: 0)
 190:	43010000 	movwmi	r0, #4096	; 0x1000
 194:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 198:	2f737265 	svccs	0x00737265
 19c:	706d6148 	rsbvc	r6, sp, r8, asr #2
 1a0:	442f7375 	strtmi	r7, [pc], #-885	; 1a8 <startup-0x1ffffe58>
 1a4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 1a8:	442f706f 	strtmi	r7, [pc], #-111	; 1b0 <startup-0x1ffffe50>
 1ac:	31305441 	teqcc	r0, r1, asr #8
 1b0:	6f432f37 	svcvs	0x00432f37
 1b4:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 1b8:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 1bc:	5f6c6165 	svcpl	0x006c6165
 1c0:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 1c4:	72670000 	rsbvc	r0, r7, #0
 1c8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1cc:	00632e63 	rsbeq	r2, r3, r3, ror #28
 1d0:	67000001 	strvs	r0, [r0, -r1]
 1d4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1d8:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
 1dc:	00000100 	andeq	r0, r0, r0, lsl #2
 1e0:	02050000 	andeq	r0, r5, #0
 1e4:	20000260 	andcs	r0, r0, r0, ror #4
 1e8:	76e56718 	usatvc	r6, #5, r8, lsl #14
 1ec:	6768d767 	strbvs	sp, [r8, -r7, ror #14]!
 1f0:	0b033d4b 	bleq	cf724 <startup-0x1ff308dc>
 1f4:	2076033c 	rsbscs	r0, r6, ip, lsr r3
 1f8:	03443d4b 	movteq	r3, #19787	; 0x4d4b
 1fc:	3d4b2079 	stclcc	0, cr2, [fp, #-484]	; 0xfffffe1c
 200:	3d4b1c41 	stclcc	12, cr1, [fp, #-260]	; 0xfffffefc
 204:	3d2f4c3e 	stccc	12, cr4, [pc, #-248]!	; 114 <startup-0x1ffffeec>
 208:	313d3d3d 	teqcc	sp, sp, lsr sp
 20c:	303d2f3d 	eorscc	r2, sp, sp, lsr pc
 210:	3d232661 	stccc	6, cr2, [r3, #-388]!	; 0xfffffe7c
 214:	3d67ae3e 	stclcc	14, cr10, [r7, #-248]!	; 0xffffff08
 218:	2f593d3d 	svccs	0x00593d3d
 21c:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 220:	313d4b3e 	teqcc	sp, lr, lsr fp
 224:	3e313d4b 	cdpcc	13, 3, cr3, cr1, cr11, {2}
 228:	594b91ca 	stmdbpl	fp, {r1, r3, r6, r7, r8, ip, pc}^
 22c:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
 230:	59313d59 	ldmdbpl	r1!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 234:	3d3d313d 	ldfccs	f3, [sp, #-244]!	; 0xffffff0c
 238:	3d91763d 	ldccc	6, cr7, [r1, #244]	; 0xf4
 23c:	4c833d59 	stcmi	13, cr3, [r3], {89}	; 0x59
 240:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 244:	674c833d 	smlaldxvs	r8, ip, sp, r3
 248:	2f4c6759 	svccs	0x004c6759
 24c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 250:	4b4b4b3d 	blmi	12d2f4c <startup-0x1ed2d0b4>
 254:	3e3d4b4b 	vsubcc.f64	d4, d13, d11
 258:	4bad3d3d 	blmi	feb4f754 <returnKeys.4003+0xdeb4e9dc>
 25c:	03040200 	movweq	r0, #16896	; 0x4200
 260:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 264:	02004903 	andeq	r4, r0, #49152	; 0xc000
 268:	3c060104 	stfccs	f0, [r6], {4}
 26c:	02040200 	andeq	r0, r4, #0, 4
 270:	02003906 	andeq	r3, r0, #98304	; 0x18000
 274:	3c060104 	stfccs	f0, [r6], {4}
 278:	e54d4406 	strb	r4, [sp, #-1030]	; 0xfffffbfa
 27c:	01040200 	mrseq	r0, R12_usr
 280:	5a066606 	bpl	199aa0 <startup-0x1fe66560>
 284:	040200af 	streq	r0, [r2], #-175	; 0xffffff51
 288:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
 28c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 290:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 294:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 298:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 29c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2a0:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 2a4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2a8:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 2ac:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2b0:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 2b4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2b8:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 2bc:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2c0:	06c80601 	strbeq	r0, [r8], r1, lsl #12
 2c4:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 2c8:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 2cc:	694b4b77 	stmdbvs	fp, {r0, r1, r2, r4, r5, r6, r8, r9, fp, lr}^
 2d0:	d7bb5b4b 	ldrle	r5, [fp, fp, asr #22]!
 2d4:	ae4bbc9f 	mcrge	12, 2, fp, cr11, cr15, {4}
 2d8:	ac5c03a0 	mrrcge	3, 10, r0, ip, cr0
 2dc:	02202503 	eoreq	r2, r0, #12582912	; 0xc00000
 2e0:	01010005 	tsteq	r1, r5
 2e4:	0000009d 	muleq	r0, sp, r0
 2e8:	005d0002 	subseq	r0, sp, r2
 2ec:	01020000 	mrseq	r0, (UNDEF: 2)
 2f0:	000d0efb 	strdeq	r0, [sp], -fp
 2f4:	01010101 	tsteq	r1, r1, lsl #2
 2f8:	01000000 	mrseq	r0, (UNDEF: 0)
 2fc:	43010000 	movwmi	r0, #4096	; 0x1000
 300:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 304:	2f737265 	svccs	0x00737265
 308:	706d6148 	rsbvc	r6, sp, r8, asr #2
 30c:	442f7375 	strtmi	r7, [pc], #-885	; 314 <startup-0x1ffffcec>
 310:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 314:	442f706f 	strtmi	r7, [pc], #-111	; 31c <startup-0x1ffffce4>
 318:	31305441 	teqcc	r0, r1, asr #8
 31c:	6f432f37 	svcvs	0x00432f37
 320:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 324:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 328:	5f6c6165 	svcpl	0x006c6165
 32c:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 330:	626f0000 	rsbvs	r0, pc, #0
 334:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 338:	0100632e 	tsteq	r0, lr, lsr #6
 33c:	626f0000 	rsbvs	r0, pc, #0
 340:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 344:	0100682e 	tsteq	r0, lr, lsr #16
 348:	00000000 	andeq	r0, r0, r0
 34c:	08500205 	ldmdaeq	r0, {r0, r2, r9}^
 350:	4b152000 	blmi	548358 <startup-0x1fab7ca8>
 354:	03040200 	movweq	r0, #16896	; 0x4200
 358:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 35c:	00c70803 	sbceq	r0, r7, r3, lsl #16
 360:	06010402 	streq	r0, [r1], -r2, lsl #8
 364:	4b3f063c 	blmi	fc1c5c <startup-0x1f03e3a4>
 368:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 36c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 370:	c7080304 	strgt	r0, [r8, -r4, lsl #6]
 374:	01040200 	mrseq	r0, R12_usr
 378:	3f063c06 	svccc	0x00063c06
 37c:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 380:	01000402 	tsteq	r0, r2, lsl #8
 384:	00008001 	andeq	r8, r0, r1
 388:	50000200 	andpl	r0, r0, r0, lsl #4
 38c:	02000000 	andeq	r0, r0, #0
 390:	0d0efb01 	vstreq	d15, [lr, #-4]
 394:	01010100 	mrseq	r0, (UNDEF: 17)
 398:	00000001 	andeq	r0, r0, r1
 39c:	01000001 	tsteq	r0, r1
 3a0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff965 <returnKeys.4003+0xdfffebed>
 3a4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3a8:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 3ac:	2f737570 	svccs	0x00737570
 3b0:	6b736544 	blvs	1cd98c8 <startup-0x1e326738>
 3b4:	2f706f74 	svccs	0x00706f74
 3b8:	30544144 	subscc	r4, r4, r4, asr #2
 3bc:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 3c0:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 3c4:	2f657469 	svccs	0x00657469
 3c8:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 3cc:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 3d0:	74000067 	strvc	r0, [r0], #-103	; 0xffffff99
 3d4:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 3d8:	0100632e 	tsteq	r0, lr, lsr #6
 3dc:	00000000 	andeq	r0, r0, r0
 3e0:	092c0205 	stmdbeq	ip!, {r0, r2, r9}
 3e4:	2f152000 	svccs	0x00152000
 3e8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 3ec:	01040200 	mrseq	r0, R12_usr
 3f0:	69062006 	stmdbvs	r6, {r1, r2, sp}
 3f4:	214ba03d 	cmpcs	fp, sp, lsr r0
 3f8:	2a2f2f2f 	bcs	bcc0bc <startup-0x1f433f44>
 3fc:	4e4c4c5e 	mcrmi	12, 2, r4, cr12, cr14, {2}
 400:	2f2f2f4c 	svccs	0x002f2f4c
 404:	01000302 	tsteq	r0, r2, lsl #6
 408:	00008601 	andeq	r8, r0, r1, lsl #12
 40c:	69000200 	stmdbvs	r0, {r9}
 410:	02000000 	andeq	r0, r0, #0
 414:	0d0efb01 	vstreq	d15, [lr, #-4]
 418:	01010100 	mrseq	r0, (UNDEF: 17)
 41c:	00000001 	andeq	r0, r0, r1
 420:	01000001 	tsteq	r0, r1
 424:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff9e9 <returnKeys.4003+0xdfffec71>
 428:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 42c:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 430:	2f737570 	svccs	0x00737570
 434:	6b736544 	blvs	1cd994c <startup-0x1e3266b4>
 438:	2f706f74 	svccs	0x00706f74
 43c:	30544144 	subscc	r4, r4, r4, asr #2
 440:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 444:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 448:	2f657469 	svccs	0x00657469
 44c:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 450:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 454:	70000067 	andvc	r0, r0, r7, rrx
 458:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 45c:	00632e65 	rsbeq	r2, r3, r5, ror #28
 460:	6f000001 	svcvs	0x00000001
 464:	63656a62 	cmnvs	r5, #401408	; 0x62000
 468:	00682e74 	rsbeq	r2, r8, r4, ror lr
 46c:	70000001 	andvc	r0, r0, r1
 470:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 474:	00682e65 	rsbeq	r2, r8, r5, ror #28
 478:	00000001 	andeq	r0, r0, r1
 47c:	c8020500 	stmdagt	r2, {r8, sl}
 480:	03200009 			; <UNDEFINED> instruction: 0x03200009
 484:	4d4b0136 	stfmie	f0, [fp, #-216]	; 0xffffff28
 488:	834b4b77 	movthi	r4, #47991	; 0xbb77
 48c:	04025977 	streq	r5, [r2], #-2423	; 0xfffff689
 490:	a7010100 	strge	r0, [r1, -r0, lsl #2]
 494:	02000000 	andeq	r0, r0, #0
 498:	00005100 	andeq	r5, r0, r0, lsl #2
 49c:	fb010200 	blx	40ca6 <startup-0x1ffbf35a>
 4a0:	01000d0e 	tsteq	r0, lr, lsl #26
 4a4:	00010101 	andeq	r0, r1, r1, lsl #2
 4a8:	00010000 	andeq	r0, r1, r0
 4ac:	3a430100 	bcc	10c08b4 <startup-0x1ef3f74c>
 4b0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 4b4:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 4b8:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 4bc:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 4c0:	6f746b73 	svcvs	0x00746b73
 4c4:	41442f70 	hvcmi	17136	; 0x42f0
 4c8:	37313054 			; <UNDEFINED> instruction: 0x37313054
 4cc:	646f432f 	strbtvs	r4, [pc], #-815	; 4d4 <startup-0x1ffffb2c>
 4d0:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 4d4:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 4d8:	705f6c61 	subsvc	r6, pc, r1, ror #24
 4dc:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 4e0:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 4e4:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 4e8:	00010063 	andeq	r0, r1, r3, rrx
 4ec:	05000000 	streq	r0, [r0, #-0]
 4f0:	000a2802 	andeq	r2, sl, r2, lsl #16
 4f4:	91671420 	cmnls	r7, r0, lsr #8
 4f8:	4b4b4b4b 	blmi	12d322c <startup-0x1ed2cdd4>
 4fc:	4b3d924c 	blmi	f64e34 <startup-0x1f09b1cc>
 500:	01040200 	mrseq	r0, R12_usr
 504:	2f064a06 	svccs	0x00064a06
 508:	01040200 	mrseq	r0, R12_usr
 50c:	2f064a06 	svccs	0x00064a06
 510:	01040200 	mrseq	r0, R12_usr
 514:	2f064a06 	svccs	0x00064a06
 518:	01040200 	mrseq	r0, R12_usr
 51c:	2f064a06 	svccs	0x00064a06
 520:	683d6821 	ldmdavs	sp!, {r0, r5, fp, sp, lr}
 524:	59676759 	stmdbpl	r7!, {r0, r3, r4, r6, r8, r9, sl, sp, lr}^
 528:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 52c:	001b0802 	andseq	r0, fp, r2, lsl #16
 530:	06010402 	streq	r0, [r1], -r2, lsl #8
 534:	3d600674 	stclcc	6, cr0, [r0, #-464]!	; 0xfffffe30
 538:	00080221 	andeq	r0, r8, r1, lsr #4
 53c:	Address 0x0000053c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	59726964 	ldmdbpl	r2!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	736f7000 	cmnvc	pc, #0
   8:	69730059 	ldmdbvs	r3!, {r0, r3, r4, r6}^
   c:	0058657a 	subseq	r6, r8, sl, ror r5
  10:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
  14:	64615074 	strbtvs	r5, [r1], #-116	; 0xffffff8c
  18:	00656c64 	rsbeq	r6, r5, r4, ror #24
  1c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  20:	72640059 	rsbvc	r0, r4, #89	; 0x59
  24:	43007761 	movwmi	r7, #1889	; 0x761
  28:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  2c:	2f737265 	svccs	0x00737265
  30:	706d6148 	rsbvc	r6, sp, r8, asr #2
  34:	442f7375 	strtmi	r7, [pc], #-885	; 3c <startup-0x1fffffc4>
  38:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  3c:	442f706f 	strtmi	r7, [pc], #-111	; 44 <startup-0x1fffffbc>
  40:	31305441 	teqcc	r0, r1, asr #8
  44:	6f432f37 	svcvs	0x00432f37
  48:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  4c:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  50:	5f6c6165 	svcpl	0x006c6165
  54:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  58:	6174732f 	cmnvs	r4, pc, lsr #6
  5c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  60:	7300632e 	movwvc	r6, #814	; 0x32e
  64:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
  68:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  6c:	6f507400 	svcvs	0x00507400
  70:	00746e69 	rsbseq	r6, r4, r9, ror #28
  74:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  78:	736e7500 	cmnvc	lr, #0, 10
  7c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  80:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  84:	47007261 	strmi	r7, [r0, -r1, ror #4]
  88:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  8c:	36203939 			; <UNDEFINED> instruction: 0x36203939
  90:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  94:	31303220 	teqcc	r0, r0, lsr #4
  98:	31323037 	teqcc	r2, r7, lsr r0
  9c:	72282035 	eorvc	r2, r8, #53	; 0x35
  a0:	61656c65 	cmnvs	r5, r5, ror #24
  a4:	20296573 	eorcs	r6, r9, r3, ror r5
  a8:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  ac:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  b0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  b4:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  b8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  bc:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  c0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  c4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  c8:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  cc:	205d3231 	subscs	r3, sp, r1, lsr r2
  d0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  d4:	20626d75 	rsbcs	r6, r2, r5, ror sp
  d8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  dc:	613d6863 	teqvs	sp, r3, ror #16
  e0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  e4:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  e8:	6f6c666d 	svcvs	0x006c666d
  ec:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  f0:	733d6962 	teqvc	sp, #1605632	; 0x188000
  f4:	2074666f 	rsbscs	r6, r4, pc, ror #12
  f8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  fc:	20626d75 	rsbcs	r6, r2, r5, ror sp
 100:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 104:	613d6863 	teqvs	sp, r3, ror #16
 108:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 10c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 110:	4f2d2067 	svcmi	0x002d2067
 114:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 118:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 11c:	50003939 	andpl	r3, r0, r9, lsr r9
 120:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; c <startup-0x1ffffff4>
 124:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 128:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 12c:	70615f74 	rsbvc	r5, r1, r4, ror pc
 130:	47740070 			; <UNDEFINED> instruction: 0x47740070
 134:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 138:	00797274 	rsbseq	r7, r9, r4, ror r2
 13c:	73657270 	cmnvc	r5, #112, 4
 140:	4b646573 	blmi	1919714 <startup-0x1e6e68ec>
 144:	00737965 	rsbseq	r7, r3, r5, ror #18
 148:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 14c:	00707574 	rsbseq	r7, r0, r4, ror r5
 150:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
 154:	64646150 	strbtvs	r6, [r4], #-336	; 0xfffffeb0
 158:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
 15c:	006e6961 	rsbeq	r6, lr, r1, ror #18
 160:	4a424f50 	bmi	1093ea8 <startup-0x1ef6c158>
 164:	00544345 	subseq	r4, r4, r5, asr #6
 168:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 16c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 170:	736f7000 	cmnvc	pc, #0
 174:	69640058 	stmdbvs	r4!, {r3, r4, r6}^
 178:	6e005872 	mcrvs	8, 0, r5, cr0, cr2, {3}
 17c:	6f506d75 	svcvs	0x00506d75
 180:	73746e69 	cmnvc	r4, #1680	; 0x690
 184:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 188:	7400544e 	strvc	r5, [r0], #-1102	; 0xfffffbb2
 18c:	006a624f 	rsbeq	r6, sl, pc, asr #4
 190:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 194:	6f65675f 	svcvs	0x0065675f
 198:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 19c:	68740079 	ldmdavs	r4!, {r0, r3, r4, r5, r6}^
 1a0:	6d007369 	stcvs	3, cr7, [r0, #-420]	; 0xfffffe5c
 1a4:	5f65766f 	svcpl	0x0065766f
 1a8:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 1ac:	2f3a4300 	svccs	0x003a4300
 1b0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1b4:	61482f73 	hvcvs	33523	; 0x82f3
 1b8:	7375706d 	cmnvc	r5, #109	; 0x6d
 1bc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1c0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1c4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 1c8:	2f373130 	svccs	0x00373130
 1cc:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 1d0:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 1d4:	6165722f 	cmnvs	r5, pc, lsr #4
 1d8:	6f705f6c 	svcvs	0x00705f6c
 1dc:	622f676e 	eorvs	r6, pc, #28835840	; 0x1b80000
 1e0:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
 1e4:	72670063 	rsbvc	r0, r7, #99	; 0x63
 1e8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1ec:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 1f0:	5f657469 	svcpl	0x00657469
 1f4:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1f8:	00646e61 	rsbeq	r6, r4, r1, ror #28
 1fc:	70617267 	rsbvc	r7, r1, r7, ror #4
 200:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 204:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 208:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 20c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 210:	00726165 	rsbseq	r6, r2, r5, ror #2
 214:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 218:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
 21c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 220:	635f7363 	cmpvs	pc, #-1946157055	; 0x8c000001
 224:	5f6c7274 	svcpl	0x006c7274
 228:	5f746962 	svcpl	0x00746962
 22c:	00746573 	rsbseq	r6, r4, r3, ror r5
 230:	70617267 	rsbvc	r7, r1, r7, ror #4
 234:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 238:	6165725f 	cmnvs	r5, pc, asr r2
 23c:	61645f64 	cmnvs	r4, r4, ror #30
 240:	67006174 	smlsdxvs	r0, r4, r1, r6
 244:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 248:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 24c:	5f746961 	svcpl	0x00746961
 250:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 254:	3a430079 	bcc	10c0440 <startup-0x1ef3fbc0>
 258:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 25c:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 260:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 264:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 268:	6f746b73 	svcvs	0x00746b73
 26c:	41442f70 	hvcmi	17136	; 0x42f0
 270:	37313054 			; <UNDEFINED> instruction: 0x37313054
 274:	646f432f 	strbtvs	r4, [pc], #-815	; 27c <startup-0x1ffffd84>
 278:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 27c:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 280:	705f6c61 	subsvc	r6, pc, r1, ror #24
 284:	2f676e6f 	svccs	0x00676e6f
 288:	70617267 	rsbvc	r7, r1, r7, ror #4
 28c:	2e636968 	vnmulcs.f16	s13, s6, s17	; <UNPREDICTABLE>
 290:	616d0063 	cmnvs	sp, r3, rrx
 294:	75006b73 	strvc	r6, [r0, #-2931]	; 0xfffff48d
 298:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 29c:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
 2a0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2a4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 2a8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 2ac:	6c657300 	stclvs	3, cr7, [r5], #-0
 2b0:	5f746365 	svcpl	0x00746365
 2b4:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 2b8:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 2bc:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
 2c0:	00706d65 	rsbseq	r6, r0, r5, ror #26
 2c4:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 2c8:	72670078 	rsbvc	r0, r7, #120	; 0x78
 2cc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2d0:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2d4:	67006461 	strvs	r6, [r0, -r1, ror #8]
 2d8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2dc:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 2e0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 2e4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 2e8:	61700061 	cmnvs	r0, r1, rrx
 2ec:	76006567 	strvc	r6, [r0], -r7, ror #10
 2f0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 2f4:	61726700 	cmnvs	r2, r0, lsl #14
 2f8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2fc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 300:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 304:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 308:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 30c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 310:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 314:	61697469 	cmnvs	r9, r9, ror #8
 318:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 31c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 320:	6a626f5f 	bvs	189c0a4 <startup-0x1e763f5c>
 324:	5f746365 	svcpl	0x00746365
 328:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 32c:	3a430064 	bcc	10c04c4 <startup-0x1ef3fb3c>
 330:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 334:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 338:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 33c:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 340:	6f746b73 	svcvs	0x00746b73
 344:	41442f70 	hvcmi	17136	; 0x42f0
 348:	37313054 			; <UNDEFINED> instruction: 0x37313054
 34c:	646f432f 	strbtvs	r4, [pc], #-815	; 354 <startup-0x1ffffcac>
 350:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 354:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 358:	705f6c61 	subsvc	r6, pc, r1, ror #24
 35c:	2f676e6f 	svccs	0x00676e6f
 360:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 364:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
 368:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 36c:	6f5f7261 	svcvs	0x005f7261
 370:	63656a62 	cmnvs	r5, #401408	; 0x62000
 374:	72640074 	rsbvc	r0, r4, #116	; 0x74
 378:	6f5f7761 	svcvs	0x005f7761
 37c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 380:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 384:	5f79616c 	svcpl	0x0079616c
 388:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 38c:	6e750069 	cdpvs	0, 7, cr0, cr5, cr9, {3}
 390:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 394:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 398:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
 39c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 3a0:	3030355f 	eorscc	r3, r0, pc, asr r5
 3a4:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 3a8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 3ac:	3035325f 	eorscc	r3, r5, pc, asr r2
 3b0:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 3b4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 3b8:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 3bc:	43006f72 	movwmi	r6, #3954	; 0xf72
 3c0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 3c4:	2f737265 	svccs	0x00737265
 3c8:	706d6148 	rsbvc	r6, sp, r8, asr #2
 3cc:	442f7375 	strtmi	r7, [pc], #-885	; 3d4 <startup-0x1ffffc2c>
 3d0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 3d4:	442f706f 	strtmi	r7, [pc], #-111	; 3dc <startup-0x1ffffc24>
 3d8:	31305441 	teqcc	r0, r1, asr #8
 3dc:	6f432f37 	svcvs	0x00432f37
 3e0:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 3e4:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 3e8:	5f6c6165 	svcpl	0x006c6165
 3ec:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 3f0:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
 3f4:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
 3f8:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 3fc:	61705f65 	cmnvs	r0, r5, ror #30
 400:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 404:	64617000 	strbtvs	r7, [r1], #-0
 408:	5f656c64 	svcpl	0x00656c64
 40c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 278 <startup-0x1ffffd88>
 410:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 414:	2f3a4300 	svccs	0x003a4300
 418:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 41c:	61482f73 	hvcvs	33523	; 0x82f3
 420:	7375706d 	cmnvc	r5, #109	; 0x6d
 424:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 428:	706f746b 	rsbvc	r7, pc, fp, ror #8
 42c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 430:	2f373130 	svccs	0x00373130
 434:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 438:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 43c:	6165722f 	cmnvs	r5, pc, lsr #4
 440:	6f705f6c 	svcvs	0x00705f6c
 444:	702f676e 	eorvc	r6, pc, lr, ror #14
 448:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 44c:	00632e65 	rsbeq	r2, r3, r5, ror #28
 450:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 454:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
 458:	4b6e7275 	blmi	1b9ce34 <startup-0x1e4631cc>
 45c:	00737965 	rsbseq	r7, r3, r5, ror #18
 460:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 464:	756c6f43 	strbvc	r6, [ip, #-3907]!	; 0xfffff0bd
 468:	43006e6d 	movwmi	r6, #3693	; 0xe6d
 46c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 470:	2f737265 	svccs	0x00737265
 474:	706d6148 	rsbvc	r6, sp, r8, asr #2
 478:	442f7375 	strtmi	r7, [pc], #-885	; 480 <startup-0x1ffffb80>
 47c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 480:	442f706f 	strtmi	r7, [pc], #-111	; 488 <startup-0x1ffffb78>
 484:	31305441 	teqcc	r0, r1, asr #8
 488:	6f432f37 	svcvs	0x00432f37
 48c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 490:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 494:	5f6c6165 	svcpl	0x006c6165
 498:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 49c:	79656b2f 	stmdbvc	r5!, {r0, r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 4a0:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 4a4:	6f630063 	svcvs	0x00630063
 4a8:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 4ac:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 4b0:	63610073 	cmnvs	r1, #115	; 0x73
 4b4:	61766974 	cmnvs	r6, r4, ror r9
 4b8:	6f526574 	svcvs	0x00526574
 4bc:	Address 0x000004bc is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000007c 	andeq	r0, r0, ip, ror r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000008c 	andcs	r0, r0, ip, lsl #1
  48:	000000f8 	strdeq	r0, [r0], -r8
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	200e4101 	andcs	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	20000184 	andcs	r0, r0, r4, lsl #3
  78:	000000dc 	ldrdeq	r0, [r0], -ip
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	180e4101 	stmdane	lr, {r0, r8, lr}
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	0000000c 	andeq	r0, r0, ip
  90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  94:	7c020001 	stcvc	0, cr0, [r2], {1}
  98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	0000008c 	andeq	r0, r0, ip, lsl #1
  a4:	20000260 	andcs	r0, r0, r0, ror #4
  a8:	00000038 	andeq	r0, r0, r8, lsr r0
  ac:	40080e41 	andmi	r0, r8, r1, asr #28
  b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b4:	100e4101 	andne	r4, lr, r1, lsl #2
  b8:	00070d41 	andeq	r0, r7, r1, asr #26
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	0000008c 	andeq	r0, r0, ip, lsl #1
  c4:	20000298 	mulcs	r0, r8, r2
  c8:	00000034 	andeq	r0, r0, r4, lsr r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	100e4101 	andne	r4, lr, r1, lsl #2
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	0000008c 	andeq	r0, r0, ip, lsl #1
  e4:	200002cc 	andcs	r0, r0, ip, asr #5
  e8:	0000006a 	andeq	r0, r0, sl, rrx
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	0000008c 	andeq	r0, r0, ip, lsl #1
 104:	20000336 	andcs	r0, r0, r6, lsr r3
 108:	00000066 	andeq	r0, r0, r6, rrx
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	0000008c 	andeq	r0, r0, ip, lsl #1
 120:	2000039c 	mulcs	r0, ip, r3
 124:	00000090 	muleq	r0, r0, r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	0000008c 	andeq	r0, r0, ip, lsl #1
 140:	2000042c 	andcs	r0, r0, ip, lsr #8
 144:	00000080 	andeq	r0, r0, r0, lsl #1
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	0000008c 	andeq	r0, r0, ip, lsl #1
 160:	200004ac 	andcs	r0, r0, ip, lsr #9
 164:	00000040 	andeq	r0, r0, r0, asr #32
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	0000008c 	andeq	r0, r0, ip, lsl #1
 180:	200004ec 	andcs	r0, r0, ip, ror #9
 184:	00000046 	andeq	r0, r0, r6, asr #32
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	0000008c 	andeq	r0, r0, ip, lsl #1
 1a0:	20000532 	andcs	r0, r0, r2, lsr r5
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	0000008c 	andeq	r0, r0, ip, lsl #1
 1c0:	2000055c 	andcs	r0, r0, ip, asr r5
 1c4:	00000056 	andeq	r0, r0, r6, asr r0
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	0000008c 	andeq	r0, r0, ip, lsl #1
 1dc:	200005b2 			; <UNDEFINED> instruction: 0x200005b2
 1e0:	00000058 	andeq	r0, r0, r8, asr r0
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	100e4101 	andne	r4, lr, r1, lsl #2
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	0000008c 	andeq	r0, r0, ip, lsl #1
 1fc:	2000060a 	andcs	r0, r0, sl, lsl #12
 200:	00000246 	andeq	r0, r0, r6, asr #4
 204:	400c0e41 	andmi	r0, ip, r1, asr #28
 208:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 20c:	018e4002 	orreq	r4, lr, r2
 210:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 214:	0000070d 	andeq	r0, r0, sp, lsl #14
 218:	0000000c 	andeq	r0, r0, ip
 21c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 220:	7c020001 	stcvc	0, cr0, [r2], {1}
 224:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	00000218 	andeq	r0, r0, r8, lsl r2
 230:	20000850 	andcs	r0, r0, r0, asr r8
 234:	0000005e 	andeq	r0, r0, lr, asr r0
 238:	40080e41 	andmi	r0, r8, r1, asr #28
 23c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 240:	180e4101 	stmdane	lr, {r0, r8, lr}
 244:	00070d41 	andeq	r0, r7, r1, asr #26
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	00000218 	andeq	r0, r0, r8, lsl r2
 250:	200008ae 	andcs	r0, r0, lr, lsr #17
 254:	0000005e 	andeq	r0, r0, lr, asr r0
 258:	40080e41 	andmi	r0, r8, r1, asr #28
 25c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 260:	180e4101 	stmdane	lr, {r0, r8, lr}
 264:	00070d41 	andeq	r0, r7, r1, asr #26
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	00000218 	andeq	r0, r0, r8, lsl r2
 270:	2000090c 	andcs	r0, r0, ip, lsl #18
 274:	00000020 	andeq	r0, r0, r0, lsr #32
 278:	40080e41 	andmi	r0, r8, r1, asr #28
 27c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 280:	180e4101 	stmdane	lr, {r0, r8, lr}
 284:	00070d41 	andeq	r0, r7, r1, asr #26
 288:	0000000c 	andeq	r0, r0, ip
 28c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 290:	7c020001 	stcvc	0, cr0, [r2], {1}
 294:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 298:	00000018 	andeq	r0, r0, r8, lsl r0
 29c:	00000288 	andeq	r0, r0, r8, lsl #5
 2a0:	2000092c 	andcs	r0, r0, ip, lsr #18
 2a4:	00000044 	andeq	r0, r0, r4, asr #32
 2a8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000288 	andeq	r0, r0, r8, lsl #5
 2bc:	20000970 	andcs	r0, r0, r0, ror r9
 2c0:	0000002c 	andeq	r0, r0, ip, lsr #32
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	100e4101 	andne	r4, lr, r1, lsl #2
 2d0:	00070d41 	andeq	r0, r7, r1, asr #26
 2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d8:	00000288 	andeq	r0, r0, r8, lsl #5
 2dc:	2000099c 	mulcs	r0, ip, r9
 2e0:	00000018 	andeq	r0, r0, r8, lsl r0
 2e4:	40080e41 	andmi	r0, r8, r1, asr #28
 2e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ec:	100e4101 	andne	r4, lr, r1, lsl #2
 2f0:	00070d41 	andeq	r0, r7, r1, asr #26
 2f4:	00000018 	andeq	r0, r0, r8, lsl r0
 2f8:	00000288 	andeq	r0, r0, r8, lsl #5
 2fc:	200009b4 			; <UNDEFINED> instruction: 0x200009b4
 300:	00000012 	andeq	r0, r0, r2, lsl r0
 304:	40080e41 	andmi	r0, r8, r1, asr #28
 308:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 30c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 310:	0000000c 	andeq	r0, r0, ip
 314:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 318:	7c020001 	stcvc	0, cr0, [r2], {1}
 31c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 320:	0000001c 	andeq	r0, r0, ip, lsl r0
 324:	00000310 	andeq	r0, r0, r0, lsl r3
 328:	200009c8 	andcs	r0, r0, r8, asr #19
 32c:	0000005e 	andeq	r0, r0, lr, asr r0
 330:	40080e41 	andmi	r0, r8, r1, asr #28
 334:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 338:	100e4101 	andne	r4, lr, r1, lsl #2
 33c:	00070d41 	andeq	r0, r7, r1, asr #26
 340:	0000000c 	andeq	r0, r0, ip
 344:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 348:	7c020001 	stcvc	0, cr0, [r2], {1}
 34c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 350:	0000001c 	andeq	r0, r0, ip, lsl r0
 354:	00000340 	andeq	r0, r0, r0, asr #6
 358:	20000a28 	andcs	r0, r0, r8, lsr #20
 35c:	00000058 	andeq	r0, r0, r8, asr r0
 360:	40080e41 	andmi	r0, r8, r1, asr #28
 364:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 368:	100e4101 	andne	r4, lr, r1, lsl #2
 36c:	00070d41 	andeq	r0, r7, r1, asr #26
 370:	0000001c 	andeq	r0, r0, ip, lsl r0
 374:	00000340 	andeq	r0, r0, r0, asr #6
 378:	20000a80 	andcs	r0, r0, r0, lsl #21
 37c:	0000004c 	andeq	r0, r0, ip, asr #32
 380:	40080e41 	andmi	r0, r8, r1, asr #28
 384:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 388:	100e4101 	andne	r4, lr, r1, lsl #2
 38c:	00070d41 	andeq	r0, r7, r1, asr #26
 390:	00000020 	andeq	r0, r0, r0, lsr #32
 394:	00000340 	andeq	r0, r0, r0, asr #6
 398:	20000acc 	andcs	r0, r0, ip, asr #21
 39c:	00000098 	muleq	r0, r8, r0
 3a0:	400c0e41 	andmi	r0, ip, r1, asr #28
 3a4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3a8:	018e4002 	orreq	r4, lr, r2
 3ac:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 3b0:	0000070d 	andeq	r0, r0, sp, lsl #14
