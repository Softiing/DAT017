
./Debug/real_pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f810 	bl	20000028 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*GPIO_MODER = 0x55555555;
20000014:	4b02      	ldr	r3, [pc, #8]	; (20000020 <init_app+0x10>)
20000016:	4a03      	ldr	r2, [pc, #12]	; (20000024 <init_app+0x14>)
20000018:	601a      	str	r2, [r3, #0]
}
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	46bd      	mov	sp, r7
2000001e:	bd80      	pop	{r7, pc}
20000020:	40021000 	andmi	r1, r2, r0
20000024:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000028 <main>:

extern OBJECT ball;

void main(void) {
20000028:	b580      	push	{r7, lr}
2000002a:	b082      	sub	sp, #8
2000002c:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
2000002e:	4b0a      	ldr	r3, [pc, #40]	; (20000058 <main+0x30>)
20000030:	607b      	str	r3, [r7, #4]
	init_app();
20000032:	f7ff ffed 	bl	20000010 <init_app>
	graphic_initalize();
20000036:	f000 f9c1 	bl	200003bc <graphic_initalize>
  #ifndef SIMULATOR
	graphic_clear_screen();
  #endif
  
	p->set_speed(p, 16, 16);
2000003a:	687b      	ldr	r3, [r7, #4]
2000003c:	6a1b      	ldr	r3, [r3, #32]
2000003e:	6878      	ldr	r0, [r7, #4]
20000040:	2210      	movs	r2, #16
20000042:	2110      	movs	r1, #16
20000044:	4798      	blx	r3
	while(1) {
		p->move(p);
20000046:	687b      	ldr	r3, [r7, #4]
20000048:	69db      	ldr	r3, [r3, #28]
2000004a:	687a      	ldr	r2, [r7, #4]
2000004c:	0010      	movs	r0, r2
2000004e:	4798      	blx	r3
		delay_milli(1);
20000050:	2001      	movs	r0, #1
20000052:	f000 fb7b 	bl	2000074c <delay_milli>
		p->move(p);
20000056:	e7f6      	b.n	20000046 <main+0x1e>
20000058:	200007fc 	strdcs	r0, [r0], -ip

2000005c <move_ball>:
	clear_object,
	move_ball,
	set_object_speed
};

void move_ball(POBJECT this) {
2000005c:	b580      	push	{r7, lr}
2000005e:	b082      	sub	sp, #8
20000060:	af00      	add	r7, sp, #0
20000062:	6078      	str	r0, [r7, #4]
	clear_object(this);
20000064:	687b      	ldr	r3, [r7, #4]
20000066:	0018      	movs	r0, r3
20000068:	f000 faf9 	bl	2000065e <clear_object>
	
	this->posX += this->dirX;
2000006c:	687b      	ldr	r3, [r7, #4]
2000006e:	68da      	ldr	r2, [r3, #12]
20000070:	687b      	ldr	r3, [r7, #4]
20000072:	685b      	ldr	r3, [r3, #4]
20000074:	18d2      	adds	r2, r2, r3
20000076:	687b      	ldr	r3, [r7, #4]
20000078:	60da      	str	r2, [r3, #12]
	this->posY += this->dirY;
2000007a:	687b      	ldr	r3, [r7, #4]
2000007c:	691a      	ldr	r2, [r3, #16]
2000007e:	687b      	ldr	r3, [r7, #4]
20000080:	689b      	ldr	r3, [r3, #8]
20000082:	18d2      	adds	r2, r2, r3
20000084:	687b      	ldr	r3, [r7, #4]
20000086:	611a      	str	r2, [r3, #16]
	
	// Wall collisions
	if((this->posY < 0) ||  this->posY > 63 ) {
20000088:	687b      	ldr	r3, [r7, #4]
2000008a:	691b      	ldr	r3, [r3, #16]
2000008c:	2b00      	cmp	r3, #0
2000008e:	db03      	blt.n	20000098 <move_ball+0x3c>
20000090:	687b      	ldr	r3, [r7, #4]
20000092:	691b      	ldr	r3, [r3, #16]
20000094:	2b3f      	cmp	r3, #63	; 0x3f
20000096:	dd04      	ble.n	200000a2 <move_ball+0x46>
		this->dirY = -this->dirY;
20000098:	687b      	ldr	r3, [r7, #4]
2000009a:	689b      	ldr	r3, [r3, #8]
2000009c:	425a      	negs	r2, r3
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	609a      	str	r2, [r3, #8]
	}
	
	// TODO Paddle collisions
	
	this->draw(this);
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	695b      	ldr	r3, [r3, #20]
200000a6:	687a      	ldr	r2, [r7, #4]
200000a8:	0010      	movs	r0, r2
200000aa:	4798      	blx	r3
200000ac:	46c0      	nop			; (mov r8, r8)
200000ae:	46bd      	mov	sp, r7
200000b0:	b002      	add	sp, #8
200000b2:	bd80      	pop	{r7, pc}

200000b4 <graphic_ctrl_bit_set>:
#include "graphic.h"

void graphic_ctrl_bit_set(uint8_t x) {
200000b4:	b580      	push	{r7, lr}
200000b6:	b082      	sub	sp, #8
200000b8:	af00      	add	r7, sp, #0
200000ba:	0002      	movs	r2, r0
200000bc:	1dfb      	adds	r3, r7, #7
200000be:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW |= (x & ~B_SELECT);
200000c0:	4909      	ldr	r1, [pc, #36]	; (200000e8 <graphic_ctrl_bit_set+0x34>)
200000c2:	4b09      	ldr	r3, [pc, #36]	; (200000e8 <graphic_ctrl_bit_set+0x34>)
200000c4:	781b      	ldrb	r3, [r3, #0]
200000c6:	b2db      	uxtb	r3, r3
200000c8:	b25a      	sxtb	r2, r3
200000ca:	1dfb      	adds	r3, r7, #7
200000cc:	781b      	ldrb	r3, [r3, #0]
200000ce:	b25b      	sxtb	r3, r3
200000d0:	2004      	movs	r0, #4
200000d2:	4383      	bics	r3, r0
200000d4:	b25b      	sxtb	r3, r3
200000d6:	4313      	orrs	r3, r2
200000d8:	b25b      	sxtb	r3, r3
200000da:	b2db      	uxtb	r3, r3
200000dc:	700b      	strb	r3, [r1, #0]
}
200000de:	46c0      	nop			; (mov r8, r8)
200000e0:	46bd      	mov	sp, r7
200000e2:	b002      	add	sp, #8
200000e4:	bd80      	pop	{r7, pc}
200000e6:	46c0      	nop			; (mov r8, r8)
200000e8:	40021014 	andmi	r1, r2, r4, lsl r0

200000ec <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x) {
200000ec:	b580      	push	{r7, lr}
200000ee:	b082      	sub	sp, #8
200000f0:	af00      	add	r7, sp, #0
200000f2:	0002      	movs	r2, r0
200000f4:	1dfb      	adds	r3, r7, #7
200000f6:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW &= ~x;
200000f8:	4908      	ldr	r1, [pc, #32]	; (2000011c <graphic_ctrl_bit_clear+0x30>)
200000fa:	4b08      	ldr	r3, [pc, #32]	; (2000011c <graphic_ctrl_bit_clear+0x30>)
200000fc:	781b      	ldrb	r3, [r3, #0]
200000fe:	b2db      	uxtb	r3, r3
20000100:	b25b      	sxtb	r3, r3
20000102:	1dfa      	adds	r2, r7, #7
20000104:	7812      	ldrb	r2, [r2, #0]
20000106:	b252      	sxtb	r2, r2
20000108:	43d2      	mvns	r2, r2
2000010a:	b252      	sxtb	r2, r2
2000010c:	4013      	ands	r3, r2
2000010e:	b25b      	sxtb	r3, r3
20000110:	b2db      	uxtb	r3, r3
20000112:	700b      	strb	r3, [r1, #0]
}
20000114:	46c0      	nop			; (mov r8, r8)
20000116:	46bd      	mov	sp, r7
20000118:	b002      	add	sp, #8
2000011a:	bd80      	pop	{r7, pc}
2000011c:	40021014 	andmi	r1, r2, r4, lsl r0

20000120 <select_cotroller>:

void select_cotroller(uint8_t controller) {
20000120:	b580      	push	{r7, lr}
20000122:	b082      	sub	sp, #8
20000124:	af00      	add	r7, sp, #0
20000126:	0002      	movs	r2, r0
20000128:	1dfb      	adds	r3, r7, #7
2000012a:	701a      	strb	r2, [r3, #0]
	if(controller == 0) {
2000012c:	1dfb      	adds	r3, r7, #7
2000012e:	781b      	ldrb	r3, [r3, #0]
20000130:	2b00      	cmp	r3, #0
20000132:	d106      	bne.n	20000142 <select_cotroller+0x22>
		graphic_ctrl_bit_clear(B_CS1);
20000134:	2008      	movs	r0, #8
20000136:	f7ff ffd9 	bl	200000ec <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_clear(B_CS2);
2000013a:	2010      	movs	r0, #16
2000013c:	f7ff ffd6 	bl	200000ec <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_clear(B_CS2);
	} else if(controller == B_CS2) {
		graphic_ctrl_bit_clear(B_CS1);
		graphic_ctrl_bit_set(B_CS2);
	}
}
20000140:	e01f      	b.n	20000182 <select_cotroller+0x62>
	} else if(controller == (B_CS1 | B_CS2)) {
20000142:	1dfb      	adds	r3, r7, #7
20000144:	781b      	ldrb	r3, [r3, #0]
20000146:	2b18      	cmp	r3, #24
20000148:	d106      	bne.n	20000158 <select_cotroller+0x38>
		graphic_ctrl_bit_set(B_CS1);
2000014a:	2008      	movs	r0, #8
2000014c:	f7ff ffb2 	bl	200000b4 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_set(B_CS2);
20000150:	2010      	movs	r0, #16
20000152:	f7ff ffaf 	bl	200000b4 <graphic_ctrl_bit_set>
}
20000156:	e014      	b.n	20000182 <select_cotroller+0x62>
	} else if(controller == B_CS1) {
20000158:	1dfb      	adds	r3, r7, #7
2000015a:	781b      	ldrb	r3, [r3, #0]
2000015c:	2b08      	cmp	r3, #8
2000015e:	d106      	bne.n	2000016e <select_cotroller+0x4e>
		graphic_ctrl_bit_set(B_CS1);
20000160:	2008      	movs	r0, #8
20000162:	f7ff ffa7 	bl	200000b4 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_clear(B_CS2);
20000166:	2010      	movs	r0, #16
20000168:	f7ff ffc0 	bl	200000ec <graphic_ctrl_bit_clear>
}
2000016c:	e009      	b.n	20000182 <select_cotroller+0x62>
	} else if(controller == B_CS2) {
2000016e:	1dfb      	adds	r3, r7, #7
20000170:	781b      	ldrb	r3, [r3, #0]
20000172:	2b10      	cmp	r3, #16
20000174:	d105      	bne.n	20000182 <select_cotroller+0x62>
		graphic_ctrl_bit_clear(B_CS1);
20000176:	2008      	movs	r0, #8
20000178:	f7ff ffb8 	bl	200000ec <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_set(B_CS2);
2000017c:	2010      	movs	r0, #16
2000017e:	f7ff ff99 	bl	200000b4 <graphic_ctrl_bit_set>
}
20000182:	46c0      	nop			; (mov r8, r8)
20000184:	46bd      	mov	sp, r7
20000186:	b002      	add	sp, #8
20000188:	bd80      	pop	{r7, pc}

2000018a <graphic_wait_ready>:

void graphic_wait_ready() {
2000018a:	b580      	push	{r7, lr}
2000018c:	b082      	sub	sp, #8
2000018e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
20000190:	2040      	movs	r0, #64	; 0x40
20000192:	f7ff ffab 	bl	200000ec <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
20000196:	4b15      	ldr	r3, [pc, #84]	; (200001ec <graphic_wait_ready+0x62>)
20000198:	4a15      	ldr	r2, [pc, #84]	; (200001f0 <graphic_wait_ready+0x66>)
2000019a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
2000019c:	2001      	movs	r0, #1
2000019e:	f7ff ffa5 	bl	200000ec <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200001a2:	2002      	movs	r0, #2
200001a4:	f7ff ff86 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_500ns();
200001a8:	f000 fadc 	bl	20000764 <delay_500ns>
	while(1) { // Wait for display not to be busy
		graphic_ctrl_bit_set(B_E);
200001ac:	2040      	movs	r0, #64	; 0x40
200001ae:	f7ff ff81 	bl	200000b4 <graphic_ctrl_bit_set>
		delay_500ns();
200001b2:	f000 fad7 	bl	20000764 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
200001b6:	2040      	movs	r0, #64	; 0x40
200001b8:	f7ff ff98 	bl	200000ec <graphic_ctrl_bit_clear>
		delay_500ns();		
200001bc:	f000 fad2 	bl	20000764 <delay_500ns>
		unsigned char i = *GPIO_IDR_HIGH;
200001c0:	4a0c      	ldr	r2, [pc, #48]	; (200001f4 <graphic_wait_ready+0x6a>)
200001c2:	1dfb      	adds	r3, r7, #7
200001c4:	7812      	ldrb	r2, [r2, #0]
200001c6:	701a      	strb	r2, [r3, #0]
		if((*GPIO_IDR_HIGH & LCD_BUSY) == 0) {
200001c8:	4b0a      	ldr	r3, [pc, #40]	; (200001f4 <graphic_wait_ready+0x6a>)
200001ca:	781b      	ldrb	r3, [r3, #0]
200001cc:	b2db      	uxtb	r3, r3
200001ce:	b25b      	sxtb	r3, r3
200001d0:	2b00      	cmp	r3, #0
200001d2:	da00      	bge.n	200001d6 <graphic_wait_ready+0x4c>
	while(1) { // Wait for display not to be busy
200001d4:	e7ea      	b.n	200001ac <graphic_wait_ready+0x22>
			break;
200001d6:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
200001d8:	2040      	movs	r0, #64	; 0x40
200001da:	f7ff ff6b 	bl	200000b4 <graphic_ctrl_bit_set>
	*GPIO_MODER = 0x55555555;
200001de:	4b03      	ldr	r3, [pc, #12]	; (200001ec <graphic_wait_ready+0x62>)
200001e0:	4a05      	ldr	r2, [pc, #20]	; (200001f8 <graphic_wait_ready+0x6e>)
200001e2:	601a      	str	r2, [r3, #0]
}
200001e4:	46c0      	nop			; (mov r8, r8)
200001e6:	46bd      	mov	sp, r7
200001e8:	b002      	add	sp, #8
200001ea:	bd80      	pop	{r7, pc}
200001ec:	40021000 	andmi	r1, r2, r0
200001f0:	00005555 	andeq	r5, r0, r5, asr r5
200001f4:	40021011 	andmi	r1, r2, r1, lsl r0
200001f8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001fc <graphic_read>:

unsigned char graphic_read(unsigned char controller) {
200001fc:	b580      	push	{r7, lr}
200001fe:	b084      	sub	sp, #16
20000200:	af00      	add	r7, sp, #0
20000202:	0002      	movs	r2, r0
20000204:	1dfb      	adds	r3, r7, #7
20000206:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000208:	2040      	movs	r0, #64	; 0x40
2000020a:	f7ff ff6f 	bl	200000ec <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x00005555;
2000020e:	4b1b      	ldr	r3, [pc, #108]	; (2000027c <graphic_read+0x80>)
20000210:	4a1b      	ldr	r2, [pc, #108]	; (20000280 <graphic_read+0x84>)
20000212:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000214:	2003      	movs	r0, #3
20000216:	f7ff ff4d 	bl	200000b4 <graphic_ctrl_bit_set>
	select_cotroller(controller);
2000021a:	1dfb      	adds	r3, r7, #7
2000021c:	781b      	ldrb	r3, [r3, #0]
2000021e:	0018      	movs	r0, r3
20000220:	f7ff ff7e 	bl	20000120 <select_cotroller>
	delay_500ns();
20000224:	f000 fa9e 	bl	20000764 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000228:	2040      	movs	r0, #64	; 0x40
2000022a:	f7ff ff43 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_500ns();
2000022e:	f000 fa99 	bl	20000764 <delay_500ns>
	unsigned char RV = *GPIO_IDR_HIGH;
20000232:	4a14      	ldr	r2, [pc, #80]	; (20000284 <graphic_read+0x88>)
20000234:	230f      	movs	r3, #15
20000236:	18fb      	adds	r3, r7, r3
20000238:	7812      	ldrb	r2, [r2, #0]
2000023a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000023c:	2040      	movs	r0, #64	; 0x40
2000023e:	f7ff ff55 	bl	200000ec <graphic_ctrl_bit_clear>
	*GPIO_MODER = 0x55555555;
20000242:	4b0e      	ldr	r3, [pc, #56]	; (2000027c <graphic_read+0x80>)
20000244:	4a10      	ldr	r2, [pc, #64]	; (20000288 <graphic_read+0x8c>)
20000246:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1) {
20000248:	1dfb      	adds	r3, r7, #7
2000024a:	781b      	ldrb	r3, [r3, #0]
2000024c:	2b08      	cmp	r3, #8
2000024e:	d104      	bne.n	2000025a <graphic_read+0x5e>
		select_cotroller(B_CS1);
20000250:	2008      	movs	r0, #8
20000252:	f7ff ff65 	bl	20000120 <select_cotroller>
		graphic_wait_ready();
20000256:	f7ff ff98 	bl	2000018a <graphic_wait_ready>
	}
	if(controller == B_CS2) {
2000025a:	1dfb      	adds	r3, r7, #7
2000025c:	781b      	ldrb	r3, [r3, #0]
2000025e:	2b10      	cmp	r3, #16
20000260:	d104      	bne.n	2000026c <graphic_read+0x70>
		select_cotroller(B_CS2);
20000262:	2010      	movs	r0, #16
20000264:	f7ff ff5c 	bl	20000120 <select_cotroller>
		graphic_wait_ready();
20000268:	f7ff ff8f 	bl	2000018a <graphic_wait_ready>
	}
	return RV;
2000026c:	230f      	movs	r3, #15
2000026e:	18fb      	adds	r3, r7, r3
20000270:	781b      	ldrb	r3, [r3, #0]
}
20000272:	0018      	movs	r0, r3
20000274:	46bd      	mov	sp, r7
20000276:	b004      	add	sp, #16
20000278:	bd80      	pop	{r7, pc}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	40021000 	andmi	r1, r2, r0
20000280:	00005555 	andeq	r5, r0, r5, asr r5
20000284:	40021011 	andmi	r1, r2, r1, lsl r0
20000288:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000028c <graphic_write>:

void graphic_write(unsigned char value, unsigned char controller) {
2000028c:	b580      	push	{r7, lr}
2000028e:	b082      	sub	sp, #8
20000290:	af00      	add	r7, sp, #0
20000292:	0002      	movs	r2, r0
20000294:	1dfb      	adds	r3, r7, #7
20000296:	701a      	strb	r2, [r3, #0]
20000298:	1dbb      	adds	r3, r7, #6
2000029a:	1c0a      	adds	r2, r1, #0
2000029c:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_HIGH = value;
2000029e:	4a1a      	ldr	r2, [pc, #104]	; (20000308 <graphic_write+0x7c>)
200002a0:	1dfb      	adds	r3, r7, #7
200002a2:	781b      	ldrb	r3, [r3, #0]
200002a4:	7013      	strb	r3, [r2, #0]
	select_cotroller(controller);
200002a6:	1dbb      	adds	r3, r7, #6
200002a8:	781b      	ldrb	r3, [r3, #0]
200002aa:	0018      	movs	r0, r3
200002ac:	f7ff ff38 	bl	20000120 <select_cotroller>
	delay_500ns();
200002b0:	f000 fa58 	bl	20000764 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002b4:	2040      	movs	r0, #64	; 0x40
200002b6:	f7ff fefd 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_500ns();
200002ba:	f000 fa53 	bl	20000764 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002be:	2040      	movs	r0, #64	; 0x40
200002c0:	f7ff ff14 	bl	200000ec <graphic_ctrl_bit_clear>
	
	//Kanske inte ska vara så här för this statement
	if(controller & B_CS1) {
200002c4:	1dbb      	adds	r3, r7, #6
200002c6:	781b      	ldrb	r3, [r3, #0]
200002c8:	2208      	movs	r2, #8
200002ca:	4013      	ands	r3, r2
200002cc:	d004      	beq.n	200002d8 <graphic_write+0x4c>
		select_cotroller(B_CS1);
200002ce:	2008      	movs	r0, #8
200002d0:	f7ff ff26 	bl	20000120 <select_cotroller>
		graphic_wait_ready();
200002d4:	f7ff ff59 	bl	2000018a <graphic_wait_ready>
	}
	
	if(controller & B_CS2) {
200002d8:	1dbb      	adds	r3, r7, #6
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	2210      	movs	r2, #16
200002de:	4013      	ands	r3, r2
200002e0:	d004      	beq.n	200002ec <graphic_write+0x60>
		select_cotroller(B_CS2);
200002e2:	2010      	movs	r0, #16
200002e4:	f7ff ff1c 	bl	20000120 <select_cotroller>
		graphic_wait_ready();
200002e8:	f7ff ff4f 	bl	2000018a <graphic_wait_ready>
	}
	
	*GPIO_ODR_HIGH = 0;
200002ec:	4b06      	ldr	r3, [pc, #24]	; (20000308 <graphic_write+0x7c>)
200002ee:	2200      	movs	r2, #0
200002f0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
200002f2:	2040      	movs	r0, #64	; 0x40
200002f4:	f7ff fede 	bl	200000b4 <graphic_ctrl_bit_set>
	select_cotroller(0);
200002f8:	2000      	movs	r0, #0
200002fa:	f7ff ff11 	bl	20000120 <select_cotroller>
}
200002fe:	46c0      	nop			; (mov r8, r8)
20000300:	46bd      	mov	sp, r7
20000302:	b002      	add	sp, #8
20000304:	bd80      	pop	{r7, pc}
20000306:	46c0      	nop			; (mov r8, r8)
20000308:	40021015 	andmi	r1, r2, r5, lsl r0

2000030c <graphic_write_command>:

void graphic_write_command(unsigned char command, unsigned char controller) {
2000030c:	b580      	push	{r7, lr}
2000030e:	b082      	sub	sp, #8
20000310:	af00      	add	r7, sp, #0
20000312:	0002      	movs	r2, r0
20000314:	1dfb      	adds	r3, r7, #7
20000316:	701a      	strb	r2, [r3, #0]
20000318:	1dbb      	adds	r3, r7, #6
2000031a:	1c0a      	adds	r2, r1, #0
2000031c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000031e:	2040      	movs	r0, #64	; 0x40
20000320:	f7ff fee4 	bl	200000ec <graphic_ctrl_bit_clear>
	select_cotroller(controller);
20000324:	1dbb      	adds	r3, r7, #6
20000326:	781b      	ldrb	r3, [r3, #0]
20000328:	0018      	movs	r0, r3
2000032a:	f7ff fef9 	bl	20000120 <select_cotroller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000032e:	2003      	movs	r0, #3
20000330:	f7ff fedc 	bl	200000ec <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000334:	1dbb      	adds	r3, r7, #6
20000336:	781a      	ldrb	r2, [r3, #0]
20000338:	1dfb      	adds	r3, r7, #7
2000033a:	781b      	ldrb	r3, [r3, #0]
2000033c:	0011      	movs	r1, r2
2000033e:	0018      	movs	r0, r3
20000340:	f7ff ffa4 	bl	2000028c <graphic_write>
}
20000344:	46c0      	nop			; (mov r8, r8)
20000346:	46bd      	mov	sp, r7
20000348:	b002      	add	sp, #8
2000034a:	bd80      	pop	{r7, pc}

2000034c <graphic_write_data>:

void graphic_write_data(unsigned char data, unsigned char controller) {
2000034c:	b580      	push	{r7, lr}
2000034e:	b082      	sub	sp, #8
20000350:	af00      	add	r7, sp, #0
20000352:	0002      	movs	r2, r0
20000354:	1dfb      	adds	r3, r7, #7
20000356:	701a      	strb	r2, [r3, #0]
20000358:	1dbb      	adds	r3, r7, #6
2000035a:	1c0a      	adds	r2, r1, #0
2000035c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000035e:	2040      	movs	r0, #64	; 0x40
20000360:	f7ff fec4 	bl	200000ec <graphic_ctrl_bit_clear>
	select_cotroller(controller);
20000364:	1dbb      	adds	r3, r7, #6
20000366:	781b      	ldrb	r3, [r3, #0]
20000368:	0018      	movs	r0, r3
2000036a:	f7ff fed9 	bl	20000120 <select_cotroller>
	graphic_ctrl_bit_set(B_RS);
2000036e:	2001      	movs	r0, #1
20000370:	f7ff fea0 	bl	200000b4 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000374:	2002      	movs	r0, #2
20000376:	f7ff feb9 	bl	200000ec <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000037a:	1dbb      	adds	r3, r7, #6
2000037c:	781a      	ldrb	r2, [r3, #0]
2000037e:	1dfb      	adds	r3, r7, #7
20000380:	781b      	ldrb	r3, [r3, #0]
20000382:	0011      	movs	r1, r2
20000384:	0018      	movs	r0, r3
20000386:	f7ff ff81 	bl	2000028c <graphic_write>
}
2000038a:	46c0      	nop			; (mov r8, r8)
2000038c:	46bd      	mov	sp, r7
2000038e:	b002      	add	sp, #8
20000390:	bd80      	pop	{r7, pc}

20000392 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char controller) {
20000392:	b580      	push	{r7, lr}
20000394:	b082      	sub	sp, #8
20000396:	af00      	add	r7, sp, #0
20000398:	0002      	movs	r2, r0
2000039a:	1dfb      	adds	r3, r7, #7
2000039c:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
2000039e:	1dfb      	adds	r3, r7, #7
200003a0:	781b      	ldrb	r3, [r3, #0]
200003a2:	0018      	movs	r0, r3
200003a4:	f7ff ff2a 	bl	200001fc <graphic_read>
	return graphic_read(controller);
200003a8:	1dfb      	adds	r3, r7, #7
200003aa:	781b      	ldrb	r3, [r3, #0]
200003ac:	0018      	movs	r0, r3
200003ae:	f7ff ff25 	bl	200001fc <graphic_read>
200003b2:	0003      	movs	r3, r0
}
200003b4:	0018      	movs	r0, r3
200003b6:	46bd      	mov	sp, r7
200003b8:	b002      	add	sp, #8
200003ba:	bd80      	pop	{r7, pc}

200003bc <graphic_initalize>:

void graphic_initalize(void) {
200003bc:	b580      	push	{r7, lr}
200003be:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200003c0:	2040      	movs	r0, #64	; 0x40
200003c2:	f7ff fe77 	bl	200000b4 <graphic_ctrl_bit_set>
	delay_mikro(10);
200003c6:	200a      	movs	r0, #10
200003c8:	f000 f9aa 	bl	20000720 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200003cc:	2078      	movs	r0, #120	; 0x78
200003ce:	f7ff fe8d 	bl	200000ec <graphic_ctrl_bit_clear>
	delay_milli(30);
200003d2:	201e      	movs	r0, #30
200003d4:	f000 f9ba 	bl	2000074c <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200003d8:	2020      	movs	r0, #32
200003da:	f7ff fe6b 	bl	200000b4 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200003de:	2118      	movs	r1, #24
200003e0:	203e      	movs	r0, #62	; 0x3e
200003e2:	f7ff ff93 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200003e6:	2118      	movs	r1, #24
200003e8:	203f      	movs	r0, #63	; 0x3f
200003ea:	f7ff ff8f 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
200003ee:	2118      	movs	r1, #24
200003f0:	20c0      	movs	r0, #192	; 0xc0
200003f2:	f7ff ff8b 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200003f6:	2118      	movs	r1, #24
200003f8:	2040      	movs	r0, #64	; 0x40
200003fa:	f7ff ff87 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
200003fe:	2118      	movs	r1, #24
20000400:	20b8      	movs	r0, #184	; 0xb8
20000402:	f7ff ff83 	bl	2000030c <graphic_write_command>
	select_cotroller(0);
20000406:	2000      	movs	r0, #0
20000408:	f7ff fe8a 	bl	20000120 <select_cotroller>
}
2000040c:	46c0      	nop			; (mov r8, r8)
2000040e:	46bd      	mov	sp, r7
20000410:	bd80      	pop	{r7, pc}

20000412 <graphic_clear_screen>:

void graphic_clear_screen(void) {
20000412:	b580      	push	{r7, lr}
20000414:	b082      	sub	sp, #8
20000416:	af00      	add	r7, sp, #0
	for(int page = 0; page <= 7; page++) {
20000418:	2300      	movs	r3, #0
2000041a:	607b      	str	r3, [r7, #4]
2000041c:	e01e      	b.n	2000045c <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
2000041e:	687b      	ldr	r3, [r7, #4]
20000420:	b25b      	sxtb	r3, r3
20000422:	2248      	movs	r2, #72	; 0x48
20000424:	4252      	negs	r2, r2
20000426:	4313      	orrs	r3, r2
20000428:	b25b      	sxtb	r3, r3
2000042a:	b2db      	uxtb	r3, r3
2000042c:	2118      	movs	r1, #24
2000042e:	0018      	movs	r0, r3
20000430:	f7ff ff6c 	bl	2000030c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000434:	2118      	movs	r1, #24
20000436:	2040      	movs	r0, #64	; 0x40
20000438:	f7ff ff68 	bl	2000030c <graphic_write_command>
		for(int add = 0; add <= 63; add++) {
2000043c:	2300      	movs	r3, #0
2000043e:	603b      	str	r3, [r7, #0]
20000440:	e006      	b.n	20000450 <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
20000442:	2118      	movs	r1, #24
20000444:	2000      	movs	r0, #0
20000446:	f7ff ff81 	bl	2000034c <graphic_write_data>
		for(int add = 0; add <= 63; add++) {
2000044a:	683b      	ldr	r3, [r7, #0]
2000044c:	3301      	adds	r3, #1
2000044e:	603b      	str	r3, [r7, #0]
20000450:	683b      	ldr	r3, [r7, #0]
20000452:	2b3f      	cmp	r3, #63	; 0x3f
20000454:	ddf5      	ble.n	20000442 <graphic_clear_screen+0x30>
	for(int page = 0; page <= 7; page++) {
20000456:	687b      	ldr	r3, [r7, #4]
20000458:	3301      	adds	r3, #1
2000045a:	607b      	str	r3, [r7, #4]
2000045c:	687b      	ldr	r3, [r7, #4]
2000045e:	2b07      	cmp	r3, #7
20000460:	dddd      	ble.n	2000041e <graphic_clear_screen+0xc>
		}
	}
}
20000462:	46c0      	nop			; (mov r8, r8)
20000464:	46bd      	mov	sp, r7
20000466:	b002      	add	sp, #8
20000468:	bd80      	pop	{r7, pc}

2000046a <pixel>:


void pixel(unsigned char x, unsigned char y, unsigned char set) {
2000046a:	b590      	push	{r4, r7, lr}
2000046c:	b085      	sub	sp, #20
2000046e:	af00      	add	r7, sp, #0
20000470:	0004      	movs	r4, r0
20000472:	0008      	movs	r0, r1
20000474:	0011      	movs	r1, r2
20000476:	1dfb      	adds	r3, r7, #7
20000478:	1c22      	adds	r2, r4, #0
2000047a:	701a      	strb	r2, [r3, #0]
2000047c:	1dbb      	adds	r3, r7, #6
2000047e:	1c02      	adds	r2, r0, #0
20000480:	701a      	strb	r2, [r3, #0]
20000482:	1d7b      	adds	r3, r7, #5
20000484:	1c0a      	adds	r2, r1, #0
20000486:	701a      	strb	r2, [r3, #0]
	if(x < 0 || y < 0) return;
	if(x > 127 || y > 63) return;
20000488:	1dfb      	adds	r3, r7, #7
2000048a:	781b      	ldrb	r3, [r3, #0]
2000048c:	b25b      	sxtb	r3, r3
2000048e:	2b00      	cmp	r3, #0
20000490:	da00      	bge.n	20000494 <pixel+0x2a>
20000492:	e0ae      	b.n	200005f2 <pixel+0x188>
20000494:	1dbb      	adds	r3, r7, #6
20000496:	781b      	ldrb	r3, [r3, #0]
20000498:	2b3f      	cmp	r3, #63	; 0x3f
2000049a:	d900      	bls.n	2000049e <pixel+0x34>
2000049c:	e0a9      	b.n	200005f2 <pixel+0x188>
	unsigned char mask;
	unsigned char index = y / 8;
2000049e:	230d      	movs	r3, #13
200004a0:	18fb      	adds	r3, r7, r3
200004a2:	1dba      	adds	r2, r7, #6
200004a4:	7812      	ldrb	r2, [r2, #0]
200004a6:	08d2      	lsrs	r2, r2, #3
200004a8:	701a      	strb	r2, [r3, #0]
	
	switch(y % 8) {
200004aa:	1dbb      	adds	r3, r7, #6
200004ac:	781b      	ldrb	r3, [r3, #0]
200004ae:	2207      	movs	r2, #7
200004b0:	4013      	ands	r3, r2
200004b2:	2b07      	cmp	r3, #7
200004b4:	d82c      	bhi.n	20000510 <pixel+0xa6>
200004b6:	009a      	lsls	r2, r3, #2
200004b8:	4b50      	ldr	r3, [pc, #320]	; (200005fc <pixel+0x192>)
200004ba:	18d3      	adds	r3, r2, r3
200004bc:	681b      	ldr	r3, [r3, #0]
200004be:	469f      	mov	pc, r3
		case 0: mask = 1; break;
200004c0:	230f      	movs	r3, #15
200004c2:	18fb      	adds	r3, r7, r3
200004c4:	2201      	movs	r2, #1
200004c6:	701a      	strb	r2, [r3, #0]
200004c8:	e022      	b.n	20000510 <pixel+0xa6>
		case 1: mask = 2; break;
200004ca:	230f      	movs	r3, #15
200004cc:	18fb      	adds	r3, r7, r3
200004ce:	2202      	movs	r2, #2
200004d0:	701a      	strb	r2, [r3, #0]
200004d2:	e01d      	b.n	20000510 <pixel+0xa6>
		case 2: mask = 4; break;
200004d4:	230f      	movs	r3, #15
200004d6:	18fb      	adds	r3, r7, r3
200004d8:	2204      	movs	r2, #4
200004da:	701a      	strb	r2, [r3, #0]
200004dc:	e018      	b.n	20000510 <pixel+0xa6>
		case 3: mask = 8; break;
200004de:	230f      	movs	r3, #15
200004e0:	18fb      	adds	r3, r7, r3
200004e2:	2208      	movs	r2, #8
200004e4:	701a      	strb	r2, [r3, #0]
200004e6:	e013      	b.n	20000510 <pixel+0xa6>
		case 4: mask = 16; break;
200004e8:	230f      	movs	r3, #15
200004ea:	18fb      	adds	r3, r7, r3
200004ec:	2210      	movs	r2, #16
200004ee:	701a      	strb	r2, [r3, #0]
200004f0:	e00e      	b.n	20000510 <pixel+0xa6>
		case 5: mask = 32; break;
200004f2:	230f      	movs	r3, #15
200004f4:	18fb      	adds	r3, r7, r3
200004f6:	2220      	movs	r2, #32
200004f8:	701a      	strb	r2, [r3, #0]
200004fa:	e009      	b.n	20000510 <pixel+0xa6>
		case 6: mask = 64; break;
200004fc:	230f      	movs	r3, #15
200004fe:	18fb      	adds	r3, r7, r3
20000500:	2240      	movs	r2, #64	; 0x40
20000502:	701a      	strb	r2, [r3, #0]
20000504:	e004      	b.n	20000510 <pixel+0xa6>
		case 7: mask = 128; break;
20000506:	230f      	movs	r3, #15
20000508:	18fb      	adds	r3, r7, r3
2000050a:	2280      	movs	r2, #128	; 0x80
2000050c:	701a      	strb	r2, [r3, #0]
2000050e:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0) {
20000510:	1d7b      	adds	r3, r7, #5
20000512:	781b      	ldrb	r3, [r3, #0]
20000514:	2b00      	cmp	r3, #0
20000516:	d106      	bne.n	20000526 <pixel+0xbc>
		mask = ~mask;
20000518:	230f      	movs	r3, #15
2000051a:	18fb      	adds	r3, r7, r3
2000051c:	220f      	movs	r2, #15
2000051e:	18ba      	adds	r2, r7, r2
20000520:	7812      	ldrb	r2, [r2, #0]
20000522:	43d2      	mvns	r2, r2
20000524:	701a      	strb	r2, [r3, #0]
	}
	
	unsigned char controller;
	if(x > 63) {
20000526:	1dfb      	adds	r3, r7, #7
20000528:	781b      	ldrb	r3, [r3, #0]
2000052a:	2b3f      	cmp	r3, #63	; 0x3f
2000052c:	d909      	bls.n	20000542 <pixel+0xd8>
		controller = B_CS2;
2000052e:	230e      	movs	r3, #14
20000530:	18fb      	adds	r3, r7, r3
20000532:	2210      	movs	r2, #16
20000534:	701a      	strb	r2, [r3, #0]
		x = x - 64;
20000536:	1dfb      	adds	r3, r7, #7
20000538:	1dfa      	adds	r2, r7, #7
2000053a:	7812      	ldrb	r2, [r2, #0]
2000053c:	3a40      	subs	r2, #64	; 0x40
2000053e:	701a      	strb	r2, [r3, #0]
20000540:	e003      	b.n	2000054a <pixel+0xe0>
	} else {
		controller = B_CS1;
20000542:	230e      	movs	r3, #14
20000544:	18fb      	adds	r3, r7, r3
20000546:	2208      	movs	r2, #8
20000548:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x, controller);
2000054a:	1dfb      	adds	r3, r7, #7
2000054c:	781b      	ldrb	r3, [r3, #0]
2000054e:	2240      	movs	r2, #64	; 0x40
20000550:	4313      	orrs	r3, r2
20000552:	b2da      	uxtb	r2, r3
20000554:	230e      	movs	r3, #14
20000556:	18fb      	adds	r3, r7, r3
20000558:	781b      	ldrb	r3, [r3, #0]
2000055a:	0019      	movs	r1, r3
2000055c:	0010      	movs	r0, r2
2000055e:	f7ff fed5 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000562:	230d      	movs	r3, #13
20000564:	18fb      	adds	r3, r7, r3
20000566:	781b      	ldrb	r3, [r3, #0]
20000568:	2248      	movs	r2, #72	; 0x48
2000056a:	4252      	negs	r2, r2
2000056c:	4313      	orrs	r3, r2
2000056e:	b2da      	uxtb	r2, r3
20000570:	230e      	movs	r3, #14
20000572:	18fb      	adds	r3, r7, r3
20000574:	781b      	ldrb	r3, [r3, #0]
20000576:	0019      	movs	r1, r3
20000578:	0010      	movs	r0, r2
2000057a:	f7ff fec7 	bl	2000030c <graphic_write_command>
	unsigned char temp = graphic_read_data(controller);
2000057e:	230c      	movs	r3, #12
20000580:	18fc      	adds	r4, r7, r3
20000582:	230e      	movs	r3, #14
20000584:	18fb      	adds	r3, r7, r3
20000586:	781b      	ldrb	r3, [r3, #0]
20000588:	0018      	movs	r0, r3
2000058a:	f7ff ff02 	bl	20000392 <graphic_read_data>
2000058e:	0003      	movs	r3, r0
20000590:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000592:	1dfb      	adds	r3, r7, #7
20000594:	781b      	ldrb	r3, [r3, #0]
20000596:	2240      	movs	r2, #64	; 0x40
20000598:	4313      	orrs	r3, r2
2000059a:	b2da      	uxtb	r2, r3
2000059c:	230e      	movs	r3, #14
2000059e:	18fb      	adds	r3, r7, r3
200005a0:	781b      	ldrb	r3, [r3, #0]
200005a2:	0019      	movs	r1, r3
200005a4:	0010      	movs	r0, r2
200005a6:	f7ff feb1 	bl	2000030c <graphic_write_command>
	
	if(set) {
200005aa:	1d7b      	adds	r3, r7, #5
200005ac:	781b      	ldrb	r3, [r3, #0]
200005ae:	2b00      	cmp	r3, #0
200005b0:	d00a      	beq.n	200005c8 <pixel+0x15e>
		mask = mask | temp;
200005b2:	230f      	movs	r3, #15
200005b4:	18fb      	adds	r3, r7, r3
200005b6:	220f      	movs	r2, #15
200005b8:	18b9      	adds	r1, r7, r2
200005ba:	220c      	movs	r2, #12
200005bc:	18ba      	adds	r2, r7, r2
200005be:	7809      	ldrb	r1, [r1, #0]
200005c0:	7812      	ldrb	r2, [r2, #0]
200005c2:	430a      	orrs	r2, r1
200005c4:	701a      	strb	r2, [r3, #0]
200005c6:	e009      	b.n	200005dc <pixel+0x172>
	} else {
		mask = mask & temp;
200005c8:	230f      	movs	r3, #15
200005ca:	18fb      	adds	r3, r7, r3
200005cc:	220f      	movs	r2, #15
200005ce:	18ba      	adds	r2, r7, r2
200005d0:	210c      	movs	r1, #12
200005d2:	1879      	adds	r1, r7, r1
200005d4:	7812      	ldrb	r2, [r2, #0]
200005d6:	7809      	ldrb	r1, [r1, #0]
200005d8:	400a      	ands	r2, r1
200005da:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
200005dc:	230e      	movs	r3, #14
200005de:	18fb      	adds	r3, r7, r3
200005e0:	781a      	ldrb	r2, [r3, #0]
200005e2:	230f      	movs	r3, #15
200005e4:	18fb      	adds	r3, r7, r3
200005e6:	781b      	ldrb	r3, [r3, #0]
200005e8:	0011      	movs	r1, r2
200005ea:	0018      	movs	r0, r3
200005ec:	f7ff feae 	bl	2000034c <graphic_write_data>
200005f0:	e000      	b.n	200005f4 <pixel+0x18a>
	if(x > 127 || y > 63) return;
200005f2:	46c0      	nop			; (mov r8, r8)
	
200005f4:	46bd      	mov	sp, r7
200005f6:	b005      	add	sp, #20
200005f8:	bd90      	pop	{r4, r7, pc}
200005fa:	46c0      	nop			; (mov r8, r8)
200005fc:	2000089c 	mulcs	r0, ip, r8

20000600 <draw_object>:
#include "object.h"
#include "graphic.h"

void draw_object(POBJECT this) {
20000600:	b580      	push	{r7, lr}
20000602:	b084      	sub	sp, #16
20000604:	af00      	add	r7, sp, #0
20000606:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
20000608:	2300      	movs	r3, #0
2000060a:	60fb      	str	r3, [r7, #12]
2000060c:	e020      	b.n	20000650 <draw_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 1);
2000060e:	687b      	ldr	r3, [r7, #4]
20000610:	681a      	ldr	r2, [r3, #0]
20000612:	68fb      	ldr	r3, [r7, #12]
20000614:	3304      	adds	r3, #4
20000616:	005b      	lsls	r3, r3, #1
20000618:	18d3      	adds	r3, r2, r3
2000061a:	3304      	adds	r3, #4
2000061c:	781a      	ldrb	r2, [r3, #0]
2000061e:	687b      	ldr	r3, [r7, #4]
20000620:	68db      	ldr	r3, [r3, #12]
20000622:	b2db      	uxtb	r3, r3
20000624:	18d3      	adds	r3, r2, r3
20000626:	b2d8      	uxtb	r0, r3
20000628:	687b      	ldr	r3, [r7, #4]
2000062a:	681a      	ldr	r2, [r3, #0]
2000062c:	68fb      	ldr	r3, [r7, #12]
2000062e:	3304      	adds	r3, #4
20000630:	005b      	lsls	r3, r3, #1
20000632:	18d3      	adds	r3, r2, r3
20000634:	3305      	adds	r3, #5
20000636:	781a      	ldrb	r2, [r3, #0]
20000638:	687b      	ldr	r3, [r7, #4]
2000063a:	691b      	ldr	r3, [r3, #16]
2000063c:	b2db      	uxtb	r3, r3
2000063e:	18d3      	adds	r3, r2, r3
20000640:	b2db      	uxtb	r3, r3
20000642:	2201      	movs	r2, #1
20000644:	0019      	movs	r1, r3
20000646:	f7ff ff10 	bl	2000046a <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
2000064a:	68fb      	ldr	r3, [r7, #12]
2000064c:	3301      	adds	r3, #1
2000064e:	60fb      	str	r3, [r7, #12]
20000650:	68fb      	ldr	r3, [r7, #12]
20000652:	2b13      	cmp	r3, #19
20000654:	dddb      	ble.n	2000060e <draw_object+0xe>
	}
}
20000656:	46c0      	nop			; (mov r8, r8)
20000658:	46bd      	mov	sp, r7
2000065a:	b004      	add	sp, #16
2000065c:	bd80      	pop	{r7, pc}

2000065e <clear_object>:
void clear_object(POBJECT this) {
2000065e:	b580      	push	{r7, lr}
20000660:	b084      	sub	sp, #16
20000662:	af00      	add	r7, sp, #0
20000664:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
20000666:	2300      	movs	r3, #0
20000668:	60fb      	str	r3, [r7, #12]
2000066a:	e020      	b.n	200006ae <clear_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 0);
2000066c:	687b      	ldr	r3, [r7, #4]
2000066e:	681a      	ldr	r2, [r3, #0]
20000670:	68fb      	ldr	r3, [r7, #12]
20000672:	3304      	adds	r3, #4
20000674:	005b      	lsls	r3, r3, #1
20000676:	18d3      	adds	r3, r2, r3
20000678:	3304      	adds	r3, #4
2000067a:	781a      	ldrb	r2, [r3, #0]
2000067c:	687b      	ldr	r3, [r7, #4]
2000067e:	68db      	ldr	r3, [r3, #12]
20000680:	b2db      	uxtb	r3, r3
20000682:	18d3      	adds	r3, r2, r3
20000684:	b2d8      	uxtb	r0, r3
20000686:	687b      	ldr	r3, [r7, #4]
20000688:	681a      	ldr	r2, [r3, #0]
2000068a:	68fb      	ldr	r3, [r7, #12]
2000068c:	3304      	adds	r3, #4
2000068e:	005b      	lsls	r3, r3, #1
20000690:	18d3      	adds	r3, r2, r3
20000692:	3305      	adds	r3, #5
20000694:	781a      	ldrb	r2, [r3, #0]
20000696:	687b      	ldr	r3, [r7, #4]
20000698:	691b      	ldr	r3, [r3, #16]
2000069a:	b2db      	uxtb	r3, r3
2000069c:	18d3      	adds	r3, r2, r3
2000069e:	b2db      	uxtb	r3, r3
200006a0:	2200      	movs	r2, #0
200006a2:	0019      	movs	r1, r3
200006a4:	f7ff fee1 	bl	2000046a <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
200006a8:	68fb      	ldr	r3, [r7, #12]
200006aa:	3301      	adds	r3, #1
200006ac:	60fb      	str	r3, [r7, #12]
200006ae:	68fb      	ldr	r3, [r7, #12]
200006b0:	2b13      	cmp	r3, #19
200006b2:	dddb      	ble.n	2000066c <clear_object+0xe>
	}
}
200006b4:	46c0      	nop			; (mov r8, r8)
200006b6:	46bd      	mov	sp, r7
200006b8:	b004      	add	sp, #16
200006ba:	bd80      	pop	{r7, pc}

200006bc <set_object_speed>:

void set_object_speed(POBJECT this, int x, int y) {
200006bc:	b580      	push	{r7, lr}
200006be:	b084      	sub	sp, #16
200006c0:	af00      	add	r7, sp, #0
200006c2:	60f8      	str	r0, [r7, #12]
200006c4:	60b9      	str	r1, [r7, #8]
200006c6:	607a      	str	r2, [r7, #4]
	this->dirX = x;
200006c8:	68fb      	ldr	r3, [r7, #12]
200006ca:	68ba      	ldr	r2, [r7, #8]
200006cc:	605a      	str	r2, [r3, #4]
	this->dirY = y;
200006ce:	68fb      	ldr	r3, [r7, #12]
200006d0:	687a      	ldr	r2, [r7, #4]
200006d2:	609a      	str	r2, [r3, #8]
200006d4:	46c0      	nop			; (mov r8, r8)
200006d6:	46bd      	mov	sp, r7
200006d8:	b004      	add	sp, #16
200006da:	bd80      	pop	{r7, pc}

200006dc <delay_250ns>:
#include "timer.h"


void delay_250ns(void) {
200006dc:	b580      	push	{r7, lr}
200006de:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
200006e0:	4b0c      	ldr	r3, [pc, #48]	; (20000714 <delay_250ns+0x38>)
200006e2:	2200      	movs	r2, #0
200006e4:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
200006e6:	4b0c      	ldr	r3, [pc, #48]	; (20000718 <delay_250ns+0x3c>)
200006e8:	2231      	movs	r2, #49	; 0x31
200006ea:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200006ec:	4b0b      	ldr	r3, [pc, #44]	; (2000071c <delay_250ns+0x40>)
200006ee:	2200      	movs	r2, #0
200006f0:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200006f2:	4b08      	ldr	r3, [pc, #32]	; (20000714 <delay_250ns+0x38>)
200006f4:	2205      	movs	r2, #5
200006f6:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
200006f8:	46c0      	nop			; (mov r8, r8)
200006fa:	4b06      	ldr	r3, [pc, #24]	; (20000714 <delay_250ns+0x38>)
200006fc:	681a      	ldr	r2, [r3, #0]
200006fe:	2380      	movs	r3, #128	; 0x80
20000700:	025b      	lsls	r3, r3, #9
20000702:	4013      	ands	r3, r2
20000704:	d0f9      	beq.n	200006fa <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
20000706:	4b03      	ldr	r3, [pc, #12]	; (20000714 <delay_250ns+0x38>)
20000708:	2200      	movs	r2, #0
2000070a:	601a      	str	r2, [r3, #0]
}
2000070c:	46c0      	nop			; (mov r8, r8)
2000070e:	46bd      	mov	sp, r7
20000710:	bd80      	pop	{r7, pc}
20000712:	46c0      	nop			; (mov r8, r8)
20000714:	e000e010 	and	lr, r0, r0, lsl r0
20000718:	e000e014 	and	lr, r0, r4, lsl r0
2000071c:	e000e018 	and	lr, r0, r8, lsl r0

20000720 <delay_mikro>:

void delay_mikro(unsigned int us) {
20000720:	b580      	push	{r7, lr}
20000722:	b082      	sub	sp, #8
20000724:	af00      	add	r7, sp, #0
20000726:	6078      	str	r0, [r7, #4]
	while(us--) {
20000728:	e007      	b.n	2000073a <delay_mikro+0x1a>
		delay_250ns();
2000072a:	f7ff ffd7 	bl	200006dc <delay_250ns>
		delay_250ns();
2000072e:	f7ff ffd5 	bl	200006dc <delay_250ns>
		delay_250ns();
20000732:	f7ff ffd3 	bl	200006dc <delay_250ns>
		delay_250ns();
20000736:	f7ff ffd1 	bl	200006dc <delay_250ns>
	while(us--) {
2000073a:	687b      	ldr	r3, [r7, #4]
2000073c:	1e5a      	subs	r2, r3, #1
2000073e:	607a      	str	r2, [r7, #4]
20000740:	2b00      	cmp	r3, #0
20000742:	d1f2      	bne.n	2000072a <delay_mikro+0xa>
	}
}
20000744:	46c0      	nop			; (mov r8, r8)
20000746:	46bd      	mov	sp, r7
20000748:	b002      	add	sp, #8
2000074a:	bd80      	pop	{r7, pc}

2000074c <delay_milli>:

void delay_milli(unsigned int ms) {
2000074c:	b580      	push	{r7, lr}
2000074e:	b082      	sub	sp, #8
20000750:	af00      	add	r7, sp, #0
20000752:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_mikro(ms);
20000754:	687b      	ldr	r3, [r7, #4]
20000756:	0018      	movs	r0, r3
20000758:	f7ff ffe2 	bl	20000720 <delay_mikro>
	#else
		delay_mikro(1000 * ms);
	#endif
}
2000075c:	46c0      	nop			; (mov r8, r8)
2000075e:	46bd      	mov	sp, r7
20000760:	b002      	add	sp, #8
20000762:	bd80      	pop	{r7, pc}

20000764 <delay_500ns>:

void delay_500ns(void) {
20000764:	b580      	push	{r7, lr}
20000766:	af00      	add	r7, sp, #0
	delay_250ns();
20000768:	f7ff ffb8 	bl	200006dc <delay_250ns>
	delay_250ns();
2000076c:	f7ff ffb6 	bl	200006dc <delay_250ns>
}
20000770:	46c0      	nop			; (mov r8, r8)
20000772:	46bd      	mov	sp, r7
20000774:	bd80      	pop	{r7, pc}
20000776:	46c0      	nop			; (mov r8, r8)

20000778 <move_paddle>:
	clear_object,
	move_paddle,
	set_object_speed
};

void move_paddle(POBJECT this) {
20000778:	b580      	push	{r7, lr}
2000077a:	b082      	sub	sp, #8
2000077c:	af00      	add	r7, sp, #0
2000077e:	6078      	str	r0, [r7, #4]
	clear_object(this);
20000780:	687b      	ldr	r3, [r7, #4]
20000782:	0018      	movs	r0, r3
20000784:	f7ff ff6b 	bl	2000065e <clear_object>
	
	this->posX += this->dirX;
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	68da      	ldr	r2, [r3, #12]
2000078c:	687b      	ldr	r3, [r7, #4]
2000078e:	685b      	ldr	r3, [r3, #4]
20000790:	18d2      	adds	r2, r2, r3
20000792:	687b      	ldr	r3, [r7, #4]
20000794:	60da      	str	r2, [r3, #12]
//	this->posY += this->dirY;
	
	// Wall collisions
	if(this->posY < 0) {
20000796:	687b      	ldr	r3, [r7, #4]
20000798:	691b      	ldr	r3, [r3, #16]
2000079a:	2b00      	cmp	r3, #0
2000079c:	da03      	bge.n	200007a6 <move_paddle+0x2e>
		this->posY = 0;
2000079e:	687b      	ldr	r3, [r7, #4]
200007a0:	2200      	movs	r2, #0
200007a2:	611a      	str	r2, [r3, #16]
200007a4:	e006      	b.n	200007b4 <move_paddle+0x3c>
	} else if(this->posY > 127) {
200007a6:	687b      	ldr	r3, [r7, #4]
200007a8:	691b      	ldr	r3, [r3, #16]
200007aa:	2b7f      	cmp	r3, #127	; 0x7f
200007ac:	dd02      	ble.n	200007b4 <move_paddle+0x3c>
		this->posY = 127;
200007ae:	687b      	ldr	r3, [r7, #4]
200007b0:	227f      	movs	r2, #127	; 0x7f
200007b2:	611a      	str	r2, [r3, #16]
	}
	
	this->draw(this);
200007b4:	687b      	ldr	r3, [r7, #4]
200007b6:	695b      	ldr	r3, [r3, #20]
200007b8:	687a      	ldr	r2, [r7, #4]
200007ba:	0010      	movs	r0, r2
200007bc:	4798      	blx	r3
200007be:	46c0      	nop			; (mov r8, r8)
200007c0:	46bd      	mov	sp, r7
200007c2:	b002      	add	sp, #8
200007c4:	bd80      	pop	{r7, pc}
	...

200007c8 <ball_geometry>:
200007c8:	0000000c 	andeq	r0, r0, ip
200007cc:	00000004 	andeq	r0, r0, r4
200007d0:	00000004 	andeq	r0, r0, r4
200007d4:	02000100 	andeq	r0, r0, #0, 2
200007d8:	01010001 	tsteq	r1, r1
200007dc:	03010201 	movweq	r0, #4609	; 0x1201
200007e0:	01020002 	tsteq	r2, r2
200007e4:	03020202 	movweq	r0, #8706	; 0x2202
200007e8:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200007fc <ball>:
200007fc:	200007c8 	andcs	r0, r0, r8, asr #15
	...
20000808:	00000001 	andeq	r0, r0, r1
2000080c:	00000001 	andeq	r0, r0, r1
20000810:	20000601 	andcs	r0, r0, r1, lsl #12
20000814:	2000065f 	andcs	r0, r0, pc, asr r6
20000818:	2000005d 	andcs	r0, r0, sp, asr r0
2000081c:	200006bd 			; <UNDEFINED> instruction: 0x200006bd

20000820 <paddle_geometry>:
20000820:	0000000c 	andeq	r0, r0, ip
20000824:	00000004 	andeq	r0, r0, r4
20000828:	00000004 	andeq	r0, r0, r4
2000082c:	02000100 	andeq	r0, r0, #0, 2
20000830:	01010001 	tsteq	r1, r1
20000834:	03010201 	movweq	r0, #4609	; 0x1201
20000838:	01020002 	tsteq	r2, r2
2000083c:	03020202 	movweq	r0, #8706	; 0x2202
20000840:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000854 <paddle1>:
20000854:	20000820 	andcs	r0, r0, r0, lsr #16
	...
20000860:	00000001 	andeq	r0, r0, r1
20000864:	00000001 	andeq	r0, r0, r1
20000868:	20000601 	andcs	r0, r0, r1, lsl #12
2000086c:	2000065f 	andcs	r0, r0, pc, asr r6
20000870:	20000779 	andcs	r0, r0, r9, ror r7
20000874:	200006bd 			; <UNDEFINED> instruction: 0x200006bd

20000878 <paddle2>:
20000878:	20000820 	andcs	r0, r0, r0, lsr #16
	...
20000884:	00000001 	andeq	r0, r0, r1
20000888:	00000001 	andeq	r0, r0, r1
2000088c:	20000601 	andcs	r0, r0, r1, lsl #12
20000890:	2000065f 	andcs	r0, r0, pc, asr r6
20000894:	20000779 	andcs	r0, r0, r9, ror r7
20000898:	200006bd 			; <UNDEFINED> instruction: 0x200006bd
2000089c:	200004c0 	andcs	r0, r0, r0, asr #9
200008a0:	200004ca 	andcs	r0, r0, sl, asr #9
200008a4:	200004d4 	ldrdcs	r0, [r0], -r4
200008a8:	200004de 	ldrdcs	r0, [r0], -lr
200008ac:	200004e8 	andcs	r0, r0, r8, ror #9
200008b0:	200004f2 	strdcs	r0, [r0], -r2
200008b4:	200004fc 	strdcs	r0, [r0], -ip
200008b8:	20000506 	andcs	r0, r0, r6, lsl #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000001cc 	andeq	r0, r0, ip, asr #3
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000007b 	andeq	r0, r0, fp, ror r0
  10:	00001b0c 	andeq	r1, r0, ip, lsl #22
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	0000006d 	andeq	r0, r0, sp, rrx
  28:	00006103 	andeq	r6, r0, r3, lsl #2
  2c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
  30:	00000049 	andeq	r0, r0, r9, asr #32
  34:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
  38:	00002106 	andeq	r2, r0, r6, lsl #2
  3c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
  40:	21070200 	mrscs	r0, (UNDEF: 39)
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	01620500 	cmneq	r2, r0, lsl #10
  4c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  50:	00000028 	andeq	r0, r0, r8, lsr #32
  54:	00012603 	andeq	r2, r1, r3, lsl #12
  58:	0b023400 	bleq	8d060 <startup-0x1ff72fa0>
  5c:	00000090 	muleq	r0, r0, r0
  60:	00015806 	andeq	r5, r1, r6, lsl #16
  64:	900c0200 	andls	r0, ip, r0, lsl #4
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000a06 	andeq	r0, r0, r6, lsl #20
  70:	900d0200 	andls	r0, sp, r0, lsl #4
  74:	04000000 	streq	r0, [r0], #-0
  78:	00001006 	andeq	r1, r0, r6
  7c:	900e0200 	andls	r0, lr, r0, lsl #4
  80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  84:	00787004 	rsbseq	r7, r8, r4
  88:	00970f02 	addseq	r0, r7, r2, lsl #30
  8c:	000c0000 	andeq	r0, ip, r0
  90:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  94:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  98:	00000049 	andeq	r0, r0, r9, asr #32
  9c:	000000a7 	andeq	r0, r0, r7, lsr #1
  a0:	0000a709 	andeq	sl, r0, r9, lsl #14
  a4:	02001300 	andeq	r1, r0, #0, 6
  a8:	01450704 	cmpeq	r5, r4, lsl #14
  ac:	13050000 	movwne	r0, #20480	; 0x5000
  b0:	02000001 	andeq	r0, r0, #1
  b4:	0000b910 	andeq	fp, r0, r0, lsl r9
  b8:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
  bc:	03000000 	movweq	r0, #0
  c0:	00000168 	andeq	r0, r0, r8, ror #2
  c4:	38120224 	ldmdacc	r2, {r2, r5, r9}
  c8:	04000001 	streq	r0, [r0], #-1
  cc:	006f6567 	rsbeq	r6, pc, r7, ror #10
  d0:	00ae1302 	adceq	r1, lr, r2, lsl #6
  d4:	06000000 	streq	r0, [r0], -r0
  d8:	00000153 	andeq	r0, r0, r3, asr r1
  dc:	00901402 	addseq	r1, r0, r2, lsl #8
  e0:	06040000 	streq	r0, [r4], -r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	00901402 	addseq	r1, r0, r2, lsl #8
  ec:	06080000 	streq	r0, [r8], -r0
  f0:	0000014e 	andeq	r0, r0, lr, asr #2
  f4:	00901502 	addseq	r1, r0, r2, lsl #10
  f8:	060c0000 	streq	r0, [ip], -r0
  fc:	00000005 	andeq	r0, r0, r5
 100:	00901502 	addseq	r1, r0, r2, lsl #10
 104:	06100000 	ldreq	r0, [r0], -r0
 108:	00000016 	andeq	r0, r0, r6, lsl r0
 10c:	01491602 	cmpeq	r9, r2, lsl #12
 110:	06140000 	ldreq	r0, [r4], -r0
 114:	0000021f 	andeq	r0, r0, pc, lsl r2
 118:	01491702 	cmpeq	r9, r2, lsl #14
 11c:	06180000 	ldreq	r0, [r8], -r0
 120:	00000068 	andeq	r0, r0, r8, rrx
 124:	01491802 	cmpeq	r9, r2, lsl #16
 128:	061c0000 	ldreq	r0, [ip], -r0
 12c:	00000057 	andeq	r0, r0, r7, asr r0
 130:	01641902 	cmneq	r4, r2, lsl #18
 134:	00200000 	eoreq	r0, r0, r0
 138:	0001430b 	andeq	r4, r1, fp, lsl #6
 13c:	01430c00 	cmpeq	r3, r0, lsl #24
 140:	0a000000 	beq	148 <startup-0x1ffffeb8>
 144:	0000bf04 	andeq	fp, r0, r4, lsl #30
 148:	38040a00 	stmdacc	r4, {r9, fp}
 14c:	0b000001 	bleq	158 <startup-0x1ffffea8>
 150:	00000164 	andeq	r0, r0, r4, ror #2
 154:	0001430c 	andeq	r4, r1, ip, lsl #6
 158:	00900c00 	addseq	r0, r0, r0, lsl #24
 15c:	900c0000 	andls	r0, ip, r0
 160:	00000000 	andeq	r0, r0, r0
 164:	014f040a 	cmpeq	pc, sl, lsl #8
 168:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
 16c:	02000001 	andeq	r0, r0, #1
 170:	0000bf1a 	andeq	fp, r0, sl, lsl pc
 174:	013d0500 	teqeq	sp, r0, lsl #10
 178:	1a020000 	bne	80180 <startup-0x1ff7fe80>
 17c:	00000143 	andeq	r0, r0, r3, asr #2
 180:	0001720d 	andeq	r7, r1, sp, lsl #4
 184:	6a050300 	bvs	140d8c <startup-0x1febf274>
 188:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 18c:	00000138 	andeq	r0, r0, r8, lsr r1
 190:	00281901 	eoreq	r1, r8, r1, lsl #18
 194:	00342000 	eorseq	r2, r4, r0
 198:	9c010000 	stcls	0, cr0, [r1], {-0}
 19c:	000001ad 	andeq	r0, r0, sp, lsr #3
 1a0:	0100700f 	tsteq	r0, pc
 1a4:	0001751a 	andeq	r7, r1, sl, lsl r5
 1a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 1ac:	011d1000 	tsteq	sp, r0
 1b0:	13010000 	movwne	r0, #4096	; 0x1000
 1b4:	20000010 	andcs	r0, r0, r0, lsl r0
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	30109c01 	andscc	r9, r0, r1, lsl #24
 1c0:	01000001 	tsteq	r0, r1
 1c4:	00000009 	andeq	r0, r0, r9
 1c8:	00000c20 	andeq	r0, r0, r0, lsr #24
 1cc:	009c0100 	addseq	r0, ip, r0, lsl #2
 1d0:	000001d1 	ldrdeq	r0, [r0], -r1
 1d4:	00df0004 	sbcseq	r0, pc, r4
 1d8:	01040000 	mrseq	r0, (UNDEF: 4)
 1dc:	0000007b 	andeq	r0, r0, fp, ror r0
 1e0:	00018a0c 	andeq	r8, r1, ip, lsl #20
 1e4:	00005c00 	andeq	r5, r0, r0, lsl #24
 1e8:	00005820 	andeq	r5, r0, r0, lsr #16
 1ec:	0000a800 	andeq	sl, r0, r0, lsl #16
 1f0:	00610200 	rsbeq	r0, r1, r0, lsl #4
 1f4:	02020000 	andeq	r0, r2, #0
 1f8:	00004205 	andeq	r4, r0, r5, lsl #4
 1fc:	00780300 	rsbseq	r0, r8, r0, lsl #6
 200:	00420602 	subeq	r0, r2, r2, lsl #12
 204:	03000000 	movweq	r0, #0
 208:	07020079 	smlsdxeq	r2, r9, r0, r0
 20c:	00000042 	andeq	r0, r0, r2, asr #32
 210:	01040001 	tsteq	r4, r1
 214:	00006d08 	andeq	r6, r0, r8, lsl #26
 218:	01620500 	cmneq	r2, r0, lsl #10
 21c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 220:	00000021 	andeq	r0, r0, r1, lsr #32
 224:	00012602 	andeq	r2, r1, r2, lsl #12
 228:	0b023400 	bleq	8d230 <startup-0x1ff72dd0>
 22c:	00000090 	muleq	r0, r0, r0
 230:	00015806 	andeq	r5, r1, r6, lsl #16
 234:	900c0200 	andls	r0, ip, r0, lsl #4
 238:	00000000 	andeq	r0, r0, r0
 23c:	00000a06 	andeq	r0, r0, r6, lsl #20
 240:	900d0200 	andls	r0, sp, r0, lsl #4
 244:	04000000 	streq	r0, [r0], #-0
 248:	00001006 	andeq	r1, r0, r6
 24c:	900e0200 	andls	r0, lr, r0, lsl #4
 250:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 254:	00787003 	rsbseq	r7, r8, r3
 258:	00970f02 	addseq	r0, r7, r2, lsl #30
 25c:	000c0000 	andeq	r0, ip, r0
 260:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 264:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 268:	00000049 	andeq	r0, r0, r9, asr #32
 26c:	000000a7 	andeq	r0, r0, r7, lsr #1
 270:	0000a709 	andeq	sl, r0, r9, lsl #14
 274:	04001300 	streq	r1, [r0], #-768	; 0xfffffd00
 278:	01450704 	cmpeq	r5, r4, lsl #14
 27c:	14050000 	strne	r0, [r5], #-0
 280:	02000001 	andeq	r0, r0, #1
 284:	00005410 	andeq	r5, r0, r0, lsl r4
 288:	01130500 	tsteq	r3, r0, lsl #10
 28c:	10020000 	andne	r0, r2, r0
 290:	000000c4 	andeq	r0, r0, r4, asr #1
 294:	0054040a 	subseq	r0, r4, sl, lsl #8
 298:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
 29c:	24000001 	strcs	r0, [r0], #-1
 2a0:	01431202 	cmpeq	r3, r2, lsl #4
 2a4:	67030000 	strvs	r0, [r3, -r0]
 2a8:	02006f65 	andeq	r6, r0, #404	; 0x194
 2ac:	0000b913 	andeq	fp, r0, r3, lsl r9
 2b0:	53060000 	movwpl	r0, #24576	; 0x6000
 2b4:	02000001 	andeq	r0, r0, #1
 2b8:	00009014 	andeq	r9, r0, r4, lsl r0
 2bc:	00060400 	andeq	r0, r6, r0, lsl #8
 2c0:	02000000 	andeq	r0, r0, #0
 2c4:	00009014 	andeq	r9, r0, r4, lsl r0
 2c8:	4e060800 	cdpmi	8, 0, cr0, cr6, cr0, {0}
 2cc:	02000001 	andeq	r0, r0, #1
 2d0:	00009015 	andeq	r9, r0, r5, lsl r0
 2d4:	05060c00 	streq	r0, [r6, #-3072]	; 0xfffff400
 2d8:	02000000 	andeq	r0, r0, #0
 2dc:	00009015 	andeq	r9, r0, r5, lsl r0
 2e0:	16061000 	strne	r1, [r6], -r0
 2e4:	02000000 	andeq	r0, r0, #0
 2e8:	00015416 	andeq	r5, r1, r6, lsl r4
 2ec:	1f061400 	svcne	0x00061400
 2f0:	02000002 	andeq	r0, r0, #2
 2f4:	00015417 	andeq	r5, r1, r7, lsl r4
 2f8:	68061800 	stmdavs	r6, {fp, ip}
 2fc:	02000000 	andeq	r0, r0, #0
 300:	00015418 	andeq	r5, r1, r8, lsl r4
 304:	57061c00 	strpl	r1, [r6, -r0, lsl #24]
 308:	02000000 	andeq	r0, r0, #0
 30c:	00016f19 	andeq	r6, r1, r9, lsl pc
 310:	0b002000 	bleq	8318 <startup-0x1fff7ce8>
 314:	0000014e 	andeq	r0, r0, lr, asr #2
 318:	00014e0c 	andeq	r4, r1, ip, lsl #28
 31c:	040a0000 	streq	r0, [sl], #-0
 320:	000000ca 	andeq	r0, r0, sl, asr #1
 324:	0143040a 	cmpeq	r3, sl, lsl #8
 328:	6f0b0000 	svcvs	0x000b0000
 32c:	0c000001 	stceq	0, cr0, [r0], {1}
 330:	0000014e 	andeq	r0, r0, lr, asr #2
 334:	0000900c 	andeq	r9, r0, ip
 338:	00900c00 	addseq	r0, r0, r0, lsl #24
 33c:	0a000000 	beq	344 <startup-0x1ffffcbc>
 340:	00015a04 	andeq	r5, r1, r4, lsl #20
 344:	013e0500 	teqeq	lr, r0, lsl #10
 348:	1a020000 	bne	80350 <startup-0x1ff7fcb0>
 34c:	000000ca 	andeq	r0, r0, sl, asr #1
 350:	00013d05 	andeq	r3, r1, r5, lsl #26
 354:	4e1a0200 	cdpmi	2, 1, cr0, cr10, cr0, {0}
 358:	0d000001 	stceq	0, cr0, [r0, #-4]
 35c:	00000172 	andeq	r0, r0, r2, ror r1
 360:	01750503 	cmneq	r5, r3, lsl #10
 364:	770e0000 	strvc	r0, [lr, -r0]
 368:	01000001 	tsteq	r0, r1
 36c:	0000ae03 	andeq	sl, r0, r3, lsl #28
 370:	c8030500 	stmdagt	r3, {r8, sl}
 374:	0f200007 	svceq	0x00200007
 378:	0000018b 	andeq	r0, r0, fp, lsl #3
 37c:	03050e01 	movweq	r0, #24065	; 0x5e01
 380:	200007fc 	strdcs	r0, [r0], -ip
 384:	00016d10 	andeq	r6, r1, r0, lsl sp
 388:	5c180100 	ldfpls	f0, [r8], {-0}
 38c:	58200000 	stmdapl	r0!, {}	; <UNPREDICTABLE>
 390:	01000000 	mrseq	r0, (UNDEF: 0)
 394:	0185119c 			; <UNDEFINED> instruction: 0x0185119c
 398:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
 39c:	00000180 	andeq	r0, r0, r0, lsl #3
 3a0:	00749102 	rsbseq	r9, r4, r2, lsl #2
 3a4:	0002d300 	andeq	sp, r2, r0, lsl #6
 3a8:	c2000400 	andgt	r0, r0, #0, 8
 3ac:	04000001 	streq	r0, [r0], #-1
 3b0:	00007b01 	andeq	r7, r0, r1, lsl #22
 3b4:	02440c00 	subeq	r0, r4, #0, 24
 3b8:	00b40000 	adcseq	r0, r4, r0
 3bc:	054c2000 	strbeq	r2, [ip, #-0]
 3c0:	01340000 	teqeq	r4, r0
 3c4:	85020000 	strhi	r0, [r2, #-0]
 3c8:	02000002 	andeq	r0, r0, #2
 3cc:	00002c20 	andeq	r2, r0, r0, lsr #24
 3d0:	08010300 	stmdaeq	r1, {r8, r9}
 3d4:	0000006d 	andeq	r0, r0, sp, rrx
 3d8:	0001f704 	andeq	pc, r1, r4, lsl #14
 3dc:	6a8a0100 	bvs	fe2807e4 <paddle2+0xde27ff6c>
 3e0:	96200004 	strtls	r0, [r0], -r4
 3e4:	01000001 	tsteq	r0, r1
 3e8:	0000a79c 	muleq	r0, ip, r7
 3ec:	00780500 	rsbseq	r0, r8, r0, lsl #10
 3f0:	002c8a01 	eoreq	r8, ip, r1, lsl #20
 3f4:	91020000 	mrsls	r0, (UNDEF: 2)
 3f8:	00790567 	rsbseq	r0, r9, r7, ror #10
 3fc:	002c8a01 	eoreq	r8, ip, r1, lsl #20
 400:	91020000 	mrsls	r0, (UNDEF: 2)
 404:	65730566 	ldrbvs	r0, [r3, #-1382]!	; 0xfffffa9a
 408:	8a010074 	bhi	405e0 <startup-0x1ffbfa20>
 40c:	0000002c 	andeq	r0, r0, ip, lsr #32
 410:	06659102 	strbteq	r9, [r5], -r2, lsl #2
 414:	00000280 	andeq	r0, r0, r0, lsl #5
 418:	002c8d01 	eoreq	r8, ip, r1, lsl #26
 41c:	91020000 	mrsls	r0, (UNDEF: 2)
 420:	02a0066f 	adceq	r0, r0, #116391936	; 0x6f00000
 424:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
 428:	0000002c 	andeq	r0, r0, ip, lsr #32
 42c:	066d9102 	strbteq	r9, [sp], -r2, lsl #2
 430:	00000319 	andeq	r0, r0, r9, lsl r3
 434:	002c9f01 	eoreq	r9, ip, r1, lsl #30
 438:	91020000 	mrsls	r0, (UNDEF: 2)
 43c:	029b066e 	addseq	r0, fp, #115343360	; 0x6e00000
 440:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
 444:	0000002c 	andeq	r0, r0, ip, lsr #32
 448:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 44c:	0002f804 	andeq	pc, r2, r4, lsl #16
 450:	127f0100 	rsbsne	r0, pc, #0, 2
 454:	58200004 	stmdapl	r0!, {r2}
 458:	01000000 	mrseq	r0, (UNDEF: 0)
 45c:	0000ed9c 	muleq	r0, ip, sp
 460:	04180700 	ldreq	r0, [r8], #-1792	; 0xfffff900
 464:	004a2000 	subeq	r2, sl, r0
 468:	db060000 	blle	180470 <startup-0x1fe7fb90>
 46c:	01000002 	tsteq	r0, r2
 470:	0000ed80 	andeq	lr, r0, r0, lsl #27
 474:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 478:	00043c07 	andeq	r3, r4, r7, lsl #24
 47c:	00001a20 	andeq	r1, r0, r0, lsr #20
 480:	64610800 	strbtvs	r0, [r1], #-2048	; 0xfffff800
 484:	83010064 	movwhi	r0, #4196	; 0x1064
 488:	000000ed 	andeq	r0, r0, sp, ror #1
 48c:	00709102 	rsbseq	r9, r0, r2, lsl #2
 490:	04090000 	streq	r0, [r9], #-0
 494:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 498:	02e00400 	rsceq	r0, r0, #0, 8
 49c:	71010000 	mrsvc	r0, (UNDEF: 1)
 4a0:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
 4a4:	00000056 	andeq	r0, r0, r6, asr r0
 4a8:	01289c01 			; <UNDEFINED> instruction: 0x01289c01
 4ac:	d90a0000 	stmdble	sl, {}	; <UNPREDICTABLE>
 4b0:	01000001 	tsteq	r0, r1
 4b4:	0000ed73 	andeq	lr, r0, r3, ror sp
 4b8:	00011a00 	andeq	r1, r1, r0, lsl #20
 4bc:	0c000b00 			; <UNDEFINED> instruction: 0x0c000b00
 4c0:	0000030d 	andeq	r0, r0, sp, lsl #6
 4c4:	00ed7501 	rsceq	r7, sp, r1, lsl #10
 4c8:	000b0000 	andeq	r0, fp, r0
 4cc:	01e50d00 	mvneq	r0, r0, lsl #26
 4d0:	6c010000 	stcvs	0, cr0, [r1], {-0}
 4d4:	0000002c 	andeq	r0, r0, ip, lsr #32
 4d8:	20000392 	mulcs	r0, r2, r3
 4dc:	0000002a 	andeq	r0, r0, sl, lsr #32
 4e0:	01509c01 	cmpeq	r0, r1, lsl #24
 4e4:	190e0000 	stmdbne	lr, {}	; <UNPREDICTABLE>
 4e8:	01000003 	tsteq	r0, r3
 4ec:	00002c6c 	andeq	r2, r0, ip, ror #24
 4f0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 4f4:	02b30400 	adcseq	r0, r3, #0, 8
 4f8:	64010000 	strvs	r0, [r1], #-0
 4fc:	2000034c 	andcs	r0, r0, ip, asr #6
 500:	00000046 	andeq	r0, r0, r6, asr #32
 504:	01829c01 	orreq	r9, r2, r1, lsl #24
 508:	f20e0000 	vhadd.s8	d0, d14, d0
 50c:	01000001 	tsteq	r0, r1
 510:	00002c64 	andeq	r2, r0, r4, ror #24
 514:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 518:	0003190e 	andeq	r1, r3, lr, lsl #18
 51c:	2c640100 	stfcse	f0, [r4], #-0
 520:	02000000 	andeq	r0, r0, #0
 524:	04007691 	streq	r7, [r0], #-1681	; 0xfffff96f
 528:	000001c3 	andeq	r0, r0, r3, asr #3
 52c:	030c5d01 	movweq	r5, #52481	; 0xcd01
 530:	00402000 	subeq	r2, r0, r0
 534:	9c010000 	stcls	0, cr0, [r1], {-0}
 538:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 53c:	0001d10e 	andeq	sp, r1, lr, lsl #2
 540:	2c5d0100 	ldfcse	f0, [sp], {-0}
 544:	02000000 	andeq	r0, r0, #0
 548:	190e7791 	stmdbne	lr, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 54c:	01000003 	tsteq	r0, r3
 550:	00002c5d 	andeq	r2, r0, sp, asr ip
 554:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 558:	028d0400 	addeq	r0, sp, #0, 8
 55c:	45010000 	strmi	r0, [r1, #-0]
 560:	2000028c 	andcs	r0, r0, ip, lsl #5
 564:	00000080 	andeq	r0, r0, r0, lsl #1
 568:	01f39c01 	mvnseq	r9, r1, lsl #24
 56c:	f20e0000 	vhadd.s8	d0, d14, d0
 570:	01000002 	tsteq	r0, r2
 574:	00002c45 	andeq	r2, r0, r5, asr #24
 578:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 57c:	0003190e 	andeq	r1, r3, lr, lsl #18
 580:	2c450100 	stfcse	f0, [r5], {-0}
 584:	02000000 	andeq	r0, r0, #0
 588:	250c7691 	strcs	r7, [ip, #-1681]	; 0xfffff96f
 58c:	01000002 	tsteq	r0, r2
 590:	0000ed20 	andeq	lr, r0, r0, lsr #26
 594:	00000b00 	andeq	r0, r0, r0, lsl #22
 598:	0002a60d 	andeq	sl, r2, sp, lsl #12
 59c:	2c2f0100 	stfcss	f0, [pc], #-0	; 5a4 <startup-0x1ffffa5c>
 5a0:	fc000000 	stc2	0, cr0, [r0], {-0}
 5a4:	90200001 	eorls	r0, r0, r1
 5a8:	01000000 	mrseq	r0, (UNDEF: 0)
 5ac:	0002399c 	muleq	r2, ip, r9
 5b0:	03190e00 	tsteq	r9, #0, 28
 5b4:	2f010000 	svccs	0x00010000
 5b8:	0000002c 	andeq	r0, r0, ip, lsr #32
 5bc:	0a6f9102 	beq	1be49cc <startup-0x1e41b634>
 5c0:	00000225 	andeq	r0, r0, r5, lsr #4
 5c4:	00ed2001 	rsceq	r2, sp, r1
 5c8:	022b0000 	eoreq	r0, fp, #0
 5cc:	000b0000 	andeq	r0, fp, r0
 5d0:	00565208 	subseq	r5, r6, r8, lsl #4
 5d4:	002c3701 	eoreq	r3, ip, r1, lsl #14
 5d8:	91020000 	mrsls	r0, (UNDEF: 2)
 5dc:	31040077 	tstcc	r4, r7, ror r0
 5e0:	01000002 	tsteq	r0, r2
 5e4:	00018a1b 	andeq	r8, r1, fp, lsl sl
 5e8:	00007220 	andeq	r7, r0, r0, lsr #4
 5ec:	729c0100 	addsvc	r0, ip, #0, 2
 5f0:	0a000002 	beq	600 <startup-0x1ffffa00>
 5f4:	00000225 	andeq	r0, r0, r5, lsr #4
 5f8:	00ed2001 	rsceq	r2, sp, r1
 5fc:	025f0000 	subseq	r0, pc, #0
 600:	000b0000 	andeq	r0, fp, r0
 604:	0000180f 	andeq	r1, r0, pc, lsl #16
 608:	00690800 	rsbeq	r0, r9, r0, lsl #16
 60c:	002c2601 	eoreq	r2, ip, r1, lsl #12
 610:	91020000 	mrsls	r0, (UNDEF: 2)
 614:	04000077 	streq	r0, [r0], #-119	; 0xffffff89
 618:	000001fd 	strdeq	r0, [r0], -sp
 61c:	01200b01 			; <UNDEFINED> instruction: 0x01200b01
 620:	006a2000 	rsbeq	r2, sl, r0
 624:	9c010000 	stcls	0, cr0, [r1], {-0}
 628:	00000296 	muleq	r0, r6, r2
 62c:	0003190e 	andeq	r1, r3, lr, lsl #18
 630:	210b0100 	mrscs	r0, (UNDEF: 27)
 634:	02000000 	andeq	r0, r0, #0
 638:	10007791 	mulne	r0, r1, r7
 63c:	0000020e 	andeq	r0, r0, lr, lsl #4
 640:	00ec0701 	rsceq	r0, ip, r1, lsl #14
 644:	00342000 	eorseq	r2, r4, r0
 648:	9c010000 	stcls	0, cr0, [r1], {-0}
 64c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 650:	01007805 	tsteq	r0, r5, lsl #16
 654:	00002107 	andeq	r2, r0, r7, lsl #2
 658:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 65c:	02c61100 	sbceq	r1, r6, #0, 2
 660:	03010000 	movweq	r0, #4096	; 0x1000
 664:	200000b4 	strhcs	r0, [r0], -r4
 668:	00000038 	andeq	r0, r0, r8, lsr r0
 66c:	78059c01 	stmdavc	r5, {r0, sl, fp, ip, pc}
 670:	21030100 	mrscs	r0, (UNDEF: 19)
 674:	02000000 	andeq	r0, r0, #0
 678:	00007791 	muleq	r0, r1, r7
 67c:	0000021e 	andeq	r0, r0, lr, lsl r2
 680:	02d40004 	sbcseq	r0, r4, #4
 684:	01040000 	mrseq	r0, (UNDEF: 4)
 688:	0000007b 	andeq	r0, r0, fp, ror r0
 68c:	0003350c 	andeq	r3, r3, ip, lsl #10
 690:	00060000 	andeq	r0, r6, r0
 694:	0000dc20 	andeq	sp, r0, r0, lsr #24
 698:	00026500 	andeq	r6, r2, r0, lsl #10
 69c:	00610200 	rsbeq	r0, r1, r0, lsl #4
 6a0:	02020000 	andeq	r0, r2, #0
 6a4:	00004205 	andeq	r4, r0, r5, lsl #4
 6a8:	00780300 	rsbseq	r0, r8, r0, lsl #6
 6ac:	00420602 	subeq	r0, r2, r2, lsl #12
 6b0:	03000000 	movweq	r0, #0
 6b4:	07020079 	smlsdxeq	r2, r9, r0, r0
 6b8:	00000042 	andeq	r0, r0, r2, asr #32
 6bc:	01040001 	tsteq	r4, r1
 6c0:	00006d08 	andeq	r6, r0, r8, lsl #26
 6c4:	01620500 	cmneq	r2, r0, lsl #10
 6c8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 6cc:	00000021 	andeq	r0, r0, r1, lsr #32
 6d0:	00012602 	andeq	r2, r1, r2, lsl #12
 6d4:	0b023400 	bleq	8d6dc <startup-0x1ff72924>
 6d8:	00000090 	muleq	r0, r0, r0
 6dc:	00015806 	andeq	r5, r1, r6, lsl #16
 6e0:	900c0200 	andls	r0, ip, r0, lsl #4
 6e4:	00000000 	andeq	r0, r0, r0
 6e8:	00000a06 	andeq	r0, r0, r6, lsl #20
 6ec:	900d0200 	andls	r0, sp, r0, lsl #4
 6f0:	04000000 	streq	r0, [r0], #-0
 6f4:	00001006 	andeq	r1, r0, r6
 6f8:	900e0200 	andls	r0, lr, r0, lsl #4
 6fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 700:	00787003 	rsbseq	r7, r8, r3
 704:	00970f02 	addseq	r0, r7, r2, lsl #30
 708:	000c0000 	andeq	r0, ip, r0
 70c:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 710:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 714:	00000049 	andeq	r0, r0, r9, asr #32
 718:	000000a7 	andeq	r0, r0, r7, lsr #1
 71c:	0000a709 	andeq	sl, r0, r9, lsl #14
 720:	04001300 	streq	r1, [r0], #-768	; 0xfffffd00
 724:	01450704 	cmpeq	r5, r4, lsl #14
 728:	13050000 	movwne	r0, #20480	; 0x5000
 72c:	02000001 	andeq	r0, r0, #1
 730:	0000b910 	andeq	fp, r0, r0, lsl r9
 734:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
 738:	02000000 	andeq	r0, r0, #0
 73c:	00000168 	andeq	r0, r0, r8, ror #2
 740:	38120224 	ldmdacc	r2, {r2, r5, r9}
 744:	03000001 	movweq	r0, #1
 748:	006f6567 	rsbeq	r6, pc, r7, ror #10
 74c:	00ae1302 	adceq	r1, lr, r2, lsl #6
 750:	06000000 	streq	r0, [r0], -r0
 754:	00000153 	andeq	r0, r0, r3, asr r1
 758:	00901402 	addseq	r1, r0, r2, lsl #8
 75c:	06040000 	streq	r0, [r4], -r0
 760:	00000000 	andeq	r0, r0, r0
 764:	00901402 	addseq	r1, r0, r2, lsl #8
 768:	06080000 	streq	r0, [r8], -r0
 76c:	0000014e 	andeq	r0, r0, lr, asr #2
 770:	00901502 	addseq	r1, r0, r2, lsl #10
 774:	060c0000 	streq	r0, [ip], -r0
 778:	00000005 	andeq	r0, r0, r5
 77c:	00901502 	addseq	r1, r0, r2, lsl #10
 780:	06100000 	ldreq	r0, [r0], -r0
 784:	00000016 	andeq	r0, r0, r6, lsl r0
 788:	01491602 	cmpeq	r9, r2, lsl #12
 78c:	06140000 	ldreq	r0, [r4], -r0
 790:	0000021f 	andeq	r0, r0, pc, lsl r2
 794:	01491702 	cmpeq	r9, r2, lsl #14
 798:	06180000 	ldreq	r0, [r8], -r0
 79c:	00000068 	andeq	r0, r0, r8, rrx
 7a0:	01491802 	cmpeq	r9, r2, lsl #16
 7a4:	061c0000 	ldreq	r0, [ip], -r0
 7a8:	00000057 	andeq	r0, r0, r7, asr r0
 7ac:	01641902 	cmneq	r4, r2, lsl #18
 7b0:	00200000 	eoreq	r0, r0, r0
 7b4:	0001430b 	andeq	r4, r1, fp, lsl #6
 7b8:	01430c00 	cmpeq	r3, r0, lsl #24
 7bc:	0a000000 	beq	7c4 <startup-0x1ffff83c>
 7c0:	0000bf04 	andeq	fp, r0, r4, lsl #30
 7c4:	38040a00 	stmdacc	r4, {r9, fp}
 7c8:	0b000001 	bleq	7d4 <startup-0x1ffff82c>
 7cc:	00000164 	andeq	r0, r0, r4, ror #2
 7d0:	0001430c 	andeq	r4, r1, ip, lsl #6
 7d4:	00900c00 	addseq	r0, r0, r0, lsl #24
 7d8:	900c0000 	andls	r0, ip, r0
 7dc:	00000000 	andeq	r0, r0, r0
 7e0:	014f040a 	cmpeq	pc, sl, lsl #8
 7e4:	3d050000 	stccc	0, cr0, [r5, #-0]
 7e8:	02000001 	andeq	r0, r0, #1
 7ec:	0001431a 	andeq	r4, r1, sl, lsl r3
 7f0:	03240d00 			; <UNDEFINED> instruction: 0x03240d00
 7f4:	0f010000 	svceq	0x00010000
 7f8:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
 7fc:	00000020 	andeq	r0, r0, r0, lsr #32
 800:	01b19c01 			; <UNDEFINED> instruction: 0x01b19c01
 804:	850e0000 	strhi	r0, [lr, #-0]
 808:	01000001 	tsteq	r0, r1
 80c:	00016a0f 	andeq	r6, r1, pc, lsl #20
 810:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 814:	0100780f 	tsteq	r0, pc, lsl #16
 818:	0000900f 	andeq	r9, r0, pc
 81c:	70910200 	addsvc	r0, r1, r0, lsl #4
 820:	0100790f 	tsteq	r0, pc, lsl #18
 824:	0000900f 	andeq	r9, r0, pc
 828:	6c910200 	lfmvs	f0, 4, [r1], {0}
 82c:	03701000 	cmneq	r0, #0
 830:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 834:	2000065e 	andcs	r0, r0, lr, asr r6
 838:	0000005e 	andeq	r0, r0, lr, asr r0
 83c:	01eb9c01 	mvneq	r9, r1, lsl #24
 840:	850e0000 	strhi	r0, [lr, #-0]
 844:	01000001 	tsteq	r0, r1
 848:	00016a09 	andeq	r6, r1, r9, lsl #20
 84c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 850:	00066611 	andeq	r6, r6, r1, lsl r6
 854:	00004e20 	andeq	r4, r0, r0, lsr #28
 858:	00691200 	rsbeq	r1, r9, r0, lsl #4
 85c:	00900a01 	addseq	r0, r0, r1, lsl #20
 860:	91020000 	mrsls	r0, (UNDEF: 2)
 864:	13000074 	movwne	r0, #116	; 0x74
 868:	0000037d 	andeq	r0, r0, sp, ror r3
 86c:	06000401 	streq	r0, [r0], -r1, lsl #8
 870:	005e2000 	subseq	r2, lr, r0
 874:	9c010000 	stcls	0, cr0, [r1], {-0}
 878:	0001850e 	andeq	r8, r1, lr, lsl #10
 87c:	6a040100 	bvs	100c84 <startup-0x1feff37c>
 880:	02000001 	andeq	r0, r0, #1
 884:	08116c91 	ldmdaeq	r1, {r0, r4, r7, sl, fp, sp, lr}
 888:	4e200006 	cdpmi	0, 2, cr0, cr0, cr6, {0}
 88c:	12000000 	andne	r0, r0, #0
 890:	05010069 	streq	r0, [r1, #-105]	; 0xffffff97
 894:	00000090 	muleq	r0, r0, r0
 898:	00749102 	rsbseq	r9, r4, r2, lsl #2
 89c:	008d0000 	addeq	r0, sp, r0
 8a0:	00040000 	andeq	r0, r4, r0
 8a4:	000003e3 	andeq	r0, r0, r3, ror #7
 8a8:	007b0104 	rsbseq	r0, fp, r4, lsl #2
 8ac:	a20c0000 	andge	r0, ip, #0
 8b0:	dc000003 	stcle	0, cr0, [r0], {3}
 8b4:	9a200006 	bls	8008d4 <startup-0x1f7ff72c>
 8b8:	06000000 	streq	r0, [r0], -r0
 8bc:	02000003 	andeq	r0, r0, #3
 8c0:	00000225 	andeq	r0, r0, r5, lsr #4
 8c4:	07642001 	strbeq	r2, [r4, -r1]!
 8c8:	00122000 	andseq	r2, r2, r0
 8cc:	9c010000 	stcls	0, cr0, [r1], {-0}
 8d0:	00030d03 	andeq	r0, r3, r3, lsl #26
 8d4:	4c180100 	ldfmis	f0, [r8], {-0}
 8d8:	18200007 	stmdane	r0!, {r0, r1, r2}
 8dc:	01000000 	mrseq	r0, (UNDEF: 0)
 8e0:	0000559c 	muleq	r0, ip, r5
 8e4:	736d0400 	cmnvc	sp, #0, 8
 8e8:	55180100 	ldrpl	r0, [r8, #-256]	; 0xffffff00
 8ec:	02000000 	andeq	r0, r0, #0
 8f0:	05007491 	streq	r7, [r0, #-1169]	; 0xfffffb6f
 8f4:	03890704 	orreq	r0, r9, #4, 14	; 0x100000
 8f8:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
 8fc:	01000001 	tsteq	r0, r1
 900:	0007200f 	andeq	r2, r7, pc
 904:	00002c20 	andeq	r2, r0, r0, lsr #24
 908:	7f9c0100 	svcvc	0x009c0100
 90c:	04000000 	streq	r0, [r0], #-0
 910:	01007375 	tsteq	r0, r5, ror r3
 914:	0000550f 	andeq	r5, r0, pc, lsl #10
 918:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 91c:	03960600 	orrseq	r0, r6, #0, 12
 920:	04010000 	streq	r0, [r1], #-0
 924:	200006dc 	ldrdcs	r0, [r0], -ip
 928:	00000044 	andeq	r0, r0, r4, asr #32
 92c:	e9009c01 	stmdb	r0, {r0, sl, fp, ip, pc}
 930:	04000001 	streq	r0, [r0], #-1
 934:	00045900 	andeq	r5, r4, r0, lsl #18
 938:	7b010400 	blvc	41940 <startup-0x1ffbe6c0>
 93c:	0c000000 	stceq	0, cr0, [r0], {-0}
 940:	00000408 	andeq	r0, r0, r8, lsl #8
 944:	20000778 	andcs	r0, r0, r8, ror r7
 948:	0000004e 	andeq	r0, r0, lr, asr #32
 94c:	0000038a 	andeq	r0, r0, sl, lsl #7
 950:	00006102 	andeq	r6, r0, r2, lsl #2
 954:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
 958:	00000042 	andeq	r0, r0, r2, asr #32
 95c:	02007803 	andeq	r7, r0, #196608	; 0x30000
 960:	00004206 	andeq	r4, r0, r6, lsl #4
 964:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
 968:	42070200 	andmi	r0, r7, #0, 4
 96c:	01000000 	mrseq	r0, (UNDEF: 0)
 970:	08010400 	stmdaeq	r1, {sl}
 974:	0000006d 	andeq	r0, r0, sp, rrx
 978:	00016205 	andeq	r6, r1, r5, lsl #4
 97c:	21080200 	mrscs	r0, R8_fiq
 980:	02000000 	andeq	r0, r0, #0
 984:	00000126 	andeq	r0, r0, r6, lsr #2
 988:	900b0234 	andls	r0, fp, r4, lsr r2
 98c:	06000000 	streq	r0, [r0], -r0
 990:	00000158 	andeq	r0, r0, r8, asr r1
 994:	00900c02 	addseq	r0, r0, r2, lsl #24
 998:	06000000 	streq	r0, [r0], -r0
 99c:	0000000a 	andeq	r0, r0, sl
 9a0:	00900d02 	addseq	r0, r0, r2, lsl #26
 9a4:	06040000 	streq	r0, [r4], -r0
 9a8:	00000010 	andeq	r0, r0, r0, lsl r0
 9ac:	00900e02 	addseq	r0, r0, r2, lsl #28
 9b0:	03080000 	movweq	r0, #32768	; 0x8000
 9b4:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 9b8:	0000970f 	andeq	r9, r0, pc, lsl #14
 9bc:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 9c0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 9c4:	49080074 	stmdbmi	r8, {r2, r4, r5, r6}
 9c8:	a7000000 	strge	r0, [r0, -r0]
 9cc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 9d0:	000000a7 	andeq	r0, r0, r7, lsr #1
 9d4:	04040013 	streq	r0, [r4], #-19	; 0xffffffed
 9d8:	00014507 	andeq	r4, r1, r7, lsl #10
 9dc:	01140500 	tsteq	r4, r0, lsl #10
 9e0:	10020000 	andne	r0, r2, r0
 9e4:	00000054 	andeq	r0, r0, r4, asr r0
 9e8:	00011305 	andeq	r1, r1, r5, lsl #6
 9ec:	c4100200 	ldrgt	r0, [r0], #-512	; 0xfffffe00
 9f0:	0a000000 	beq	9f8 <startup-0x1ffff608>
 9f4:	00005404 	andeq	r5, r0, r4, lsl #8
 9f8:	01680200 	cmneq	r8, r0, lsl #4
 9fc:	02240000 	eoreq	r0, r4, #0
 a00:	00014312 	andeq	r4, r1, r2, lsl r3
 a04:	65670300 	strbvs	r0, [r7, #-768]!	; 0xfffffd00
 a08:	1302006f 	movwne	r0, #8303	; 0x206f
 a0c:	000000b9 	strheq	r0, [r0], -r9
 a10:	01530600 	cmpeq	r3, r0, lsl #12
 a14:	14020000 	strne	r0, [r2], #-0
 a18:	00000090 	muleq	r0, r0, r0
 a1c:	00000604 	andeq	r0, r0, r4, lsl #12
 a20:	14020000 	strne	r0, [r2], #-0
 a24:	00000090 	muleq	r0, r0, r0
 a28:	014e0608 	cmpeq	lr, r8, lsl #12
 a2c:	15020000 	strne	r0, [r2, #-0]
 a30:	00000090 	muleq	r0, r0, r0
 a34:	0005060c 	andeq	r0, r5, ip, lsl #12
 a38:	15020000 	strne	r0, [r2, #-0]
 a3c:	00000090 	muleq	r0, r0, r0
 a40:	00160610 	andseq	r0, r6, r0, lsl r6
 a44:	16020000 	strne	r0, [r2], -r0
 a48:	00000154 	andeq	r0, r0, r4, asr r1
 a4c:	021f0614 	andseq	r0, pc, #20, 12	; 0x1400000
 a50:	17020000 	strne	r0, [r2, -r0]
 a54:	00000154 	andeq	r0, r0, r4, asr r1
 a58:	00680618 	rsbeq	r0, r8, r8, lsl r6
 a5c:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
 a60:	00000154 	andeq	r0, r0, r4, asr r1
 a64:	0057061c 	subseq	r0, r7, ip, lsl r6
 a68:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
 a6c:	0000016f 	andeq	r0, r0, pc, ror #2
 a70:	4e0b0020 	cdpmi	0, 0, cr0, cr11, cr0, {1}
 a74:	0c000001 	stceq	0, cr0, [r0], {1}
 a78:	0000014e 	andeq	r0, r0, lr, asr #2
 a7c:	ca040a00 	bgt	103284 <startup-0x1fefcd7c>
 a80:	0a000000 	beq	a88 <startup-0x1ffff578>
 a84:	00014304 	andeq	r4, r1, r4, lsl #6
 a88:	016f0b00 	cmneq	pc, r0, lsl #22
 a8c:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
 a90:	0c000001 	stceq	0, cr0, [r0], {1}
 a94:	00000090 	muleq	r0, r0, r0
 a98:	0000900c 	andeq	r9, r0, ip
 a9c:	040a0000 	streq	r0, [sl], #-0
 aa0:	0000015a 	andeq	r0, r0, sl, asr r1
 aa4:	00013e05 	andeq	r3, r1, r5, lsl #28
 aa8:	ca1a0200 	bgt	6812b0 <startup-0x1f97ed50>
 aac:	05000000 	streq	r0, [r0, #-0]
 ab0:	0000013d 	andeq	r0, r0, sp, lsr r1
 ab4:	014e1a02 	cmpeq	lr, r2, lsl #20
 ab8:	e80d0000 	stmda	sp, {}	; <UNPREDICTABLE>
 abc:	03000003 	movweq	r0, #3
 ac0:	00017504 	andeq	r7, r1, r4, lsl #10
 ac4:	03f00d00 	mvnseq	r0, #0, 26
 ac8:	05030000 	streq	r0, [r3, #-0]
 acc:	00000175 	andeq	r0, r0, r5, ror r1
 ad0:	0003f80e 	andeq	pc, r3, lr, lsl #16
 ad4:	ae030100 	adfges	f0, f3, f0
 ad8:	05000000 	streq	r0, [r0, #-0]
 adc:	00082003 	andeq	r2, r8, r3
 ae0:	018b0f20 	orreq	r0, fp, r0, lsr #30
 ae4:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
 ae8:	08540305 	ldmdaeq	r4, {r0, r2, r8, r9}^
 aec:	960f2000 	strls	r2, [pc], -r0
 af0:	01000001 	tsteq	r0, r1
 af4:	78030518 	stmdavc	r3, {r3, r4, r8, sl}
 af8:	10200008 	eorne	r0, r0, r8
 afc:	000003dc 	ldrdeq	r0, [r0], -ip
 b00:	07782201 	ldrbeq	r2, [r8, -r1, lsl #4]!
 b04:	004e2000 	subeq	r2, lr, r0
 b08:	9c010000 	stcls	0, cr0, [r1], {-0}
 b0c:	00018511 	andeq	r8, r1, r1, lsl r5
 b10:	80220100 	eorhi	r0, r2, r0, lsl #2
 b14:	02000001 	andeq	r0, r0, #1
 b18:	00007491 	muleq	r0, r1, r4

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03011303 	movweq	r1, #4867	; 0x1303
  20:	3a0b0b0e 	bcc	2c2c60 <startup-0x1fd3d3a0>
  24:	010b3b0b 	tsteq	fp, fp, lsl #22
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	0b381349 	bleq	e04d60 <startup-0x1f1fb2a0>
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	3f13490b 	svccc	0x0013490b
  98:	00193c19 	andseq	r3, r9, r9, lsl ip
  9c:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	01111927 	tsteq	r1, r7, lsr #18
  ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b4:	0f000013 	svceq	0x00000013
  b8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c4:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
  c8:	03193f00 	tsteq	r9, #0, 30
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	1119270b 	tstne	r9, fp, lsl #14
  d4:	40061201 	andmi	r1, r6, r1, lsl #4
  d8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  dc:	01000000 	mrseq	r0, (UNDEF: 0)
  e0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  e4:	0e030b13 	vmoveq.32	d3[0], r0
  e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ec:	00001710 	andeq	r1, r0, r0, lsl r7
  f0:	03011302 	movweq	r1, #4866	; 0x1302
  f4:	3a0b0b0e 	bcc	2c2d34 <startup-0x1fd3d2cc>
  f8:	010b3b0b 	tsteq	fp, fp, lsl #22
  fc:	03000013 	movweq	r0, #19
 100:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 104:	0b3b0b3a 	bleq	ec2df4 <startup-0x1f13d20c>
 108:	0b381349 	bleq	e04e34 <startup-0x1f1fb1cc>
 10c:	24040000 	strcs	r0, [r4], #-0
 110:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 114:	000e030b 	andeq	r0, lr, fp, lsl #6
 118:	00160500 	andseq	r0, r6, r0, lsl #10
 11c:	0b3a0e03 	bleq	e83930 <startup-0x1f17c6d0>
 120:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 124:	0d060000 	stceq	0, cr0, [r6, #-0]
 128:	3a0e0300 	bcc	380d30 <startup-0x1fc7f2d0>
 12c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 130:	000b3813 	andeq	r3, fp, r3, lsl r8
 134:	00240700 	eoreq	r0, r4, r0, lsl #14
 138:	0b3e0b0b 	bleq	f82d6c <startup-0x1f07d294>
 13c:	00000803 	andeq	r0, r0, r3, lsl #16
 140:	49010108 	stmdbmi	r1, {r3, r8}
 144:	00130113 	andseq	r0, r3, r3, lsl r1
 148:	00210900 	eoreq	r0, r1, r0, lsl #18
 14c:	0b2f1349 	bleq	bc4e78 <startup-0x1f43b188>
 150:	0f0a0000 	svceq	0x000a0000
 154:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 158:	0b000013 	bleq	1ac <startup-0x1ffffe54>
 15c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 160:	00001301 	andeq	r1, r0, r1, lsl #6
 164:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 168:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 16c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 170:	0b3b0b3a 	bleq	ec2e60 <startup-0x1f13d1a0>
 174:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 178:	0000193c 	andeq	r1, r0, ip, lsr r9
 17c:	0300340e 	movweq	r3, #1038	; 0x40e
 180:	3b0b3a0e 	blcc	2ce9c0 <startup-0x1fd31640>
 184:	3f13490b 	svccc	0x0013490b
 188:	00180219 	andseq	r0, r8, r9, lsl r2
 18c:	00340f00 	eorseq	r0, r4, r0, lsl #30
 190:	0b3a1347 	bleq	e84eb4 <startup-0x1f17b14c>
 194:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 198:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 19c:	03193f01 	tsteq	r9, #1, 30
 1a0:	3b0b3a0e 	blcc	2ce9e0 <startup-0x1fd31620>
 1a4:	1119270b 	tstne	r9, fp, lsl #14
 1a8:	40061201 	andmi	r1, r6, r1, lsl #4
 1ac:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1b0:	05110000 	ldreq	r0, [r1, #-0]
 1b4:	3a0e0300 	bcc	380dbc <startup-0x1fc7f244>
 1b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1bc:	00180213 	andseq	r0, r8, r3, lsl r2
 1c0:	11010000 	mrsne	r0, (UNDEF: 1)
 1c4:	130e2501 	movwne	r2, #58625	; 0xe501
 1c8:	110e030b 	tstne	lr, fp, lsl #6
 1cc:	10061201 	andne	r1, r6, r1, lsl #4
 1d0:	02000017 	andeq	r0, r0, #23
 1d4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 1d8:	0b3b0b3a 	bleq	ec2ec8 <startup-0x1f13d138>
 1dc:	00001349 	andeq	r1, r0, r9, asr #6
 1e0:	0b002403 	bleq	91f4 <startup-0x1fff6e0c>
 1e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1e8:	0400000e 	streq	r0, [r0], #-14
 1ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1f0:	0b3a0e03 	bleq	e83a04 <startup-0x1f17c5fc>
 1f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 200:	00130119 	andseq	r0, r3, r9, lsl r1
 204:	00050500 	andeq	r0, r5, r0, lsl #10
 208:	0b3a0803 	bleq	e8221c <startup-0x1f17dde4>
 20c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 210:	00001802 	andeq	r1, r0, r2, lsl #16
 214:	03003406 	movweq	r3, #1030	; 0x406
 218:	3b0b3a0e 	blcc	2cea58 <startup-0x1fd315a8>
 21c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 220:	07000018 	smladeq	r0, r8, r0, r0
 224:	0111010b 	tsteq	r1, fp, lsl #2
 228:	00000612 	andeq	r0, r0, r2, lsl r6
 22c:	03003408 	movweq	r3, #1032	; 0x408
 230:	3b0b3a08 	blcc	2cea58 <startup-0x1fd315a8>
 234:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 238:	09000018 	stmdbeq	r0, {r3, r4}
 23c:	0b0b0024 	bleq	2c02d4 <startup-0x1fd3fd2c>
 240:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 244:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 248:	03193f01 	tsteq	r9, #1, 30
 24c:	3b0b3a0e 	blcc	2cea8c <startup-0x1fd31574>
 250:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 254:	00130119 	andseq	r0, r3, r9, lsl r1
 258:	00180b00 	andseq	r0, r8, r0, lsl #22
 25c:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 260:	03193f01 	tsteq	r9, #1, 30
 264:	3b0b3a0e 	blcc	2ceaa4 <startup-0x1fd3155c>
 268:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 26c:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
 270:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 274:	0b3a0e03 	bleq	e83a88 <startup-0x1f17c578>
 278:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 27c:	01111349 	tsteq	r1, r9, asr #6
 280:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 284:	01194296 			; <UNDEFINED> instruction: 0x01194296
 288:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 28c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 290:	0b3b0b3a 	bleq	ec2f80 <startup-0x1f13d080>
 294:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 298:	0b0f0000 	bleq	3c02a0 <startup-0x1fc3fd60>
 29c:	00175501 	andseq	r5, r7, r1, lsl #10
 2a0:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 2a4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2a8:	0b3b0b3a 	bleq	ec2f98 <startup-0x1f13d068>
 2ac:	01111927 	tsteq	r1, r7, lsr #18
 2b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2b4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 2b8:	11000013 	tstne	r0, r3, lsl r0
 2bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2c0:	0b3a0e03 	bleq	e83ad4 <startup-0x1f17c52c>
 2c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2cc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2d0:	00000019 	andeq	r0, r0, r9, lsl r0
 2d4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 2d8:	030b130e 	movweq	r1, #45838	; 0xb30e
 2dc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 2e0:	00171006 	andseq	r1, r7, r6
 2e4:	01130200 	tsteq	r3, r0, lsl #4
 2e8:	0b0b0e03 	bleq	2c3afc <startup-0x1fd3c504>
 2ec:	0b3b0b3a 	bleq	ec2fdc <startup-0x1f13d024>
 2f0:	00001301 	andeq	r1, r0, r1, lsl #6
 2f4:	03000d03 	movweq	r0, #3331	; 0xd03
 2f8:	3b0b3a08 	blcc	2ceb20 <startup-0x1fd314e0>
 2fc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 300:	0400000b 	streq	r0, [r0], #-11
 304:	0b0b0024 	bleq	2c039c <startup-0x1fd3fc64>
 308:	0e030b3e 	vmoveq.16	d3[0], r0
 30c:	16050000 	strne	r0, [r5], -r0
 310:	3a0e0300 	bcc	380f18 <startup-0x1fc7f0e8>
 314:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 318:	06000013 			; <UNDEFINED> instruction: 0x06000013
 31c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 320:	0b3b0b3a 	bleq	ec3010 <startup-0x1f13cff0>
 324:	0b381349 	bleq	e05050 <startup-0x1f1fafb0>
 328:	24070000 	strcs	r0, [r7], #-0
 32c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 330:	0008030b 	andeq	r0, r8, fp, lsl #6
 334:	01010800 	tsteq	r1, r0, lsl #16
 338:	13011349 	movwne	r1, #4937	; 0x1349
 33c:	21090000 	mrscs	r0, (UNDEF: 9)
 340:	2f134900 	svccs	0x00134900
 344:	0a00000b 	beq	378 <startup-0x1ffffc88>
 348:	0b0b000f 	bleq	2c038c <startup-0x1fd3fc74>
 34c:	00001349 	andeq	r1, r0, r9, asr #6
 350:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 354:	00130119 	andseq	r0, r3, r9, lsl r1
 358:	00050c00 	andeq	r0, r5, r0, lsl #24
 35c:	00001349 	andeq	r1, r0, r9, asr #6
 360:	3f012e0d 	svccc	0x00012e0d
 364:	3a0e0319 	bcc	380fd0 <startup-0x1fc7f030>
 368:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 36c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 370:	97184006 	ldrls	r4, [r8, -r6]
 374:	13011942 	movwne	r1, #6466	; 0x1942
 378:	050e0000 	streq	r0, [lr, #-0]
 37c:	3a0e0300 	bcc	380f84 <startup-0x1fc7f07c>
 380:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 384:	00180213 	andseq	r0, r8, r3, lsl r2
 388:	00050f00 	andeq	r0, r5, r0, lsl #30
 38c:	0b3a0803 	bleq	e823a0 <startup-0x1f17dc60>
 390:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 394:	00001802 	andeq	r1, r0, r2, lsl #16
 398:	3f012e10 	svccc	0x00012e10
 39c:	3a0e0319 	bcc	381008 <startup-0x1fc7eff8>
 3a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3a4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3a8:	96184006 	ldrls	r4, [r8], -r6
 3ac:	13011942 	movwne	r1, #6466	; 0x1942
 3b0:	0b110000 	bleq	4403b8 <startup-0x1fbbfc48>
 3b4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 3b8:	12000006 	andne	r0, r0, #6
 3bc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 3c0:	0b3b0b3a 	bleq	ec30b0 <startup-0x1f13cf50>
 3c4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3c8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 3cc:	03193f01 	tsteq	r9, #1, 30
 3d0:	3b0b3a0e 	blcc	2cec10 <startup-0x1fd313f0>
 3d4:	1119270b 	tstne	r9, fp, lsl #14
 3d8:	40061201 	andmi	r1, r6, r1, lsl #4
 3dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3e0:	01000000 	mrseq	r0, (UNDEF: 0)
 3e4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 3e8:	0e030b13 	vmoveq.32	d3[0], r0
 3ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3f0:	00001710 	andeq	r1, r0, r0, lsl r7
 3f4:	3f002e02 	svccc	0x00002e02
 3f8:	3a0e0319 	bcc	381064 <startup-0x1fc7ef9c>
 3fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 400:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 404:	96184006 	ldrls	r4, [r8], -r6
 408:	00001942 	andeq	r1, r0, r2, asr #18
 40c:	3f012e03 	svccc	0x00012e03
 410:	3a0e0319 	bcc	38107c <startup-0x1fc7ef84>
 414:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 418:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 41c:	96184006 	ldrls	r4, [r8], -r6
 420:	13011942 	movwne	r1, #6466	; 0x1942
 424:	05040000 	streq	r0, [r4, #-0]
 428:	3a080300 	bcc	201030 <startup-0x1fdfefd0>
 42c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 430:	00180213 	andseq	r0, r8, r3, lsl r2
 434:	00240500 	eoreq	r0, r4, r0, lsl #10
 438:	0b3e0b0b 	bleq	f8306c <startup-0x1f07cf94>
 43c:	00000e03 	andeq	r0, r0, r3, lsl #28
 440:	3f002e06 	svccc	0x00002e06
 444:	3a0e0319 	bcc	3810b0 <startup-0x1fc7ef50>
 448:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 44c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 450:	97184006 	ldrls	r4, [r8, -r6]
 454:	00001942 	andeq	r1, r0, r2, asr #18
 458:	01110100 	tsteq	r1, r0, lsl #2
 45c:	0b130e25 	bleq	4c3cf8 <startup-0x1fb3c308>
 460:	01110e03 	tsteq	r1, r3, lsl #28
 464:	17100612 			; <UNDEFINED> instruction: 0x17100612
 468:	13020000 	movwne	r0, #8192	; 0x2000
 46c:	0b0e0301 	bleq	381078 <startup-0x1fc7ef88>
 470:	3b0b3a0b 	blcc	2ceca4 <startup-0x1fd3135c>
 474:	0013010b 	andseq	r0, r3, fp, lsl #2
 478:	000d0300 	andeq	r0, sp, r0, lsl #6
 47c:	0b3a0803 	bleq	e82490 <startup-0x1f17db70>
 480:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 484:	00000b38 	andeq	r0, r0, r8, lsr fp
 488:	0b002404 	bleq	94a0 <startup-0x1fff6b60>
 48c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 490:	0500000e 	streq	r0, [r0, #-14]
 494:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 498:	0b3b0b3a 	bleq	ec3188 <startup-0x1f13ce78>
 49c:	00001349 	andeq	r1, r0, r9, asr #6
 4a0:	03000d06 	movweq	r0, #3334	; 0xd06
 4a4:	3b0b3a0e 	blcc	2cece4 <startup-0x1fd3131c>
 4a8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 4ac:	0700000b 	streq	r0, [r0, -fp]
 4b0:	0b0b0024 	bleq	2c0548 <startup-0x1fd3fab8>
 4b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 4b8:	01080000 	mrseq	r0, (UNDEF: 8)
 4bc:	01134901 	tsteq	r3, r1, lsl #18
 4c0:	09000013 	stmdbeq	r0, {r0, r1, r4}
 4c4:	13490021 	movtne	r0, #36897	; 0x9021
 4c8:	00000b2f 	andeq	r0, r0, pc, lsr #22
 4cc:	0b000f0a 	bleq	40fc <startup-0x1fffbf04>
 4d0:	0013490b 	andseq	r4, r3, fp, lsl #18
 4d4:	01150b00 	tsteq	r5, r0, lsl #22
 4d8:	13011927 	movwne	r1, #6439	; 0x1927
 4dc:	050c0000 	streq	r0, [ip, #-0]
 4e0:	00134900 	andseq	r4, r3, r0, lsl #18
 4e4:	00340d00 	eorseq	r0, r4, r0, lsl #26
 4e8:	0b3a0e03 	bleq	e83cfc <startup-0x1f17c304>
 4ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4f0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 4f4:	340e0000 	strcc	r0, [lr], #-0
 4f8:	3a0e0300 	bcc	381100 <startup-0x1fc7ef00>
 4fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 500:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 504:	0f000018 	svceq	0x00000018
 508:	13470034 	movtne	r0, #28724	; 0x7034
 50c:	0b3b0b3a 	bleq	ec31fc <startup-0x1f13ce04>
 510:	00001802 	andeq	r1, r0, r2, lsl #16
 514:	3f012e10 	svccc	0x00012e10
 518:	3a0e0319 	bcc	381184 <startup-0x1fc7ee7c>
 51c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 520:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 524:	96184006 	ldrls	r4, [r8], -r6
 528:	00001942 	andeq	r1, r0, r2, asr #18
 52c:	03000511 	movweq	r0, #1297	; 0x511
 530:	3b0b3a0e 	blcc	2ced70 <startup-0x1fd31290>
 534:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 538:	00000018 	andeq	r0, r0, r8, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000004c 	andeq	r0, r0, ip, asr #32
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	01d00002 	bicseq	r0, r0, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000005c 	andcs	r0, r0, ip, asr r0
  3c:	00000058 	andeq	r0, r0, r8, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	03a50002 			; <UNDEFINED> instruction: 0x03a50002
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b4 	strhcs	r0, [r0], -r4
  5c:	0000054c 	andeq	r0, r0, ip, asr #10
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	067c0002 	ldrbteq	r0, [ip], -r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000600 	andcs	r0, r0, r0, lsl #12
  7c:	000000dc 	ldrdeq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	089e0002 	ldmeq	lr, {r1}
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200006dc 	ldrdcs	r0, [r0], -ip
  9c:	0000009a 	muleq	r0, sl, r0
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	092f0002 	stmdbeq	pc!, {r1}	; <UNPREDICTABLE>
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000778 	andcs	r0, r0, r8, ror r7
  bc:	0000004e 	andeq	r0, r0, lr, asr #32
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000005c 	andcs	r0, r0, ip, asr r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
  18:	000000f8 	strdeq	r0, [r0], -r8
  1c:	00000120 	andeq	r0, r0, r0, lsr #2
  20:	00000122 	andeq	r0, r0, r2, lsr #2
  24:	00000124 	andeq	r0, r0, r4, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000a4 	andeq	r0, r0, r4, lsr #1
   4:	00680002 	rsbeq	r0, r8, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  44:	5f6c6165 	svcpl	0x006c6165
  48:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  4c:	74730000 	ldrbtvc	r0, [r3], #-0
  50:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  54:	00632e70 	rsbeq	r2, r3, r0, ror lr
  58:	6f000001 	svcvs	0x00000001
  5c:	63656a62 	cmnvs	r5, #401408	; 0x62000
  60:	00682e74 	rsbeq	r2, r8, r4, ror lr
  64:	62000001 	andvs	r0, r0, #1
  68:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
  6c:	00010068 	andeq	r0, r1, r8, rrx
  70:	05000000 	streq	r0, [r0, #-0]
  74:	00000002 	andeq	r0, r0, r2
  78:	01090320 	tsteq	r9, r0, lsr #6
  7c:	03025e13 	movweq	r5, #11795	; 0x2e13
  80:	00010100 	andeq	r0, r1, r0, lsl #2
  84:	00100205 	andseq	r0, r0, r5, lsl #4
  88:	12032000 	andne	r2, r3, #0
  8c:	783d2f01 	ldmdavc	sp!, {r0, r8, r9, sl, fp, sp}
  90:	332f2f3d 			; <UNDEFINED> instruction: 0x332f2f3d
  94:	01040200 	mrseq	r0, R12_usr
  98:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
  9c:	02005901 	andeq	r5, r0, #16384	; 0x4000
  a0:	023b0104 	eorseq	r0, fp, #4, 2
  a4:	01010003 	tsteq	r1, r3
  a8:	00000088 	andeq	r0, r0, r8, lsl #1
  ac:	00650002 	rsbeq	r0, r5, r2
  b0:	01020000 	mrseq	r0, (UNDEF: 2)
  b4:	000d0efb 	strdeq	r0, [sp], -fp
  b8:	01010101 	tsteq	r1, r1, lsl #2
  bc:	01000000 	mrseq	r0, (UNDEF: 0)
  c0:	43010000 	movwmi	r0, #4096	; 0x1000
  c4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  c8:	2f737265 	svccs	0x00737265
  cc:	706d6148 	rsbvc	r6, sp, r8, asr #2
  d0:	442f7375 	strtmi	r7, [pc], #-885	; d8 <startup-0x1fffff28>
  d4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  d8:	442f706f 	strtmi	r7, [pc], #-111	; e0 <startup-0x1fffff20>
  dc:	31305441 	teqcc	r0, r1, asr #8
  e0:	6f432f37 	svcvs	0x00432f37
  e4:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  e8:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  ec:	5f6c6165 	svcpl	0x006c6165
  f0:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  f4:	61620000 	cmnvs	r2, r0
  f8:	632e6c6c 			; <UNDEFINED> instruction: 0x632e6c6c
  fc:	00000100 	andeq	r0, r0, r0, lsl #2
 100:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 104:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 108:	00000100 	andeq	r0, r0, r0, lsl #2
 10c:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 110:	0100682e 	tsteq	r0, lr, lsr #16
 114:	00000000 	andeq	r0, r0, r0
 118:	005c0205 	subseq	r0, ip, r5, lsl #4
 11c:	17032000 	strne	r2, [r3, -r0]
 120:	754c4b01 	strbvc	r4, [ip, #-2817]	; 0xfffff4ff
 124:	04020077 	streq	r0, [r2], #-119	; 0xffffff89
 128:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 12c:	02595d4b 	subseq	r5, r9, #4800	; 0x12c0
 130:	01010004 	tsteq	r1, r4
 134:	0000012d 	andeq	r0, r0, sp, lsr #2
 138:	005f0002 	subseq	r0, pc, r2
 13c:	01020000 	mrseq	r0, (UNDEF: 2)
 140:	000d0efb 	strdeq	r0, [sp], -fp
 144:	01010101 	tsteq	r1, r1, lsl #2
 148:	01000000 	mrseq	r0, (UNDEF: 0)
 14c:	43010000 	movwmi	r0, #4096	; 0x1000
 150:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 154:	2f737265 	svccs	0x00737265
 158:	706d6148 	rsbvc	r6, sp, r8, asr #2
 15c:	442f7375 	strtmi	r7, [pc], #-885	; 164 <startup-0x1ffffe9c>
 160:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 164:	442f706f 	strtmi	r7, [pc], #-111	; 16c <startup-0x1ffffe94>
 168:	31305441 	teqcc	r0, r1, asr #8
 16c:	6f432f37 	svcvs	0x00432f37
 170:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 174:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 178:	5f6c6165 	svcpl	0x006c6165
 17c:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 180:	72670000 	rsbvc	r0, r7, #0
 184:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 188:	00632e63 	rsbeq	r2, r3, r3, ror #28
 18c:	67000001 	strvs	r0, [r0, -r1]
 190:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 194:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
 198:	00000100 	andeq	r0, r0, r0, lsl #2
 19c:	02050000 	andeq	r0, r5, #0
 1a0:	200000b4 	strhcs	r0, [r0], -r4
 1a4:	76e56714 	usatvc	r6, #5, r4, lsl #14
 1a8:	6768d767 	strbvs	sp, [r8, -r7, ror #14]!
 1ac:	0b033d4b 	bleq	cf6e0 <startup-0x1ff30920>
 1b0:	2076033c 	rsbscs	r0, r6, ip, lsr r3
 1b4:	03443d4b 	movteq	r3, #19787	; 0x4d4b
 1b8:	3d4b2079 	stclcc	0, cr2, [fp, #-484]	; 0xfffffe1c
 1bc:	3d4b1c41 	stclcc	12, cr1, [fp, #-260]	; 0xfffffefc
 1c0:	3d3d4c3e 	ldccc	12, cr4, [sp, #-248]!	; 0xffffff08
 1c4:	303d3d3d 	eorscc	r3, sp, sp, lsr sp
 1c8:	2f3d2f3d 	svccs	0x003d2f3d
 1cc:	667a034b 	ldrbtvs	r0, [sl], -fp, asr #6
 1d0:	3d3d2327 	ldccc	3, cr2, [sp, #-156]!	; 0xffffff64
 1d4:	3d3d67bc 	ldccc	7, cr6, [sp, #-752]!	; 0xfffffd10
 1d8:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 1dc:	3d3d592f 			; <UNDEFINED> instruction: 0x3d3d592f
 1e0:	4b303d4b 	blmi	c0f714 <startup-0x1f3f08ec>
 1e4:	ca3d303d 	bgt	f4c2e0 <startup-0x1f0b3d20>
 1e8:	2f594b91 	svccs	0x00594b91
 1ec:	593f2f3d 	ldmdbpl	pc!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
 1f0:	3d59313d 	ldfcce	f3, [r9, #-244]	; 0xffffff0c
 1f4:	3d3d3d31 	ldccc	13, cr3, [sp, #-196]!	; 0xffffff3c
 1f8:	593d9176 	ldmdbpl	sp!, {r1, r2, r4, r5, r6, r8, ip, pc}
 1fc:	914c833d 	cmpls	ip, sp, lsr r3
 200:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 204:	59674c83 	stmdbpl	r7!, {r0, r1, r7, sl, fp, lr}^
 208:	3d2f4c67 	stccc	12, cr4, [pc, #-412]!	; 74 <startup-0x1fffff8c>
 20c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 210:	4b4b4b4b 	blmi	12d2f44 <startup-0x1ed2d0bc>
 214:	3d3e3d4b 	ldccc	13, cr3, [lr, #-300]!	; 0xfffffed4
 218:	004bad3d 	subeq	sl, fp, sp, lsr sp
 21c:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 220:	03040200 	movweq	r0, #16896	; 0x4200
 224:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 228:	003c0601 	eorseq	r0, ip, r1, lsl #12
 22c:	06020402 	streq	r0, [r2], -r2, lsl #8
 230:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
 234:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 238:	00e64d43 	rsceq	r4, r6, r3, asr #26
 23c:	06010402 	streq	r0, [r1], -r2, lsl #8
 240:	685a0666 	ldmdavs	sl, {r1, r2, r5, r6, r9, sl}^
 244:	595959ad 	ldmdbpl	r9, {r0, r2, r3, r5, r7, r8, fp, ip, lr}^
 248:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 24c:	4b784b5b 	blmi	1e12fc0 <startup-0x1e1ed040>
 250:	bb4d684b 	bllt	135a384 <startup-0x1eca5c7c>
 254:	4bbc9fd7 	blmi	fef281b8 <paddle2+0xdef27940>
 258:	5a03a1ae 	bpl	e8918 <startup-0x1ff176e8>
 25c:	202803ac 	eorcs	r0, r8, ip, lsr #7
 260:	01000602 	tsteq	r0, r2, lsl #12
 264:	00009d01 	andeq	r9, r0, r1, lsl #26
 268:	5d000200 	sfmpl	f0, 4, [r0, #-0]
 26c:	02000000 	andeq	r0, r0, #0
 270:	0d0efb01 	vstreq	d15, [lr, #-4]
 274:	01010100 	mrseq	r0, (UNDEF: 17)
 278:	00000001 	andeq	r0, r0, r1
 27c:	01000001 	tsteq	r0, r1
 280:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff845 <paddle2+0xdfffefcd>
 284:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 288:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 28c:	2f737570 	svccs	0x00737570
 290:	6b736544 	blvs	1cd97a8 <startup-0x1e326858>
 294:	2f706f74 	svccs	0x00706f74
 298:	30544144 	subscc	r4, r4, r4, asr #2
 29c:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 2a0:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 2a4:	2f657469 	svccs	0x00657469
 2a8:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 2ac:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 2b0:	6f000067 	svcvs	0x00000067
 2b4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2b8:	00632e74 	rsbeq	r2, r3, r4, ror lr
 2bc:	6f000001 	svcvs	0x00000001
 2c0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2c4:	00682e74 	rsbeq	r2, r8, r4, ror lr
 2c8:	00000001 	andeq	r0, r0, r1
 2cc:	00020500 	andeq	r0, r2, r0, lsl #10
 2d0:	15200006 	strne	r0, [r0, #-6]!
 2d4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2d8:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 2dc:	c7080304 	strgt	r0, [r8, -r4, lsl #6]
 2e0:	01040200 	mrseq	r0, R12_usr
 2e4:	3f063c06 	svccc	0x00063c06
 2e8:	02004b4b 	andeq	r4, r0, #76800	; 0x12c00
 2ec:	003d0304 	eorseq	r0, sp, r4, lsl #6
 2f0:	08030402 	stmdaeq	r3, {r1, sl}
 2f4:	040200c7 	streq	r0, [r2], #-199	; 0xffffff39
 2f8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 2fc:	3d674c3f 	stclcc	12, cr4, [r7, #-252]!	; 0xffffff04
 300:	0004023d 	andeq	r0, r4, sp, lsr r2
 304:	00800101 	addeq	r0, r0, r1, lsl #2
 308:	00020000 	andeq	r0, r2, r0
 30c:	00000050 	andeq	r0, r0, r0, asr r0
 310:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 314:	0101000d 	tsteq	r1, sp
 318:	00000101 	andeq	r0, r0, r1, lsl #2
 31c:	00000100 	andeq	r0, r0, r0, lsl #2
 320:	2f3a4301 	svccs	0x003a4301
 324:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 328:	61482f73 	hvcvs	33523	; 0x82f3
 32c:	7375706d 	cmnvc	r5, #109	; 0x6d
 330:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 334:	706f746b 	rsbvc	r7, pc, fp, ror #8
 338:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 33c:	2f373130 	svccs	0x00373130
 340:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 344:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 348:	6165722f 	cmnvs	r5, pc, lsr #4
 34c:	6f705f6c 	svcvs	0x00705f6c
 350:	0000676e 	andeq	r6, r0, lr, ror #14
 354:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 358:	00632e72 	rsbeq	r2, r3, r2, ror lr
 35c:	00000001 	andeq	r0, r0, r1
 360:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
 364:	15200006 	strne	r0, [r0, #-6]!
 368:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 36c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 370:	06200601 	strteq	r0, [r0], -r1, lsl #12
 374:	4ba03d69 	blmi	fe80f920 <paddle2+0xde80f0a8>
 378:	2f2f2f21 	svccs	0x002f2f21
 37c:	4c4c5e2a 	mcrrmi	14, 2, r5, ip, cr10
 380:	2f2f4c4e 	svccs	0x002f4c4e
 384:	0003022f 	andeq	r0, r3, pc, lsr #4
 388:	00860101 	addeq	r0, r6, r1, lsl #2
 38c:	00020000 	andeq	r0, r2, r0
 390:	00000069 	andeq	r0, r0, r9, rrx
 394:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 398:	0101000d 	tsteq	r1, sp
 39c:	00000101 	andeq	r0, r0, r1, lsl #2
 3a0:	00000100 	andeq	r0, r0, r0, lsl #2
 3a4:	2f3a4301 	svccs	0x003a4301
 3a8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 3ac:	61482f73 	hvcvs	33523	; 0x82f3
 3b0:	7375706d 	cmnvc	r5, #109	; 0x6d
 3b4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 3b8:	706f746b 	rsbvc	r7, pc, fp, ror #8
 3bc:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 3c0:	2f373130 	svccs	0x00373130
 3c4:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 3c8:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 3cc:	6165722f 	cmnvs	r5, pc, lsr #4
 3d0:	6f705f6c 	svcvs	0x00705f6c
 3d4:	0000676e 	andeq	r6, r0, lr, ror #14
 3d8:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 3dc:	632e656c 			; <UNDEFINED> instruction: 0x632e656c
 3e0:	00000100 	andeq	r0, r0, r0, lsl #2
 3e4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 3e8:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 3ec:	00000100 	andeq	r0, r0, r0, lsl #2
 3f0:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 3f4:	682e656c 	stmdavs	lr!, {r2, r3, r5, r6, r8, sl, sp, lr}
 3f8:	00000100 	andeq	r0, r0, r0, lsl #2
 3fc:	02050000 	andeq	r0, r5, #0
 400:	20000778 	andcs	r0, r0, r8, ror r7
 404:	4b012103 	blmi	48818 <startup-0x1ffb77e8>
 408:	4b4b784c 	blmi	12de540 <startup-0x1ed21ac0>
 40c:	02593f4b 	subseq	r3, r9, #300	; 0x12c
 410:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	59726964 	ldmdbpl	r2!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	736f7000 	cmnvc	pc, #0
   8:	69730059 	ldmdbvs	r3!, {r0, r3, r4, r6}^
   c:	0058657a 	subseq	r6, r8, sl, ror r5
  10:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  14:	72640059 	rsbvc	r0, r4, #89	; 0x59
  18:	43007761 	movwmi	r7, #1889	; 0x761
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  44:	5f6c6165 	svcpl	0x006c6165
  48:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  4c:	6174732f 	cmnvs	r4, pc, lsr #6
  50:	70757472 	rsbsvc	r7, r5, r2, ror r4
  54:	7300632e 	movwvc	r6, #814	; 0x32e
  58:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
  5c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  60:	6f507400 	svcvs	0x00507400
  64:	00746e69 	rsbseq	r6, r4, r9, ror #28
  68:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  6c:	736e7500 	cmnvc	lr, #0, 10
  70:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  74:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  78:	47007261 	strmi	r7, [r0, -r1, ror #4]
  7c:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  80:	36203939 			; <UNDEFINED> instruction: 0x36203939
  84:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  88:	31303220 	teqcc	r0, r0, lsr #4
  8c:	31323037 	teqcc	r2, r7, lsr r0
  90:	72282035 	eorvc	r2, r8, #53	; 0x35
  94:	61656c65 	cmnvs	r5, r5, ror #24
  98:	20296573 	eorcs	r6, r9, r3, ror r5
  9c:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  a0:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  a4:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  a8:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  ac:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  b0:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  b4:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  b8:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  bc:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  c0:	205d3231 	subscs	r3, sp, r1, lsr r2
  c4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  c8:	20626d75 	rsbcs	r6, r2, r5, ror sp
  cc:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  d0:	613d6863 	teqvs	sp, r3, ror #16
  d4:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  d8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  dc:	6f6c666d 	svcvs	0x006c666d
  e0:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  e4:	733d6962 	teqvc	sp, #1605632	; 0x188000
  e8:	2074666f 	rsbscs	r6, r4, pc, ror #12
  ec:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  f0:	20626d75 	rsbcs	r6, r2, r5, ror sp
  f4:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  f8:	613d6863 	teqvs	sp, r3, ror #16
  fc:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 100:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 104:	4f2d2067 	svcmi	0x002d2067
 108:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 10c:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 110:	50003939 	andpl	r3, r0, r9, lsr r9
 114:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; 0 <startup-0x20000000>
 118:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 11c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 120:	70615f74 	rsbvc	r5, r1, r4, ror pc
 124:	47740070 			; <UNDEFINED> instruction: 0x47740070
 128:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 12c:	00797274 	rsbseq	r7, r9, r4, ror r2
 130:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 134:	00707574 	rsbseq	r7, r0, r4, ror r5
 138:	6e69616d 	powvsez	f6, f1, #5.0
 13c:	424f5000 	submi	r5, pc, #0
 140:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 144:	7a697300 	bvc	1a5cd4c <startup-0x1e5a32b4>
 148:	70797465 	rsbsvc	r7, r9, r5, ror #8
 14c:	6f700065 	svcvs	0x00700065
 150:	64005873 	strvs	r5, [r0], #-2163	; 0xfffff78d
 154:	00587269 	subseq	r7, r8, r9, ror #4
 158:	506d756e 	rsbpl	r7, sp, lr, ror #10
 15c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 160:	4f500073 	svcmi	0x00500073
 164:	00544e49 	subseq	r4, r4, r9, asr #28
 168:	6a624f74 	bvs	1893f40 <startup-0x1e76c0c0>
 16c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 170:	61625f65 	cmnvs	r2, r5, ror #30
 174:	62006c6c 	andvs	r6, r0, #108, 24	; 0x6c00
 178:	5f6c6c61 	svcpl	0x006c6c61
 17c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffffe8 <paddle2+0xdffff770>
 180:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 184:	69687400 	stmdbvs	r8!, {sl, ip, sp, lr}^
 188:	3a430073 	bcc	10c035c <startup-0x1ef3fca4>
 18c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 190:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 194:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 198:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 19c:	6f746b73 	svcvs	0x00746b73
 1a0:	41442f70 	hvcmi	17136	; 0x42f0
 1a4:	37313054 			; <UNDEFINED> instruction: 0x37313054
 1a8:	646f432f 	strbtvs	r4, [pc], #-815	; 1b0 <startup-0x1ffffe50>
 1ac:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 1b0:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 1b4:	705f6c61 	subsvc	r6, pc, r1, ror #24
 1b8:	2f676e6f 	svccs	0x00676e6f
 1bc:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 1c0:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 1c4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1c8:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 1cc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1d0:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 5c <startup-0x1fffffa4>
 1d4:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 1d8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 1dc:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 122 <startup-0x1ffffede>	; <UNPREDICTABLE>
 1e0:	6f726b69 	svcvs	0x00726b69
 1e4:	61726700 	cmnvs	r2, r0, lsl #14
 1e8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1ec:	6165725f 	cmnvs	r5, pc, asr r2
 1f0:	61645f64 	cmnvs	r4, r4, ror #30
 1f4:	70006174 	andvc	r6, r0, r4, ror r1
 1f8:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 1fc:	6c657300 	stclvs	3, cr7, [r5], #-0
 200:	5f746365 	svcpl	0x00746365
 204:	72746f63 	rsbsvc	r6, r4, #396	; 0x18c
 208:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 20c:	72670072 	rsbvc	r0, r7, #114	; 0x72
 210:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 214:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 218:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 21c:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 220:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 224:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 228:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff8cf <paddle2+0xdffff057>
 22c:	736e3030 	cmnvc	lr, #48	; 0x30
 230:	61726700 	cmnvs	r2, r0, lsl #14
 234:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 238:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 23c:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 240:	00796461 	rsbseq	r6, r9, r1, ror #8
 244:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff809 <paddle2+0xdfffef91>
 248:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 24c:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 250:	2f737570 	svccs	0x00737570
 254:	6b736544 	blvs	1cd976c <startup-0x1e326894>
 258:	2f706f74 	svccs	0x00706f74
 25c:	30544144 	subscc	r4, r4, r4, asr #2
 260:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 264:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 268:	2f657469 	svccs	0x00657469
 26c:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 270:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 274:	72672f67 	rsbvc	r2, r7, #412	; 0x19c
 278:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 27c:	00632e63 	rsbeq	r2, r3, r3, ror #28
 280:	6b73616d 	blvs	1cd883c <startup-0x1e3277c4>
 284:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 288:	745f3874 	ldrbvc	r3, [pc], #-2164	; 290 <startup-0x1ffffd70>
 28c:	61726700 	cmnvs	r2, r0, lsl #14
 290:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 294:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 298:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
 29c:	00706d65 	rsbseq	r6, r0, r5, ror #26
 2a0:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 2a4:	72670078 	rsbvc	r0, r7, #120	; 0x78
 2a8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2ac:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2b0:	67006461 	strvs	r6, [r0, -r1, ror #8]
 2b4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2b8:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 2bc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 2c0:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 2c4:	72670061 	rsbvc	r0, r7, #97	; 0x61
 2c8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2cc:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 2d0:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 2d4:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 2d8:	70007465 	andvc	r7, r0, r5, ror #8
 2dc:	00656761 	rsbeq	r6, r5, r1, ror #14
 2e0:	70617267 	rsbvc	r7, r1, r7, ror #4
 2e4:	5f636968 	svcpl	0x00636968
 2e8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 2ec:	7a696c61 	bvc	1a5b478 <startup-0x1e5a4b88>
 2f0:	61760065 	cmnvs	r6, r5, rrx
 2f4:	0065756c 	rsbeq	r7, r5, ip, ror #10
 2f8:	70617267 	rsbvc	r7, r1, r7, ror #4
 2fc:	5f636968 	svcpl	0x00636968
 300:	61656c63 	cmnvs	r5, r3, ror #24
 304:	63735f72 	cmnvs	r3, #456	; 0x1c8
 308:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 30c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 310:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 256 <startup-0x1ffffdaa>	; <UNPREDICTABLE>
 314:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 318:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
 31c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 154 <startup-0x1ffffeac>
 320:	0072656c 	rsbseq	r6, r2, ip, ror #10
 324:	5f746573 	svcpl	0x00746573
 328:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 32c:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 330:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 334:	2f3a4300 	svccs	0x003a4300
 338:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 33c:	61482f73 	hvcvs	33523	; 0x82f3
 340:	7375706d 	cmnvc	r5, #109	; 0x6d
 344:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 348:	706f746b 	rsbvc	r7, pc, fp, ror #8
 34c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 350:	2f373130 	svccs	0x00373130
 354:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 358:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 35c:	6165722f 	cmnvs	r5, pc, lsr #4
 360:	6f705f6c 	svcvs	0x00705f6c
 364:	6f2f676e 	svcvs	0x002f676e
 368:	63656a62 	cmnvs	r5, #401408	; 0x62000
 36c:	00632e74 	rsbeq	r2, r3, r4, ror lr
 370:	61656c63 	cmnvs	r5, r3, ror #24
 374:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 378:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 37c:	61726400 	cmnvs	r2, r0, lsl #8
 380:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 384:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 388:	736e7500 	cmnvc	lr, #0, 10
 38c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 390:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 394:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 398:	5f79616c 	svcpl	0x0079616c
 39c:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 3a0:	3a430073 	bcc	10c0574 <startup-0x1ef3fa8c>
 3a4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 3a8:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 3ac:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 3b0:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 3b4:	6f746b73 	svcvs	0x00746b73
 3b8:	41442f70 	hvcmi	17136	; 0x42f0
 3bc:	37313054 			; <UNDEFINED> instruction: 0x37313054
 3c0:	646f432f 	strbtvs	r4, [pc], #-815	; 3c8 <startup-0x1ffffc38>
 3c4:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 3c8:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 3cc:	705f6c61 	subsvc	r6, pc, r1, ror #24
 3d0:	2f676e6f 	svccs	0x00676e6f
 3d4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 3d8:	00632e72 	rsbeq	r2, r3, r2, ror lr
 3dc:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 3e0:	6461705f 	strbtvs	r7, [r1], #-95	; 0xffffffa1
 3e4:	00656c64 	rsbeq	r6, r5, r4, ror #24
 3e8:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 3ec:	0031656c 	eorseq	r6, r1, ip, ror #10
 3f0:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 3f4:	0032656c 	eorseq	r6, r2, ip, ror #10
 3f8:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 3fc:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
 400:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 404:	00797274 	rsbseq	r7, r9, r4, ror r2
 408:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff9cd <paddle2+0xdffff155>
 40c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 410:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 414:	2f737570 	svccs	0x00737570
 418:	6b736544 	blvs	1cd9930 <startup-0x1e3266d0>
 41c:	2f706f74 	svccs	0x00706f74
 420:	30544144 	subscc	r4, r4, r4, asr #2
 424:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 428:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 42c:	2f657469 	svccs	0x00657469
 430:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 434:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 438:	61702f67 	cmnvs	r0, r7, ror #30
 43c:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 440:	Address 0x00000440 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	00000034 	andeq	r0, r0, r4, lsr r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	100e4101 	andne	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	2000005c 	andcs	r0, r0, ip, asr r0
  78:	00000058 	andeq	r0, r0, r8, asr r0
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	0000000c 	andeq	r0, r0, ip
  90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  94:	7c020001 	stcvc	0, cr0, [r2], {1}
  98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	0000008c 	andeq	r0, r0, ip, lsl #1
  a4:	200000b4 	strhcs	r0, [r0], -r4
  a8:	00000038 	andeq	r0, r0, r8, lsr r0
  ac:	40080e41 	andmi	r0, r8, r1, asr #28
  b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b4:	100e4101 	andne	r4, lr, r1, lsl #2
  b8:	00070d41 	andeq	r0, r7, r1, asr #26
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	0000008c 	andeq	r0, r0, ip, lsl #1
  c4:	200000ec 	andcs	r0, r0, ip, ror #1
  c8:	00000034 	andeq	r0, r0, r4, lsr r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	100e4101 	andne	r4, lr, r1, lsl #2
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	0000008c 	andeq	r0, r0, ip, lsl #1
  e4:	20000120 	andcs	r0, r0, r0, lsr #2
  e8:	0000006a 	andeq	r0, r0, sl, rrx
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	0000008c 	andeq	r0, r0, ip, lsl #1
 104:	2000018a 	andcs	r0, r0, sl, lsl #3
 108:	00000072 	andeq	r0, r0, r2, ror r0
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	100e4101 	andne	r4, lr, r1, lsl #2
 118:	00070d41 	andeq	r0, r7, r1, asr #26
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	0000008c 	andeq	r0, r0, ip, lsl #1
 124:	200001fc 	strdcs	r0, [r0], -ip
 128:	00000090 	muleq	r0, r0, r0
 12c:	40080e41 	andmi	r0, r8, r1, asr #28
 130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 134:	180e4101 	stmdane	lr, {r0, r8, lr}
 138:	00070d41 	andeq	r0, r7, r1, asr #26
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	0000008c 	andeq	r0, r0, ip, lsl #1
 144:	2000028c 	andcs	r0, r0, ip, lsl #5
 148:	00000080 	andeq	r0, r0, r0, lsl #1
 14c:	40080e41 	andmi	r0, r8, r1, asr #28
 150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 154:	100e4101 	andne	r4, lr, r1, lsl #2
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	0000008c 	andeq	r0, r0, ip, lsl #1
 164:	2000030c 	andcs	r0, r0, ip, lsl #6
 168:	00000040 	andeq	r0, r0, r0, asr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 174:	100e4101 	andne	r4, lr, r1, lsl #2
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	0000008c 	andeq	r0, r0, ip, lsl #1
 184:	2000034c 	andcs	r0, r0, ip, asr #6
 188:	00000046 	andeq	r0, r0, r6, asr #32
 18c:	40080e41 	andmi	r0, r8, r1, asr #28
 190:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 194:	100e4101 	andne	r4, lr, r1, lsl #2
 198:	00070d41 	andeq	r0, r7, r1, asr #26
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1a4:	20000392 	mulcs	r0, r2, r3
 1a8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	100e4101 	andne	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1c4:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
 1c8:	00000056 	andeq	r0, r0, r6, asr r0
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	0000008c 	andeq	r0, r0, ip, lsl #1
 1e0:	20000412 	andcs	r0, r0, r2, lsl r4
 1e4:	00000058 	andeq	r0, r0, r8, asr r0
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	100e4101 	andne	r4, lr, r1, lsl #2
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	00000020 	andeq	r0, r0, r0, lsr #32
 1fc:	0000008c 	andeq	r0, r0, ip, lsl #1
 200:	2000046a 	andcs	r0, r0, sl, ror #8
 204:	00000196 	muleq	r0, r6, r1
 208:	400c0e41 	andmi	r0, ip, r1, asr #28
 20c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 210:	018e4002 	orreq	r4, lr, r2
 214:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 218:	0000070d 	andeq	r0, r0, sp, lsl #14
 21c:	0000000c 	andeq	r0, r0, ip
 220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 224:	7c020001 	stcvc	0, cr0, [r2], {1}
 228:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 22c:	0000001c 	andeq	r0, r0, ip, lsl r0
 230:	0000021c 	andeq	r0, r0, ip, lsl r2
 234:	20000600 	andcs	r0, r0, r0, lsl #12
 238:	0000005e 	andeq	r0, r0, lr, asr r0
 23c:	40080e41 	andmi	r0, r8, r1, asr #28
 240:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 244:	180e4101 	stmdane	lr, {r0, r8, lr}
 248:	00070d41 	andeq	r0, r7, r1, asr #26
 24c:	0000001c 	andeq	r0, r0, ip, lsl r0
 250:	0000021c 	andeq	r0, r0, ip, lsl r2
 254:	2000065e 	andcs	r0, r0, lr, asr r6
 258:	0000005e 	andeq	r0, r0, lr, asr r0
 25c:	40080e41 	andmi	r0, r8, r1, asr #28
 260:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 264:	180e4101 	stmdane	lr, {r0, r8, lr}
 268:	00070d41 	andeq	r0, r7, r1, asr #26
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	0000021c 	andeq	r0, r0, ip, lsl r2
 274:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
 278:	00000020 	andeq	r0, r0, r0, lsr #32
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	180e4101 	stmdane	lr, {r0, r8, lr}
 288:	00070d41 	andeq	r0, r7, r1, asr #26
 28c:	0000000c 	andeq	r0, r0, ip
 290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 294:	7c020001 	stcvc	0, cr0, [r2], {1}
 298:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	0000028c 	andeq	r0, r0, ip, lsl #5
 2a4:	200006dc 	ldrdcs	r0, [r0], -ip
 2a8:	00000044 	andeq	r0, r0, r4, asr #32
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	0000028c 	andeq	r0, r0, ip, lsl #5
 2c0:	20000720 	andcs	r0, r0, r0, lsr #14
 2c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	100e4101 	andne	r4, lr, r1, lsl #2
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	0000028c 	andeq	r0, r0, ip, lsl #5
 2e0:	2000074c 	andcs	r0, r0, ip, asr #14
 2e4:	00000018 	andeq	r0, r0, r8, lsl r0
 2e8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f0:	100e4101 	andne	r4, lr, r1, lsl #2
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	00000018 	andeq	r0, r0, r8, lsl r0
 2fc:	0000028c 	andeq	r0, r0, ip, lsl #5
 300:	20000764 	andcs	r0, r0, r4, ror #14
 304:	00000012 	andeq	r0, r0, r2, lsl r0
 308:	40080e41 	andmi	r0, r8, r1, asr #28
 30c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 310:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 314:	0000000c 	andeq	r0, r0, ip
 318:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 31c:	7c020001 	stcvc	0, cr0, [r2], {1}
 320:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	00000314 	andeq	r0, r0, r4, lsl r3
 32c:	20000778 	andcs	r0, r0, r8, ror r7
 330:	0000004e 	andeq	r0, r0, lr, asr #32
 334:	40080e41 	andmi	r0, r8, r1, asr #28
 338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 33c:	100e4101 	andne	r4, lr, r1, lsl #2
 340:	00070d41 	andeq	r0, r7, r1, asr #26
