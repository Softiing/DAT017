
./Debug/real_pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f828 	bl	20000058 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	// Setup display
	*GPIO_E_MODER = 0x55555555;
20000014:	4b0b      	ldr	r3, [pc, #44]	; (20000044 <init_app+0x34>)
20000016:	4a0c      	ldr	r2, [pc, #48]	; (20000048 <init_app+0x38>)
20000018:	601a      	str	r2, [r3, #0]
	
	// Setup for keypad
	*GPIO_D_MODER = 0x55000000;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <init_app+0x3c>)
2000001c:	22aa      	movs	r2, #170	; 0xaa
2000001e:	05d2      	lsls	r2, r2, #23
20000020:	601a      	str	r2, [r3, #0]
	*GPIO_D_OTYPER &= 0x0000FFFF;   
20000022:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <init_app+0x40>)
20000024:	4a0a      	ldr	r2, [pc, #40]	; (20000050 <init_app+0x40>)
20000026:	8812      	ldrh	r2, [r2, #0]
20000028:	b292      	uxth	r2, r2
2000002a:	801a      	strh	r2, [r3, #0]
	*GPIO_D_OTYPER |= 0x00000000;     
2000002c:	4b08      	ldr	r3, [pc, #32]	; (20000050 <init_app+0x40>)
2000002e:	4a08      	ldr	r2, [pc, #32]	; (20000050 <init_app+0x40>)
20000030:	8812      	ldrh	r2, [r2, #0]
20000032:	b292      	uxth	r2, r2
20000034:	801a      	strh	r2, [r3, #0]
	*GPIO_D_PUPDR = 0x00AA0000;    
20000036:	4b07      	ldr	r3, [pc, #28]	; (20000054 <init_app+0x44>)
20000038:	22aa      	movs	r2, #170	; 0xaa
2000003a:	0412      	lsls	r2, r2, #16
2000003c:	601a      	str	r2, [r3, #0]
}
2000003e:	46c0      	nop			; (mov r8, r8)
20000040:	46bd      	mov	sp, r7
20000042:	bd80      	pop	{r7, pc}
20000044:	40021000 	andmi	r1, r2, r0
20000048:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000004c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000050:	40020c04 	andmi	r0, r2, r4, lsl #24
20000054:	40020c0c 	andmi	r0, r2, ip, lsl #24

20000058 <main>:
// Reference all game objects
extern OBJECT ball;
extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void main(void) {
20000058:	b580      	push	{r7, lr}
2000005a:	b086      	sub	sp, #24
2000005c:	af00      	add	r7, sp, #0
	// Load all game objects
	POBJECT p = &ball;
2000005e:	4b3d      	ldr	r3, [pc, #244]	; (20000154 <main+0xfc>)
20000060:	613b      	str	r3, [r7, #16]
	POBJECT pl = &leftPaddle;
20000062:	4b3d      	ldr	r3, [pc, #244]	; (20000158 <main+0x100>)
20000064:	60fb      	str	r3, [r7, #12]
	POBJECT pr = &rightPaddle;
20000066:	4b3d      	ldr	r3, [pc, #244]	; (2000015c <main+0x104>)
20000068:	60bb      	str	r3, [r7, #8]
	
	init_app();
2000006a:	f7ff ffd1 	bl	20000010 <init_app>
	graphic_initialize();
2000006e:	f000 faf3 	bl	20000658 <graphic_initialize>
  #ifndef SIMULATOR
	graphic_clear_screen();
20000072:	f000 fb1f 	bl	200006b4 <graphic_clear_screen>
  #endif
	
	// Init asciidisplay
	ascii_init();
20000076:	f000 ff35 	bl	20000ee4 <ascii_init>
	graphics_ctrl_bit_clear(B_SELECT);
2000007a:	2004      	movs	r0, #4
2000007c:	f000 f984 	bl	20000388 <graphics_ctrl_bit_clear>
	
	// Set speed for ball
	p->set_speed(p, 4, 4);
20000080:	693b      	ldr	r3, [r7, #16]
20000082:	6a1b      	ldr	r3, [r3, #32]
20000084:	6938      	ldr	r0, [r7, #16]
20000086:	2204      	movs	r2, #4
20000088:	2104      	movs	r1, #4
2000008a:	4798      	blx	r3
	
	// Game loop
	while(1) {
		// Update from keypad
		unsigned char *pressedKeys = keyb();
2000008c:	f000 fd4a 	bl	20000b24 <keyb>
20000090:	0003      	movs	r3, r0
20000092:	607b      	str	r3, [r7, #4]
		pl->set_speed(pl,0,0);
20000094:	68fb      	ldr	r3, [r7, #12]
20000096:	6a1b      	ldr	r3, [r3, #32]
20000098:	68f8      	ldr	r0, [r7, #12]
2000009a:	2200      	movs	r2, #0
2000009c:	2100      	movs	r1, #0
2000009e:	4798      	blx	r3
		pr->set_speed(pr,0,0);
200000a0:	68bb      	ldr	r3, [r7, #8]
200000a2:	6a1b      	ldr	r3, [r3, #32]
200000a4:	68b8      	ldr	r0, [r7, #8]
200000a6:	2200      	movs	r2, #0
200000a8:	2100      	movs	r1, #0
200000aa:	4798      	blx	r3
		for(unsigned char i = 0; i < 4; i++) {
200000ac:	2317      	movs	r3, #23
200000ae:	18fb      	adds	r3, r7, r3
200000b0:	2200      	movs	r2, #0
200000b2:	701a      	strb	r2, [r3, #0]
200000b4:	e035      	b.n	20000122 <main+0xca>
			switch(pressedKeys[i]) {
200000b6:	2317      	movs	r3, #23
200000b8:	18fb      	adds	r3, r7, r3
200000ba:	781b      	ldrb	r3, [r3, #0]
200000bc:	687a      	ldr	r2, [r7, #4]
200000be:	18d3      	adds	r3, r2, r3
200000c0:	781b      	ldrb	r3, [r3, #0]
200000c2:	2b04      	cmp	r3, #4
200000c4:	d010      	beq.n	200000e8 <main+0x90>
200000c6:	dc02      	bgt.n	200000ce <main+0x76>
200000c8:	2b01      	cmp	r3, #1
200000ca:	d005      	beq.n	200000d8 <main+0x80>
200000cc:	e022      	b.n	20000114 <main+0xbc>
200000ce:	2b0c      	cmp	r3, #12
200000d0:	d011      	beq.n	200000f6 <main+0x9e>
200000d2:	2b0d      	cmp	r3, #13
200000d4:	d017      	beq.n	20000106 <main+0xae>
200000d6:	e01d      	b.n	20000114 <main+0xbc>
				case 0x01: pl->set_speed(pl,0,-5); break;
200000d8:	68fb      	ldr	r3, [r7, #12]
200000da:	6a1b      	ldr	r3, [r3, #32]
200000dc:	2205      	movs	r2, #5
200000de:	4252      	negs	r2, r2
200000e0:	68f8      	ldr	r0, [r7, #12]
200000e2:	2100      	movs	r1, #0
200000e4:	4798      	blx	r3
200000e6:	e015      	b.n	20000114 <main+0xbc>
				case 0x04: pl->set_speed(pl,0,5); break;
200000e8:	68fb      	ldr	r3, [r7, #12]
200000ea:	6a1b      	ldr	r3, [r3, #32]
200000ec:	68f8      	ldr	r0, [r7, #12]
200000ee:	2205      	movs	r2, #5
200000f0:	2100      	movs	r1, #0
200000f2:	4798      	blx	r3
200000f4:	e00e      	b.n	20000114 <main+0xbc>
				case 0x0C: pr->set_speed(pr,0,-5); break;
200000f6:	68bb      	ldr	r3, [r7, #8]
200000f8:	6a1b      	ldr	r3, [r3, #32]
200000fa:	2205      	movs	r2, #5
200000fc:	4252      	negs	r2, r2
200000fe:	68b8      	ldr	r0, [r7, #8]
20000100:	2100      	movs	r1, #0
20000102:	4798      	blx	r3
20000104:	e006      	b.n	20000114 <main+0xbc>
				case 0x0D: pr->set_speed(pr,0,5); break;
20000106:	68bb      	ldr	r3, [r7, #8]
20000108:	6a1b      	ldr	r3, [r3, #32]
2000010a:	68b8      	ldr	r0, [r7, #8]
2000010c:	2205      	movs	r2, #5
2000010e:	2100      	movs	r1, #0
20000110:	4798      	blx	r3
20000112:	46c0      	nop			; (mov r8, r8)
		for(unsigned char i = 0; i < 4; i++) {
20000114:	2317      	movs	r3, #23
20000116:	18fb      	adds	r3, r7, r3
20000118:	781a      	ldrb	r2, [r3, #0]
2000011a:	2317      	movs	r3, #23
2000011c:	18fb      	adds	r3, r7, r3
2000011e:	3201      	adds	r2, #1
20000120:	701a      	strb	r2, [r3, #0]
20000122:	2317      	movs	r3, #23
20000124:	18fb      	adds	r3, r7, r3
20000126:	781b      	ldrb	r3, [r3, #0]
20000128:	2b03      	cmp	r3, #3
2000012a:	d9c4      	bls.n	200000b6 <main+0x5e>
			}
		}
		
		// Move game objects
		p->move(p);
2000012c:	693b      	ldr	r3, [r7, #16]
2000012e:	69db      	ldr	r3, [r3, #28]
20000130:	693a      	ldr	r2, [r7, #16]
20000132:	0010      	movs	r0, r2
20000134:	4798      	blx	r3
		pl->move(pl);
20000136:	68fb      	ldr	r3, [r7, #12]
20000138:	69db      	ldr	r3, [r3, #28]
2000013a:	68fa      	ldr	r2, [r7, #12]
2000013c:	0010      	movs	r0, r2
2000013e:	4798      	blx	r3
		pr->move(pr);
20000140:	68bb      	ldr	r3, [r7, #8]
20000142:	69db      	ldr	r3, [r3, #28]
20000144:	68ba      	ldr	r2, [r7, #8]
20000146:	0010      	movs	r0, r2
20000148:	4798      	blx	r3
		delay_milli(30);
2000014a:	201e      	movs	r0, #30
2000014c:	f000 fc4e 	bl	200009ec <delay_milli>
	while(1) {
20000150:	e79c      	b.n	2000008c <main+0x34>
20000152:	46c0      	nop			; (mov r8, r8)
20000154:	2000107c 	andcs	r1, r0, ip, ror r0
20000158:	20001174 	andcs	r1, r0, r4, ror r1
2000015c:	20001198 	mulcs	r0, r8, r1

20000160 <move_ball>:
};

extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void move_ball(POBJECT this) {
20000160:	b590      	push	{r4, r7, lr}
20000162:	b091      	sub	sp, #68	; 0x44
20000164:	af00      	add	r7, sp, #0
20000166:	6078      	str	r0, [r7, #4]
	clear_object(this);
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	0018      	movs	r0, r3
2000016c:	f000 fbc7 	bl	200008fe <clear_object>
	
	// Move ball
	this->posX += this->dirX;
20000170:	687b      	ldr	r3, [r7, #4]
20000172:	68da      	ldr	r2, [r3, #12]
20000174:	687b      	ldr	r3, [r7, #4]
20000176:	685b      	ldr	r3, [r3, #4]
20000178:	18d2      	adds	r2, r2, r3
2000017a:	687b      	ldr	r3, [r7, #4]
2000017c:	60da      	str	r2, [r3, #12]
	this->posY += this->dirY;
2000017e:	687b      	ldr	r3, [r7, #4]
20000180:	691a      	ldr	r2, [r3, #16]
20000182:	687b      	ldr	r3, [r7, #4]
20000184:	689b      	ldr	r3, [r3, #8]
20000186:	18d2      	adds	r2, r2, r3
20000188:	687b      	ldr	r3, [r7, #4]
2000018a:	611a      	str	r2, [r3, #16]
	
	// Wall collisions
	if(this->posY < 0) {
2000018c:	687b      	ldr	r3, [r7, #4]
2000018e:	691b      	ldr	r3, [r3, #16]
20000190:	2b00      	cmp	r3, #0
20000192:	da08      	bge.n	200001a6 <move_ball+0x46>
		this->posY = 0;
20000194:	687b      	ldr	r3, [r7, #4]
20000196:	2200      	movs	r2, #0
20000198:	611a      	str	r2, [r3, #16]
		this->dirY = -this->dirY;
2000019a:	687b      	ldr	r3, [r7, #4]
2000019c:	689b      	ldr	r3, [r3, #8]
2000019e:	425a      	negs	r2, r3
200001a0:	687b      	ldr	r3, [r7, #4]
200001a2:	609a      	str	r2, [r3, #8]
200001a4:	e00b      	b.n	200001be <move_ball+0x5e>
	} else if(this->posY > 63) {
200001a6:	687b      	ldr	r3, [r7, #4]
200001a8:	691b      	ldr	r3, [r3, #16]
200001aa:	2b3f      	cmp	r3, #63	; 0x3f
200001ac:	dd07      	ble.n	200001be <move_ball+0x5e>
		this->posY = 63;
200001ae:	687b      	ldr	r3, [r7, #4]
200001b0:	223f      	movs	r2, #63	; 0x3f
200001b2:	611a      	str	r2, [r3, #16]
		this->dirY = -this->dirY;
200001b4:	687b      	ldr	r3, [r7, #4]
200001b6:	689b      	ldr	r3, [r3, #8]
200001b8:	425a      	negs	r2, r3
200001ba:	687b      	ldr	r3, [r7, #4]
200001bc:	609a      	str	r2, [r3, #8]
	}
	
	// Define left and right paddle
	POBJECT lp = &leftPaddle;
200001be:	4b60      	ldr	r3, [pc, #384]	; (20000340 <move_ball+0x1e0>)
200001c0:	637b      	str	r3, [r7, #52]	; 0x34
	POBJECT rp = &rightPaddle;
200001c2:	4b60      	ldr	r3, [pc, #384]	; (20000344 <move_ball+0x1e4>)
200001c4:	633b      	str	r3, [r7, #48]	; 0x30
	
	// Collision left paddle
	if(this->posX <= lp->posX + lp->geo->sizeX) {
200001c6:	687b      	ldr	r3, [r7, #4]
200001c8:	68da      	ldr	r2, [r3, #12]
200001ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001cc:	68d9      	ldr	r1, [r3, #12]
200001ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001d0:	681b      	ldr	r3, [r3, #0]
200001d2:	685b      	ldr	r3, [r3, #4]
200001d4:	18cb      	adds	r3, r1, r3
200001d6:	429a      	cmp	r2, r3
200001d8:	dc54      	bgt.n	20000284 <move_ball+0x124>
		if((this->posY >= lp->posY) && (this->posY <= lp->posY + lp->geo->sizeY)) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	691a      	ldr	r2, [r3, #16]
200001de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001e0:	691b      	ldr	r3, [r3, #16]
200001e2:	429a      	cmp	r2, r3
200001e4:	db18      	blt.n	20000218 <move_ball+0xb8>
200001e6:	687b      	ldr	r3, [r7, #4]
200001e8:	691a      	ldr	r2, [r3, #16]
200001ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001ec:	6919      	ldr	r1, [r3, #16]
200001ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001f0:	681b      	ldr	r3, [r3, #0]
200001f2:	689b      	ldr	r3, [r3, #8]
200001f4:	18cb      	adds	r3, r1, r3
200001f6:	429a      	cmp	r2, r3
200001f8:	dc0e      	bgt.n	20000218 <move_ball+0xb8>
			this->posX = lp->posX + lp->geo->sizeX + 1;
200001fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200001fc:	68da      	ldr	r2, [r3, #12]
200001fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000200:	681b      	ldr	r3, [r3, #0]
20000202:	685b      	ldr	r3, [r3, #4]
20000204:	18d3      	adds	r3, r2, r3
20000206:	1c5a      	adds	r2, r3, #1
20000208:	687b      	ldr	r3, [r7, #4]
2000020a:	60da      	str	r2, [r3, #12]
			this->dirX = -this->dirX;
2000020c:	687b      	ldr	r3, [r7, #4]
2000020e:	685b      	ldr	r3, [r3, #4]
20000210:	425a      	negs	r2, r3
20000212:	687b      	ldr	r3, [r7, #4]
20000214:	605a      	str	r2, [r3, #4]
20000216:	e035      	b.n	20000284 <move_ball+0x124>
		} else {
			// Left player lost
			// <Write to screen>
			ascii_ctrl_bit_set(2);
20000218:	2002      	movs	r0, #2
2000021a:	f000 fcd7 	bl	20000bcc <ascii_ctrl_bit_set>
			goToXY(1,1);
2000021e:	2101      	movs	r1, #1
20000220:	2001      	movs	r0, #1
20000222:	f000 fe99 	bl	20000f58 <goToXY>
			char *s;
			char test1[] = "Right player won! ";
20000226:	231c      	movs	r3, #28
20000228:	18fb      	adds	r3, r7, r3
2000022a:	4a47      	ldr	r2, [pc, #284]	; (20000348 <move_ball+0x1e8>)
2000022c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000022e:	c313      	stmia	r3!, {r0, r1, r4}
20000230:	6811      	ldr	r1, [r2, #0]
20000232:	6019      	str	r1, [r3, #0]
20000234:	8891      	ldrh	r1, [r2, #4]
20000236:	8099      	strh	r1, [r3, #4]
20000238:	7992      	ldrb	r2, [r2, #6]
2000023a:	719a      	strb	r2, [r3, #6]
			s = test1;
2000023c:	231c      	movs	r3, #28
2000023e:	18fb      	adds	r3, r7, r3
20000240:	63fb      	str	r3, [r7, #60]	; 0x3c
			while(*s) {
20000242:	e006      	b.n	20000252 <move_ball+0xf2>
				ascii_write_char(*s++);
20000244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000246:	1c5a      	adds	r2, r3, #1
20000248:	63fa      	str	r2, [r7, #60]	; 0x3c
2000024a:	781b      	ldrb	r3, [r3, #0]
2000024c:	0018      	movs	r0, r3
2000024e:	f000 fe65 	bl	20000f1c <ascii_write_char>
			while(*s) {
20000252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000254:	781b      	ldrb	r3, [r3, #0]
20000256:	2b00      	cmp	r3, #0
20000258:	d1f4      	bne.n	20000244 <move_ball+0xe4>
			}
			graphics_ctrl_bit_clear(B_SELECT);
2000025a:	2004      	movs	r0, #4
2000025c:	f000 f894 	bl	20000388 <graphics_ctrl_bit_clear>
			// </Write to screen>
			delay_milli(500);
20000260:	23fa      	movs	r3, #250	; 0xfa
20000262:	005b      	lsls	r3, r3, #1
20000264:	0018      	movs	r0, r3
20000266:	f000 fbc1 	bl	200009ec <delay_milli>
			this->posX = 63;
2000026a:	687b      	ldr	r3, [r7, #4]
2000026c:	223f      	movs	r2, #63	; 0x3f
2000026e:	60da      	str	r2, [r3, #12]
			this->dirX = -this->dirX;
20000270:	687b      	ldr	r3, [r7, #4]
20000272:	685b      	ldr	r3, [r3, #4]
20000274:	425a      	negs	r2, r3
20000276:	687b      	ldr	r3, [r7, #4]
20000278:	605a      	str	r2, [r3, #4]
			this->dirY = -this->dirY;
2000027a:	687b      	ldr	r3, [r7, #4]
2000027c:	689b      	ldr	r3, [r3, #8]
2000027e:	425a      	negs	r2, r3
20000280:	687b      	ldr	r3, [r7, #4]
20000282:	609a      	str	r2, [r3, #8]
		}
	}
	
	// Collision right paddle
	if(this->posX >= rp->posX) {
20000284:	687b      	ldr	r3, [r7, #4]
20000286:	68da      	ldr	r2, [r3, #12]
20000288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000028a:	68db      	ldr	r3, [r3, #12]
2000028c:	429a      	cmp	r2, r3
2000028e:	db4e      	blt.n	2000032e <move_ball+0x1ce>
		if((this->posY >= rp->posY) && (this->posY <= rp->posY + rp->geo->sizeY)) {
20000290:	687b      	ldr	r3, [r7, #4]
20000292:	691a      	ldr	r2, [r3, #16]
20000294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000296:	691b      	ldr	r3, [r3, #16]
20000298:	429a      	cmp	r2, r3
2000029a:	db14      	blt.n	200002c6 <move_ball+0x166>
2000029c:	687b      	ldr	r3, [r7, #4]
2000029e:	691a      	ldr	r2, [r3, #16]
200002a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200002a2:	6919      	ldr	r1, [r3, #16]
200002a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200002a6:	681b      	ldr	r3, [r3, #0]
200002a8:	689b      	ldr	r3, [r3, #8]
200002aa:	18cb      	adds	r3, r1, r3
200002ac:	429a      	cmp	r2, r3
200002ae:	dc0a      	bgt.n	200002c6 <move_ball+0x166>
			this->posX = rp->posX - 1;
200002b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200002b2:	68db      	ldr	r3, [r3, #12]
200002b4:	1e5a      	subs	r2, r3, #1
200002b6:	687b      	ldr	r3, [r7, #4]
200002b8:	60da      	str	r2, [r3, #12]
			this->dirX = -this->dirX;
200002ba:	687b      	ldr	r3, [r7, #4]
200002bc:	685b      	ldr	r3, [r3, #4]
200002be:	425a      	negs	r2, r3
200002c0:	687b      	ldr	r3, [r7, #4]
200002c2:	605a      	str	r2, [r3, #4]
200002c4:	e033      	b.n	2000032e <move_ball+0x1ce>
		} else {
			// Right player lost
			// <Write to screen>
			ascii_ctrl_bit_set(2);
200002c6:	2002      	movs	r0, #2
200002c8:	f000 fc80 	bl	20000bcc <ascii_ctrl_bit_set>
			goToXY(1,1);
200002cc:	2101      	movs	r1, #1
200002ce:	2001      	movs	r0, #1
200002d0:	f000 fe42 	bl	20000f58 <goToXY>
			char *s;
			char test1[] = "Left player won!";
200002d4:	2308      	movs	r3, #8
200002d6:	18fb      	adds	r3, r7, r3
200002d8:	4a1c      	ldr	r2, [pc, #112]	; (2000034c <move_ball+0x1ec>)
200002da:	ca13      	ldmia	r2!, {r0, r1, r4}
200002dc:	c313      	stmia	r3!, {r0, r1, r4}
200002de:	6811      	ldr	r1, [r2, #0]
200002e0:	6019      	str	r1, [r3, #0]
200002e2:	7912      	ldrb	r2, [r2, #4]
200002e4:	711a      	strb	r2, [r3, #4]
			s = test1;
200002e6:	2308      	movs	r3, #8
200002e8:	18fb      	adds	r3, r7, r3
200002ea:	63bb      	str	r3, [r7, #56]	; 0x38
			while(*s) {
200002ec:	e006      	b.n	200002fc <move_ball+0x19c>
				ascii_write_char(*s++);
200002ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200002f0:	1c5a      	adds	r2, r3, #1
200002f2:	63ba      	str	r2, [r7, #56]	; 0x38
200002f4:	781b      	ldrb	r3, [r3, #0]
200002f6:	0018      	movs	r0, r3
200002f8:	f000 fe10 	bl	20000f1c <ascii_write_char>
			while(*s) {
200002fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200002fe:	781b      	ldrb	r3, [r3, #0]
20000300:	2b00      	cmp	r3, #0
20000302:	d1f4      	bne.n	200002ee <move_ball+0x18e>
			}
			graphics_ctrl_bit_clear(B_SELECT);
20000304:	2004      	movs	r0, #4
20000306:	f000 f83f 	bl	20000388 <graphics_ctrl_bit_clear>
			// </Write to screen>
			
			delay_milli(500);
2000030a:	23fa      	movs	r3, #250	; 0xfa
2000030c:	005b      	lsls	r3, r3, #1
2000030e:	0018      	movs	r0, r3
20000310:	f000 fb6c 	bl	200009ec <delay_milli>
			this->posX = 63;
20000314:	687b      	ldr	r3, [r7, #4]
20000316:	223f      	movs	r2, #63	; 0x3f
20000318:	60da      	str	r2, [r3, #12]
			this->dirX = -this->dirX;
2000031a:	687b      	ldr	r3, [r7, #4]
2000031c:	685b      	ldr	r3, [r3, #4]
2000031e:	425a      	negs	r2, r3
20000320:	687b      	ldr	r3, [r7, #4]
20000322:	605a      	str	r2, [r3, #4]
			this->dirY = -this->dirY;
20000324:	687b      	ldr	r3, [r7, #4]
20000326:	689b      	ldr	r3, [r3, #8]
20000328:	425a      	negs	r2, r3
2000032a:	687b      	ldr	r3, [r7, #4]
2000032c:	609a      	str	r2, [r3, #8]
		}
	}
	
	this->draw(this);
2000032e:	687b      	ldr	r3, [r7, #4]
20000330:	695b      	ldr	r3, [r3, #20]
20000332:	687a      	ldr	r2, [r7, #4]
20000334:	0010      	movs	r0, r2
20000336:	4798      	blx	r3
20000338:	46c0      	nop			; (mov r8, r8)
2000033a:	46bd      	mov	sp, r7
2000033c:	b011      	add	sp, #68	; 0x44
2000033e:	bd90      	pop	{r4, r7, pc}
20000340:	20001174 	andcs	r1, r0, r4, ror r1
20000344:	20001198 	mulcs	r0, r8, r1
20000348:	200011c0 	andcs	r1, r0, r0, asr #3
2000034c:	200011d4 	ldrdcs	r1, [r0], -r4

20000350 <graphics_ctrl_bit_set>:
#include "GPIOE.h"


typedef unsigned char uint8_t;

void graphics_ctrl_bit_set(uint8_t x){
20000350:	b580      	push	{r7, lr}
20000352:	b082      	sub	sp, #8
20000354:	af00      	add	r7, sp, #0
20000356:	0002      	movs	r2, r0
20000358:	1dfb      	adds	r3, r7, #7
2000035a:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= (x & ~B_SELECT);
2000035c:	4909      	ldr	r1, [pc, #36]	; (20000384 <graphics_ctrl_bit_set+0x34>)
2000035e:	4b09      	ldr	r3, [pc, #36]	; (20000384 <graphics_ctrl_bit_set+0x34>)
20000360:	781b      	ldrb	r3, [r3, #0]
20000362:	b2db      	uxtb	r3, r3
20000364:	b25a      	sxtb	r2, r3
20000366:	1dfb      	adds	r3, r7, #7
20000368:	781b      	ldrb	r3, [r3, #0]
2000036a:	b25b      	sxtb	r3, r3
2000036c:	2004      	movs	r0, #4
2000036e:	4383      	bics	r3, r0
20000370:	b25b      	sxtb	r3, r3
20000372:	4313      	orrs	r3, r2
20000374:	b25b      	sxtb	r3, r3
20000376:	b2db      	uxtb	r3, r3
20000378:	700b      	strb	r3, [r1, #0]
}
2000037a:	46c0      	nop			; (mov r8, r8)
2000037c:	46bd      	mov	sp, r7
2000037e:	b002      	add	sp, #8
20000380:	bd80      	pop	{r7, pc}
20000382:	46c0      	nop			; (mov r8, r8)
20000384:	40021014 	andmi	r1, r2, r4, lsl r0

20000388 <graphics_ctrl_bit_clear>:

void graphics_ctrl_bit_clear(uint8_t x){
20000388:	b580      	push	{r7, lr}
2000038a:	b082      	sub	sp, #8
2000038c:	af00      	add	r7, sp, #0
2000038e:	0002      	movs	r2, r0
20000390:	1dfb      	adds	r3, r7, #7
20000392:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ~x;
20000394:	4908      	ldr	r1, [pc, #32]	; (200003b8 <graphics_ctrl_bit_clear+0x30>)
20000396:	4b08      	ldr	r3, [pc, #32]	; (200003b8 <graphics_ctrl_bit_clear+0x30>)
20000398:	781b      	ldrb	r3, [r3, #0]
2000039a:	b2db      	uxtb	r3, r3
2000039c:	b25b      	sxtb	r3, r3
2000039e:	1dfa      	adds	r2, r7, #7
200003a0:	7812      	ldrb	r2, [r2, #0]
200003a2:	b252      	sxtb	r2, r2
200003a4:	43d2      	mvns	r2, r2
200003a6:	b252      	sxtb	r2, r2
200003a8:	4013      	ands	r3, r2
200003aa:	b25b      	sxtb	r3, r3
200003ac:	b2db      	uxtb	r3, r3
200003ae:	700b      	strb	r3, [r1, #0]
}
200003b0:	46c0      	nop			; (mov r8, r8)
200003b2:	46bd      	mov	sp, r7
200003b4:	b002      	add	sp, #8
200003b6:	bd80      	pop	{r7, pc}
200003b8:	40021014 	andmi	r1, r2, r4, lsl r0

200003bc <select_controller>:

void select_controller(uint8_t controller){
200003bc:	b580      	push	{r7, lr}
200003be:	b082      	sub	sp, #8
200003c0:	af00      	add	r7, sp, #0
200003c2:	0002      	movs	r2, r0
200003c4:	1dfb      	adds	r3, r7, #7
200003c6:	701a      	strb	r2, [r3, #0]
    if(controller == 0) {
200003c8:	1dfb      	adds	r3, r7, #7
200003ca:	781b      	ldrb	r3, [r3, #0]
200003cc:	2b00      	cmp	r3, #0
200003ce:	d106      	bne.n	200003de <select_controller+0x22>
        graphics_ctrl_bit_clear(B_CS1);
200003d0:	2008      	movs	r0, #8
200003d2:	f7ff ffd9 	bl	20000388 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
200003d6:	2010      	movs	r0, #16
200003d8:	f7ff ffd6 	bl	20000388 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
    } else if(controller == B_CS2) {
        graphics_ctrl_bit_clear(B_CS1);
        graphics_ctrl_bit_set(B_CS2);
    }
}
200003dc:	e01f      	b.n	2000041e <select_controller+0x62>
    } else if(controller == (B_CS1 | B_CS2)) {
200003de:	1dfb      	adds	r3, r7, #7
200003e0:	781b      	ldrb	r3, [r3, #0]
200003e2:	2b18      	cmp	r3, #24
200003e4:	d106      	bne.n	200003f4 <select_controller+0x38>
        graphics_ctrl_bit_set(B_CS1);
200003e6:	2008      	movs	r0, #8
200003e8:	f7ff ffb2 	bl	20000350 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_set(B_CS2);
200003ec:	2010      	movs	r0, #16
200003ee:	f7ff ffaf 	bl	20000350 <graphics_ctrl_bit_set>
}
200003f2:	e014      	b.n	2000041e <select_controller+0x62>
    } else if(controller == B_CS1) {
200003f4:	1dfb      	adds	r3, r7, #7
200003f6:	781b      	ldrb	r3, [r3, #0]
200003f8:	2b08      	cmp	r3, #8
200003fa:	d106      	bne.n	2000040a <select_controller+0x4e>
        graphics_ctrl_bit_set(B_CS1);
200003fc:	2008      	movs	r0, #8
200003fe:	f7ff ffa7 	bl	20000350 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_clear(B_CS2);
20000402:	2010      	movs	r0, #16
20000404:	f7ff ffc0 	bl	20000388 <graphics_ctrl_bit_clear>
}
20000408:	e009      	b.n	2000041e <select_controller+0x62>
    } else if(controller == B_CS2) {
2000040a:	1dfb      	adds	r3, r7, #7
2000040c:	781b      	ldrb	r3, [r3, #0]
2000040e:	2b10      	cmp	r3, #16
20000410:	d105      	bne.n	2000041e <select_controller+0x62>
        graphics_ctrl_bit_clear(B_CS1);
20000412:	2008      	movs	r0, #8
20000414:	f7ff ffb8 	bl	20000388 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_set(B_CS2);
20000418:	2010      	movs	r0, #16
2000041a:	f7ff ff99 	bl	20000350 <graphics_ctrl_bit_set>
}
2000041e:	46c0      	nop			; (mov r8, r8)
20000420:	46bd      	mov	sp, r7
20000422:	b002      	add	sp, #8
20000424:	bd80      	pop	{r7, pc}

20000426 <graphic_wait_ready>:

void graphic_wait_ready(){
20000426:	b580      	push	{r7, lr}
20000428:	b082      	sub	sp, #8
2000042a:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_clear(B_E);
2000042c:	2040      	movs	r0, #64	; 0x40
2000042e:	f7ff ffab 	bl	20000388 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000432:	4b15      	ldr	r3, [pc, #84]	; (20000488 <graphic_wait_ready+0x62>)
20000434:	4a15      	ldr	r2, [pc, #84]	; (2000048c <graphic_wait_ready+0x66>)
20000436:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_RS);
20000438:	2001      	movs	r0, #1
2000043a:	f7ff ffa5 	bl	20000388 <graphics_ctrl_bit_clear>
    graphics_ctrl_bit_set(B_RW);
2000043e:	2002      	movs	r0, #2
20000440:	f7ff ff86 	bl	20000350 <graphics_ctrl_bit_set>
    delay_500ns();
20000444:	f000 fae1 	bl	20000a0a <delay_500ns>
    
    while(1) { // Wait for display not to be busy
        graphics_ctrl_bit_set(B_E);
20000448:	2040      	movs	r0, #64	; 0x40
2000044a:	f7ff ff81 	bl	20000350 <graphics_ctrl_bit_set>
        delay_500ns();
2000044e:	f000 fadc 	bl	20000a0a <delay_500ns>
		unsigned char busy = *GPIO_E_IDR_HIGH;
20000452:	4a0f      	ldr	r2, [pc, #60]	; (20000490 <graphic_wait_ready+0x6a>)
20000454:	1dfb      	adds	r3, r7, #7
20000456:	7812      	ldrb	r2, [r2, #0]
20000458:	701a      	strb	r2, [r3, #0]
        graphics_ctrl_bit_clear(B_E);
2000045a:	2040      	movs	r0, #64	; 0x40
2000045c:	f7ff ff94 	bl	20000388 <graphics_ctrl_bit_clear>
        delay_500ns();
20000460:	f000 fad3 	bl	20000a0a <delay_500ns>
        //unsigned char i = *GPIO_IDR_HIGH;
        if((busy & LCD_BUSY) == 0) {
20000464:	1dfb      	adds	r3, r7, #7
20000466:	781b      	ldrb	r3, [r3, #0]
20000468:	b25b      	sxtb	r3, r3
2000046a:	2b00      	cmp	r3, #0
2000046c:	da00      	bge.n	20000470 <graphic_wait_ready+0x4a>
    while(1) { // Wait for display not to be busy
2000046e:	e7eb      	b.n	20000448 <graphic_wait_ready+0x22>
            break;
20000470:	46c0      	nop			; (mov r8, r8)
        }
    }
    graphics_ctrl_bit_set(B_E);
20000472:	2040      	movs	r0, #64	; 0x40
20000474:	f7ff ff6c 	bl	20000350 <graphics_ctrl_bit_set>
    *GPIO_E_MODER = 0x55555555;
20000478:	4b03      	ldr	r3, [pc, #12]	; (20000488 <graphic_wait_ready+0x62>)
2000047a:	4a06      	ldr	r2, [pc, #24]	; (20000494 <graphic_wait_ready+0x6e>)
2000047c:	601a      	str	r2, [r3, #0]
    
}
2000047e:	46c0      	nop			; (mov r8, r8)
20000480:	46bd      	mov	sp, r7
20000482:	b002      	add	sp, #8
20000484:	bd80      	pop	{r7, pc}
20000486:	46c0      	nop			; (mov r8, r8)
20000488:	40021000 	andmi	r1, r2, r0
2000048c:	00005555 	andeq	r5, r0, r5, asr r5
20000490:	40021011 	andmi	r1, r2, r1, lsl r0
20000494:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000498 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000498:	b580      	push	{r7, lr}
2000049a:	b084      	sub	sp, #16
2000049c:	af00      	add	r7, sp, #0
2000049e:	0002      	movs	r2, r0
200004a0:	1dfb      	adds	r3, r7, #7
200004a2:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200004a4:	2040      	movs	r0, #64	; 0x40
200004a6:	f7ff ff6f 	bl	20000388 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
200004aa:	4b1b      	ldr	r3, [pc, #108]	; (20000518 <graphic_read+0x80>)
200004ac:	4a1b      	ldr	r2, [pc, #108]	; (2000051c <graphic_read+0x84>)
200004ae:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_set(B_RS | B_RW);
200004b0:	2003      	movs	r0, #3
200004b2:	f7ff ff4d 	bl	20000350 <graphics_ctrl_bit_set>
    select_controller(controller);
200004b6:	1dfb      	adds	r3, r7, #7
200004b8:	781b      	ldrb	r3, [r3, #0]
200004ba:	0018      	movs	r0, r3
200004bc:	f7ff ff7e 	bl	200003bc <select_controller>
    delay_500ns();
200004c0:	f000 faa3 	bl	20000a0a <delay_500ns>
    graphics_ctrl_bit_set(B_E);
200004c4:	2040      	movs	r0, #64	; 0x40
200004c6:	f7ff ff43 	bl	20000350 <graphics_ctrl_bit_set>
    delay_500ns();
200004ca:	f000 fa9e 	bl	20000a0a <delay_500ns>
    
    uint8_t RV = *GPIO_E_IDR_HIGH;
200004ce:	4a14      	ldr	r2, [pc, #80]	; (20000520 <graphic_read+0x88>)
200004d0:	230f      	movs	r3, #15
200004d2:	18fb      	adds	r3, r7, r3
200004d4:	7812      	ldrb	r2, [r2, #0]
200004d6:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200004d8:	2040      	movs	r0, #64	; 0x40
200004da:	f7ff ff55 	bl	20000388 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
200004de:	4b0e      	ldr	r3, [pc, #56]	; (20000518 <graphic_read+0x80>)
200004e0:	4a10      	ldr	r2, [pc, #64]	; (20000524 <graphic_read+0x8c>)
200004e2:	601a      	str	r2, [r3, #0]
    
    if(controller == B_CS1){
200004e4:	1dfb      	adds	r3, r7, #7
200004e6:	781b      	ldrb	r3, [r3, #0]
200004e8:	2b08      	cmp	r3, #8
200004ea:	d104      	bne.n	200004f6 <graphic_read+0x5e>
        select_controller(B_CS1);
200004ec:	2008      	movs	r0, #8
200004ee:	f7ff ff65 	bl	200003bc <select_controller>
        graphic_wait_ready();
200004f2:	f7ff ff98 	bl	20000426 <graphic_wait_ready>
    }
    
    if(controller == B_CS2){
200004f6:	1dfb      	adds	r3, r7, #7
200004f8:	781b      	ldrb	r3, [r3, #0]
200004fa:	2b10      	cmp	r3, #16
200004fc:	d104      	bne.n	20000508 <graphic_read+0x70>
        select_controller(B_CS2);
200004fe:	2010      	movs	r0, #16
20000500:	f7ff ff5c 	bl	200003bc <select_controller>
        graphic_wait_ready();
20000504:	f7ff ff8f 	bl	20000426 <graphic_wait_ready>
    }
    
    return RV;
20000508:	230f      	movs	r3, #15
2000050a:	18fb      	adds	r3, r7, r3
2000050c:	781b      	ldrb	r3, [r3, #0]
    
}
2000050e:	0018      	movs	r0, r3
20000510:	46bd      	mov	sp, r7
20000512:	b004      	add	sp, #16
20000514:	bd80      	pop	{r7, pc}
20000516:	46c0      	nop			; (mov r8, r8)
20000518:	40021000 	andmi	r1, r2, r0
2000051c:	00005555 	andeq	r5, r0, r5, asr r5
20000520:	40021011 	andmi	r1, r2, r1, lsl r0
20000524:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000528 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000528:	b580      	push	{r7, lr}
2000052a:	b082      	sub	sp, #8
2000052c:	af00      	add	r7, sp, #0
2000052e:	0002      	movs	r2, r0
20000530:	1dfb      	adds	r3, r7, #7
20000532:	701a      	strb	r2, [r3, #0]
20000534:	1dbb      	adds	r3, r7, #6
20000536:	1c0a      	adds	r2, r1, #0
20000538:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
2000053a:	4a1a      	ldr	r2, [pc, #104]	; (200005a4 <graphic_write+0x7c>)
2000053c:	1dfb      	adds	r3, r7, #7
2000053e:	781b      	ldrb	r3, [r3, #0]
20000540:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000542:	1dbb      	adds	r3, r7, #6
20000544:	781b      	ldrb	r3, [r3, #0]
20000546:	0018      	movs	r0, r3
20000548:	f7ff ff38 	bl	200003bc <select_controller>
    delay_500ns();
2000054c:	f000 fa5d 	bl	20000a0a <delay_500ns>
    graphics_ctrl_bit_set(B_E);
20000550:	2040      	movs	r0, #64	; 0x40
20000552:	f7ff fefd 	bl	20000350 <graphics_ctrl_bit_set>
    delay_500ns();
20000556:	f000 fa58 	bl	20000a0a <delay_500ns>
    graphics_ctrl_bit_clear(B_E);
2000055a:	2040      	movs	r0, #64	; 0x40
2000055c:	f7ff ff14 	bl	20000388 <graphics_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000560:	1dbb      	adds	r3, r7, #6
20000562:	781b      	ldrb	r3, [r3, #0]
20000564:	2208      	movs	r2, #8
20000566:	4013      	ands	r3, r2
20000568:	d004      	beq.n	20000574 <graphic_write+0x4c>
        select_controller(B_CS1);
2000056a:	2008      	movs	r0, #8
2000056c:	f7ff ff26 	bl	200003bc <select_controller>
        graphic_wait_ready();
20000570:	f7ff ff59 	bl	20000426 <graphic_wait_ready>
    }
    
    if(controller & B_CS2){
20000574:	1dbb      	adds	r3, r7, #6
20000576:	781b      	ldrb	r3, [r3, #0]
20000578:	2210      	movs	r2, #16
2000057a:	4013      	ands	r3, r2
2000057c:	d004      	beq.n	20000588 <graphic_write+0x60>
        select_controller(B_CS2);
2000057e:	2010      	movs	r0, #16
20000580:	f7ff ff1c 	bl	200003bc <select_controller>
        graphic_wait_ready();
20000584:	f7ff ff4f 	bl	20000426 <graphic_wait_ready>
    }
    
    *GPIO_E_ODR_HIGH = 0;
20000588:	4b06      	ldr	r3, [pc, #24]	; (200005a4 <graphic_write+0x7c>)
2000058a:	2200      	movs	r2, #0
2000058c:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_set(B_E);
2000058e:	2040      	movs	r0, #64	; 0x40
20000590:	f7ff fede 	bl	20000350 <graphics_ctrl_bit_set>
    select_controller(0);
20000594:	2000      	movs	r0, #0
20000596:	f7ff ff11 	bl	200003bc <select_controller>
}
2000059a:	46c0      	nop			; (mov r8, r8)
2000059c:	46bd      	mov	sp, r7
2000059e:	b002      	add	sp, #8
200005a0:	bd80      	pop	{r7, pc}
200005a2:	46c0      	nop			; (mov r8, r8)
200005a4:	40021015 	andmi	r1, r2, r5, lsl r0

200005a8 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
200005a8:	b580      	push	{r7, lr}
200005aa:	b082      	sub	sp, #8
200005ac:	af00      	add	r7, sp, #0
200005ae:	0002      	movs	r2, r0
200005b0:	1dfb      	adds	r3, r7, #7
200005b2:	701a      	strb	r2, [r3, #0]
200005b4:	1dbb      	adds	r3, r7, #6
200005b6:	1c0a      	adds	r2, r1, #0
200005b8:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200005ba:	2040      	movs	r0, #64	; 0x40
200005bc:	f7ff fee4 	bl	20000388 <graphics_ctrl_bit_clear>
    select_controller(controller);
200005c0:	1dbb      	adds	r3, r7, #6
200005c2:	781b      	ldrb	r3, [r3, #0]
200005c4:	0018      	movs	r0, r3
200005c6:	f7ff fef9 	bl	200003bc <select_controller>
    graphics_ctrl_bit_clear(B_RS | B_RW);
200005ca:	2003      	movs	r0, #3
200005cc:	f7ff fedc 	bl	20000388 <graphics_ctrl_bit_clear>
    graphic_write(command, controller);
200005d0:	1dbb      	adds	r3, r7, #6
200005d2:	781a      	ldrb	r2, [r3, #0]
200005d4:	1dfb      	adds	r3, r7, #7
200005d6:	781b      	ldrb	r3, [r3, #0]
200005d8:	0011      	movs	r1, r2
200005da:	0018      	movs	r0, r3
200005dc:	f7ff ffa4 	bl	20000528 <graphic_write>
}
200005e0:	46c0      	nop			; (mov r8, r8)
200005e2:	46bd      	mov	sp, r7
200005e4:	b002      	add	sp, #8
200005e6:	bd80      	pop	{r7, pc}

200005e8 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200005e8:	b580      	push	{r7, lr}
200005ea:	b082      	sub	sp, #8
200005ec:	af00      	add	r7, sp, #0
200005ee:	0002      	movs	r2, r0
200005f0:	1dfb      	adds	r3, r7, #7
200005f2:	701a      	strb	r2, [r3, #0]
200005f4:	1dbb      	adds	r3, r7, #6
200005f6:	1c0a      	adds	r2, r1, #0
200005f8:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
200005fa:	2040      	movs	r0, #64	; 0x40
200005fc:	f7ff fec4 	bl	20000388 <graphics_ctrl_bit_clear>
    select_controller(controller);
20000600:	1dbb      	adds	r3, r7, #6
20000602:	781b      	ldrb	r3, [r3, #0]
20000604:	0018      	movs	r0, r3
20000606:	f7ff fed9 	bl	200003bc <select_controller>
    graphics_ctrl_bit_set(B_RS);
2000060a:	2001      	movs	r0, #1
2000060c:	f7ff fea0 	bl	20000350 <graphics_ctrl_bit_set>
    graphics_ctrl_bit_clear(B_RW);
20000610:	2002      	movs	r0, #2
20000612:	f7ff feb9 	bl	20000388 <graphics_ctrl_bit_clear>
    graphic_write(data, controller);
20000616:	1dbb      	adds	r3, r7, #6
20000618:	781a      	ldrb	r2, [r3, #0]
2000061a:	1dfb      	adds	r3, r7, #7
2000061c:	781b      	ldrb	r3, [r3, #0]
2000061e:	0011      	movs	r1, r2
20000620:	0018      	movs	r0, r3
20000622:	f7ff ff81 	bl	20000528 <graphic_write>
}
20000626:	46c0      	nop			; (mov r8, r8)
20000628:	46bd      	mov	sp, r7
2000062a:	b002      	add	sp, #8
2000062c:	bd80      	pop	{r7, pc}

2000062e <graphics_read_data>:

uint8_t graphics_read_data(uint8_t controller){
2000062e:	b580      	push	{r7, lr}
20000630:	b082      	sub	sp, #8
20000632:	af00      	add	r7, sp, #0
20000634:	0002      	movs	r2, r0
20000636:	1dfb      	adds	r3, r7, #7
20000638:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
2000063a:	1dfb      	adds	r3, r7, #7
2000063c:	781b      	ldrb	r3, [r3, #0]
2000063e:	0018      	movs	r0, r3
20000640:	f7ff ff2a 	bl	20000498 <graphic_read>
    return graphic_read(controller);
20000644:	1dfb      	adds	r3, r7, #7
20000646:	781b      	ldrb	r3, [r3, #0]
20000648:	0018      	movs	r0, r3
2000064a:	f7ff ff25 	bl	20000498 <graphic_read>
2000064e:	0003      	movs	r3, r0
}
20000650:	0018      	movs	r0, r3
20000652:	46bd      	mov	sp, r7
20000654:	b002      	add	sp, #8
20000656:	bd80      	pop	{r7, pc}

20000658 <graphic_initialize>:

void graphic_initialize(void){
20000658:	b580      	push	{r7, lr}
2000065a:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_set(B_E);
2000065c:	2040      	movs	r0, #64	; 0x40
2000065e:	f7ff fe77 	bl	20000350 <graphics_ctrl_bit_set>
    graphics_ctrl_bit_set(B_SELECT);
20000662:	2004      	movs	r0, #4
20000664:	f7ff fe74 	bl	20000350 <graphics_ctrl_bit_set>
    delay_micro(10);
20000668:	200a      	movs	r0, #10
2000066a:	f000 f9a9 	bl	200009c0 <delay_micro>
    graphics_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000066e:	2078      	movs	r0, #120	; 0x78
20000670:	f7ff fe8a 	bl	20000388 <graphics_ctrl_bit_clear>
    delay_milli(30);
20000674:	201e      	movs	r0, #30
20000676:	f000 f9b9 	bl	200009ec <delay_milli>
    graphics_ctrl_bit_set(B_RST);
2000067a:	2020      	movs	r0, #32
2000067c:	f7ff fe68 	bl	20000350 <graphics_ctrl_bit_set>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000680:	2118      	movs	r1, #24
20000682:	203e      	movs	r0, #62	; 0x3e
20000684:	f7ff ff90 	bl	200005a8 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000688:	2118      	movs	r1, #24
2000068a:	203f      	movs	r0, #63	; 0x3f
2000068c:	f7ff ff8c 	bl	200005a8 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000690:	2118      	movs	r1, #24
20000692:	20c0      	movs	r0, #192	; 0xc0
20000694:	f7ff ff88 	bl	200005a8 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000698:	2118      	movs	r1, #24
2000069a:	2040      	movs	r0, #64	; 0x40
2000069c:	f7ff ff84 	bl	200005a8 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
200006a0:	2118      	movs	r1, #24
200006a2:	20b8      	movs	r0, #184	; 0xb8
200006a4:	f7ff ff80 	bl	200005a8 <graphic_write_command>
    select_controller(0);
200006a8:	2000      	movs	r0, #0
200006aa:	f7ff fe87 	bl	200003bc <select_controller>
}
200006ae:	46c0      	nop			; (mov r8, r8)
200006b0:	46bd      	mov	sp, r7
200006b2:	bd80      	pop	{r7, pc}

200006b4 <graphic_clear_screen>:

void graphic_clear_screen(void){
200006b4:	b580      	push	{r7, lr}
200006b6:	b082      	sub	sp, #8
200006b8:	af00      	add	r7, sp, #0
    for(int page = 0; page < 8; page++){
200006ba:	2300      	movs	r3, #0
200006bc:	607b      	str	r3, [r7, #4]
200006be:	e01e      	b.n	200006fe <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
200006c0:	687b      	ldr	r3, [r7, #4]
200006c2:	b25b      	sxtb	r3, r3
200006c4:	2248      	movs	r2, #72	; 0x48
200006c6:	4252      	negs	r2, r2
200006c8:	4313      	orrs	r3, r2
200006ca:	b25b      	sxtb	r3, r3
200006cc:	b2db      	uxtb	r3, r3
200006ce:	2118      	movs	r1, #24
200006d0:	0018      	movs	r0, r3
200006d2:	f7ff ff69 	bl	200005a8 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
200006d6:	2118      	movs	r1, #24
200006d8:	2040      	movs	r0, #64	; 0x40
200006da:	f7ff ff65 	bl	200005a8 <graphic_write_command>
        for(int add = 0; add < 64; add++){
200006de:	2300      	movs	r3, #0
200006e0:	603b      	str	r3, [r7, #0]
200006e2:	e006      	b.n	200006f2 <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
200006e4:	2118      	movs	r1, #24
200006e6:	2000      	movs	r0, #0
200006e8:	f7ff ff7e 	bl	200005e8 <graphic_write_data>
        for(int add = 0; add < 64; add++){
200006ec:	683b      	ldr	r3, [r7, #0]
200006ee:	3301      	adds	r3, #1
200006f0:	603b      	str	r3, [r7, #0]
200006f2:	683b      	ldr	r3, [r7, #0]
200006f4:	2b3f      	cmp	r3, #63	; 0x3f
200006f6:	ddf5      	ble.n	200006e4 <graphic_clear_screen+0x30>
    for(int page = 0; page < 8; page++){
200006f8:	687b      	ldr	r3, [r7, #4]
200006fa:	3301      	adds	r3, #1
200006fc:	607b      	str	r3, [r7, #4]
200006fe:	687b      	ldr	r3, [r7, #4]
20000700:	2b07      	cmp	r3, #7
20000702:	dddd      	ble.n	200006c0 <graphic_clear_screen+0xc>
        }
    }
    
}
20000704:	46c0      	nop			; (mov r8, r8)
20000706:	46bd      	mov	sp, r7
20000708:	b002      	add	sp, #8
2000070a:	bd80      	pop	{r7, pc}

2000070c <pixel>:


void pixel(unsigned char x, unsigned char y, unsigned char set) {
2000070c:	b590      	push	{r4, r7, lr}
2000070e:	b085      	sub	sp, #20
20000710:	af00      	add	r7, sp, #0
20000712:	0004      	movs	r4, r0
20000714:	0008      	movs	r0, r1
20000716:	0011      	movs	r1, r2
20000718:	1dfb      	adds	r3, r7, #7
2000071a:	1c22      	adds	r2, r4, #0
2000071c:	701a      	strb	r2, [r3, #0]
2000071e:	1dbb      	adds	r3, r7, #6
20000720:	1c02      	adds	r2, r0, #0
20000722:	701a      	strb	r2, [r3, #0]
20000724:	1d7b      	adds	r3, r7, #5
20000726:	1c0a      	adds	r2, r1, #0
20000728:	701a      	strb	r2, [r3, #0]
	if(x < 0 || y < 0) return;
	if(x > 127 || y > 63) return;
2000072a:	1dfb      	adds	r3, r7, #7
2000072c:	781b      	ldrb	r3, [r3, #0]
2000072e:	b25b      	sxtb	r3, r3
20000730:	2b00      	cmp	r3, #0
20000732:	da00      	bge.n	20000736 <pixel+0x2a>
20000734:	e0ae      	b.n	20000894 <pixel+0x188>
20000736:	1dbb      	adds	r3, r7, #6
20000738:	781b      	ldrb	r3, [r3, #0]
2000073a:	2b3f      	cmp	r3, #63	; 0x3f
2000073c:	d900      	bls.n	20000740 <pixel+0x34>
2000073e:	e0a9      	b.n	20000894 <pixel+0x188>
	unsigned char mask;
	unsigned char index = y / 8;
20000740:	230d      	movs	r3, #13
20000742:	18fb      	adds	r3, r7, r3
20000744:	1dba      	adds	r2, r7, #6
20000746:	7812      	ldrb	r2, [r2, #0]
20000748:	08d2      	lsrs	r2, r2, #3
2000074a:	701a      	strb	r2, [r3, #0]
	
	switch(y % 8) {
2000074c:	1dbb      	adds	r3, r7, #6
2000074e:	781b      	ldrb	r3, [r3, #0]
20000750:	2207      	movs	r2, #7
20000752:	4013      	ands	r3, r2
20000754:	2b07      	cmp	r3, #7
20000756:	d82c      	bhi.n	200007b2 <pixel+0xa6>
20000758:	009a      	lsls	r2, r3, #2
2000075a:	4b50      	ldr	r3, [pc, #320]	; (2000089c <pixel+0x190>)
2000075c:	18d3      	adds	r3, r2, r3
2000075e:	681b      	ldr	r3, [r3, #0]
20000760:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000762:	230f      	movs	r3, #15
20000764:	18fb      	adds	r3, r7, r3
20000766:	2201      	movs	r2, #1
20000768:	701a      	strb	r2, [r3, #0]
2000076a:	e022      	b.n	200007b2 <pixel+0xa6>
		case 1: mask = 2; break;
2000076c:	230f      	movs	r3, #15
2000076e:	18fb      	adds	r3, r7, r3
20000770:	2202      	movs	r2, #2
20000772:	701a      	strb	r2, [r3, #0]
20000774:	e01d      	b.n	200007b2 <pixel+0xa6>
		case 2: mask = 4; break;
20000776:	230f      	movs	r3, #15
20000778:	18fb      	adds	r3, r7, r3
2000077a:	2204      	movs	r2, #4
2000077c:	701a      	strb	r2, [r3, #0]
2000077e:	e018      	b.n	200007b2 <pixel+0xa6>
		case 3: mask = 8; break;
20000780:	230f      	movs	r3, #15
20000782:	18fb      	adds	r3, r7, r3
20000784:	2208      	movs	r2, #8
20000786:	701a      	strb	r2, [r3, #0]
20000788:	e013      	b.n	200007b2 <pixel+0xa6>
		case 4: mask = 16; break;
2000078a:	230f      	movs	r3, #15
2000078c:	18fb      	adds	r3, r7, r3
2000078e:	2210      	movs	r2, #16
20000790:	701a      	strb	r2, [r3, #0]
20000792:	e00e      	b.n	200007b2 <pixel+0xa6>
		case 5: mask = 32; break;
20000794:	230f      	movs	r3, #15
20000796:	18fb      	adds	r3, r7, r3
20000798:	2220      	movs	r2, #32
2000079a:	701a      	strb	r2, [r3, #0]
2000079c:	e009      	b.n	200007b2 <pixel+0xa6>
		case 6: mask = 64; break;
2000079e:	230f      	movs	r3, #15
200007a0:	18fb      	adds	r3, r7, r3
200007a2:	2240      	movs	r2, #64	; 0x40
200007a4:	701a      	strb	r2, [r3, #0]
200007a6:	e004      	b.n	200007b2 <pixel+0xa6>
		case 7: mask = 128; break;
200007a8:	230f      	movs	r3, #15
200007aa:	18fb      	adds	r3, r7, r3
200007ac:	2280      	movs	r2, #128	; 0x80
200007ae:	701a      	strb	r2, [r3, #0]
200007b0:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0) {
200007b2:	1d7b      	adds	r3, r7, #5
200007b4:	781b      	ldrb	r3, [r3, #0]
200007b6:	2b00      	cmp	r3, #0
200007b8:	d106      	bne.n	200007c8 <pixel+0xbc>
		mask = ~mask;
200007ba:	230f      	movs	r3, #15
200007bc:	18fb      	adds	r3, r7, r3
200007be:	220f      	movs	r2, #15
200007c0:	18ba      	adds	r2, r7, r2
200007c2:	7812      	ldrb	r2, [r2, #0]
200007c4:	43d2      	mvns	r2, r2
200007c6:	701a      	strb	r2, [r3, #0]
	}
	
	unsigned char controller;
	if(x > 63) {
200007c8:	1dfb      	adds	r3, r7, #7
200007ca:	781b      	ldrb	r3, [r3, #0]
200007cc:	2b3f      	cmp	r3, #63	; 0x3f
200007ce:	d909      	bls.n	200007e4 <pixel+0xd8>
		controller = B_CS2;
200007d0:	230e      	movs	r3, #14
200007d2:	18fb      	adds	r3, r7, r3
200007d4:	2210      	movs	r2, #16
200007d6:	701a      	strb	r2, [r3, #0]
		x = x - 64;
200007d8:	1dfb      	adds	r3, r7, #7
200007da:	1dfa      	adds	r2, r7, #7
200007dc:	7812      	ldrb	r2, [r2, #0]
200007de:	3a40      	subs	r2, #64	; 0x40
200007e0:	701a      	strb	r2, [r3, #0]
200007e2:	e003      	b.n	200007ec <pixel+0xe0>
	} else {
		controller = B_CS1;
200007e4:	230e      	movs	r3, #14
200007e6:	18fb      	adds	r3, r7, r3
200007e8:	2208      	movs	r2, #8
200007ea:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x, controller);
200007ec:	1dfb      	adds	r3, r7, #7
200007ee:	781b      	ldrb	r3, [r3, #0]
200007f0:	2240      	movs	r2, #64	; 0x40
200007f2:	4313      	orrs	r3, r2
200007f4:	b2da      	uxtb	r2, r3
200007f6:	230e      	movs	r3, #14
200007f8:	18fb      	adds	r3, r7, r3
200007fa:	781b      	ldrb	r3, [r3, #0]
200007fc:	0019      	movs	r1, r3
200007fe:	0010      	movs	r0, r2
20000800:	f7ff fed2 	bl	200005a8 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000804:	230d      	movs	r3, #13
20000806:	18fb      	adds	r3, r7, r3
20000808:	781b      	ldrb	r3, [r3, #0]
2000080a:	2248      	movs	r2, #72	; 0x48
2000080c:	4252      	negs	r2, r2
2000080e:	4313      	orrs	r3, r2
20000810:	b2da      	uxtb	r2, r3
20000812:	230e      	movs	r3, #14
20000814:	18fb      	adds	r3, r7, r3
20000816:	781b      	ldrb	r3, [r3, #0]
20000818:	0019      	movs	r1, r3
2000081a:	0010      	movs	r0, r2
2000081c:	f7ff fec4 	bl	200005a8 <graphic_write_command>
	unsigned char temp = graphics_read_data(controller);
20000820:	230c      	movs	r3, #12
20000822:	18fc      	adds	r4, r7, r3
20000824:	230e      	movs	r3, #14
20000826:	18fb      	adds	r3, r7, r3
20000828:	781b      	ldrb	r3, [r3, #0]
2000082a:	0018      	movs	r0, r3
2000082c:	f7ff feff 	bl	2000062e <graphics_read_data>
20000830:	0003      	movs	r3, r0
20000832:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000834:	1dfb      	adds	r3, r7, #7
20000836:	781b      	ldrb	r3, [r3, #0]
20000838:	2240      	movs	r2, #64	; 0x40
2000083a:	4313      	orrs	r3, r2
2000083c:	b2da      	uxtb	r2, r3
2000083e:	230e      	movs	r3, #14
20000840:	18fb      	adds	r3, r7, r3
20000842:	781b      	ldrb	r3, [r3, #0]
20000844:	0019      	movs	r1, r3
20000846:	0010      	movs	r0, r2
20000848:	f7ff feae 	bl	200005a8 <graphic_write_command>
	
	if(set) {
2000084c:	1d7b      	adds	r3, r7, #5
2000084e:	781b      	ldrb	r3, [r3, #0]
20000850:	2b00      	cmp	r3, #0
20000852:	d00a      	beq.n	2000086a <pixel+0x15e>
		mask = mask | temp;
20000854:	230f      	movs	r3, #15
20000856:	18fb      	adds	r3, r7, r3
20000858:	220f      	movs	r2, #15
2000085a:	18b9      	adds	r1, r7, r2
2000085c:	220c      	movs	r2, #12
2000085e:	18ba      	adds	r2, r7, r2
20000860:	7809      	ldrb	r1, [r1, #0]
20000862:	7812      	ldrb	r2, [r2, #0]
20000864:	430a      	orrs	r2, r1
20000866:	701a      	strb	r2, [r3, #0]
20000868:	e009      	b.n	2000087e <pixel+0x172>
	} else {
		mask = mask & temp;
2000086a:	230f      	movs	r3, #15
2000086c:	18fb      	adds	r3, r7, r3
2000086e:	220f      	movs	r2, #15
20000870:	18ba      	adds	r2, r7, r2
20000872:	210c      	movs	r1, #12
20000874:	1879      	adds	r1, r7, r1
20000876:	7812      	ldrb	r2, [r2, #0]
20000878:	7809      	ldrb	r1, [r1, #0]
2000087a:	400a      	ands	r2, r1
2000087c:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
2000087e:	230e      	movs	r3, #14
20000880:	18fb      	adds	r3, r7, r3
20000882:	781a      	ldrb	r2, [r3, #0]
20000884:	230f      	movs	r3, #15
20000886:	18fb      	adds	r3, r7, r3
20000888:	781b      	ldrb	r3, [r3, #0]
2000088a:	0011      	movs	r1, r2
2000088c:	0018      	movs	r0, r3
2000088e:	f7ff feab 	bl	200005e8 <graphic_write_data>
20000892:	e000      	b.n	20000896 <pixel+0x18a>
	if(x > 127 || y > 63) return;
20000894:	46c0      	nop			; (mov r8, r8)
	
}
20000896:	46bd      	mov	sp, r7
20000898:	b005      	add	sp, #20
2000089a:	bd90      	pop	{r4, r7, pc}
2000089c:	200011e8 	andcs	r1, r0, r8, ror #3

200008a0 <draw_object>:
#include "object.h"
#include "graphic.h"

void draw_object(POBJECT this) {
200008a0:	b580      	push	{r7, lr}
200008a2:	b084      	sub	sp, #16
200008a4:	af00      	add	r7, sp, #0
200008a6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
200008a8:	2300      	movs	r3, #0
200008aa:	60fb      	str	r3, [r7, #12]
200008ac:	e020      	b.n	200008f0 <draw_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 1);
200008ae:	687b      	ldr	r3, [r7, #4]
200008b0:	681a      	ldr	r2, [r3, #0]
200008b2:	68fb      	ldr	r3, [r7, #12]
200008b4:	3304      	adds	r3, #4
200008b6:	005b      	lsls	r3, r3, #1
200008b8:	18d3      	adds	r3, r2, r3
200008ba:	3304      	adds	r3, #4
200008bc:	781a      	ldrb	r2, [r3, #0]
200008be:	687b      	ldr	r3, [r7, #4]
200008c0:	68db      	ldr	r3, [r3, #12]
200008c2:	b2db      	uxtb	r3, r3
200008c4:	18d3      	adds	r3, r2, r3
200008c6:	b2d8      	uxtb	r0, r3
200008c8:	687b      	ldr	r3, [r7, #4]
200008ca:	681a      	ldr	r2, [r3, #0]
200008cc:	68fb      	ldr	r3, [r7, #12]
200008ce:	3304      	adds	r3, #4
200008d0:	005b      	lsls	r3, r3, #1
200008d2:	18d3      	adds	r3, r2, r3
200008d4:	3305      	adds	r3, #5
200008d6:	781a      	ldrb	r2, [r3, #0]
200008d8:	687b      	ldr	r3, [r7, #4]
200008da:	691b      	ldr	r3, [r3, #16]
200008dc:	b2db      	uxtb	r3, r3
200008de:	18d3      	adds	r3, r2, r3
200008e0:	b2db      	uxtb	r3, r3
200008e2:	2201      	movs	r2, #1
200008e4:	0019      	movs	r1, r3
200008e6:	f7ff ff11 	bl	2000070c <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
200008ea:	68fb      	ldr	r3, [r7, #12]
200008ec:	3301      	adds	r3, #1
200008ee:	60fb      	str	r3, [r7, #12]
200008f0:	68fb      	ldr	r3, [r7, #12]
200008f2:	2b63      	cmp	r3, #99	; 0x63
200008f4:	dddb      	ble.n	200008ae <draw_object+0xe>
	}
}
200008f6:	46c0      	nop			; (mov r8, r8)
200008f8:	46bd      	mov	sp, r7
200008fa:	b004      	add	sp, #16
200008fc:	bd80      	pop	{r7, pc}

200008fe <clear_object>:
void clear_object(POBJECT this) {
200008fe:	b580      	push	{r7, lr}
20000900:	b084      	sub	sp, #16
20000902:	af00      	add	r7, sp, #0
20000904:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
20000906:	2300      	movs	r3, #0
20000908:	60fb      	str	r3, [r7, #12]
2000090a:	e020      	b.n	2000094e <clear_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 0);
2000090c:	687b      	ldr	r3, [r7, #4]
2000090e:	681a      	ldr	r2, [r3, #0]
20000910:	68fb      	ldr	r3, [r7, #12]
20000912:	3304      	adds	r3, #4
20000914:	005b      	lsls	r3, r3, #1
20000916:	18d3      	adds	r3, r2, r3
20000918:	3304      	adds	r3, #4
2000091a:	781a      	ldrb	r2, [r3, #0]
2000091c:	687b      	ldr	r3, [r7, #4]
2000091e:	68db      	ldr	r3, [r3, #12]
20000920:	b2db      	uxtb	r3, r3
20000922:	18d3      	adds	r3, r2, r3
20000924:	b2d8      	uxtb	r0, r3
20000926:	687b      	ldr	r3, [r7, #4]
20000928:	681a      	ldr	r2, [r3, #0]
2000092a:	68fb      	ldr	r3, [r7, #12]
2000092c:	3304      	adds	r3, #4
2000092e:	005b      	lsls	r3, r3, #1
20000930:	18d3      	adds	r3, r2, r3
20000932:	3305      	adds	r3, #5
20000934:	781a      	ldrb	r2, [r3, #0]
20000936:	687b      	ldr	r3, [r7, #4]
20000938:	691b      	ldr	r3, [r3, #16]
2000093a:	b2db      	uxtb	r3, r3
2000093c:	18d3      	adds	r3, r2, r3
2000093e:	b2db      	uxtb	r3, r3
20000940:	2200      	movs	r2, #0
20000942:	0019      	movs	r1, r3
20000944:	f7ff fee2 	bl	2000070c <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
20000948:	68fb      	ldr	r3, [r7, #12]
2000094a:	3301      	adds	r3, #1
2000094c:	60fb      	str	r3, [r7, #12]
2000094e:	68fb      	ldr	r3, [r7, #12]
20000950:	2b63      	cmp	r3, #99	; 0x63
20000952:	dddb      	ble.n	2000090c <clear_object+0xe>
	}
}
20000954:	46c0      	nop			; (mov r8, r8)
20000956:	46bd      	mov	sp, r7
20000958:	b004      	add	sp, #16
2000095a:	bd80      	pop	{r7, pc}

2000095c <set_object_speed>:

void set_object_speed(POBJECT this, int x, int y) {
2000095c:	b580      	push	{r7, lr}
2000095e:	b084      	sub	sp, #16
20000960:	af00      	add	r7, sp, #0
20000962:	60f8      	str	r0, [r7, #12]
20000964:	60b9      	str	r1, [r7, #8]
20000966:	607a      	str	r2, [r7, #4]
	this->dirX = x;
20000968:	68fb      	ldr	r3, [r7, #12]
2000096a:	68ba      	ldr	r2, [r7, #8]
2000096c:	605a      	str	r2, [r3, #4]
	this->dirY = y;
2000096e:	68fb      	ldr	r3, [r7, #12]
20000970:	687a      	ldr	r2, [r7, #4]
20000972:	609a      	str	r2, [r3, #8]
20000974:	46c0      	nop			; (mov r8, r8)
20000976:	46bd      	mov	sp, r7
20000978:	b004      	add	sp, #16
2000097a:	bd80      	pop	{r7, pc}

2000097c <delay_250ns>:
#include "timer.h"

void delay_250ns(void) {
2000097c:	b580      	push	{r7, lr}
2000097e:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000980:	4b0c      	ldr	r3, [pc, #48]	; (200009b4 <delay_250ns+0x38>)
20000982:	2200      	movs	r2, #0
20000984:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
20000986:	4b0c      	ldr	r3, [pc, #48]	; (200009b8 <delay_250ns+0x3c>)
20000988:	2231      	movs	r2, #49	; 0x31
2000098a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000098c:	4b0b      	ldr	r3, [pc, #44]	; (200009bc <delay_250ns+0x40>)
2000098e:	2200      	movs	r2, #0
20000990:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000992:	4b08      	ldr	r3, [pc, #32]	; (200009b4 <delay_250ns+0x38>)
20000994:	2205      	movs	r2, #5
20000996:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
20000998:	46c0      	nop			; (mov r8, r8)
2000099a:	4b06      	ldr	r3, [pc, #24]	; (200009b4 <delay_250ns+0x38>)
2000099c:	681a      	ldr	r2, [r3, #0]
2000099e:	2380      	movs	r3, #128	; 0x80
200009a0:	025b      	lsls	r3, r3, #9
200009a2:	4013      	ands	r3, r2
200009a4:	d0f9      	beq.n	2000099a <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
200009a6:	4b03      	ldr	r3, [pc, #12]	; (200009b4 <delay_250ns+0x38>)
200009a8:	2200      	movs	r2, #0
200009aa:	601a      	str	r2, [r3, #0]
}
200009ac:	46c0      	nop			; (mov r8, r8)
200009ae:	46bd      	mov	sp, r7
200009b0:	bd80      	pop	{r7, pc}
200009b2:	46c0      	nop			; (mov r8, r8)
200009b4:	e000e010 	and	lr, r0, r0, lsl r0
200009b8:	e000e014 	and	lr, r0, r4, lsl r0
200009bc:	e000e018 	and	lr, r0, r8, lsl r0

200009c0 <delay_micro>:

void delay_micro(unsigned int us) {
200009c0:	b580      	push	{r7, lr}
200009c2:	b082      	sub	sp, #8
200009c4:	af00      	add	r7, sp, #0
200009c6:	6078      	str	r0, [r7, #4]
	while(us--) {
200009c8:	e007      	b.n	200009da <delay_micro+0x1a>
		delay_250ns();
200009ca:	f7ff ffd7 	bl	2000097c <delay_250ns>
		delay_250ns();
200009ce:	f7ff ffd5 	bl	2000097c <delay_250ns>
		delay_250ns();
200009d2:	f7ff ffd3 	bl	2000097c <delay_250ns>
		delay_250ns();
200009d6:	f7ff ffd1 	bl	2000097c <delay_250ns>
	while(us--) {
200009da:	687b      	ldr	r3, [r7, #4]
200009dc:	1e5a      	subs	r2, r3, #1
200009de:	607a      	str	r2, [r7, #4]
200009e0:	2b00      	cmp	r3, #0
200009e2:	d1f2      	bne.n	200009ca <delay_micro+0xa>
	}
}
200009e4:	46c0      	nop			; (mov r8, r8)
200009e6:	46bd      	mov	sp, r7
200009e8:	b002      	add	sp, #8
200009ea:	bd80      	pop	{r7, pc}

200009ec <delay_milli>:

void delay_milli(unsigned int ms) {
200009ec:	b580      	push	{r7, lr}
200009ee:	b082      	sub	sp, #8
200009f0:	af00      	add	r7, sp, #0
200009f2:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_micro(ms);
	#else
		delay_micro(1000 * ms);
200009f4:	687b      	ldr	r3, [r7, #4]
200009f6:	22fa      	movs	r2, #250	; 0xfa
200009f8:	0092      	lsls	r2, r2, #2
200009fa:	4353      	muls	r3, r2
200009fc:	0018      	movs	r0, r3
200009fe:	f7ff ffdf 	bl	200009c0 <delay_micro>
	#endif
}
20000a02:	46c0      	nop			; (mov r8, r8)
20000a04:	46bd      	mov	sp, r7
20000a06:	b002      	add	sp, #8
20000a08:	bd80      	pop	{r7, pc}

20000a0a <delay_500ns>:

void delay_500ns(void) {
20000a0a:	b580      	push	{r7, lr}
20000a0c:	af00      	add	r7, sp, #0
	delay_250ns();
20000a0e:	f7ff ffb5 	bl	2000097c <delay_250ns>
	delay_250ns();
20000a12:	f7ff ffb3 	bl	2000097c <delay_250ns>
}
20000a16:	46c0      	nop			; (mov r8, r8)
20000a18:	46bd      	mov	sp, r7
20000a1a:	bd80      	pop	{r7, pc}

20000a1c <move_paddle>:
	clear_object,
	move_paddle,
	set_object_speed
};

void move_paddle(POBJECT this) {
20000a1c:	b580      	push	{r7, lr}
20000a1e:	b082      	sub	sp, #8
20000a20:	af00      	add	r7, sp, #0
20000a22:	6078      	str	r0, [r7, #4]
	clear_object(this);
20000a24:	687b      	ldr	r3, [r7, #4]
20000a26:	0018      	movs	r0, r3
20000a28:	f7ff ff69 	bl	200008fe <clear_object>
	
	// Move paddle in y direction only.
	this->posY += this->dirY;
20000a2c:	687b      	ldr	r3, [r7, #4]
20000a2e:	691a      	ldr	r2, [r3, #16]
20000a30:	687b      	ldr	r3, [r7, #4]
20000a32:	689b      	ldr	r3, [r3, #8]
20000a34:	18d2      	adds	r2, r2, r3
20000a36:	687b      	ldr	r3, [r7, #4]
20000a38:	611a      	str	r2, [r3, #16]
	
	// Wall collisions todo add width check with paddle.
	if(this->posY < 0) {
20000a3a:	687b      	ldr	r3, [r7, #4]
20000a3c:	691b      	ldr	r3, [r3, #16]
20000a3e:	2b00      	cmp	r3, #0
20000a40:	da03      	bge.n	20000a4a <move_paddle+0x2e>
		this->posY = 0;
20000a42:	687b      	ldr	r3, [r7, #4]
20000a44:	2200      	movs	r2, #0
20000a46:	611a      	str	r2, [r3, #16]
20000a48:	e00e      	b.n	20000a68 <move_paddle+0x4c>
	} else if((this->posY + this->geo->sizeY) > 63) {
20000a4a:	687b      	ldr	r3, [r7, #4]
20000a4c:	691a      	ldr	r2, [r3, #16]
20000a4e:	687b      	ldr	r3, [r7, #4]
20000a50:	681b      	ldr	r3, [r3, #0]
20000a52:	689b      	ldr	r3, [r3, #8]
20000a54:	18d3      	adds	r3, r2, r3
20000a56:	2b3f      	cmp	r3, #63	; 0x3f
20000a58:	dd06      	ble.n	20000a68 <move_paddle+0x4c>
		this->posY = (63 - this->geo->sizeY);
20000a5a:	687b      	ldr	r3, [r7, #4]
20000a5c:	681b      	ldr	r3, [r3, #0]
20000a5e:	689b      	ldr	r3, [r3, #8]
20000a60:	223f      	movs	r2, #63	; 0x3f
20000a62:	1ad2      	subs	r2, r2, r3
20000a64:	687b      	ldr	r3, [r7, #4]
20000a66:	611a      	str	r2, [r3, #16]
	}
	
	this->draw(this);
20000a68:	687b      	ldr	r3, [r7, #4]
20000a6a:	695b      	ldr	r3, [r3, #20]
20000a6c:	687a      	ldr	r2, [r7, #4]
20000a6e:	0010      	movs	r0, r2
20000a70:	4798      	blx	r3
20000a72:	46c0      	nop			; (mov r8, r8)
20000a74:	46bd      	mov	sp, r7
20000a76:	b002      	add	sp, #8
20000a78:	bd80      	pop	{r7, pc}
	...

20000a7c <activateRow>:
#include "keypad.h"

void activateRow(unsigned int row) {
20000a7c:	b580      	push	{r7, lr}
20000a7e:	b082      	sub	sp, #8
20000a80:	af00      	add	r7, sp, #0
20000a82:	6078      	str	r0, [r7, #4]
	switch(row) {
20000a84:	687b      	ldr	r3, [r7, #4]
20000a86:	2b04      	cmp	r3, #4
20000a88:	d819      	bhi.n	20000abe <activateRow+0x42>
20000a8a:	687b      	ldr	r3, [r7, #4]
20000a8c:	009a      	lsls	r2, r3, #2
20000a8e:	4b0e      	ldr	r3, [pc, #56]	; (20000ac8 <activateRow+0x4c>)
20000a90:	18d3      	adds	r3, r2, r3
20000a92:	681b      	ldr	r3, [r3, #0]
20000a94:	469f      	mov	pc, r3
		case 0: *GPIO_D_ODR_HIGH = 0x00; break;
20000a96:	4b0d      	ldr	r3, [pc, #52]	; (20000acc <activateRow+0x50>)
20000a98:	2200      	movs	r2, #0
20000a9a:	701a      	strb	r2, [r3, #0]
20000a9c:	e00f      	b.n	20000abe <activateRow+0x42>
		case 1: *GPIO_D_ODR_HIGH = 0x10; break;
20000a9e:	4b0b      	ldr	r3, [pc, #44]	; (20000acc <activateRow+0x50>)
20000aa0:	2210      	movs	r2, #16
20000aa2:	701a      	strb	r2, [r3, #0]
20000aa4:	e00b      	b.n	20000abe <activateRow+0x42>
		case 2: *GPIO_D_ODR_HIGH = 0x20; break;
20000aa6:	4b09      	ldr	r3, [pc, #36]	; (20000acc <activateRow+0x50>)
20000aa8:	2220      	movs	r2, #32
20000aaa:	701a      	strb	r2, [r3, #0]
20000aac:	e007      	b.n	20000abe <activateRow+0x42>
		case 3: *GPIO_D_ODR_HIGH = 0x40; break;
20000aae:	4b07      	ldr	r3, [pc, #28]	; (20000acc <activateRow+0x50>)
20000ab0:	2240      	movs	r2, #64	; 0x40
20000ab2:	701a      	strb	r2, [r3, #0]
20000ab4:	e003      	b.n	20000abe <activateRow+0x42>
		case 4: *GPIO_D_ODR_HIGH = 0x80; break;
20000ab6:	4b05      	ldr	r3, [pc, #20]	; (20000acc <activateRow+0x50>)
20000ab8:	2280      	movs	r2, #128	; 0x80
20000aba:	701a      	strb	r2, [r3, #0]
20000abc:	46c0      	nop			; (mov r8, r8)
	}
}
20000abe:	46c0      	nop			; (mov r8, r8)
20000ac0:	46bd      	mov	sp, r7
20000ac2:	b002      	add	sp, #8
20000ac4:	bd80      	pop	{r7, pc}
20000ac6:	46c0      	nop			; (mov r8, r8)
20000ac8:	20001208 	andcs	r1, r0, r8, lsl #4
20000acc:	40020c15 	andmi	r0, r2, r5, lsl ip

20000ad0 <readColumn>:

unsigned char readColumn(void) {
20000ad0:	b580      	push	{r7, lr}
20000ad2:	b082      	sub	sp, #8
20000ad4:	af00      	add	r7, sp, #0
	unsigned char idr = *GPIO_D_IDR_HIGH;
20000ad6:	4a12      	ldr	r2, [pc, #72]	; (20000b20 <readColumn+0x50>)
20000ad8:	1dfb      	adds	r3, r7, #7
20000ada:	7812      	ldrb	r2, [r2, #0]
20000adc:	701a      	strb	r2, [r3, #0]
	if(idr & 0x01) return 1;
20000ade:	1dfb      	adds	r3, r7, #7
20000ae0:	781b      	ldrb	r3, [r3, #0]
20000ae2:	2201      	movs	r2, #1
20000ae4:	4013      	ands	r3, r2
20000ae6:	d001      	beq.n	20000aec <readColumn+0x1c>
20000ae8:	2301      	movs	r3, #1
20000aea:	e015      	b.n	20000b18 <readColumn+0x48>
	if(idr & 0x02) return 2;
20000aec:	1dfb      	adds	r3, r7, #7
20000aee:	781b      	ldrb	r3, [r3, #0]
20000af0:	2202      	movs	r2, #2
20000af2:	4013      	ands	r3, r2
20000af4:	d001      	beq.n	20000afa <readColumn+0x2a>
20000af6:	2302      	movs	r3, #2
20000af8:	e00e      	b.n	20000b18 <readColumn+0x48>
	if(idr & 0x04) return 3;
20000afa:	1dfb      	adds	r3, r7, #7
20000afc:	781b      	ldrb	r3, [r3, #0]
20000afe:	2204      	movs	r2, #4
20000b00:	4013      	ands	r3, r2
20000b02:	d001      	beq.n	20000b08 <readColumn+0x38>
20000b04:	2303      	movs	r3, #3
20000b06:	e007      	b.n	20000b18 <readColumn+0x48>
	if(idr & 0x08) return 4;
20000b08:	1dfb      	adds	r3, r7, #7
20000b0a:	781b      	ldrb	r3, [r3, #0]
20000b0c:	2208      	movs	r2, #8
20000b0e:	4013      	ands	r3, r2
20000b10:	d001      	beq.n	20000b16 <readColumn+0x46>
20000b12:	2304      	movs	r3, #4
20000b14:	e000      	b.n	20000b18 <readColumn+0x48>
	return 0;
20000b16:	2300      	movs	r3, #0
}
20000b18:	0018      	movs	r0, r3
20000b1a:	46bd      	mov	sp, r7
20000b1c:	b002      	add	sp, #8
20000b1e:	bd80      	pop	{r7, pc}
20000b20:	40020c11 	andmi	r0, r2, r1, lsl ip

20000b24 <keyb>:

unsigned char * keyb(void) {
20000b24:	b590      	push	{r4, r7, lr}
20000b26:	b087      	sub	sp, #28
20000b28:	af00      	add	r7, sp, #0
	unsigned char keys[] = {0x1,0x2,0x3,0xA,0x4,0x5,0x6,0xB,0x7,0x8,0x9,0xC,0xE,0x0,0xF,0xD};
20000b2a:	1d3b      	adds	r3, r7, #4
20000b2c:	4a25      	ldr	r2, [pc, #148]	; (20000bc4 <keyb+0xa0>)
20000b2e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000b30:	c313      	stmia	r3!, {r0, r1, r4}
20000b32:	6812      	ldr	r2, [r2, #0]
20000b34:	601a      	str	r2, [r3, #0]
	static unsigned char returnKeys[4] = {0xFF,0xFF,0xFF,0xFF};
	for(char row = 1; row <= 4; row++) {
20000b36:	2317      	movs	r3, #23
20000b38:	18fb      	adds	r3, r7, r3
20000b3a:	2201      	movs	r2, #1
20000b3c:	701a      	strb	r2, [r3, #0]
20000b3e:	e033      	b.n	20000ba8 <keyb+0x84>
		activateRow(row);
20000b40:	2317      	movs	r3, #23
20000b42:	18fb      	adds	r3, r7, r3
20000b44:	781b      	ldrb	r3, [r3, #0]
20000b46:	0018      	movs	r0, r3
20000b48:	f7ff ff98 	bl	20000a7c <activateRow>
		delay_250ns();
20000b4c:	f7ff ff16 	bl	2000097c <delay_250ns>
		char column = readColumn();
20000b50:	2316      	movs	r3, #22
20000b52:	18fc      	adds	r4, r7, r3
20000b54:	f7ff ffbc 	bl	20000ad0 <readColumn>
20000b58:	0003      	movs	r3, r0
20000b5a:	7023      	strb	r3, [r4, #0]
		if(column != 0) {
20000b5c:	2316      	movs	r3, #22
20000b5e:	18fb      	adds	r3, r7, r3
20000b60:	781b      	ldrb	r3, [r3, #0]
20000b62:	2b00      	cmp	r3, #0
20000b64:	d012      	beq.n	20000b8c <keyb+0x68>
			returnKeys[row-1] = keys[4 * (row - 1) + (column - 1)];
20000b66:	2317      	movs	r3, #23
20000b68:	18fb      	adds	r3, r7, r3
20000b6a:	781b      	ldrb	r3, [r3, #0]
20000b6c:	3b01      	subs	r3, #1
20000b6e:	2217      	movs	r2, #23
20000b70:	18ba      	adds	r2, r7, r2
20000b72:	7812      	ldrb	r2, [r2, #0]
20000b74:	3a01      	subs	r2, #1
20000b76:	0091      	lsls	r1, r2, #2
20000b78:	2216      	movs	r2, #22
20000b7a:	18ba      	adds	r2, r7, r2
20000b7c:	7812      	ldrb	r2, [r2, #0]
20000b7e:	3a01      	subs	r2, #1
20000b80:	188a      	adds	r2, r1, r2
20000b82:	1d39      	adds	r1, r7, #4
20000b84:	5c89      	ldrb	r1, [r1, r2]
20000b86:	4a10      	ldr	r2, [pc, #64]	; (20000bc8 <keyb+0xa4>)
20000b88:	54d1      	strb	r1, [r2, r3]
20000b8a:	e006      	b.n	20000b9a <keyb+0x76>
		} else {
			returnKeys[row-1] = 0xFF;
20000b8c:	2317      	movs	r3, #23
20000b8e:	18fb      	adds	r3, r7, r3
20000b90:	781b      	ldrb	r3, [r3, #0]
20000b92:	3b01      	subs	r3, #1
20000b94:	4a0c      	ldr	r2, [pc, #48]	; (20000bc8 <keyb+0xa4>)
20000b96:	21ff      	movs	r1, #255	; 0xff
20000b98:	54d1      	strb	r1, [r2, r3]
	for(char row = 1; row <= 4; row++) {
20000b9a:	2317      	movs	r3, #23
20000b9c:	18fb      	adds	r3, r7, r3
20000b9e:	781a      	ldrb	r2, [r3, #0]
20000ba0:	2317      	movs	r3, #23
20000ba2:	18fb      	adds	r3, r7, r3
20000ba4:	3201      	adds	r2, #1
20000ba6:	701a      	strb	r2, [r3, #0]
20000ba8:	2317      	movs	r3, #23
20000baa:	18fb      	adds	r3, r7, r3
20000bac:	781b      	ldrb	r3, [r3, #0]
20000bae:	2b04      	cmp	r3, #4
20000bb0:	d9c6      	bls.n	20000b40 <keyb+0x1c>
		}
	}
	activateRow(0);
20000bb2:	2000      	movs	r0, #0
20000bb4:	f7ff ff62 	bl	20000a7c <activateRow>
	return returnKeys;
20000bb8:	4b03      	ldr	r3, [pc, #12]	; (20000bc8 <keyb+0xa4>)
20000bba:	0018      	movs	r0, r3
20000bbc:	46bd      	mov	sp, r7
20000bbe:	b007      	add	sp, #28
20000bc0:	bd90      	pop	{r4, r7, pc}
20000bc2:	46c0      	nop			; (mov r8, r8)
20000bc4:	2000121c 	andcs	r1, r0, ip, lsl r2
20000bc8:	200011bc 			; <UNDEFINED> instruction: 0x200011bc

20000bcc <ascii_ctrl_bit_set>:
#define B_E 6
#define B_SELECT 2
#define B_RW 1
#define B_RS 0

void ascii_ctrl_bit_set(unsigned int x) {
20000bcc:	b580      	push	{r7, lr}
20000bce:	b082      	sub	sp, #8
20000bd0:	af00      	add	r7, sp, #0
20000bd2:	6078      	str	r0, [r7, #4]
	switch(x) {
20000bd4:	687b      	ldr	r3, [r7, #4]
20000bd6:	2b07      	cmp	r3, #7
20000bd8:	d84e      	bhi.n	20000c78 <ascii_ctrl_bit_set+0xac>
20000bda:	687b      	ldr	r3, [r7, #4]
20000bdc:	009a      	lsls	r2, r3, #2
20000bde:	4b28      	ldr	r3, [pc, #160]	; (20000c80 <ascii_ctrl_bit_set+0xb4>)
20000be0:	18d3      	adds	r3, r2, r3
20000be2:	681b      	ldr	r3, [r3, #0]
20000be4:	469f      	mov	pc, r3
		case 0: *GPIO_E_ODR_LOW |= 1; break;
20000be6:	4a27      	ldr	r2, [pc, #156]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000be8:	4b26      	ldr	r3, [pc, #152]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000bea:	781b      	ldrb	r3, [r3, #0]
20000bec:	b2db      	uxtb	r3, r3
20000bee:	2101      	movs	r1, #1
20000bf0:	430b      	orrs	r3, r1
20000bf2:	b2db      	uxtb	r3, r3
20000bf4:	7013      	strb	r3, [r2, #0]
20000bf6:	e03f      	b.n	20000c78 <ascii_ctrl_bit_set+0xac>
		case 1: *GPIO_E_ODR_LOW |= 2; break;
20000bf8:	4a22      	ldr	r2, [pc, #136]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000bfa:	4b22      	ldr	r3, [pc, #136]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000bfc:	781b      	ldrb	r3, [r3, #0]
20000bfe:	b2db      	uxtb	r3, r3
20000c00:	2102      	movs	r1, #2
20000c02:	430b      	orrs	r3, r1
20000c04:	b2db      	uxtb	r3, r3
20000c06:	7013      	strb	r3, [r2, #0]
20000c08:	e036      	b.n	20000c78 <ascii_ctrl_bit_set+0xac>
		case 2: *GPIO_E_ODR_LOW |= 4; break;
20000c0a:	4a1e      	ldr	r2, [pc, #120]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000c0c:	4b1d      	ldr	r3, [pc, #116]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000c0e:	781b      	ldrb	r3, [r3, #0]
20000c10:	b2db      	uxtb	r3, r3
20000c12:	2104      	movs	r1, #4
20000c14:	430b      	orrs	r3, r1
20000c16:	b2db      	uxtb	r3, r3
20000c18:	7013      	strb	r3, [r2, #0]
20000c1a:	e02d      	b.n	20000c78 <ascii_ctrl_bit_set+0xac>
		case 3: *GPIO_E_ODR_LOW |= 8; break;
20000c1c:	4a19      	ldr	r2, [pc, #100]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000c1e:	4b19      	ldr	r3, [pc, #100]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000c20:	781b      	ldrb	r3, [r3, #0]
20000c22:	b2db      	uxtb	r3, r3
20000c24:	2108      	movs	r1, #8
20000c26:	430b      	orrs	r3, r1
20000c28:	b2db      	uxtb	r3, r3
20000c2a:	7013      	strb	r3, [r2, #0]
20000c2c:	e024      	b.n	20000c78 <ascii_ctrl_bit_set+0xac>
		case 4: *GPIO_E_ODR_LOW |= 16; break;
20000c2e:	4a15      	ldr	r2, [pc, #84]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000c30:	4b14      	ldr	r3, [pc, #80]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000c32:	781b      	ldrb	r3, [r3, #0]
20000c34:	b2db      	uxtb	r3, r3
20000c36:	2110      	movs	r1, #16
20000c38:	430b      	orrs	r3, r1
20000c3a:	b2db      	uxtb	r3, r3
20000c3c:	7013      	strb	r3, [r2, #0]
20000c3e:	e01b      	b.n	20000c78 <ascii_ctrl_bit_set+0xac>
		case 5: *GPIO_E_ODR_LOW |= 32; break;
20000c40:	4a10      	ldr	r2, [pc, #64]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000c42:	4b10      	ldr	r3, [pc, #64]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000c44:	781b      	ldrb	r3, [r3, #0]
20000c46:	b2db      	uxtb	r3, r3
20000c48:	2120      	movs	r1, #32
20000c4a:	430b      	orrs	r3, r1
20000c4c:	b2db      	uxtb	r3, r3
20000c4e:	7013      	strb	r3, [r2, #0]
20000c50:	e012      	b.n	20000c78 <ascii_ctrl_bit_set+0xac>
		case 6: *GPIO_E_ODR_LOW |= 64; break;
20000c52:	4a0c      	ldr	r2, [pc, #48]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000c54:	4b0b      	ldr	r3, [pc, #44]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000c56:	781b      	ldrb	r3, [r3, #0]
20000c58:	b2db      	uxtb	r3, r3
20000c5a:	2140      	movs	r1, #64	; 0x40
20000c5c:	430b      	orrs	r3, r1
20000c5e:	b2db      	uxtb	r3, r3
20000c60:	7013      	strb	r3, [r2, #0]
20000c62:	e009      	b.n	20000c78 <ascii_ctrl_bit_set+0xac>
		case 7: *GPIO_E_ODR_LOW |= 128; break;
20000c64:	4907      	ldr	r1, [pc, #28]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000c66:	4b07      	ldr	r3, [pc, #28]	; (20000c84 <ascii_ctrl_bit_set+0xb8>)
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	b2db      	uxtb	r3, r3
20000c6c:	2280      	movs	r2, #128	; 0x80
20000c6e:	4252      	negs	r2, r2
20000c70:	4313      	orrs	r3, r2
20000c72:	b2db      	uxtb	r3, r3
20000c74:	700b      	strb	r3, [r1, #0]
20000c76:	46c0      	nop			; (mov r8, r8)
	}
}
20000c78:	46c0      	nop			; (mov r8, r8)
20000c7a:	46bd      	mov	sp, r7
20000c7c:	b002      	add	sp, #8
20000c7e:	bd80      	pop	{r7, pc}
20000c80:	2000122c 	andcs	r1, r0, ip, lsr #4
20000c84:	40021014 	andmi	r1, r2, r4, lsl r0

20000c88 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned int x) {
20000c88:	b580      	push	{r7, lr}
20000c8a:	b082      	sub	sp, #8
20000c8c:	af00      	add	r7, sp, #0
20000c8e:	6078      	str	r0, [r7, #4]
	switch(x) {
20000c90:	687b      	ldr	r3, [r7, #4]
20000c92:	2b07      	cmp	r3, #7
20000c94:	d84d      	bhi.n	20000d32 <ascii_ctrl_bit_clear+0xaa>
20000c96:	687b      	ldr	r3, [r7, #4]
20000c98:	009a      	lsls	r2, r3, #2
20000c9a:	4b28      	ldr	r3, [pc, #160]	; (20000d3c <ascii_ctrl_bit_clear+0xb4>)
20000c9c:	18d3      	adds	r3, r2, r3
20000c9e:	681b      	ldr	r3, [r3, #0]
20000ca0:	469f      	mov	pc, r3
		case(0): *GPIO_E_ODR_LOW &= 0xFE; break;
20000ca2:	4a27      	ldr	r2, [pc, #156]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000ca4:	4b26      	ldr	r3, [pc, #152]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000ca6:	781b      	ldrb	r3, [r3, #0]
20000ca8:	b2db      	uxtb	r3, r3
20000caa:	2101      	movs	r1, #1
20000cac:	438b      	bics	r3, r1
20000cae:	b2db      	uxtb	r3, r3
20000cb0:	7013      	strb	r3, [r2, #0]
20000cb2:	e03e      	b.n	20000d32 <ascii_ctrl_bit_clear+0xaa>
		case(1): *GPIO_E_ODR_LOW &= 0xFD; break;
20000cb4:	4a22      	ldr	r2, [pc, #136]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000cb6:	4b22      	ldr	r3, [pc, #136]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000cb8:	781b      	ldrb	r3, [r3, #0]
20000cba:	b2db      	uxtb	r3, r3
20000cbc:	2102      	movs	r1, #2
20000cbe:	438b      	bics	r3, r1
20000cc0:	b2db      	uxtb	r3, r3
20000cc2:	7013      	strb	r3, [r2, #0]
20000cc4:	e035      	b.n	20000d32 <ascii_ctrl_bit_clear+0xaa>
		case(2): *GPIO_E_ODR_LOW &= 0xFB; break;
20000cc6:	4a1e      	ldr	r2, [pc, #120]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000cc8:	4b1d      	ldr	r3, [pc, #116]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000cca:	781b      	ldrb	r3, [r3, #0]
20000ccc:	b2db      	uxtb	r3, r3
20000cce:	2104      	movs	r1, #4
20000cd0:	438b      	bics	r3, r1
20000cd2:	b2db      	uxtb	r3, r3
20000cd4:	7013      	strb	r3, [r2, #0]
20000cd6:	e02c      	b.n	20000d32 <ascii_ctrl_bit_clear+0xaa>
		case(3): *GPIO_E_ODR_LOW &= 0xF7; break;
20000cd8:	4a19      	ldr	r2, [pc, #100]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000cda:	4b19      	ldr	r3, [pc, #100]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000cdc:	781b      	ldrb	r3, [r3, #0]
20000cde:	b2db      	uxtb	r3, r3
20000ce0:	2108      	movs	r1, #8
20000ce2:	438b      	bics	r3, r1
20000ce4:	b2db      	uxtb	r3, r3
20000ce6:	7013      	strb	r3, [r2, #0]
20000ce8:	e023      	b.n	20000d32 <ascii_ctrl_bit_clear+0xaa>
		case(4): *GPIO_E_ODR_LOW &= 0xEF; break;
20000cea:	4a15      	ldr	r2, [pc, #84]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000cec:	4b14      	ldr	r3, [pc, #80]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	b2db      	uxtb	r3, r3
20000cf2:	2110      	movs	r1, #16
20000cf4:	438b      	bics	r3, r1
20000cf6:	b2db      	uxtb	r3, r3
20000cf8:	7013      	strb	r3, [r2, #0]
20000cfa:	e01a      	b.n	20000d32 <ascii_ctrl_bit_clear+0xaa>
		case(5): *GPIO_E_ODR_LOW &= 0xDF; break;
20000cfc:	4a10      	ldr	r2, [pc, #64]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000cfe:	4b10      	ldr	r3, [pc, #64]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000d00:	781b      	ldrb	r3, [r3, #0]
20000d02:	b2db      	uxtb	r3, r3
20000d04:	2120      	movs	r1, #32
20000d06:	438b      	bics	r3, r1
20000d08:	b2db      	uxtb	r3, r3
20000d0a:	7013      	strb	r3, [r2, #0]
20000d0c:	e011      	b.n	20000d32 <ascii_ctrl_bit_clear+0xaa>
		case(6): *GPIO_E_ODR_LOW &= 0xBF; break;
20000d0e:	4a0c      	ldr	r2, [pc, #48]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000d10:	4b0b      	ldr	r3, [pc, #44]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000d12:	781b      	ldrb	r3, [r3, #0]
20000d14:	b2db      	uxtb	r3, r3
20000d16:	2140      	movs	r1, #64	; 0x40
20000d18:	438b      	bics	r3, r1
20000d1a:	b2db      	uxtb	r3, r3
20000d1c:	7013      	strb	r3, [r2, #0]
20000d1e:	e008      	b.n	20000d32 <ascii_ctrl_bit_clear+0xaa>
		case(7): *GPIO_E_ODR_LOW &= 0x7F; break;
20000d20:	4a07      	ldr	r2, [pc, #28]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000d22:	4b07      	ldr	r3, [pc, #28]	; (20000d40 <ascii_ctrl_bit_clear+0xb8>)
20000d24:	781b      	ldrb	r3, [r3, #0]
20000d26:	b2db      	uxtb	r3, r3
20000d28:	217f      	movs	r1, #127	; 0x7f
20000d2a:	400b      	ands	r3, r1
20000d2c:	b2db      	uxtb	r3, r3
20000d2e:	7013      	strb	r3, [r2, #0]
20000d30:	46c0      	nop			; (mov r8, r8)
	}
}
20000d32:	46c0      	nop			; (mov r8, r8)
20000d34:	46bd      	mov	sp, r7
20000d36:	b002      	add	sp, #8
20000d38:	bd80      	pop	{r7, pc}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	2000124c 	andcs	r1, r0, ip, asr #4
20000d40:	40021014 	andmi	r1, r2, r4, lsl r0

20000d44 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte) {
20000d44:	b580      	push	{r7, lr}
20000d46:	b082      	sub	sp, #8
20000d48:	af00      	add	r7, sp, #0
20000d4a:	0002      	movs	r2, r0
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20000d50:	2006      	movs	r0, #6
20000d52:	f7ff ff3b 	bl	20000bcc <ascii_ctrl_bit_set>
	*GPIO_E_ODR_HIGH = byte;
20000d56:	4a06      	ldr	r2, [pc, #24]	; (20000d70 <ascii_write_controller+0x2c>)
20000d58:	1dfb      	adds	r3, r7, #7
20000d5a:	781b      	ldrb	r3, [r3, #0]
20000d5c:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20000d5e:	f7ff fe0d 	bl	2000097c <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20000d62:	2006      	movs	r0, #6
20000d64:	f7ff ff90 	bl	20000c88 <ascii_ctrl_bit_clear>
}
20000d68:	46c0      	nop			; (mov r8, r8)
20000d6a:	46bd      	mov	sp, r7
20000d6c:	b002      	add	sp, #8
20000d6e:	bd80      	pop	{r7, pc}
20000d70:	40021015 	andmi	r1, r2, r5, lsl r0

20000d74 <ascii_read_controller>:

unsigned char ascii_read_controller() {
20000d74:	b580      	push	{r7, lr}
20000d76:	b082      	sub	sp, #8
20000d78:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
20000d7a:	2006      	movs	r0, #6
20000d7c:	f7ff ff26 	bl	20000bcc <ascii_ctrl_bit_set>
	delay_250ns();
20000d80:	f7ff fdfc 	bl	2000097c <delay_250ns>
	delay_250ns();
20000d84:	f7ff fdfa 	bl	2000097c <delay_250ns>
	unsigned char rv = *GPIO_E_IDR_HIGH;
20000d88:	4a06      	ldr	r2, [pc, #24]	; (20000da4 <ascii_read_controller+0x30>)
20000d8a:	1dfb      	adds	r3, r7, #7
20000d8c:	7812      	ldrb	r2, [r2, #0]
20000d8e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000d90:	2006      	movs	r0, #6
20000d92:	f7ff ff79 	bl	20000c88 <ascii_ctrl_bit_clear>
	return rv;
20000d96:	1dfb      	adds	r3, r7, #7
20000d98:	781b      	ldrb	r3, [r3, #0]
}
20000d9a:	0018      	movs	r0, r3
20000d9c:	46bd      	mov	sp, r7
20000d9e:	b002      	add	sp, #8
20000da0:	bd80      	pop	{r7, pc}
20000da2:	46c0      	nop			; (mov r8, r8)
20000da4:	40021011 	andmi	r1, r2, r1, lsl r0

20000da8 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command) {
20000da8:	b580      	push	{r7, lr}
20000daa:	b082      	sub	sp, #8
20000dac:	af00      	add	r7, sp, #0
20000dae:	0002      	movs	r2, r0
20000db0:	1dfb      	adds	r3, r7, #7
20000db2:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000db4:	2000      	movs	r0, #0
20000db6:	f7ff ff67 	bl	20000c88 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000dba:	2001      	movs	r0, #1
20000dbc:	f7ff ff64 	bl	20000c88 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000dc0:	1dfb      	adds	r3, r7, #7
20000dc2:	781b      	ldrb	r3, [r3, #0]
20000dc4:	0018      	movs	r0, r3
20000dc6:	f7ff ffbd 	bl	20000d44 <ascii_write_controller>
}
20000dca:	46c0      	nop			; (mov r8, r8)
20000dcc:	46bd      	mov	sp, r7
20000dce:	b002      	add	sp, #8
20000dd0:	bd80      	pop	{r7, pc}

20000dd2 <ascii_write_data>:

void ascii_write_data(unsigned char data) {
20000dd2:	b580      	push	{r7, lr}
20000dd4:	b082      	sub	sp, #8
20000dd6:	af00      	add	r7, sp, #0
20000dd8:	0002      	movs	r2, r0
20000dda:	1dfb      	adds	r3, r7, #7
20000ddc:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000dde:	2000      	movs	r0, #0
20000de0:	f7ff fef4 	bl	20000bcc <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000de4:	2001      	movs	r0, #1
20000de6:	f7ff ff4f 	bl	20000c88 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000dea:	1dfb      	adds	r3, r7, #7
20000dec:	781b      	ldrb	r3, [r3, #0]
20000dee:	0018      	movs	r0, r3
20000df0:	f7ff ffa8 	bl	20000d44 <ascii_write_controller>
}
20000df4:	46c0      	nop			; (mov r8, r8)
20000df6:	46bd      	mov	sp, r7
20000df8:	b002      	add	sp, #8
20000dfa:	bd80      	pop	{r7, pc}

20000dfc <ascii_read_status>:

unsigned char ascii_read_status(void) {
20000dfc:	b590      	push	{r4, r7, lr}
20000dfe:	b083      	sub	sp, #12
20000e00:	af00      	add	r7, sp, #0
	*GPIO_E_MODER &= 0x0000FFFF;	
20000e02:	4b11      	ldr	r3, [pc, #68]	; (20000e48 <ascii_read_status+0x4c>)
20000e04:	4a10      	ldr	r2, [pc, #64]	; (20000e48 <ascii_read_status+0x4c>)
20000e06:	6812      	ldr	r2, [r2, #0]
20000e08:	0412      	lsls	r2, r2, #16
20000e0a:	0c12      	lsrs	r2, r2, #16
20000e0c:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000e0e:	2000      	movs	r0, #0
20000e10:	f7ff ff3a 	bl	20000c88 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000e14:	2001      	movs	r0, #1
20000e16:	f7ff fed9 	bl	20000bcc <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000e1a:	1dfc      	adds	r4, r7, #7
20000e1c:	f7ff ffaa 	bl	20000d74 <ascii_read_controller>
20000e20:	0003      	movs	r3, r0
20000e22:	7023      	strb	r3, [r4, #0]
	*GPIO_E_MODER &= 0x0000FFFF;
20000e24:	4b08      	ldr	r3, [pc, #32]	; (20000e48 <ascii_read_status+0x4c>)
20000e26:	4a08      	ldr	r2, [pc, #32]	; (20000e48 <ascii_read_status+0x4c>)
20000e28:	6812      	ldr	r2, [r2, #0]
20000e2a:	0412      	lsls	r2, r2, #16
20000e2c:	0c12      	lsrs	r2, r2, #16
20000e2e:	601a      	str	r2, [r3, #0]
	*GPIO_E_MODER |= 0x55550000;	
20000e30:	4b05      	ldr	r3, [pc, #20]	; (20000e48 <ascii_read_status+0x4c>)
20000e32:	4a05      	ldr	r2, [pc, #20]	; (20000e48 <ascii_read_status+0x4c>)
20000e34:	6812      	ldr	r2, [r2, #0]
20000e36:	4905      	ldr	r1, [pc, #20]	; (20000e4c <ascii_read_status+0x50>)
20000e38:	430a      	orrs	r2, r1
20000e3a:	601a      	str	r2, [r3, #0]
	return rv;
20000e3c:	1dfb      	adds	r3, r7, #7
20000e3e:	781b      	ldrb	r3, [r3, #0]
}
20000e40:	0018      	movs	r0, r3
20000e42:	46bd      	mov	sp, r7
20000e44:	b003      	add	sp, #12
20000e46:	bd90      	pop	{r4, r7, pc}
20000e48:	40021000 	andmi	r1, r2, r0
20000e4c:	55550000 	ldrbpl	r0, [r5, #-0]

20000e50 <ascii_read_data>:

unsigned char ascii_read_data(void) {
20000e50:	b590      	push	{r4, r7, lr}
20000e52:	b083      	sub	sp, #12
20000e54:	af00      	add	r7, sp, #0
	*GPIO_E_MODER &= 0x0000FFFF;	
20000e56:	4b11      	ldr	r3, [pc, #68]	; (20000e9c <ascii_read_data+0x4c>)
20000e58:	4a10      	ldr	r2, [pc, #64]	; (20000e9c <ascii_read_data+0x4c>)
20000e5a:	6812      	ldr	r2, [r2, #0]
20000e5c:	0412      	lsls	r2, r2, #16
20000e5e:	0c12      	lsrs	r2, r2, #16
20000e60:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000e62:	2000      	movs	r0, #0
20000e64:	f7ff feb2 	bl	20000bcc <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000e68:	2001      	movs	r0, #1
20000e6a:	f7ff feaf 	bl	20000bcc <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000e6e:	1dfc      	adds	r4, r7, #7
20000e70:	f7ff ff80 	bl	20000d74 <ascii_read_controller>
20000e74:	0003      	movs	r3, r0
20000e76:	7023      	strb	r3, [r4, #0]
	*GPIO_E_MODER &= 0x0000FFFF;
20000e78:	4b08      	ldr	r3, [pc, #32]	; (20000e9c <ascii_read_data+0x4c>)
20000e7a:	4a08      	ldr	r2, [pc, #32]	; (20000e9c <ascii_read_data+0x4c>)
20000e7c:	6812      	ldr	r2, [r2, #0]
20000e7e:	0412      	lsls	r2, r2, #16
20000e80:	0c12      	lsrs	r2, r2, #16
20000e82:	601a      	str	r2, [r3, #0]
	*GPIO_E_MODER |= 0x55550000;	
20000e84:	4b05      	ldr	r3, [pc, #20]	; (20000e9c <ascii_read_data+0x4c>)
20000e86:	4a05      	ldr	r2, [pc, #20]	; (20000e9c <ascii_read_data+0x4c>)
20000e88:	6812      	ldr	r2, [r2, #0]
20000e8a:	4905      	ldr	r1, [pc, #20]	; (20000ea0 <ascii_read_data+0x50>)
20000e8c:	430a      	orrs	r2, r1
20000e8e:	601a      	str	r2, [r3, #0]
	return rv;
20000e90:	1dfb      	adds	r3, r7, #7
20000e92:	781b      	ldrb	r3, [r3, #0]
}
20000e94:	0018      	movs	r0, r3
20000e96:	46bd      	mov	sp, r7
20000e98:	b003      	add	sp, #12
20000e9a:	bd90      	pop	{r4, r7, pc}
20000e9c:	40021000 	andmi	r1, r2, r0
20000ea0:	55550000 	ldrbpl	r0, [r5, #-0]

20000ea4 <ascii_command>:

void ascii_command(char command, unsigned int delayMicro) {
20000ea4:	b580      	push	{r7, lr}
20000ea6:	b082      	sub	sp, #8
20000ea8:	af00      	add	r7, sp, #0
20000eaa:	0002      	movs	r2, r0
20000eac:	6039      	str	r1, [r7, #0]
20000eae:	1dfb      	adds	r3, r7, #7
20000eb0:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80) {
20000eb2:	46c0      	nop			; (mov r8, r8)
20000eb4:	f7ff ffa2 	bl	20000dfc <ascii_read_status>
20000eb8:	0003      	movs	r3, r0
20000eba:	001a      	movs	r2, r3
20000ebc:	2380      	movs	r3, #128	; 0x80
20000ebe:	4013      	ands	r3, r2
20000ec0:	2b80      	cmp	r3, #128	; 0x80
20000ec2:	d0f7      	beq.n	20000eb4 <ascii_command+0x10>
		// Do nothing, wait for status flag
	}
	delay_micro(8);
20000ec4:	2008      	movs	r0, #8
20000ec6:	f7ff fd7b 	bl	200009c0 <delay_micro>
	ascii_write_cmd(command);
20000eca:	1dfb      	adds	r3, r7, #7
20000ecc:	781b      	ldrb	r3, [r3, #0]
20000ece:	0018      	movs	r0, r3
20000ed0:	f7ff ff6a 	bl	20000da8 <ascii_write_cmd>
	delay_micro(delayMicro);
20000ed4:	683b      	ldr	r3, [r7, #0]
20000ed6:	0018      	movs	r0, r3
20000ed8:	f7ff fd72 	bl	200009c0 <delay_micro>
}
20000edc:	46c0      	nop			; (mov r8, r8)
20000ede:	46bd      	mov	sp, r7
20000ee0:	b002      	add	sp, #8
20000ee2:	bd80      	pop	{r7, pc}

20000ee4 <ascii_init>:

void ascii_init(void) {
20000ee4:	b580      	push	{r7, lr}
20000ee6:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_SELECT);
20000ee8:	2002      	movs	r0, #2
20000eea:	f7ff fe6f 	bl	20000bcc <ascii_ctrl_bit_set>
	ascii_command(0x38, 40); // Set display size and font size
20000eee:	2128      	movs	r1, #40	; 0x28
20000ef0:	2038      	movs	r0, #56	; 0x38
20000ef2:	f7ff ffd7 	bl	20000ea4 <ascii_command>
    ascii_command(0xE, 40); // Set display, cursor on
20000ef6:	2128      	movs	r1, #40	; 0x28
20000ef8:	200e      	movs	r0, #14
20000efa:	f7ff ffd3 	bl	20000ea4 <ascii_command>
	ascii_command(0x01, 1530); // Clear display
20000efe:	4b06      	ldr	r3, [pc, #24]	; (20000f18 <ascii_init+0x34>)
20000f00:	0019      	movs	r1, r3
20000f02:	2001      	movs	r0, #1
20000f04:	f7ff ffce 	bl	20000ea4 <ascii_command>
    ascii_command(0x6, 40); // Inc, no shift
20000f08:	2128      	movs	r1, #40	; 0x28
20000f0a:	2006      	movs	r0, #6
20000f0c:	f7ff ffca 	bl	20000ea4 <ascii_command>
}
20000f10:	46c0      	nop			; (mov r8, r8)
20000f12:	46bd      	mov	sp, r7
20000f14:	bd80      	pop	{r7, pc}
20000f16:	46c0      	nop			; (mov r8, r8)
20000f18:	000005fa 	strdeq	r0, [r0], -sl

20000f1c <ascii_write_char>:

void ascii_write_char(unsigned char charToWrite) {
20000f1c:	b580      	push	{r7, lr}
20000f1e:	b082      	sub	sp, #8
20000f20:	af00      	add	r7, sp, #0
20000f22:	0002      	movs	r2, r0
20000f24:	1dfb      	adds	r3, r7, #7
20000f26:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80) {
20000f28:	46c0      	nop			; (mov r8, r8)
20000f2a:	f7ff ff67 	bl	20000dfc <ascii_read_status>
20000f2e:	0003      	movs	r3, r0
20000f30:	001a      	movs	r2, r3
20000f32:	2380      	movs	r3, #128	; 0x80
20000f34:	4013      	ands	r3, r2
20000f36:	2b80      	cmp	r3, #128	; 0x80
20000f38:	d0f7      	beq.n	20000f2a <ascii_write_char+0xe>
	// Do nothing, wait for status flag
    }
	delay_micro(8);
20000f3a:	2008      	movs	r0, #8
20000f3c:	f7ff fd40 	bl	200009c0 <delay_micro>
    ascii_write_data(charToWrite);
20000f40:	1dfb      	adds	r3, r7, #7
20000f42:	781b      	ldrb	r3, [r3, #0]
20000f44:	0018      	movs	r0, r3
20000f46:	f7ff ff44 	bl	20000dd2 <ascii_write_data>
    delay_micro(45);
20000f4a:	202d      	movs	r0, #45	; 0x2d
20000f4c:	f7ff fd38 	bl	200009c0 <delay_micro>
}
20000f50:	46c0      	nop			; (mov r8, r8)
20000f52:	46bd      	mov	sp, r7
20000f54:	b002      	add	sp, #8
20000f56:	bd80      	pop	{r7, pc}

20000f58 <goToXY>:

void goToXY(unsigned char row, unsigned char column) {
20000f58:	b580      	push	{r7, lr}
20000f5a:	b084      	sub	sp, #16
20000f5c:	af00      	add	r7, sp, #0
20000f5e:	0002      	movs	r2, r0
20000f60:	1dfb      	adds	r3, r7, #7
20000f62:	701a      	strb	r2, [r3, #0]
20000f64:	1dbb      	adds	r3, r7, #6
20000f66:	1c0a      	adds	r2, r1, #0
20000f68:	701a      	strb	r2, [r3, #0]
	unsigned char address = row - 1;
20000f6a:	230f      	movs	r3, #15
20000f6c:	18fb      	adds	r3, r7, r3
20000f6e:	1dfa      	adds	r2, r7, #7
20000f70:	7812      	ldrb	r2, [r2, #0]
20000f72:	3a01      	subs	r2, #1
20000f74:	701a      	strb	r2, [r3, #0]
	if(column == 2) {
20000f76:	1dbb      	adds	r3, r7, #6
20000f78:	781b      	ldrb	r3, [r3, #0]
20000f7a:	2b02      	cmp	r3, #2
20000f7c:	d106      	bne.n	20000f8c <goToXY+0x34>
		address = address + 0x40;
20000f7e:	230f      	movs	r3, #15
20000f80:	18fb      	adds	r3, r7, r3
20000f82:	220f      	movs	r2, #15
20000f84:	18ba      	adds	r2, r7, r2
20000f86:	7812      	ldrb	r2, [r2, #0]
20000f88:	3240      	adds	r2, #64	; 0x40
20000f8a:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
20000f8c:	230f      	movs	r3, #15
20000f8e:	18fb      	adds	r3, r7, r3
20000f90:	781b      	ldrb	r3, [r3, #0]
20000f92:	2280      	movs	r2, #128	; 0x80
20000f94:	4252      	negs	r2, r2
20000f96:	4313      	orrs	r3, r2
20000f98:	b2db      	uxtb	r3, r3
20000f9a:	0018      	movs	r0, r3
20000f9c:	f7ff ff04 	bl	20000da8 <ascii_write_cmd>
20000fa0:	46c0      	nop			; (mov r8, r8)
20000fa2:	46bd      	mov	sp, r7
20000fa4:	b004      	add	sp, #16
20000fa6:	bd80      	pop	{r7, pc}

20000fa8 <ball_geometry>:
20000fa8:	0000000c 	andeq	r0, r0, ip
20000fac:	00000004 	andeq	r0, r0, r4
20000fb0:	00000004 	andeq	r0, r0, r4
20000fb4:	02000100 	andeq	r0, r0, #0, 2
20000fb8:	01010001 	tsteq	r1, r1
20000fbc:	03010201 	movweq	r0, #4609	; 0x1201
20000fc0:	01020002 	tsteq	r2, r2
20000fc4:	03020202 	movweq	r0, #8706	; 0x2202
20000fc8:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

2000107c <ball>:
2000107c:	20000fa8 	andcs	r0, r0, r8, lsr #31
	...
20001088:	0000003f 	andeq	r0, r0, pc, lsr r0
2000108c:	00000020 	andeq	r0, r0, r0, lsr #32
20001090:	200008a1 	andcs	r0, r0, r1, lsr #17
20001094:	200008ff 	strdcs	r0, [r0], -pc	; <UNPREDICTABLE>
20001098:	20000161 	andcs	r0, r0, r1, ror #2
2000109c:	2000095d 	andcs	r0, r0, sp, asr r9

200010a0 <paddle_geometry>:
200010a0:	00000064 	andeq	r0, r0, r4, rrx
200010a4:	00000004 	andeq	r0, r0, r4
200010a8:	00000019 	andeq	r0, r0, r9, lsl r0
200010ac:	00010000 	andeq	r0, r1, r0
200010b0:	00030002 	andeq	r0, r3, r2
200010b4:	01010100 	mrseq	r0, (UNDEF: 17)
200010b8:	01030102 	tsteq	r3, r2, lsl #2
200010bc:	02010200 	andeq	r0, r1, #0, 4
200010c0:	02030202 	andeq	r0, r3, #536870912	; 0x20000000
200010c4:	03010300 	movweq	r0, #4864	; 0x1300
200010c8:	03030302 	movweq	r0, #13058	; 0x3302
200010cc:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
200010d0:	04030402 	streq	r0, [r3], #-1026	; 0xfffffbfe
200010d4:	05010500 	streq	r0, [r1, #-1280]	; 0xfffffb00
200010d8:	05030502 	streq	r0, [r3, #-1282]	; 0xfffffafe
200010dc:	06010600 	streq	r0, [r1], -r0, lsl #12
200010e0:	06030602 	streq	r0, [r3], -r2, lsl #12
200010e4:	07010700 	streq	r0, [r1, -r0, lsl #14]
200010e8:	07030702 	streq	r0, [r3, -r2, lsl #14]
200010ec:	08010800 	stmdaeq	r1, {fp}
200010f0:	08030802 	stmdaeq	r3, {r1, fp}
200010f4:	09010900 	stmdbeq	r1, {r8, fp}
200010f8:	09030902 	stmdbeq	r3, {r1, r8, fp}
200010fc:	0a010a00 	beq	20043904 <returnKeys.4003+0x42748>
20001100:	0a030a02 	beq	200c3910 <returnKeys.4003+0xc2754>
20001104:	0b010b00 	bleq	20043d0c <returnKeys.4003+0x42b50>
20001108:	0b030b02 	bleq	200c3d18 <returnKeys.4003+0xc2b5c>
2000110c:	0c010c00 	stceq	12, cr0, [r1], {-0}
20001110:	0c030c02 	stceq	12, cr0, [r3], {2}
20001114:	0d010d00 	stceq	13, cr0, [r1, #-0]
20001118:	0d030d02 	stceq	13, cr0, [r3, #-8]
2000111c:	0e010e00 	cdpeq	14, 0, cr0, cr1, cr0, {0}
20001120:	0e030e02 	cdpeq	14, 0, cr0, cr3, cr2, {0}
20001124:	0f010f00 	svceq	0x00010f00
20001128:	0f030f02 	svceq	0x00030f02
2000112c:	10011000 	andne	r1, r1, r0
20001130:	10031002 	andne	r1, r3, r2
20001134:	11011100 	mrsne	r1, (UNDEF: 17)
20001138:	11031102 	tstne	r3, r2, lsl #2
2000113c:	12011200 	andne	r1, r1, #0, 4
20001140:	12031202 	andne	r1, r3, #536870912	; 0x20000000
20001144:	13011300 	movwne	r1, #4864	; 0x1300
20001148:	13031302 	movwne	r1, #13058	; 0x3302
2000114c:	14011400 	strne	r1, [r1], #-1024	; 0xfffffc00
20001150:	14031402 	strne	r1, [r3], #-1026	; 0xfffffbfe
20001154:	15011500 	strne	r1, [r1, #-1280]	; 0xfffffb00
20001158:	15031502 	strne	r1, [r3, #-1282]	; 0xfffffafe
2000115c:	16011600 	strne	r1, [r1], -r0, lsl #12
20001160:	16031602 	strne	r1, [r3], -r2, lsl #12
20001164:	17011700 	strne	r1, [r1, -r0, lsl #14]
20001168:	17031702 	strne	r1, [r3, -r2, lsl #14]
2000116c:	18011800 	stmdane	r1, {fp, ip}
20001170:	18031802 	stmdane	r3, {r1, fp, ip}

20001174 <leftPaddle>:
20001174:	200010a0 	andcs	r1, r0, r0, lsr #1
	...
20001180:	00000001 	andeq	r0, r0, r1
20001184:	00000020 	andeq	r0, r0, r0, lsr #32
20001188:	200008a1 	andcs	r0, r0, r1, lsr #17
2000118c:	200008ff 	strdcs	r0, [r0], -pc	; <UNPREDICTABLE>
20001190:	20000a1d 	andcs	r0, r0, sp, lsl sl
20001194:	2000095d 	andcs	r0, r0, sp, asr r9

20001198 <rightPaddle>:
20001198:	200010a0 	andcs	r1, r0, r0, lsr #1
	...
200011a4:	0000007c 	andeq	r0, r0, ip, ror r0
200011a8:	00000020 	andeq	r0, r0, r0, lsr #32
200011ac:	200008a1 	andcs	r0, r0, r1, lsr #17
200011b0:	200008ff 	strdcs	r0, [r0], -pc	; <UNPREDICTABLE>
200011b4:	20000a1d 	andcs	r0, r0, sp, lsl sl
200011b8:	2000095d 	andcs	r0, r0, sp, asr r9

200011bc <returnKeys.4003>:
200011bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200011c0:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
200011c4:	6c702074 	ldclvs	0, cr2, [r0], #-464	; 0xfffffe30
200011c8:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
200011cc:	6e6f7720 	cdpvs	7, 6, cr7, cr15, cr0, {1}
200011d0:	00002021 	andeq	r2, r0, r1, lsr #32
200011d4:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
200011d8:	616c7020 	cmnvs	ip, r0, lsr #32
200011dc:	20726579 	rsbscs	r6, r2, r9, ror r5
200011e0:	216e6f77 	smccs	59127	; 0xe6f7
200011e4:	00000000 	andeq	r0, r0, r0
200011e8:	20000762 	andcs	r0, r0, r2, ror #14
200011ec:	2000076c 	andcs	r0, r0, ip, ror #14
200011f0:	20000776 	andcs	r0, r0, r6, ror r7
200011f4:	20000780 	andcs	r0, r0, r0, lsl #15
200011f8:	2000078a 	andcs	r0, r0, sl, lsl #15
200011fc:	20000794 	mulcs	r0, r4, r7
20001200:	2000079e 	mulcs	r0, lr, r7
20001204:	200007a8 	andcs	r0, r0, r8, lsr #15
20001208:	20000a96 	mulcs	r0, r6, sl
2000120c:	20000a9e 	mulcs	r0, lr, sl
20001210:	20000aa6 	andcs	r0, r0, r6, lsr #21
20001214:	20000aae 	andcs	r0, r0, lr, lsr #21
20001218:	20000ab6 			; <UNDEFINED> instruction: 0x20000ab6
2000121c:	0a030201 	beq	200c1a28 <returnKeys.4003+0xc086c>
20001220:	0b060504 	bleq	20182638 <returnKeys.4003+0x18147c>
20001224:	0c090807 	stceq	8, cr0, [r9], {7}
20001228:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200011f8 <returnKeys.4003+0x3c>
2000122c:	20000be6 	andcs	r0, r0, r6, ror #23
20001230:	20000bf8 	strdcs	r0, [r0], -r8
20001234:	20000c0a 	andcs	r0, r0, sl, lsl #24
20001238:	20000c1c 	andcs	r0, r0, ip, lsl ip
2000123c:	20000c2e 	andcs	r0, r0, lr, lsr #24
20001240:	20000c40 	andcs	r0, r0, r0, asr #24
20001244:	20000c52 	andcs	r0, r0, r2, asr ip
20001248:	20000c64 	andcs	r0, r0, r4, ror #24
2000124c:	20000ca2 	andcs	r0, r0, r2, lsr #25
20001250:	20000cb4 			; <UNDEFINED> instruction: 0x20000cb4
20001254:	20000cc6 	andcs	r0, r0, r6, asr #25
20001258:	20000cd8 	ldrdcs	r0, [r0], -r8
2000125c:	20000cea 	andcs	r0, r0, sl, ror #25
20001260:	20000cfc 	strdcs	r0, [r0], -ip
20001264:	20000d0e 	andcs	r0, r0, lr, lsl #26
20001268:	20000d20 	andcs	r0, r0, r0, lsr #26

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000241 	andeq	r0, r0, r1, asr #4
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
  10:	0000270c 	andeq	r2, r0, ip, lsl #14
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	00000091 	muleq	r0, r1, r0
  28:	00006d03 	andeq	r6, r0, r3, lsl #26
  2c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
  30:	00000049 	andeq	r0, r0, r9, asr #32
  34:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
  38:	00002106 	andeq	r2, r0, r6, lsl #2
  3c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
  40:	21070200 	mrscs	r0, (UNDEF: 39)
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	019d0500 	orrseq	r0, sp, r0, lsl #10
  4c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  50:	00000028 	andeq	r0, r0, r8, lsr #32
  54:	00014a03 	andeq	r4, r1, r3, lsl #20
  58:	0b02d400 	bleq	b5060 <startup-0x1ff4afa0>
  5c:	00000090 	muleq	r0, r0, r0
  60:	00019306 	andeq	r9, r1, r6, lsl #6
  64:	900c0200 	andls	r0, ip, r0, lsl #4
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000a06 	andeq	r0, r0, r6, lsl #20
  70:	900d0200 	andls	r0, sp, r0, lsl #4
  74:	04000000 	streq	r0, [r0], #-0
  78:	00001c06 	andeq	r1, r0, r6, lsl #24
  7c:	900e0200 	andls	r0, lr, r0, lsl #4
  80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  84:	00787004 	rsbseq	r7, r8, r4
  88:	00970f02 	addseq	r0, r7, r2, lsl #30
  8c:	000c0000 	andeq	r0, ip, r0
  90:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  94:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  98:	00000049 	andeq	r0, r0, r9, asr #32
  9c:	000000a7 	andeq	r0, r0, r7, lsr #1
  a0:	0000a709 	andeq	sl, r0, r9, lsl #14
  a4:	02006300 	andeq	r6, r0, #0, 6
  a8:	01800704 	orreq	r0, r0, r4, lsl #14
  ac:	37050000 	strcc	r0, [r5, -r0]
  b0:	02000001 	andeq	r0, r0, #1
  b4:	0000b910 	andeq	fp, r0, r0, lsl r9
  b8:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
  bc:	03000000 	movweq	r0, #0
  c0:	000001a3 	andeq	r0, r0, r3, lsr #3
  c4:	38120224 	ldmdacc	r2, {r2, r5, r9}
  c8:	04000001 	streq	r0, [r0], #-1
  cc:	006f6567 	rsbeq	r6, pc, r7, ror #10
  d0:	00ae1302 	adceq	r1, lr, r2, lsl #6
  d4:	06000000 	streq	r0, [r0], -r0
  d8:	0000018e 	andeq	r0, r0, lr, lsl #3
  dc:	00901402 	addseq	r1, r0, r2, lsl #8
  e0:	06040000 	streq	r0, [r4], -r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	00901402 	addseq	r1, r0, r2, lsl #8
  ec:	06080000 	streq	r0, [r8], -r0
  f0:	00000189 	andeq	r0, r0, r9, lsl #3
  f4:	00901502 	addseq	r1, r0, r2, lsl #10
  f8:	060c0000 	streq	r0, [ip], -r0
  fc:	00000005 	andeq	r0, r0, r5
 100:	00901502 	addseq	r1, r0, r2, lsl #10
 104:	06100000 	ldreq	r0, [r0], -r0
 108:	00000022 	andeq	r0, r0, r2, lsr #32
 10c:	01491602 	cmpeq	r9, r2, lsl #12
 110:	06140000 	ldreq	r0, [r4], -r0
 114:	000004e8 	andeq	r0, r0, r8, ror #9
 118:	01491702 	cmpeq	r9, r2, lsl #14
 11c:	06180000 	ldreq	r0, [r8], -r0
 120:	0000008c 	andeq	r0, r0, ip, lsl #1
 124:	01491802 	cmpeq	r9, r2, lsl #16
 128:	061c0000 	ldreq	r0, [ip], -r0
 12c:	00000063 	andeq	r0, r0, r3, rrx
 130:	01641902 	cmneq	r4, r2, lsl #18
 134:	00200000 	eoreq	r0, r0, r0
 138:	0001430b 	andeq	r4, r1, fp, lsl #6
 13c:	01430c00 	cmpeq	r3, r0, lsl #24
 140:	0a000000 	beq	148 <startup-0x1ffffeb8>
 144:	0000bf04 	andeq	fp, r0, r4, lsl #30
 148:	38040a00 	stmdacc	r4, {r9, fp}
 14c:	0b000001 	bleq	158 <startup-0x1ffffea8>
 150:	00000164 	andeq	r0, r0, r4, ror #2
 154:	0001430c 	andeq	r4, r1, ip, lsl #6
 158:	00900c00 	addseq	r0, r0, r0, lsl #24
 15c:	900c0000 	andls	r0, ip, r0
 160:	00000000 	andeq	r0, r0, r0
 164:	014f040a 	cmpeq	pc, sl, lsl #8
 168:	79050000 	stmdbvc	r5, {}	; <UNPREDICTABLE>
 16c:	02000001 	andeq	r0, r0, #1
 170:	0000bf1a 	andeq	fp, r0, sl, lsl pc
 174:	01780500 	cmneq	r8, r0, lsl #10
 178:	1a020000 	bne	80180 <startup-0x1ff7fe80>
 17c:	00000143 	andeq	r0, r0, r3, asr #2
 180:	0001cc0d 	andeq	ip, r1, sp, lsl #24
 184:	6a050300 	bvs	140d8c <startup-0x1febf274>
 188:	0d000001 	stceq	0, cr0, [r0, #-4]
 18c:	00000168 	andeq	r0, r0, r8, ror #2
 190:	016a0404 	cmneq	sl, r4, lsl #8
 194:	100d0000 	andne	r0, sp, r0
 198:	04000000 	streq	r0, [r0], #-0
 19c:	00016a05 	andeq	r6, r1, r5, lsl #20
 1a0:	01730e00 	cmneq	r3, r0, lsl #28
 1a4:	27010000 	strcs	r0, [r1, -r0]
 1a8:	20000058 	andcs	r0, r0, r8, asr r0
 1ac:	00000108 	andeq	r0, r0, r8, lsl #2
 1b0:	021c9c01 	andseq	r9, ip, #256	; 0x100
 1b4:	700f0000 	andvc	r0, pc, r0
 1b8:	75290100 	strvc	r0, [r9, #-256]!	; 0xffffff00
 1bc:	02000001 	andeq	r0, r0, #1
 1c0:	700f7091 	mulvc	pc, r1, r0	; <UNPREDICTABLE>
 1c4:	2a01006c 	bcs	4037c <startup-0x1ffbfc84>
 1c8:	00000175 	andeq	r0, r0, r5, ror r1
 1cc:	0f6c9102 	svceq	0x006c9102
 1d0:	01007270 	tsteq	r0, r0, ror r2
 1d4:	0001752b 	andeq	r7, r1, fp, lsr #10
 1d8:	68910200 	ldmvs	r1, {r9}
 1dc:	00007410 	andeq	r7, r0, r0, lsl r4
 1e0:	90350100 	eorsls	r0, r5, r0, lsl #2
 1e4:	ed000000 	stc	0, cr0, [r0, #-0]
 1e8:	11000001 	tstne	r0, r1
 1ec:	008c1200 	addeq	r1, ip, r0, lsl #4
 1f0:	00c42000 	sbceq	r2, r4, r0
 1f4:	54130000 	ldrpl	r0, [r3], #-0
 1f8:	01000001 	tsteq	r0, r1
 1fc:	00021c3d 	andeq	r1, r2, sp, lsr ip
 200:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 204:	0000ac12 	andeq	sl, r0, r2, lsl ip
 208:	00008020 	andeq	r8, r0, r0, lsr #32
 20c:	00690f00 	rsbeq	r0, r9, r0, lsl #30
 210:	00214001 	eoreq	r4, r1, r1
 214:	91020000 	mrsls	r0, (UNDEF: 2)
 218:	00000077 	andeq	r0, r0, r7, ror r0
 21c:	0021040a 	eoreq	r0, r1, sl, lsl #8
 220:	41140000 	tstmi	r4, r0
 224:	01000001 	tsteq	r0, r1
 228:	00001016 	andeq	r1, r0, r6, lsl r0
 22c:	00004820 	andeq	r4, r0, r0, lsr #16
 230:	149c0100 	ldrne	r0, [ip], #256	; 0x100
 234:	00000160 	andeq	r0, r0, r0, ror #2
 238:	00000c01 	andeq	r0, r0, r1, lsl #24
 23c:	000c2000 	andeq	r2, ip, r0
 240:	9c010000 	stcls	0, cr0, [r1], {-0}
 244:	0002b800 	andeq	fp, r2, r0, lsl #16
 248:	0f000400 	svceq	0x00000400
 24c:	04000001 	streq	r0, [r0], #-1
 250:	00009f01 	andeq	r9, r0, r1, lsl #30
 254:	01d10c00 	bicseq	r0, r1, r0, lsl #24
 258:	01600000 	cmneq	r0, r0
 25c:	01f02000 	mvnseq	r2, r0
 260:	00cd0000 	sbceq	r0, sp, r0
 264:	6d020000 	stcvs	0, cr0, [r2, #-0]
 268:	02000000 	andeq	r0, r0, #0
 26c:	00420502 	subeq	r0, r2, r2, lsl #10
 270:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
 274:	42060200 	andmi	r0, r6, #0, 4
 278:	00000000 	andeq	r0, r0, r0
 27c:	02007903 	andeq	r7, r0, #49152	; 0xc000
 280:	00004207 	andeq	r4, r0, r7, lsl #4
 284:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
 288:	00910801 	addseq	r0, r1, r1, lsl #16
 28c:	9d050000 	stcls	0, cr0, [r5, #-0]
 290:	02000001 	andeq	r0, r0, #1
 294:	00002108 	andeq	r2, r0, r8, lsl #2
 298:	014a0200 	mrseq	r0, (UNDEF: 106)
 29c:	02d40000 	sbcseq	r0, r4, #0
 2a0:	0000900b 	andeq	r9, r0, fp
 2a4:	01930600 	orrseq	r0, r3, r0, lsl #12
 2a8:	0c020000 	stceq	0, cr0, [r2], {-0}
 2ac:	00000090 	muleq	r0, r0, r0
 2b0:	000a0600 	andeq	r0, sl, r0, lsl #12
 2b4:	0d020000 	stceq	0, cr0, [r2, #-0]
 2b8:	00000090 	muleq	r0, r0, r0
 2bc:	001c0604 	andseq	r0, ip, r4, lsl #12
 2c0:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
 2c4:	00000090 	muleq	r0, r0, r0
 2c8:	78700308 	ldmdavc	r0!, {r3, r8, r9}^
 2cc:	970f0200 	strls	r0, [pc, -r0, lsl #4]
 2d0:	0c000000 	stceq	0, cr0, [r0], {-0}
 2d4:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
 2d8:	00746e69 	rsbseq	r6, r4, r9, ror #28
 2dc:	00004908 	andeq	r4, r0, r8, lsl #18
 2e0:	0000a700 	andeq	sl, r0, r0, lsl #14
 2e4:	00a70900 	adceq	r0, r7, r0, lsl #18
 2e8:	00630000 	rsbeq	r0, r3, r0
 2ec:	80070404 	andhi	r0, r7, r4, lsl #8
 2f0:	05000001 	streq	r0, [r0, #-1]
 2f4:	00000138 	andeq	r0, r0, r8, lsr r1
 2f8:	00541002 	subseq	r1, r4, r2
 2fc:	37050000 	strcc	r0, [r5, -r0]
 300:	02000001 	andeq	r0, r0, #1
 304:	0000c410 	andeq	ip, r0, r0, lsl r4
 308:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
 30c:	02000000 	andeq	r0, r0, #0
 310:	000001a3 	andeq	r0, r0, r3, lsr #3
 314:	43120224 	tstmi	r2, #36, 4	; 0x40000002
 318:	03000001 	movweq	r0, #1
 31c:	006f6567 	rsbeq	r6, pc, r7, ror #10
 320:	00b91302 	adcseq	r1, r9, r2, lsl #6
 324:	06000000 	streq	r0, [r0], -r0
 328:	0000018e 	andeq	r0, r0, lr, lsl #3
 32c:	00901402 	addseq	r1, r0, r2, lsl #8
 330:	06040000 	streq	r0, [r4], -r0
 334:	00000000 	andeq	r0, r0, r0
 338:	00901402 	addseq	r1, r0, r2, lsl #8
 33c:	06080000 	streq	r0, [r8], -r0
 340:	00000189 	andeq	r0, r0, r9, lsl #3
 344:	00901502 	addseq	r1, r0, r2, lsl #10
 348:	060c0000 	streq	r0, [ip], -r0
 34c:	00000005 	andeq	r0, r0, r5
 350:	00901502 	addseq	r1, r0, r2, lsl #10
 354:	06100000 	ldreq	r0, [r0], -r0
 358:	00000022 	andeq	r0, r0, r2, lsr #32
 35c:	01541602 	cmpeq	r4, r2, lsl #12
 360:	06140000 	ldreq	r0, [r4], -r0
 364:	000004e8 	andeq	r0, r0, r8, ror #9
 368:	01541702 	cmpeq	r4, r2, lsl #14
 36c:	06180000 	ldreq	r0, [r8], -r0
 370:	0000008c 	andeq	r0, r0, ip, lsl #1
 374:	01541802 	cmpeq	r4, r2, lsl #16
 378:	061c0000 	ldreq	r0, [ip], -r0
 37c:	00000063 	andeq	r0, r0, r3, rrx
 380:	016f1902 	cmneq	pc, r2, lsl #18
 384:	00200000 	eoreq	r0, r0, r0
 388:	00014e0b 	andeq	r4, r1, fp, lsl #28
 38c:	014e0c00 	cmpeq	lr, r0, lsl #24
 390:	0a000000 	beq	398 <startup-0x1ffffc68>
 394:	0000ca04 	andeq	ip, r0, r4, lsl #20
 398:	43040a00 	movwmi	r0, #18944	; 0x4a00
 39c:	0b000001 	bleq	3a8 <startup-0x1ffffc58>
 3a0:	0000016f 	andeq	r0, r0, pc, ror #2
 3a4:	00014e0c 	andeq	r4, r1, ip, lsl #28
 3a8:	00900c00 	addseq	r0, r0, r0, lsl #24
 3ac:	900c0000 	andls	r0, ip, r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	015a040a 	cmpeq	sl, sl, lsl #8
 3b8:	79050000 	stmdbvc	r5, {}	; <UNPREDICTABLE>
 3bc:	02000001 	andeq	r0, r0, #1
 3c0:	0000ca1a 	andeq	ip, r0, sl, lsl sl
 3c4:	01780500 	cmneq	r8, r0, lsl #10
 3c8:	1a020000 	bne	803d0 <startup-0x1ff7fc30>
 3cc:	0000014e 	andeq	r0, r0, lr, asr #2
 3d0:	0001cc0d 	andeq	ip, r1, sp, lsl #24
 3d4:	75050300 	strvc	r0, [r5, #-768]	; 0xfffffd00
 3d8:	0d000001 	stceq	0, cr0, [r0, #-4]
 3dc:	00000168 	andeq	r0, r0, r8, ror #2
 3e0:	01750404 	cmneq	r5, r4, lsl #8
 3e4:	100d0000 	andne	r0, sp, r0
 3e8:	04000000 	streq	r0, [r0], #-0
 3ec:	00017505 	andeq	r7, r1, r5, lsl #10
 3f0:	01a80e00 			; <UNDEFINED> instruction: 0x01a80e00
 3f4:	06010000 	streq	r0, [r1], -r0
 3f8:	000000ae 	andeq	r0, r0, lr, lsr #1
 3fc:	0fa80305 	svceq	0x00a80305
 400:	8b0f2000 	blhi	3c8408 <startup-0x1fc37bf8>
 404:	01000001 	tsteq	r0, r1
 408:	7c030511 	cfstr32vc	mvfx0, [r3], {17}
 40c:	10200010 	eorne	r0, r0, r0, lsl r0
 410:	000001c7 	andeq	r0, r0, r7, asr #3
 414:	01601e01 	cmneq	r0, r1, lsl #28
 418:	01f02000 	mvnseq	r2, r0
 41c:	9c010000 	stcls	0, cr0, [r1], {-0}
 420:	00000292 	muleq	r0, r2, r2
 424:	0001c211 	andeq	ip, r1, r1, lsl r2
 428:	801e0100 	andshi	r0, lr, r0, lsl #2
 42c:	03000001 	movweq	r0, #1
 430:	127fb491 	rsbsne	fp, pc, #-1862270976	; 0x91000000
 434:	0100706c 	tsteq	r0, ip, rrx
 438:	0001802f 	andeq	r8, r1, pc, lsr #32
 43c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 440:	00707212 	rsbseq	r7, r0, r2, lsl r2
 444:	01803001 	orreq	r3, r0, r1
 448:	91020000 	mrsls	r0, (UNDEF: 2)
 44c:	02181360 	andseq	r1, r8, #96, 6	; 0x80000001
 450:	006c2000 	rsbeq	r2, ip, r0
 454:	024e0000 	subeq	r0, lr, #0
 458:	73120000 	tstvc	r2, #0
 45c:	923c0100 	eorsls	r0, ip, #0, 2
 460:	02000002 	andeq	r0, r0, #2
 464:	0a146c91 	beq	51b6b0 <startup-0x1fae4950>
 468:	01000002 	tsteq	r0, r2
 46c:	00029f3d 	andeq	r9, r2, sp, lsr pc
 470:	4c910200 	lfmmi	f0, 4, [r1], {0}
 474:	00007415 	andeq	r7, r0, r5, lsl r4
 478:	90420100 	subls	r0, r2, r0, lsl #2
 47c:	40000000 	andmi	r0, r0, r0
 480:	16000002 	strne	r0, [r0], -r2
 484:	01b61700 			; <UNDEFINED> instruction: 0x01b61700
 488:	44010000 	strmi	r0, [r1], #-0
 48c:	00000090 	muleq	r0, r0, r0
 490:	18000016 	stmdane	r0, {r1, r2, r4}
 494:	200002c6 	andcs	r0, r0, r6, asr #5
 498:	00000068 	andeq	r0, r0, r8, rrx
 49c:	01007312 	tsteq	r0, r2, lsl r3
 4a0:	00029255 	andeq	r9, r2, r5, asr r2
 4a4:	68910200 	ldmvs	r1, {r9}
 4a8:	00020a14 	andeq	r0, r2, r4, lsl sl
 4ac:	af560100 	svcge	0x00560100
 4b0:	03000002 	movweq	r0, #2
 4b4:	157fb891 	ldrbne	fp, [pc, #-2193]!	; fffffc2b <returnKeys.4003+0xdfffea6f>
 4b8:	00000074 	andeq	r0, r0, r4, ror r0
 4bc:	00904201 	addseq	r4, r0, r1, lsl #4
 4c0:	02830000 	addeq	r0, r3, #0
 4c4:	00160000 	andseq	r0, r6, r0
 4c8:	0001b617 	andeq	fp, r1, r7, lsl r6
 4cc:	90440100 	subls	r0, r4, r0, lsl #2
 4d0:	16000000 	strne	r0, [r0], -r0
 4d4:	0a000000 	beq	4dc <startup-0x1ffffb24>
 4d8:	00029804 	andeq	r9, r2, r4, lsl #16
 4dc:	08010400 	stmdaeq	r1, {sl}
 4e0:	0000009a 	muleq	r0, sl, r0
 4e4:	00029808 	andeq	r9, r2, r8, lsl #16
 4e8:	0002af00 	andeq	sl, r2, r0, lsl #30
 4ec:	00a70900 	adceq	r0, r7, r0, lsl #18
 4f0:	00120000 	andseq	r0, r2, r0
 4f4:	00029819 	andeq	r9, r2, r9, lsl r8
 4f8:	00a70900 	adceq	r0, r7, r0, lsl #18
 4fc:	00100000 	andseq	r0, r0, r0
 500:	00028300 	andeq	r8, r2, r0, lsl #6
 504:	56000400 	strpl	r0, [r0], -r0, lsl #8
 508:	04000002 	streq	r0, [r0], #-2
 50c:	00009f01 	andeq	r9, r0, r1, lsl #30
 510:	02680c00 	rsbeq	r0, r8, #0, 24
 514:	03500000 	cmpeq	r0, #0
 518:	05502000 	ldrbeq	r2, [r0, #-0]
 51c:	01920000 	orrseq	r0, r2, r0
 520:	a9020000 	stmdbge	r2, {}	; <UNPREDICTABLE>
 524:	02000002 	andeq	r0, r0, #2
 528:	00002c1c 	andeq	r2, r0, ip, lsl ip
 52c:	08010300 	stmdaeq	r1, {r8, r9}
 530:	00000091 	muleq	r0, r1, r0
 534:	00022604 	andeq	r2, r2, r4, lsl #12
 538:	0c980100 	ldfeqs	f0, [r8], {0}
 53c:	94200007 	strtls	r0, [r0], #-7
 540:	01000001 	tsteq	r0, r1
 544:	0000a79c 	muleq	r0, ip, r7
 548:	00780500 	rsbseq	r0, r8, r0, lsl #10
 54c:	002c9801 	eoreq	r9, ip, r1, lsl #16
 550:	91020000 	mrsls	r0, (UNDEF: 2)
 554:	00790567 	rsbseq	r0, r9, r7, ror #10
 558:	002c9801 	eoreq	r9, ip, r1, lsl #16
 55c:	91020000 	mrsls	r0, (UNDEF: 2)
 560:	65730566 	ldrbvs	r0, [r3, #-1382]!	; 0xfffffa9a
 564:	98010074 	stmdals	r1, {r2, r4, r5, r6}
 568:	0000002c 	andeq	r0, r0, ip, lsr #32
 56c:	06659102 	strbteq	r9, [r5], -r2, lsl #2
 570:	000002a4 	andeq	r0, r0, r4, lsr #5
 574:	002c9b01 	eoreq	r9, ip, r1, lsl #22
 578:	91020000 	mrsls	r0, (UNDEF: 2)
 57c:	02db066f 	sbcseq	r0, fp, #116391936	; 0x6f00000
 580:	9c010000 	stcls	0, cr0, [r1], {-0}
 584:	0000002c 	andeq	r0, r0, ip, lsr #32
 588:	066d9102 	strbteq	r9, [sp], -r2, lsl #2
 58c:	000004f9 	strdeq	r0, [r0], -r9
 590:	002cad01 	eoreq	sl, ip, r1, lsl #26
 594:	91020000 	mrsls	r0, (UNDEF: 2)
 598:	02d6066e 	sbcseq	r0, r6, #115343360	; 0x6e00000
 59c:	b7010000 	strlt	r0, [r1, -r0]
 5a0:	0000002c 	andeq	r0, r0, ip, lsr #32
 5a4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 5a8:	00030c04 	andeq	r0, r3, r4, lsl #24
 5ac:	b48c0100 	strlt	r0, [ip], #256	; 0x100
 5b0:	58200006 	stmdapl	r0!, {r1, r2}
 5b4:	01000000 	mrseq	r0, (UNDEF: 0)
 5b8:	0000ed9c 	muleq	r0, ip, sp
 5bc:	06ba0700 	ldrteq	r0, [sl], r0, lsl #14
 5c0:	004a2000 	subeq	r2, sl, r0
 5c4:	01060000 	mrseq	r0, (UNDEF: 6)
 5c8:	01000003 	tsteq	r0, r3
 5cc:	0000ed8d 	andeq	lr, r0, sp, lsl #27
 5d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 5d4:	0006de07 	andeq	sp, r6, r7, lsl #28
 5d8:	00001a20 	andeq	r1, r0, r0, lsr #20
 5dc:	64610800 	strbtvs	r0, [r1], #-2048	; 0xfffff800
 5e0:	90010064 	andls	r0, r1, r4, rrx
 5e4:	000000ed 	andeq	r0, r0, sp, ror #1
 5e8:	00709102 	rsbseq	r9, r0, r2, lsl #2
 5ec:	04090000 	streq	r0, [r9], #-0
 5f0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 5f4:	03210a00 			; <UNDEFINED> instruction: 0x03210a00
 5f8:	7d010000 	stcvc	0, cr0, [r1, #-0]
 5fc:	20000658 	andcs	r0, r0, r8, asr r6
 600:	0000005c 	andeq	r0, r0, ip, asr r0
 604:	420b9c01 	andmi	r9, fp, #256	; 0x100
 608:	01000002 	tsteq	r0, r2
 60c:	00002178 	andeq	r2, r0, r8, ror r1
 610:	00062e00 	andeq	r2, r6, r0, lsl #28
 614:	00002a20 	andeq	r2, r0, r0, lsr #20
 618:	2d9c0100 	ldfcss	f0, [ip]
 61c:	0c000001 	stceq	0, cr0, [r0], {1}
 620:	000004f9 	strdeq	r0, [r0], -r9
 624:	00217801 	eoreq	r7, r1, r1, lsl #16
 628:	91020000 	mrsls	r0, (UNDEF: 2)
 62c:	ee040077 	mcr	0, 0, r0, cr4, cr7, {3}
 630:	01000002 	tsteq	r0, r2
 634:	0005e870 	andeq	lr, r5, r0, ror r8
 638:	00004620 	andeq	r4, r0, r0, lsr #12
 63c:	5f9c0100 	svcpl	0x009c0100
 640:	0c000001 	stceq	0, cr0, [r0], {1}
 644:	000005ab 	andeq	r0, r0, fp, lsr #11
 648:	00217001 	eoreq	r7, r1, r1
 64c:	91020000 	mrsls	r0, (UNDEF: 2)
 650:	04f90c77 	ldrbteq	r0, [r9], #3191	; 0xc77
 654:	70010000 	andvc	r0, r1, r0
 658:	00000021 	andeq	r0, r0, r1, lsr #32
 65c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 660:	00021004 	andeq	r1, r2, r4
 664:	a8690100 	stmdage	r9!, {r8}^
 668:	40200005 	eormi	r0, r0, r5
 66c:	01000000 	mrseq	r0, (UNDEF: 0)
 670:	0001919c 	muleq	r1, ip, r1
 674:	021e0c00 	andseq	r0, lr, #0, 24
 678:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
 67c:	00000021 	andeq	r0, r0, r1, lsr #32
 680:	0c779102 	ldfeqp	f1, [r7], #-8
 684:	000004f9 	strdeq	r0, [r0], -r9
 688:	00216901 	eoreq	r6, r1, r1, lsl #18
 68c:	91020000 	mrsls	r0, (UNDEF: 2)
 690:	b6040076 			; <UNDEFINED> instruction: 0xb6040076
 694:	01000002 	tsteq	r0, r2
 698:	00052852 	andeq	r2, r5, r2, asr r8
 69c:	00008020 	andeq	r8, r0, r0, lsr #32
 6a0:	c39c0100 	orrsgt	r0, ip, #0, 2
 6a4:	0c000001 	stceq	0, cr0, [r0], {1}
 6a8:	00000306 	andeq	r0, r0, r6, lsl #6
 6ac:	00215201 	eoreq	r5, r1, r1, lsl #4
 6b0:	91020000 	mrsls	r0, (UNDEF: 2)
 6b4:	04f90c77 	ldrbteq	r0, [r9], #3191	; 0xc77
 6b8:	52010000 	andpl	r0, r1, #0
 6bc:	00000021 	andeq	r0, r0, r1, lsr #32
 6c0:	00769102 	rsbseq	r9, r6, r2, lsl #2
 6c4:	0002e10b 	andeq	lr, r2, fp, lsl #2
 6c8:	21370100 	teqcs	r7, r0, lsl #2
 6cc:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
 6d0:	90200004 	eorls	r0, r0, r4
 6d4:	01000000 	mrseq	r0, (UNDEF: 0)
 6d8:	0001f89c 	muleq	r1, ip, r8
 6dc:	04f90c00 	ldrbteq	r0, [r9], #3072	; 0xc00
 6e0:	37010000 	strcc	r0, [r1, -r0]
 6e4:	00000021 	andeq	r0, r0, r1, lsr #32
 6e8:	086f9102 	stmdaeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 6ec:	01005652 	tsteq	r0, r2, asr r6
 6f0:	00002140 	andeq	r2, r0, r0, asr #2
 6f4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6f8:	02550400 	subseq	r0, r5, #0, 8
 6fc:	20010000 	andcs	r0, r1, r0
 700:	20000426 	andcs	r0, r0, r6, lsr #8
 704:	00000072 	andeq	r0, r0, r2, ror r0
 708:	02229c01 	eoreq	r9, r2, #256	; 0x100
 70c:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
 710:	06000000 	streq	r0, [r0], -r0
 714:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
 718:	002c2a01 	eoreq	r2, ip, r1, lsl #20
 71c:	91020000 	mrsls	r0, (UNDEF: 2)
 720:	04000077 	streq	r0, [r0], #-119	; 0xffffff89
 724:	000002c4 	andeq	r0, r0, r4, asr #5
 728:	03bc1001 			; <UNDEFINED> instruction: 0x03bc1001
 72c:	006a2000 	rsbeq	r2, sl, r0
 730:	9c010000 	stcls	0, cr0, [r1], {-0}
 734:	00000246 	andeq	r0, r0, r6, asr #4
 738:	0004f90c 	andeq	pc, r4, ip, lsl #18
 73c:	21100100 	tstcs	r0, r0, lsl #2
 740:	02000000 	andeq	r0, r0, #0
 744:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
 748:	00000074 	andeq	r0, r0, r4, ror r0
 74c:	03880c01 	orreq	r0, r8, #256	; 0x100
 750:	00342000 	eorseq	r2, r4, r0
 754:	9c010000 	stcls	0, cr0, [r1], {-0}
 758:	00000268 	andeq	r0, r0, r8, ror #4
 75c:	01007805 	tsteq	r0, r5, lsl #16
 760:	0000210c 	andeq	r2, r0, ip, lsl #2
 764:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 768:	022c0f00 	eoreq	r0, ip, #0, 30
 76c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
 770:	20000350 	andcs	r0, r0, r0, asr r3
 774:	00000038 	andeq	r0, r0, r8, lsr r0
 778:	78059c01 	stmdavc	r5, {r0, sl, fp, ip, pc}
 77c:	21080100 	mrscs	r0, (UNDEF: 24)
 780:	02000000 	andeq	r0, r0, #0
 784:	00007791 	muleq	r0, r1, r7
 788:	0000021e 	andeq	r0, r0, lr, lsl r2
 78c:	03570004 	cmpeq	r7, #4
 790:	01040000 	mrseq	r0, (UNDEF: 4)
 794:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 798:	0003450c 	andeq	r4, r3, ip, lsl #10
 79c:	0008a000 	andeq	sl, r8, r0
 7a0:	0000dc20 	andeq	sp, r0, r0, lsr #24
 7a4:	0002c400 	andeq	ip, r2, r0, lsl #8
 7a8:	006d0200 	rsbeq	r0, sp, r0, lsl #4
 7ac:	02020000 	andeq	r0, r2, #0
 7b0:	00004205 	andeq	r4, r0, r5, lsl #4
 7b4:	00780300 	rsbseq	r0, r8, r0, lsl #6
 7b8:	00420602 	subeq	r0, r2, r2, lsl #12
 7bc:	03000000 	movweq	r0, #0
 7c0:	07020079 	smlsdxeq	r2, r9, r0, r0
 7c4:	00000042 	andeq	r0, r0, r2, asr #32
 7c8:	01040001 	tsteq	r4, r1
 7cc:	00009108 	andeq	r9, r0, r8, lsl #2
 7d0:	019d0500 	orrseq	r0, sp, r0, lsl #10
 7d4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 7d8:	00000021 	andeq	r0, r0, r1, lsr #32
 7dc:	00014a02 	andeq	r4, r1, r2, lsl #20
 7e0:	0b02d400 	bleq	b57e8 <startup-0x1ff4a818>
 7e4:	00000090 	muleq	r0, r0, r0
 7e8:	00019306 	andeq	r9, r1, r6, lsl #6
 7ec:	900c0200 	andls	r0, ip, r0, lsl #4
 7f0:	00000000 	andeq	r0, r0, r0
 7f4:	00000a06 	andeq	r0, r0, r6, lsl #20
 7f8:	900d0200 	andls	r0, sp, r0, lsl #4
 7fc:	04000000 	streq	r0, [r0], #-0
 800:	00001c06 	andeq	r1, r0, r6, lsl #24
 804:	900e0200 	andls	r0, lr, r0, lsl #4
 808:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 80c:	00787003 	rsbseq	r7, r8, r3
 810:	00970f02 	addseq	r0, r7, r2, lsl #30
 814:	000c0000 	andeq	r0, ip, r0
 818:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 81c:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 820:	00000049 	andeq	r0, r0, r9, asr #32
 824:	000000a7 	andeq	r0, r0, r7, lsr #1
 828:	0000a709 	andeq	sl, r0, r9, lsl #14
 82c:	04006300 	streq	r6, [r0], #-768	; 0xfffffd00
 830:	01800704 	orreq	r0, r0, r4, lsl #14
 834:	37050000 	strcc	r0, [r5, -r0]
 838:	02000001 	andeq	r0, r0, #1
 83c:	0000b910 	andeq	fp, r0, r0, lsl r9
 840:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
 844:	02000000 	andeq	r0, r0, #0
 848:	000001a3 	andeq	r0, r0, r3, lsr #3
 84c:	38120224 	ldmdacc	r2, {r2, r5, r9}
 850:	03000001 	movweq	r0, #1
 854:	006f6567 	rsbeq	r6, pc, r7, ror #10
 858:	00ae1302 	adceq	r1, lr, r2, lsl #6
 85c:	06000000 	streq	r0, [r0], -r0
 860:	0000018e 	andeq	r0, r0, lr, lsl #3
 864:	00901402 	addseq	r1, r0, r2, lsl #8
 868:	06040000 	streq	r0, [r4], -r0
 86c:	00000000 	andeq	r0, r0, r0
 870:	00901402 	addseq	r1, r0, r2, lsl #8
 874:	06080000 	streq	r0, [r8], -r0
 878:	00000189 	andeq	r0, r0, r9, lsl #3
 87c:	00901502 	addseq	r1, r0, r2, lsl #10
 880:	060c0000 	streq	r0, [ip], -r0
 884:	00000005 	andeq	r0, r0, r5
 888:	00901502 	addseq	r1, r0, r2, lsl #10
 88c:	06100000 	ldreq	r0, [r0], -r0
 890:	00000022 	andeq	r0, r0, r2, lsr #32
 894:	01491602 	cmpeq	r9, r2, lsl #12
 898:	06140000 	ldreq	r0, [r4], -r0
 89c:	000004e8 	andeq	r0, r0, r8, ror #9
 8a0:	01491702 	cmpeq	r9, r2, lsl #14
 8a4:	06180000 	ldreq	r0, [r8], -r0
 8a8:	0000008c 	andeq	r0, r0, ip, lsl #1
 8ac:	01491802 	cmpeq	r9, r2, lsl #16
 8b0:	061c0000 	ldreq	r0, [ip], -r0
 8b4:	00000063 	andeq	r0, r0, r3, rrx
 8b8:	01641902 	cmneq	r4, r2, lsl #18
 8bc:	00200000 	eoreq	r0, r0, r0
 8c0:	0001430b 	andeq	r4, r1, fp, lsl #6
 8c4:	01430c00 	cmpeq	r3, r0, lsl #24
 8c8:	0a000000 	beq	8d0 <startup-0x1ffff730>
 8cc:	0000bf04 	andeq	fp, r0, r4, lsl #30
 8d0:	38040a00 	stmdacc	r4, {r9, fp}
 8d4:	0b000001 	bleq	8e0 <startup-0x1ffff720>
 8d8:	00000164 	andeq	r0, r0, r4, ror #2
 8dc:	0001430c 	andeq	r4, r1, ip, lsl #6
 8e0:	00900c00 	addseq	r0, r0, r0, lsl #24
 8e4:	900c0000 	andls	r0, ip, r0
 8e8:	00000000 	andeq	r0, r0, r0
 8ec:	014f040a 	cmpeq	pc, sl, lsl #8
 8f0:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
 8f4:	02000001 	andeq	r0, r0, #1
 8f8:	0001431a 	andeq	r4, r1, sl, lsl r3
 8fc:	03340d00 	teqeq	r4, #0, 26
 900:	0f010000 	svceq	0x00010000
 904:	2000095c 	andcs	r0, r0, ip, asr r9
 908:	00000020 	andeq	r0, r0, r0, lsr #32
 90c:	01b19c01 			; <UNDEFINED> instruction: 0x01b19c01
 910:	c20e0000 	andgt	r0, lr, #0
 914:	01000001 	tsteq	r0, r1
 918:	00016a0f 	andeq	r6, r1, pc, lsl #20
 91c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 920:	0100780f 	tsteq	r0, pc, lsl #16
 924:	0000900f 	andeq	r9, r0, pc
 928:	70910200 	addsvc	r0, r1, r0, lsl #4
 92c:	0100790f 	tsteq	r0, pc, lsl #18
 930:	0000900f 	andeq	r9, r0, pc
 934:	6c910200 	lfmvs	f0, 4, [r1], {0}
 938:	03801000 	orreq	r1, r0, #0
 93c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 940:	200008fe 	strdcs	r0, [r0], -lr
 944:	0000005e 	andeq	r0, r0, lr, asr r0
 948:	01eb9c01 	mvneq	r9, r1, lsl #24
 94c:	c20e0000 	andgt	r0, lr, #0
 950:	01000001 	tsteq	r0, r1
 954:	00016a09 	andeq	r6, r1, r9, lsl #20
 958:	6c910200 	lfmvs	f0, 4, [r1], {0}
 95c:	00090611 	andeq	r0, r9, r1, lsl r6
 960:	00004e20 	andeq	r4, r0, r0, lsr #28
 964:	00691200 	rsbeq	r1, r9, r0, lsl #4
 968:	00900a01 	addseq	r0, r0, r1, lsl #20
 96c:	91020000 	mrsls	r0, (UNDEF: 2)
 970:	13000074 	movwne	r0, #116	; 0x74
 974:	0000038d 	andeq	r0, r0, sp, lsl #7
 978:	08a00401 	stmiaeq	r0!, {r0, sl}
 97c:	005e2000 	subseq	r2, lr, r0
 980:	9c010000 	stcls	0, cr0, [r1], {-0}
 984:	0001c20e 	andeq	ip, r1, lr, lsl #4
 988:	6a040100 	bvs	100d90 <startup-0x1feff270>
 98c:	02000001 	andeq	r0, r0, #1
 990:	a8116c91 	ldmdage	r1, {r0, r4, r7, sl, fp, sp, lr}
 994:	4e200008 	cdpmi	0, 2, cr0, cr0, cr8, {0}
 998:	12000000 	andne	r0, r0, #0
 99c:	05010069 	streq	r0, [r1, #-105]	; 0xffffff97
 9a0:	00000090 	muleq	r0, r0, r0
 9a4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 9a8:	008d0000 	addeq	r0, sp, r0
 9ac:	00040000 	andeq	r0, r4, r0
 9b0:	00000466 	andeq	r0, r0, r6, ror #8
 9b4:	009f0104 	addseq	r0, pc, r4, lsl #2
 9b8:	ca0c0000 	bgt	3009c0 <startup-0x1fcff640>
 9bc:	7c000003 	stcvc	0, cr0, [r0], {3}
 9c0:	a0200009 	eorge	r0, r0, r9
 9c4:	65000000 	strvs	r0, [r0, #-0]
 9c8:	02000003 	andeq	r0, r0, #3
 9cc:	000003a6 	andeq	r0, r0, r6, lsr #7
 9d0:	0a0a1f01 	beq	2885dc <startup-0x1fd77a24>
 9d4:	00122000 	andseq	r2, r2, r0
 9d8:	9c010000 	stcls	0, cr0, [r1], {-0}
 9dc:	0001b603 	andeq	fp, r1, r3, lsl #12
 9e0:	ec170100 	ldfs	f0, [r7], {-0}
 9e4:	1e200009 	cdpne	0, 2, cr0, cr0, cr9, {0}
 9e8:	01000000 	mrseq	r0, (UNDEF: 0)
 9ec:	0000559c 	muleq	r0, ip, r5
 9f0:	736d0400 	cmnvc	sp, #0, 8
 9f4:	55170100 	ldrpl	r0, [r7, #-256]	; 0xffffff00
 9f8:	02000000 	andeq	r0, r0, #0
 9fc:	05007491 	streq	r7, [r0, #-1169]	; 0xfffffb6f
 a00:	03990704 	orrseq	r0, r9, #4, 14	; 0x100000
 a04:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
 a08:	01000003 	tsteq	r0, r3
 a0c:	0009c00e 	andeq	ip, r9, lr
 a10:	00002c20 	andeq	r2, r0, r0, lsr #24
 a14:	7f9c0100 	svcvc	0x009c0100
 a18:	04000000 	streq	r0, [r0], #-0
 a1c:	01007375 	tsteq	r0, r5, ror r3
 a20:	0000550e 	andeq	r5, r0, lr, lsl #10
 a24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 a28:	03b20600 			; <UNDEFINED> instruction: 0x03b20600
 a2c:	03010000 	movweq	r0, #4096	; 0x1000
 a30:	2000097c 	andcs	r0, r0, ip, ror r9
 a34:	00000044 	andeq	r0, r0, r4, asr #32
 a38:	e9009c01 	stmdb	r0, {r0, sl, fp, ip, pc}
 a3c:	04000001 	streq	r0, [r0], #-1
 a40:	0004dc00 	andeq	sp, r4, r0, lsl #24
 a44:	9f010400 	svcls	0x00010400
 a48:	0c000000 	stceq	0, cr0, [r0], {-0}
 a4c:	00000420 	andeq	r0, r0, r0, lsr #8
 a50:	20000a1c 	andcs	r0, r0, ip, lsl sl
 a54:	0000005e 	andeq	r0, r0, lr, asr r0
 a58:	000003e9 	andeq	r0, r0, r9, ror #7
 a5c:	00006d02 	andeq	r6, r0, r2, lsl #26
 a60:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
 a64:	00000042 	andeq	r0, r0, r2, asr #32
 a68:	02007803 	andeq	r7, r0, #196608	; 0x30000
 a6c:	00004206 	andeq	r4, r0, r6, lsl #4
 a70:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
 a74:	42070200 	andmi	r0, r7, #0, 4
 a78:	01000000 	mrseq	r0, (UNDEF: 0)
 a7c:	08010400 	stmdaeq	r1, {sl}
 a80:	00000091 	muleq	r0, r1, r0
 a84:	00019d05 	andeq	r9, r1, r5, lsl #26
 a88:	21080200 	mrscs	r0, R8_fiq
 a8c:	02000000 	andeq	r0, r0, #0
 a90:	0000014a 	andeq	r0, r0, sl, asr #2
 a94:	900b02d4 	ldrdls	r0, [fp], -r4
 a98:	06000000 	streq	r0, [r0], -r0
 a9c:	00000193 	muleq	r0, r3, r1
 aa0:	00900c02 	addseq	r0, r0, r2, lsl #24
 aa4:	06000000 	streq	r0, [r0], -r0
 aa8:	0000000a 	andeq	r0, r0, sl
 aac:	00900d02 	addseq	r0, r0, r2, lsl #26
 ab0:	06040000 	streq	r0, [r4], -r0
 ab4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ab8:	00900e02 	addseq	r0, r0, r2, lsl #28
 abc:	03080000 	movweq	r0, #32768	; 0x8000
 ac0:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 ac4:	0000970f 	andeq	r9, r0, pc, lsl #14
 ac8:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 acc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 ad0:	49080074 	stmdbmi	r8, {r2, r4, r5, r6}
 ad4:	a7000000 	strge	r0, [r0, -r0]
 ad8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 adc:	000000a7 	andeq	r0, r0, r7, lsr #1
 ae0:	04040063 	streq	r0, [r4], #-99	; 0xffffff9d
 ae4:	00018007 	andeq	r8, r1, r7
 ae8:	01380500 	teqeq	r8, r0, lsl #10
 aec:	10020000 	andne	r0, r2, r0
 af0:	00000054 	andeq	r0, r0, r4, asr r0
 af4:	00013705 	andeq	r3, r1, r5, lsl #14
 af8:	c4100200 	ldrgt	r0, [r0], #-512	; 0xfffffe00
 afc:	0a000000 	beq	b04 <startup-0x1ffff4fc>
 b00:	00005404 	andeq	r5, r0, r4, lsl #8
 b04:	01a30200 			; <UNDEFINED> instruction: 0x01a30200
 b08:	02240000 	eoreq	r0, r4, #0
 b0c:	00014312 	andeq	r4, r1, r2, lsl r3
 b10:	65670300 	strbvs	r0, [r7, #-768]!	; 0xfffffd00
 b14:	1302006f 	movwne	r0, #8303	; 0x206f
 b18:	000000b9 	strheq	r0, [r0], -r9
 b1c:	018e0600 	orreq	r0, lr, r0, lsl #12
 b20:	14020000 	strne	r0, [r2], #-0
 b24:	00000090 	muleq	r0, r0, r0
 b28:	00000604 	andeq	r0, r0, r4, lsl #12
 b2c:	14020000 	strne	r0, [r2], #-0
 b30:	00000090 	muleq	r0, r0, r0
 b34:	01890608 	orreq	r0, r9, r8, lsl #12
 b38:	15020000 	strne	r0, [r2, #-0]
 b3c:	00000090 	muleq	r0, r0, r0
 b40:	0005060c 	andeq	r0, r5, ip, lsl #12
 b44:	15020000 	strne	r0, [r2, #-0]
 b48:	00000090 	muleq	r0, r0, r0
 b4c:	00220610 	eoreq	r0, r2, r0, lsl r6
 b50:	16020000 	strne	r0, [r2], -r0
 b54:	00000154 	andeq	r0, r0, r4, asr r1
 b58:	04e80614 	strbteq	r0, [r8], #1556	; 0x614
 b5c:	17020000 	strne	r0, [r2, -r0]
 b60:	00000154 	andeq	r0, r0, r4, asr r1
 b64:	008c0618 	addeq	r0, ip, r8, lsl r6
 b68:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
 b6c:	00000154 	andeq	r0, r0, r4, asr r1
 b70:	0063061c 	rsbeq	r0, r3, ip, lsl r6
 b74:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
 b78:	0000016f 	andeq	r0, r0, pc, ror #2
 b7c:	4e0b0020 	cdpmi	0, 0, cr0, cr11, cr0, {1}
 b80:	0c000001 	stceq	0, cr0, [r0], {1}
 b84:	0000014e 	andeq	r0, r0, lr, asr #2
 b88:	ca040a00 	bgt	103390 <startup-0x1fefcc70>
 b8c:	0a000000 	beq	b94 <startup-0x1ffff46c>
 b90:	00014304 	andeq	r4, r1, r4, lsl #6
 b94:	016f0b00 	cmneq	pc, r0, lsl #22
 b98:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
 b9c:	0c000001 	stceq	0, cr0, [r0], {1}
 ba0:	00000090 	muleq	r0, r0, r0
 ba4:	0000900c 	andeq	r9, r0, ip
 ba8:	040a0000 	streq	r0, [sl], #-0
 bac:	0000015a 	andeq	r0, r0, sl, asr r1
 bb0:	00017905 	andeq	r7, r1, r5, lsl #18
 bb4:	ca1a0200 	bgt	6813bc <startup-0x1f97ec44>
 bb8:	05000000 	streq	r0, [r0, #-0]
 bbc:	00000178 	andeq	r0, r0, r8, ror r1
 bc0:	014e1a02 	cmpeq	lr, r2, lsl #20
 bc4:	680d0000 	stmdavs	sp, {}	; <UNPREDICTABLE>
 bc8:	03000001 	movweq	r0, #1
 bcc:	00017504 	andeq	r7, r1, r4, lsl #10
 bd0:	00100d00 	andseq	r0, r0, r0, lsl #26
 bd4:	05030000 	streq	r0, [r3, #-0]
 bd8:	00000175 	andeq	r0, r0, r5, ror r1
 bdc:	0004100e 	andeq	r1, r4, lr
 be0:	ae030100 	adfges	f0, f3, f0
 be4:	05000000 	streq	r0, [r0, #-0]
 be8:	0010a003 	andseq	sl, r0, r3
 bec:	018b0f20 	orreq	r0, fp, r0, lsr #30
 bf0:	23010000 	movwcs	r0, #4096	; 0x1000
 bf4:	11740305 	cmnne	r4, r5, lsl #6
 bf8:	960f2000 	strls	r2, [pc], -r0
 bfc:	01000001 	tsteq	r0, r1
 c00:	9803052d 	stmdals	r3, {r0, r2, r3, r5, r8, sl}
 c04:	10200011 	eorne	r0, r0, r1, lsl r0
 c08:	00000404 	andeq	r0, r0, r4, lsl #8
 c0c:	0a1c3701 	beq	70e818 <startup-0x1f8f17e8>
 c10:	005e2000 	subseq	r2, lr, r0
 c14:	9c010000 	stcls	0, cr0, [r1], {-0}
 c18:	0001c211 	andeq	ip, r1, r1, lsl r2
 c1c:	80370100 	eorshi	r0, r7, r0, lsl #2
 c20:	02000001 	andeq	r0, r0, #1
 c24:	00007491 	muleq	r0, r1, r4
 c28:	0000012d 	andeq	r0, r0, sp, lsr #2
 c2c:	05bf0004 	ldreq	r0, [pc, #4]!	; c38 <startup-0x1ffff3c8>
 c30:	01040000 	mrseq	r0, (UNDEF: 4)
 c34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 c38:	0004760c 	andeq	r7, r4, ip, lsl #12
 c3c:	000a7c00 	andeq	r7, sl, r0, lsl #24
 c40:	00015020 	andeq	r5, r1, r0, lsr #32
 c44:	00047300 	andeq	r7, r4, r0, lsl #6
 c48:	045b0200 	ldrbeq	r0, [fp], #-512	; 0xfffffe00
 c4c:	16010000 	strne	r0, [r1], -r0
 c50:	0000009b 	muleq	r0, fp, r0
 c54:	20000b24 	andcs	r0, r0, r4, lsr #22
 c58:	000000a8 	andeq	r0, r0, r8, lsr #1
 c5c:	009b9c01 	addseq	r9, fp, r1, lsl #24
 c60:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
 c64:	01000004 	tsteq	r0, r4
 c68:	0000a817 	andeq	sl, r0, r7, lsl r8
 c6c:	5c910200 	lfmpl	f0, 4, [r1], {0}
 c70:	00046003 	andeq	r6, r4, r3
 c74:	bf180100 	svclt	0x00180100
 c78:	05000000 	streq	r0, [r0, #-0]
 c7c:	0011bc03 	andseq	fp, r1, r3, lsl #24
 c80:	0b360420 	bleq	d81d08 <startup-0x1f27e2f8>
 c84:	007c2000 	rsbseq	r2, ip, r0
 c88:	72050000 	andvc	r0, r5, #0
 c8c:	0100776f 	tsteq	r0, pc, ror #14
 c90:	0000cf19 	andeq	ip, r0, r9, lsl pc
 c94:	6f910200 	svcvs	0x00910200
 c98:	000b4004 	andeq	r4, fp, r4
 c9c:	00005a20 	andeq	r5, r0, r0, lsr #20
 ca0:	03b20600 			; <UNDEFINED> instruction: 0x03b20600
 ca4:	1b010000 	blne	40cac <startup-0x1ffbf354>
 ca8:	000000d6 	ldrdeq	r0, [r0], -r6
 cac:	0000008a 	andeq	r0, r0, sl, lsl #1
 cb0:	b1030007 	tstlt	r3, r7
 cb4:	01000004 	tsteq	r0, r4
 cb8:	0000cf1c 	andeq	ip, r0, ip, lsl pc
 cbc:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 cc0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 cc4:	0000a104 	andeq	sl, r0, r4, lsl #2
 cc8:	08010900 	stmdaeq	r1, {r8, fp}
 ccc:	00000091 	muleq	r0, r1, r0
 cd0:	0000a10a 	andeq	sl, r0, sl, lsl #2
 cd4:	0000b800 	andeq	fp, r0, r0, lsl #16
 cd8:	00b80b00 	adcseq	r0, r8, r0, lsl #22
 cdc:	000f0000 	andeq	r0, pc, r0
 ce0:	80070409 	andhi	r0, r7, r9, lsl #8
 ce4:	0a000001 	beq	cf0 <startup-0x1ffff310>
 ce8:	000000a1 	andeq	r0, r0, r1, lsr #1
 cec:	000000cf 	andeq	r0, r0, pc, asr #1
 cf0:	0000b80b 	andeq	fp, r0, fp, lsl #16
 cf4:	09000300 	stmdbeq	r0, {r8, r9}
 cf8:	009a0801 	addseq	r0, sl, r1, lsl #16
 cfc:	040c0000 	streq	r0, [ip], #-0
 d00:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 d04:	046b0d00 	strbteq	r0, [fp], #-3328	; 0xfffff300
 d08:	0d010000 	stceq	0, cr0, [r1, #-0]
 d0c:	000000a1 	andeq	r0, r0, r1, lsr #1
 d10:	20000ad0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 d14:	00000054 	andeq	r0, r0, r4, asr r0
 d18:	01059c01 	tsteq	r5, r1, lsl #24
 d1c:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
 d20:	01007264 	tsteq	r0, r4, ror #4
 d24:	0000a10e 	andeq	sl, r0, lr, lsl #2
 d28:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 d2c:	04bd0e00 	ldrteq	r0, [sp], #3584	; 0xe00
 d30:	03010000 	movweq	r0, #4096	; 0x1000
 d34:	20000a7c 	andcs	r0, r0, ip, ror sl
 d38:	00000054 	andeq	r0, r0, r4, asr r0
 d3c:	01299c01 			; <UNDEFINED> instruction: 0x01299c01
 d40:	720f0000 	andvc	r0, pc, #0
 d44:	0100776f 	tsteq	r0, pc, ror #14
 d48:	00012903 	andeq	r2, r1, r3, lsl #18
 d4c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 d50:	07040900 	streq	r0, [r4, -r0, lsl #18]
 d54:	00000399 	muleq	r0, r9, r3
 d58:	0001fb00 	andeq	pc, r1, r0, lsl #22
 d5c:	a2000400 	andge	r0, r0, #0, 8
 d60:	04000006 	streq	r0, [r0], #-6
 d64:	00009f01 	andeq	r9, r0, r1, lsl #30
 d68:	05260c00 	streq	r0, [r6, #-3072]!	; 0xfffff400
 d6c:	0bcc0000 	bleq	ff300d74 <returnKeys.4003+0xdf2ffbb8>
 d70:	03dc2000 	bicseq	r2, ip, #0
 d74:	05230000 	streq	r0, [r3, #-0]!
 d78:	c1020000 	mrsgt	r0, (UNDEF: 2)
 d7c:	01000005 	tsteq	r0, r5
 d80:	000f586e 	andeq	r5, pc, lr, ror #16
 d84:	00005020 	andeq	r5, r0, r0, lsr #32
 d88:	619c0100 	orrsvs	r0, ip, r0, lsl #2
 d8c:	03000000 	movweq	r0, #0
 d90:	00776f72 	rsbseq	r6, r7, r2, ror pc
 d94:	00616e01 	rsbeq	r6, r1, r1, lsl #28
 d98:	91020000 	mrsls	r0, (UNDEF: 2)
 d9c:	04b1046f 	ldrteq	r0, [r1], #1135	; 0x46f
 da0:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
 da4:	00000061 	andeq	r0, r0, r1, rrx
 da8:	056e9102 	strbeq	r9, [lr, #-258]!	; 0xfffffefe
 dac:	00000567 	andeq	r0, r0, r7, ror #10
 db0:	00616f01 	rsbeq	r6, r1, r1, lsl #30
 db4:	91020000 	mrsls	r0, (UNDEF: 2)
 db8:	01060077 	tsteq	r6, r7, ror r0
 dbc:	00009108 	andeq	r9, r0, r8, lsl #2
 dc0:	05c80200 	strbeq	r0, [r8, #512]	; 0x200
 dc4:	65010000 	strvs	r0, [r1, #-0]
 dc8:	20000f1c 	andcs	r0, r0, ip, lsl pc
 dcc:	0000003c 	andeq	r0, r0, ip, lsr r0
 dd0:	008c9c01 	addeq	r9, ip, r1, lsl #24
 dd4:	b5040000 	strlt	r0, [r4, #-0]
 dd8:	01000005 	tsteq	r0, r5
 ddc:	00006165 	andeq	r6, r0, r5, ror #2
 de0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 de4:	05ec0700 	strbeq	r0, [ip, #1792]!	; 0x700
 de8:	5d010000 	stcpl	0, cr0, [r1, #-0]
 dec:	20000ee4 	andcs	r0, r0, r4, ror #29
 df0:	00000038 	andeq	r0, r0, r8, lsr r0
 df4:	92029c01 	andls	r9, r2, #256	; 0x100
 df8:	01000005 	tsteq	r0, r5
 dfc:	000ea454 	andeq	sl, lr, r4, asr r4
 e00:	00004020 	andeq	r4, r0, r0, lsr #32
 e04:	cf9c0100 	svcgt	0x009c0100
 e08:	04000000 	streq	r0, [r0], #-0
 e0c:	0000021e 	andeq	r0, r0, lr, lsl r2
 e10:	00cf5401 	sbceq	r5, pc, r1, lsl #8
 e14:	91020000 	mrsls	r0, (UNDEF: 2)
 e18:	051b0477 	ldreq	r0, [fp, #-1143]	; 0xfffffb89
 e1c:	54010000 	strpl	r0, [r1], #-0
 e20:	000000d6 	ldrdeq	r0, [r0], -r6
 e24:	00709102 	rsbseq	r9, r0, r2, lsl #2
 e28:	9a080106 	bls	201248 <startup-0x1fdfedb8>
 e2c:	06000000 	streq	r0, [r0], -r0
 e30:	03990704 	orrseq	r0, r9, #4, 14	; 0x100000
 e34:	a0080000 	andge	r0, r8, r0
 e38:	01000005 	tsteq	r0, r5
 e3c:	0000614a 	andeq	r6, r0, sl, asr #2
 e40:	000e5000 	andeq	r5, lr, r0
 e44:	00005420 	andeq	r5, r0, r0, lsr #8
 e48:	049c0100 	ldreq	r0, [ip], #256	; 0x100
 e4c:	09000001 	stmdbeq	r0, {r0}
 e50:	01007672 	tsteq	r0, r2, ror r6
 e54:	0000614e 	andeq	r6, r0, lr, asr #2
 e58:	6f910200 	svcvs	0x00910200
 e5c:	056f0800 	strbeq	r0, [pc, #-2048]!	; 664 <startup-0x1ffff99c>
 e60:	40010000 	andmi	r0, r1, r0
 e64:	00000061 	andeq	r0, r0, r1, rrx
 e68:	20000dfc 	strdcs	r0, [r0], -ip
 e6c:	00000054 	andeq	r0, r0, r4, asr r0
 e70:	012b9c01 			; <UNDEFINED> instruction: 0x012b9c01
 e74:	72090000 	andvc	r0, r9, #0
 e78:	44010076 	strmi	r0, [r1], #-118	; 0xffffff8a
 e7c:	00000061 	andeq	r0, r0, r1, rrx
 e80:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 e84:	00058102 	andeq	r8, r5, r2, lsl #2
 e88:	d23a0100 	eorsle	r0, sl, #0, 2
 e8c:	2a20000d 	bcs	800ec8 <startup-0x1f7ff138>
 e90:	01000000 	mrseq	r0, (UNDEF: 0)
 e94:	00014f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
 e98:	05ab0400 	streq	r0, [fp, #1024]!	; 0x400
 e9c:	3a010000 	bcc	40ea4 <startup-0x1ffbf15c>
 ea0:	00000061 	andeq	r0, r0, r1, rrx
 ea4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 ea8:	0004c902 	andeq	ip, r4, r2, lsl #18
 eac:	a8340100 	ldmdage	r4!, {r8}
 eb0:	2a20000d 	bcs	800eec <startup-0x1f7ff114>
 eb4:	01000000 	mrseq	r0, (UNDEF: 0)
 eb8:	0001739c 	muleq	r1, ip, r3
 ebc:	021e0400 	andseq	r0, lr, #0, 8
 ec0:	34010000 	strcc	r0, [r1], #-0
 ec4:	00000061 	andeq	r0, r0, r1, rrx
 ec8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 ecc:	0004ee0a 	andeq	lr, r4, sl, lsl #28
 ed0:	612b0100 			; <UNDEFINED> instruction: 0x612b0100
 ed4:	74000000 	strvc	r0, [r0], #-0
 ed8:	3420000d 	strtcc	r0, [r0], #-13
 edc:	01000000 	mrseq	r0, (UNDEF: 0)
 ee0:	00019a9c 	muleq	r1, ip, sl
 ee4:	76720900 	ldrbtvc	r0, [r2], -r0, lsl #18
 ee8:	612f0100 			; <UNDEFINED> instruction: 0x612f0100
 eec:	02000000 	andeq	r0, r0, #0
 ef0:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 ef4:	00000504 	andeq	r0, r0, r4, lsl #10
 ef8:	0d442401 	cfstrdeq	mvd2, [r4, #-4]
 efc:	00302000 	eorseq	r2, r0, r0
 f00:	9c010000 	stcls	0, cr0, [r1], {-0}
 f04:	000001be 			; <UNDEFINED> instruction: 0x000001be
 f08:	0005b004 	andeq	fp, r5, r4
 f0c:	61240100 			; <UNDEFINED> instruction: 0x61240100
 f10:	02000000 	andeq	r0, r0, #0
 f14:	0b007791 	bleq	1ed60 <startup-0x1ffe12a0>
 f18:	000004d9 	ldrdeq	r0, [r0], -r9
 f1c:	0c881701 	stceq	7, cr1, [r8], {1}
 f20:	00bc2000 	adcseq	r2, ip, r0
 f24:	9c010000 	stcls	0, cr0, [r1], {-0}
 f28:	000001e0 	andeq	r0, r0, r0, ror #3
 f2c:	01007803 	tsteq	r0, r3, lsl #16
 f30:	0000d617 	andeq	sp, r0, r7, lsl r6
 f34:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 f38:	05d90c00 	ldrbeq	r0, [r9, #3072]	; 0xc00
 f3c:	0a010000 	beq	40f44 <startup-0x1ffbf0bc>
 f40:	20000bcc 	andcs	r0, r0, ip, asr #23
 f44:	000000bc 	strheq	r0, [r0], -ip
 f48:	78039c01 	stmdavc	r3, {r0, sl, fp, ip, pc}
 f4c:	d60a0100 	strle	r0, [sl], -r0, lsl #2
 f50:	02000000 	andeq	r0, r0, #0
 f54:	00007491 	muleq	r0, r1, r4

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03011303 	movweq	r1, #4867	; 0x1303
  20:	3a0b0b0e 	bcc	2c2c60 <startup-0x1fd3d3a0>
  24:	010b3b0b 	tsteq	fp, fp, lsl #22
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	0b381349 	bleq	e04d60 <startup-0x1f1fb2a0>
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	3f13490b 	svccc	0x0013490b
  98:	00193c19 	andseq	r3, r9, r9, lsl ip
  9c:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	01111927 	tsteq	r1, r7, lsr #18
  ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b4:	0f000013 	svceq	0x00000013
  b8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c4:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
  c8:	03193f01 	tsteq	r9, #1, 30
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
  d4:	00130119 	andseq	r0, r3, r9, lsl r1
  d8:	00181100 	andseq	r1, r8, r0, lsl #2
  dc:	0b120000 	bleq	4800e4 <startup-0x1fb7ff1c>
  e0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  e4:	13000006 	movwne	r0, #6
  e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  ec:	0b3b0b3a 	bleq	ec2ddc <startup-0x1f13d224>
  f0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  f4:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
  f8:	03193f00 	tsteq	r9, #0, 30
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	1119270b 	tstne	r9, fp, lsl #14
 104:	40061201 	andmi	r1, r6, r1, lsl #4
 108:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 10c:	01000000 	mrseq	r0, (UNDEF: 0)
 110:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 114:	0e030b13 	vmoveq.32	d3[0], r0
 118:	06120111 			; <UNDEFINED> instruction: 0x06120111
 11c:	00001710 	andeq	r1, r0, r0, lsl r7
 120:	03011302 	movweq	r1, #4866	; 0x1302
 124:	3a0b0b0e 	bcc	2c2d64 <startup-0x1fd3d29c>
 128:	010b3b0b 	tsteq	fp, fp, lsl #22
 12c:	03000013 	movweq	r0, #19
 130:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 134:	0b3b0b3a 	bleq	ec2e24 <startup-0x1f13d1dc>
 138:	0b381349 	bleq	e04e64 <startup-0x1f1fb19c>
 13c:	24040000 	strcs	r0, [r4], #-0
 140:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 144:	000e030b 	andeq	r0, lr, fp, lsl #6
 148:	00160500 	andseq	r0, r6, r0, lsl #10
 14c:	0b3a0e03 	bleq	e83960 <startup-0x1f17c6a0>
 150:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 154:	0d060000 	stceq	0, cr0, [r6, #-0]
 158:	3a0e0300 	bcc	380d60 <startup-0x1fc7f2a0>
 15c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 160:	000b3813 	andeq	r3, fp, r3, lsl r8
 164:	00240700 	eoreq	r0, r4, r0, lsl #14
 168:	0b3e0b0b 	bleq	f82d9c <startup-0x1f07d264>
 16c:	00000803 	andeq	r0, r0, r3, lsl #16
 170:	49010108 	stmdbmi	r1, {r3, r8}
 174:	00130113 	andseq	r0, r3, r3, lsl r1
 178:	00210900 	eoreq	r0, r1, r0, lsl #18
 17c:	0b2f1349 	bleq	bc4ea8 <startup-0x1f43b158>
 180:	0f0a0000 	svceq	0x000a0000
 184:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 188:	0b000013 	bleq	1dc <startup-0x1ffffe24>
 18c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 190:	00001301 	andeq	r1, r0, r1, lsl #6
 194:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 198:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 19c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1a0:	0b3b0b3a 	bleq	ec2e90 <startup-0x1f13d170>
 1a4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1a8:	0000193c 	andeq	r1, r0, ip, lsr r9
 1ac:	0300340e 	movweq	r3, #1038	; 0x40e
 1b0:	3b0b3a0e 	blcc	2ce9f0 <startup-0x1fd31610>
 1b4:	3f13490b 	svccc	0x0013490b
 1b8:	00180219 	andseq	r0, r8, r9, lsl r2
 1bc:	00340f00 	eorseq	r0, r4, r0, lsl #30
 1c0:	0b3a1347 	bleq	e84ee4 <startup-0x1f17b11c>
 1c4:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 1c8:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 1cc:	03193f01 	tsteq	r9, #1, 30
 1d0:	3b0b3a0e 	blcc	2cea10 <startup-0x1fd315f0>
 1d4:	1119270b 	tstne	r9, fp, lsl #14
 1d8:	40061201 	andmi	r1, r6, r1, lsl #4
 1dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1e0:	00001301 	andeq	r1, r0, r1, lsl #6
 1e4:	03000511 	movweq	r0, #1297	; 0x511
 1e8:	3b0b3a0e 	blcc	2cea28 <startup-0x1fd315d8>
 1ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1f0:	12000018 	andne	r0, r0, #24
 1f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 1f8:	0b3b0b3a 	bleq	ec2ee8 <startup-0x1f13d118>
 1fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 200:	0b130000 	bleq	4c0208 <startup-0x1fb3fdf8>
 204:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 208:	00130106 	andseq	r0, r3, r6, lsl #2
 20c:	00341400 	eorseq	r1, r4, r0, lsl #8
 210:	0b3a0e03 	bleq	e83a24 <startup-0x1f17c5dc>
 214:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 218:	00001802 	andeq	r1, r0, r2, lsl #16
 21c:	3f012e15 	svccc	0x00012e15
 220:	3a0e0319 	bcc	380e8c <startup-0x1fc7f174>
 224:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 228:	01193c13 	tsteq	r9, r3, lsl ip
 22c:	16000013 			; <UNDEFINED> instruction: 0x16000013
 230:	00000018 	andeq	r0, r0, r8, lsl r0
 234:	3f012e17 	svccc	0x00012e17
 238:	3a0e0319 	bcc	380ea4 <startup-0x1fc7f15c>
 23c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 240:	00193c13 	andseq	r3, r9, r3, lsl ip
 244:	010b1800 	tsteq	fp, r0, lsl #16
 248:	06120111 			; <UNDEFINED> instruction: 0x06120111
 24c:	01190000 	tsteq	r9, r0
 250:	00134901 	andseq	r4, r3, r1, lsl #18
 254:	11010000 	mrsne	r0, (UNDEF: 1)
 258:	130e2501 	movwne	r2, #58625	; 0xe501
 25c:	110e030b 	tstne	lr, fp, lsl #6
 260:	10061201 	andne	r1, r6, r1, lsl #4
 264:	02000017 	andeq	r0, r0, #23
 268:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 26c:	0b3b0b3a 	bleq	ec2f5c <startup-0x1f13d0a4>
 270:	00001349 	andeq	r1, r0, r9, asr #6
 274:	0b002403 	bleq	9288 <startup-0x1fff6d78>
 278:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 27c:	0400000e 	streq	r0, [r0], #-14
 280:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 284:	0b3a0e03 	bleq	e83a98 <startup-0x1f17c568>
 288:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 28c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 290:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 294:	00130119 	andseq	r0, r3, r9, lsl r1
 298:	00050500 	andeq	r0, r5, r0, lsl #10
 29c:	0b3a0803 	bleq	e822b0 <startup-0x1f17dd50>
 2a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2a4:	00001802 	andeq	r1, r0, r2, lsl #16
 2a8:	03003406 	movweq	r3, #1030	; 0x406
 2ac:	3b0b3a0e 	blcc	2ceaec <startup-0x1fd31514>
 2b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2b4:	07000018 	smladeq	r0, r8, r0, r0
 2b8:	0111010b 	tsteq	r1, fp, lsl #2
 2bc:	00000612 	andeq	r0, r0, r2, lsl r6
 2c0:	03003408 	movweq	r3, #1032	; 0x408
 2c4:	3b0b3a08 	blcc	2ceaec <startup-0x1fd31514>
 2c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2cc:	09000018 	stmdbeq	r0, {r3, r4}
 2d0:	0b0b0024 	bleq	2c0368 <startup-0x1fd3fc98>
 2d4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 2d8:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 2dc:	03193f00 	tsteq	r9, #0, 30
 2e0:	3b0b3a0e 	blcc	2ceb20 <startup-0x1fd314e0>
 2e4:	1119270b 	tstne	r9, fp, lsl #14
 2e8:	40061201 	andmi	r1, r6, r1, lsl #4
 2ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2f0:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 2f4:	03193f01 	tsteq	r9, #1, 30
 2f8:	3b0b3a0e 	blcc	2ceb38 <startup-0x1fd314c8>
 2fc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 300:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 304:	96184006 	ldrls	r4, [r8], -r6
 308:	13011942 	movwne	r1, #6466	; 0x1942
 30c:	050c0000 	streq	r0, [ip, #-0]
 310:	3a0e0300 	bcc	380f18 <startup-0x1fc7f0e8>
 314:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 318:	00180213 	andseq	r0, r8, r3, lsl r2
 31c:	010b0d00 	tsteq	fp, r0, lsl #26
 320:	00001755 	andeq	r1, r0, r5, asr r7
 324:	3f012e0e 	svccc	0x00012e0e
 328:	3a0e0319 	bcc	380f94 <startup-0x1fc7f06c>
 32c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 330:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 334:	97184006 	ldrls	r4, [r8, -r6]
 338:	13011942 	movwne	r1, #6466	; 0x1942
 33c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 340:	03193f01 	tsteq	r9, #1, 30
 344:	3b0b3a0e 	blcc	2ceb84 <startup-0x1fd3147c>
 348:	1119270b 	tstne	r9, fp, lsl #14
 34c:	40061201 	andmi	r1, r6, r1, lsl #4
 350:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 354:	01000000 	mrseq	r0, (UNDEF: 0)
 358:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 35c:	0e030b13 	vmoveq.32	d3[0], r0
 360:	06120111 			; <UNDEFINED> instruction: 0x06120111
 364:	00001710 	andeq	r1, r0, r0, lsl r7
 368:	03011302 	movweq	r1, #4866	; 0x1302
 36c:	3a0b0b0e 	bcc	2c2fac <startup-0x1fd3d054>
 370:	010b3b0b 	tsteq	fp, fp, lsl #22
 374:	03000013 	movweq	r0, #19
 378:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 37c:	0b3b0b3a 	bleq	ec306c <startup-0x1f13cf94>
 380:	0b381349 	bleq	e050ac <startup-0x1f1faf54>
 384:	24040000 	strcs	r0, [r4], #-0
 388:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 38c:	000e030b 	andeq	r0, lr, fp, lsl #6
 390:	00160500 	andseq	r0, r6, r0, lsl #10
 394:	0b3a0e03 	bleq	e83ba8 <startup-0x1f17c458>
 398:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 39c:	0d060000 	stceq	0, cr0, [r6, #-0]
 3a0:	3a0e0300 	bcc	380fa8 <startup-0x1fc7f058>
 3a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a8:	000b3813 	andeq	r3, fp, r3, lsl r8
 3ac:	00240700 	eoreq	r0, r4, r0, lsl #14
 3b0:	0b3e0b0b 	bleq	f82fe4 <startup-0x1f07d01c>
 3b4:	00000803 	andeq	r0, r0, r3, lsl #16
 3b8:	49010108 	stmdbmi	r1, {r3, r8}
 3bc:	00130113 	andseq	r0, r3, r3, lsl r1
 3c0:	00210900 	eoreq	r0, r1, r0, lsl #18
 3c4:	0b2f1349 	bleq	bc50f0 <startup-0x1f43af10>
 3c8:	0f0a0000 	svceq	0x000a0000
 3cc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 3d0:	0b000013 	bleq	424 <startup-0x1ffffbdc>
 3d4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 3d8:	00001301 	andeq	r1, r0, r1, lsl #6
 3dc:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 3e0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 3e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3e8:	0b3a0e03 	bleq	e83bfc <startup-0x1f17c404>
 3ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3f4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3f8:	00130119 	andseq	r0, r3, r9, lsl r1
 3fc:	00050e00 	andeq	r0, r5, r0, lsl #28
 400:	0b3a0e03 	bleq	e83c14 <startup-0x1f17c3ec>
 404:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 408:	00001802 	andeq	r1, r0, r2, lsl #16
 40c:	0300050f 	movweq	r0, #1295	; 0x50f
 410:	3b0b3a08 	blcc	2cec38 <startup-0x1fd313c8>
 414:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 418:	10000018 	andne	r0, r0, r8, lsl r0
 41c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 420:	0b3a0e03 	bleq	e83c34 <startup-0x1f17c3cc>
 424:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 428:	06120111 			; <UNDEFINED> instruction: 0x06120111
 42c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 430:	00130119 	andseq	r0, r3, r9, lsl r1
 434:	010b1100 	mrseq	r1, (UNDEF: 27)
 438:	06120111 			; <UNDEFINED> instruction: 0x06120111
 43c:	34120000 	ldrcc	r0, [r2], #-0
 440:	3a080300 	bcc	201048 <startup-0x1fdfefb8>
 444:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 448:	00180213 	andseq	r0, r8, r3, lsl r2
 44c:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 450:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 454:	0b3b0b3a 	bleq	ec3144 <startup-0x1f13cebc>
 458:	01111927 	tsteq	r1, r7, lsr #18
 45c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 460:	00194296 	mulseq	r9, r6, r2
 464:	11010000 	mrsne	r0, (UNDEF: 1)
 468:	130e2501 	movwne	r2, #58625	; 0xe501
 46c:	110e030b 	tstne	lr, fp, lsl #6
 470:	10061201 	andne	r1, r6, r1, lsl #4
 474:	02000017 	andeq	r0, r0, #23
 478:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 47c:	0b3a0e03 	bleq	e83c90 <startup-0x1f17c370>
 480:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 484:	06120111 			; <UNDEFINED> instruction: 0x06120111
 488:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 48c:	03000019 	movweq	r0, #25
 490:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 494:	0b3a0e03 	bleq	e83ca8 <startup-0x1f17c358>
 498:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 49c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4a0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 4a4:	00130119 	andseq	r0, r3, r9, lsl r1
 4a8:	00050400 	andeq	r0, r5, r0, lsl #8
 4ac:	0b3a0803 	bleq	e824c0 <startup-0x1f17db40>
 4b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4b4:	00001802 	andeq	r1, r0, r2, lsl #16
 4b8:	0b002405 	bleq	94d4 <startup-0x1fff6b2c>
 4bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4c0:	0600000e 	streq	r0, [r0], -lr
 4c4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 4c8:	0b3a0e03 	bleq	e83cdc <startup-0x1f17c324>
 4cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 4d8:	00000019 	andeq	r0, r0, r9, lsl r0
 4dc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 4e0:	030b130e 	movweq	r1, #45838	; 0xb30e
 4e4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 4e8:	00171006 	andseq	r1, r7, r6
 4ec:	01130200 	tsteq	r3, r0, lsl #4
 4f0:	0b0b0e03 	bleq	2c3d04 <startup-0x1fd3c2fc>
 4f4:	0b3b0b3a 	bleq	ec31e4 <startup-0x1f13ce1c>
 4f8:	00001301 	andeq	r1, r0, r1, lsl #6
 4fc:	03000d03 	movweq	r0, #3331	; 0xd03
 500:	3b0b3a08 	blcc	2ced28 <startup-0x1fd312d8>
 504:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 508:	0400000b 	streq	r0, [r0], #-11
 50c:	0b0b0024 	bleq	2c05a4 <startup-0x1fd3fa5c>
 510:	0e030b3e 	vmoveq.16	d3[0], r0
 514:	16050000 	strne	r0, [r5], -r0
 518:	3a0e0300 	bcc	381120 <startup-0x1fc7eee0>
 51c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 520:	06000013 			; <UNDEFINED> instruction: 0x06000013
 524:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 528:	0b3b0b3a 	bleq	ec3218 <startup-0x1f13cde8>
 52c:	0b381349 	bleq	e05258 <startup-0x1f1fada8>
 530:	24070000 	strcs	r0, [r7], #-0
 534:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 538:	0008030b 	andeq	r0, r8, fp, lsl #6
 53c:	01010800 	tsteq	r1, r0, lsl #16
 540:	13011349 	movwne	r1, #4937	; 0x1349
 544:	21090000 	mrscs	r0, (UNDEF: 9)
 548:	2f134900 	svccs	0x00134900
 54c:	0a00000b 	beq	580 <startup-0x1ffffa80>
 550:	0b0b000f 	bleq	2c0594 <startup-0x1fd3fa6c>
 554:	00001349 	andeq	r1, r0, r9, asr #6
 558:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 55c:	00130119 	andseq	r0, r3, r9, lsl r1
 560:	00050c00 	andeq	r0, r5, r0, lsl #24
 564:	00001349 	andeq	r1, r0, r9, asr #6
 568:	0300340d 	movweq	r3, #1037	; 0x40d
 56c:	3b0b3a0e 	blcc	2cedac <startup-0x1fd31254>
 570:	3f13490b 	svccc	0x0013490b
 574:	00193c19 	andseq	r3, r9, r9, lsl ip
 578:	00340e00 	eorseq	r0, r4, r0, lsl #28
 57c:	0b3a0e03 	bleq	e83d90 <startup-0x1f17c270>
 580:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 584:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 588:	340f0000 	strcc	r0, [pc], #-0	; 590 <startup-0x1ffffa70>
 58c:	3a134700 	bcc	4d2194 <startup-0x1fb2de6c>
 590:	020b3b0b 	andeq	r3, fp, #11264	; 0x2c00
 594:	10000018 	andne	r0, r0, r8, lsl r0
 598:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 59c:	0b3a0e03 	bleq	e83db0 <startup-0x1f17c250>
 5a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 5ac:	11000019 	tstne	r0, r9, lsl r0
 5b0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 5b4:	0b3b0b3a 	bleq	ec32a4 <startup-0x1f13cd5c>
 5b8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5bc:	01000000 	mrseq	r0, (UNDEF: 0)
 5c0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 5c4:	0e030b13 	vmoveq.32	d3[0], r0
 5c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5cc:	00001710 	andeq	r1, r0, r0, lsl r7
 5d0:	3f012e02 	svccc	0x00012e02
 5d4:	3a0e0319 	bcc	381240 <startup-0x1fc7edc0>
 5d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5dc:	11134919 	tstne	r3, r9, lsl r9
 5e0:	40061201 	andmi	r1, r6, r1, lsl #4
 5e4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5e8:	00001301 	andeq	r1, r0, r1, lsl #6
 5ec:	03003403 	movweq	r3, #1027	; 0x403
 5f0:	3b0b3a0e 	blcc	2cee30 <startup-0x1fd311d0>
 5f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5f8:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
 5fc:	0111010b 	tsteq	r1, fp, lsl #2
 600:	00000612 	andeq	r0, r0, r2, lsl r6
 604:	03003405 	movweq	r3, #1029	; 0x405
 608:	3b0b3a08 	blcc	2cee30 <startup-0x1fd311d0>
 60c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 610:	06000018 			; <UNDEFINED> instruction: 0x06000018
 614:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 618:	0b3a0e03 	bleq	e83e2c <startup-0x1f17c1d4>
 61c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 620:	1301193c 	movwne	r1, #6460	; 0x193c
 624:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
 628:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 62c:	0b0b000f 	bleq	2c0670 <startup-0x1fd3f990>
 630:	00001349 	andeq	r1, r0, r9, asr #6
 634:	0b002409 	bleq	9660 <startup-0x1fff69a0>
 638:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 63c:	0a00000e 	beq	67c <startup-0x1ffff984>
 640:	13490101 	movtne	r0, #37121	; 0x9101
 644:	00001301 	andeq	r1, r0, r1, lsl #6
 648:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
 64c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 650:	00240c00 	eoreq	r0, r4, r0, lsl #24
 654:	0b3e0b0b 	bleq	f83288 <startup-0x1f07cd78>
 658:	00000803 	andeq	r0, r0, r3, lsl #16
 65c:	3f012e0d 	svccc	0x00012e0d
 660:	3a0e0319 	bcc	3812cc <startup-0x1fc7ed34>
 664:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 668:	11134919 	tstne	r3, r9, lsl r9
 66c:	40061201 	andmi	r1, r6, r1, lsl #4
 670:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 674:	00001301 	andeq	r1, r0, r1, lsl #6
 678:	3f012e0e 	svccc	0x00012e0e
 67c:	3a0e0319 	bcc	3812e8 <startup-0x1fc7ed18>
 680:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 684:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 688:	97184006 	ldrls	r4, [r8, -r6]
 68c:	13011942 	movwne	r1, #6466	; 0x1942
 690:	050f0000 	streq	r0, [pc, #-0]	; 698 <startup-0x1ffff968>
 694:	3a080300 	bcc	20129c <startup-0x1fdfed64>
 698:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 69c:	00180213 	andseq	r0, r8, r3, lsl r2
 6a0:	11010000 	mrsne	r0, (UNDEF: 1)
 6a4:	130e2501 	movwne	r2, #58625	; 0xe501
 6a8:	110e030b 	tstne	lr, fp, lsl #6
 6ac:	10061201 	andne	r1, r6, r1, lsl #4
 6b0:	02000017 	andeq	r0, r0, #23
 6b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6b8:	0b3a0e03 	bleq	e83ecc <startup-0x1f17c134>
 6bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6c4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 6c8:	00130119 	andseq	r0, r3, r9, lsl r1
 6cc:	00050300 	andeq	r0, r5, r0, lsl #6
 6d0:	0b3a0803 	bleq	e826e4 <startup-0x1f17d91c>
 6d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6d8:	00001802 	andeq	r1, r0, r2, lsl #16
 6dc:	03000504 	movweq	r0, #1284	; 0x504
 6e0:	3b0b3a0e 	blcc	2cef20 <startup-0x1fd310e0>
 6e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6e8:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
 6ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 6f0:	0b3b0b3a 	bleq	ec33e0 <startup-0x1f13cc20>
 6f4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6f8:	24060000 	strcs	r0, [r6], #-0
 6fc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 700:	000e030b 	andeq	r0, lr, fp, lsl #6
 704:	002e0700 	eoreq	r0, lr, r0, lsl #14
 708:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 70c:	0b3b0b3a 	bleq	ec33fc <startup-0x1f13cc04>
 710:	01111927 	tsteq	r1, r7, lsr #18
 714:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 718:	00194296 	mulseq	r9, r6, r2
 71c:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 720:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 724:	0b3b0b3a 	bleq	ec3414 <startup-0x1f13cbec>
 728:	13491927 	movtne	r1, #39207	; 0x9927
 72c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 730:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 734:	00130119 	andseq	r0, r3, r9, lsl r1
 738:	00340900 	eorseq	r0, r4, r0, lsl #18
 73c:	0b3a0803 	bleq	e82750 <startup-0x1f17d8b0>
 740:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 744:	00001802 	andeq	r1, r0, r2, lsl #16
 748:	3f012e0a 	svccc	0x00012e0a
 74c:	3a0e0319 	bcc	3813b8 <startup-0x1fc7ec48>
 750:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 754:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 758:	96184006 	ldrls	r4, [r8], -r6
 75c:	13011942 	movwne	r1, #6466	; 0x1942
 760:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 764:	03193f01 	tsteq	r9, #1, 30
 768:	3b0b3a0e 	blcc	2cefa8 <startup-0x1fd31058>
 76c:	1119270b 	tstne	r9, fp, lsl #14
 770:	40061201 	andmi	r1, r6, r1, lsl #4
 774:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 778:	00001301 	andeq	r1, r0, r1, lsl #6
 77c:	3f012e0c 	svccc	0x00012e0c
 780:	3a0e0319 	bcc	3813ec <startup-0x1fc7ec14>
 784:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 788:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 78c:	97184006 	ldrls	r4, [r8, -r6]
 790:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000150 	andeq	r0, r0, r0, asr r1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02450002 	subeq	r0, r5, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000160 	andcs	r0, r0, r0, ror #2
  3c:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	05010002 	streq	r0, [r1, #-2]
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000350 	andcs	r0, r0, r0, asr r3
  5c:	00000550 	andeq	r0, r0, r0, asr r5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	07880002 	streq	r0, [r8, r2]
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200008a0 	andcs	r0, r0, r0, lsr #17
  7c:	000000dc 	ldrdeq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	09aa0002 	stmibeq	sl!, {r1}
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	2000097c 	andcs	r0, r0, ip, ror r9
  9c:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0a3b0002 	beq	ec00bc <startup-0x1f13ff44>
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000a1c 	andcs	r0, r0, ip, lsl sl
  bc:	0000005e 	andeq	r0, r0, lr, asr r0
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	0c280002 	stceq	0, cr0, [r8], #-8
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000a7c 	andcs	r0, r0, ip, ror sl
  dc:	00000150 	andeq	r0, r0, r0, asr r1
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	0d590002 	ldcleq	0, cr0, [r9, #-8]
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20000bcc 	andcs	r0, r0, ip, asr #23
  fc:	000003dc 	ldrdeq	r0, [r0], -ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000160 	andcs	r0, r0, r0, ror #2
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
  18:	000000f8 	strdeq	r0, [r0], -r8
  1c:	0000011e 	andeq	r0, r0, lr, lsl r1
  20:	00000120 	andeq	r0, r0, r0, lsr #2
  24:	00000122 	andeq	r0, r0, r2, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000c9 	andeq	r0, r0, r9, asr #1
   4:	00740002 	rsbseq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  44:	5f6c6165 	svcpl	0x006c6165
  48:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  4c:	74730000 	ldrbtvc	r0, [r3], #-0
  50:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  54:	00632e70 	rsbeq	r2, r3, r0, ror lr
  58:	6f000001 	svcvs	0x00000001
  5c:	63656a62 	cmnvs	r5, #401408	; 0x62000
  60:	00682e74 	rsbeq	r2, r8, r4, ror lr
  64:	62000001 	andvs	r0, r0, #1
  68:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
  6c:	00010068 	andeq	r0, r1, r8, rrx
  70:	64617000 	strbtvs	r7, [r1], #-0
  74:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
  78:	00010068 	andeq	r0, r1, r8, rrx
  7c:	05000000 	streq	r0, [r0, #-0]
  80:	00000002 	andeq	r0, r0, r2
  84:	010c0320 	tsteq	ip, r0, lsr #6
  88:	03025e13 	movweq	r5, #11795	; 0x2e13
  8c:	00010100 	andeq	r0, r1, r0, lsl #2
  90:	00100205 	andseq	r0, r0, r5, lsl #4
  94:	15032000 	strne	r2, [r3, #-0]
  98:	4b3f3001 	blmi	fcc0a4 <startup-0x1f033f5c>
  9c:	d04b5959 	suble	r5, fp, r9, asr r9
  a0:	302f2f3e 	eorcc	r2, pc, lr, lsr pc	; <UNPREDICTABLE>
  a4:	2f32302f 	svccs	0x0032302f
  a8:	674b6b3f 	smlaldxvs	r6, fp, pc, fp	; <UNPREDICTABLE>
  ac:	13085967 	movwne	r5, #35175	; 0x8967
  b0:	00837583 	addeq	r7, r3, r3, lsl #11
  b4:	6f020402 	svcvs	0x00020402
  b8:	01040200 	mrseq	r0, R12_usr
  bc:	03067406 	movweq	r7, #25606	; 0x6406
  c0:	5959580a 	ldmdbpl	r9, {r1, r3, fp, ip, lr}^
  c4:	3c6e0359 	stclcc	3, cr0, [lr], #-356	; 0xfffffe9c
  c8:	01000802 	tsteq	r0, r2, lsl #16
  cc:	0000c101 	andeq	ip, r0, r1, lsl #2
  d0:	71000200 	mrsvc	r0, R8_usr
  d4:	02000000 	andeq	r0, r0, #0
  d8:	0d0efb01 	vstreq	d15, [lr, #-4]
  dc:	01010100 	mrseq	r0, (UNDEF: 17)
  e0:	00000001 	andeq	r0, r0, r1
  e4:	01000001 	tsteq	r0, r1
  e8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff6ad <returnKeys.4003+0xdfffe4f1>
  ec:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  f0:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
  f4:	2f737570 	svccs	0x00737570
  f8:	6b736544 	blvs	1cd9610 <startup-0x1e3269f0>
  fc:	2f706f74 	svccs	0x00706f74
 100:	30544144 	subscc	r4, r4, r4, asr #2
 104:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 108:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 10c:	2f657469 	svccs	0x00657469
 110:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 114:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 118:	62000067 	andvs	r0, r0, #103	; 0x67
 11c:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
 120:	00010063 	andeq	r0, r1, r3, rrx
 124:	6a626f00 	bvs	189bd2c <startup-0x1e7642d4>
 128:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 12c:	00010068 	andeq	r0, r1, r8, rrx
 130:	6c616200 	sfmvs	f6, 2, [r1], #-0
 134:	00682e6c 	rsbeq	r2, r8, ip, ror #28
 138:	70000001 	andvc	r0, r0, r1
 13c:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 140:	00682e65 	rsbeq	r2, r8, r5, ror #28
 144:	00000001 	andeq	r0, r0, r1
 148:	60020500 	andvs	r0, r2, r0, lsl #10
 14c:	03200001 			; <UNDEFINED> instruction: 0x03200001
 150:	4d4b011d 	stfmie	f0, [fp, #-116]	; 0xffffff8c
 154:	3d4b7775 	stclcc	7, cr7, [fp, #-468]	; 0xfffffe2c
 158:	5c3d4b67 			; <UNDEFINED> instruction: 0x5c3d4b67
 15c:	009f312f 	addseq	r3, pc, pc, lsr #2
 160:	06010402 	streq	r0, [r1], -r2, lsl #8
 164:	919f0666 	orrsls	r0, pc, r6, ror #12
 168:	ad4c3d6a 	stclge	13, cr3, [ip, #-424]	; 0xfffffe58
 16c:	4d73213d 	ldfmie	f2, [r3, #-244]!	; 0xffffff0c
 170:	593d593e 	ldmdbpl	sp!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
 174:	0200675d 	andeq	r6, r0, #24379392	; 0x1740000
 178:	66060104 	strvs	r0, [r6], -r4, lsl #2
 17c:	6a599f06 	bvs	1667d9c <startup-0x1e998264>
 180:	3d914c3d 	ldccc	12, cr4, [r1, #244]	; 0xf4
 184:	3f4d7321 	svccc	0x004d7321
 188:	5c593d59 	mrrcpl	13, 5, r3, r9, cr9
 18c:	000c0259 	andeq	r0, ip, r9, asr r2
 190:	012e0101 			; <UNDEFINED> instruction: 0x012e0101
 194:	00020000 	andeq	r0, r2, r0
 198:	0000005f 	andeq	r0, r0, pc, asr r0
 19c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 1a0:	0101000d 	tsteq	r1, sp
 1a4:	00000101 	andeq	r0, r0, r1, lsl #2
 1a8:	00000100 	andeq	r0, r0, r0, lsl #2
 1ac:	2f3a4301 	svccs	0x003a4301
 1b0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1b4:	61482f73 	hvcvs	33523	; 0x82f3
 1b8:	7375706d 	cmnvc	r5, #109	; 0x6d
 1bc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1c0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1c4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 1c8:	2f373130 	svccs	0x00373130
 1cc:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 1d0:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 1d4:	6165722f 	cmnvs	r5, pc, lsr #4
 1d8:	6f705f6c 	svcvs	0x00705f6c
 1dc:	0000676e 	andeq	r6, r0, lr, ror #14
 1e0:	70617267 	rsbvc	r7, r1, r7, ror #4
 1e4:	2e636968 	vnmulcs.f16	s13, s6, s17	; <UNPREDICTABLE>
 1e8:	00010063 	andeq	r0, r1, r3, rrx
 1ec:	61726700 	cmnvs	r2, r0, lsl #14
 1f0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1f4:	0100682e 	tsteq	r0, lr, lsr #16
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	03500205 	cmpeq	r0, #1342177280	; 0x50000000
 200:	67192000 	ldrvs	r2, [r9, -r0]
 204:	d76776e5 	strble	r7, [r7, -r5, ror #13]!
 208:	3d4b6768 	stclcc	7, cr6, [fp, #-416]	; 0xfffffe60
 20c:	033c0b03 	teqeq	ip, #3072	; 0xc00
 210:	3d4b2076 	stclcc	0, cr2, [fp, #-472]	; 0xfffffe28
 214:	20790344 	rsbscs	r0, r9, r4, asr #6
 218:	1c413d4b 	mcrrne	13, 4, r3, r1, cr11
 21c:	4c3e3d4b 	ldcmi	13, cr3, [lr], #-300	; 0xfffffed4
 220:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 224:	2f3d313d 	svccs	0x003d313d
 228:	03303d4b 	teqeq	r0, #4800	; 0x12c0
 22c:	23285879 			; <UNDEFINED> instruction: 0x23285879
 230:	67ca3e3d 			; <UNDEFINED> instruction: 0x67ca3e3d
 234:	593d3d3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 238:	59303d2f 	ldmdbpl	r0!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 23c:	3d4b3e3d 	stclcc	14, cr3, [fp, #-244]	; 0xffffff0c
 240:	313d4b31 	teqcc	sp, r1, lsr fp
 244:	4b91ca3e 	blmi	fe472b44 <returnKeys.4003+0xde471988>
 248:	2f3d2f59 	svccs	0x003d2f59
 24c:	313d593e 	teqcc	sp, lr, lsr r9
 250:	3d313d59 	ldccc	13, cr3, [r1, #-356]!	; 0xfffffe9c
 254:	91763d3d 	cmnls	r6, sp, lsr sp
 258:	833d593d 	teqhi	sp, #999424	; 0xf4000
 25c:	593d914c 	ldmdbpl	sp!, {r2, r3, r6, r8, ip, pc}
 260:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
 264:	4c675967 			; <UNDEFINED> instruction: 0x4c675967
 268:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 26c:	4b3d3d3d 	blmi	f4f768 <startup-0x1f0b0898>
 270:	4b4b4b4b 	blmi	12d2fa4 <startup-0x1ed2d05c>
 274:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
 278:	02004bad 	andeq	r4, r0, #177152	; 0x2b400
 27c:	003d0304 	eorseq	r0, sp, r4, lsl #6
 280:	49030402 	stmdbmi	r3, {r1, sl}
 284:	01040200 	mrseq	r0, R12_usr
 288:	02003c06 	andeq	r3, r0, #1536	; 0x600
 28c:	39060204 	stmdbcc	r6, {r2, r9}
 290:	01040200 	mrseq	r0, R12_usr
 294:	44063c06 	strmi	r3, [r6], #-3078	; 0xfffff3fa
 298:	0200e64d 	andeq	lr, r0, #80740352	; 0x4d00000
 29c:	66060104 	strvs	r0, [r6], -r4, lsl #2
 2a0:	ad685a06 	vstmdbge	r8!, {s11-s16}
 2a4:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 2a8:	5b595959 	blpl	1656814 <startup-0x1e9a97ec>
 2ac:	4b4b784b 	blmi	12de3e0 <startup-0x1ed21c20>
 2b0:	d7bb4d68 	ldrle	r4, [fp, r8, ror #26]!
 2b4:	ae4bbc9f 	mcrge	12, 2, fp, cr11, cr15, {4}
 2b8:	ac5a03a1 	mrrcge	3, 10, r0, sl, cr1
 2bc:	02202803 	eoreq	r2, r0, #196608	; 0x30000
 2c0:	01010005 	tsteq	r1, r5
 2c4:	0000009d 	muleq	r0, sp, r0
 2c8:	005d0002 	subseq	r0, sp, r2
 2cc:	01020000 	mrseq	r0, (UNDEF: 2)
 2d0:	000d0efb 	strdeq	r0, [sp], -fp
 2d4:	01010101 	tsteq	r1, r1, lsl #2
 2d8:	01000000 	mrseq	r0, (UNDEF: 0)
 2dc:	43010000 	movwmi	r0, #4096	; 0x1000
 2e0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 2e4:	2f737265 	svccs	0x00737265
 2e8:	706d6148 	rsbvc	r6, sp, r8, asr #2
 2ec:	442f7375 	strtmi	r7, [pc], #-885	; 2f4 <startup-0x1ffffd0c>
 2f0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 2f4:	442f706f 	strtmi	r7, [pc], #-111	; 2fc <startup-0x1ffffd04>
 2f8:	31305441 	teqcc	r0, r1, asr #8
 2fc:	6f432f37 	svcvs	0x00432f37
 300:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 304:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 308:	5f6c6165 	svcpl	0x006c6165
 30c:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 310:	626f0000 	rsbvs	r0, pc, #0
 314:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 318:	0100632e 	tsteq	r0, lr, lsr #6
 31c:	626f0000 	rsbvs	r0, pc, #0
 320:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 324:	0100682e 	tsteq	r0, lr, lsr #16
 328:	00000000 	andeq	r0, r0, r0
 32c:	08a00205 	stmiaeq	r0!, {r0, r2, r9}
 330:	4b152000 	blmi	548338 <startup-0x1fab7cc8>
 334:	03040200 	movweq	r0, #16896	; 0x4200
 338:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 33c:	00c70803 	sbceq	r0, r7, r3, lsl #16
 340:	06010402 	streq	r0, [r1], -r2, lsl #8
 344:	4b3f063c 	blmi	fc1c3c <startup-0x1f03e3c4>
 348:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 34c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 350:	c7080304 	strgt	r0, [r8, -r4, lsl #6]
 354:	01040200 	mrseq	r0, R12_usr
 358:	3f063c06 	svccc	0x00063c06
 35c:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 360:	01000402 	tsteq	r0, r2, lsl #8
 364:	00008001 	andeq	r8, r0, r1
 368:	50000200 	andpl	r0, r0, r0, lsl #4
 36c:	02000000 	andeq	r0, r0, #0
 370:	0d0efb01 	vstreq	d15, [lr, #-4]
 374:	01010100 	mrseq	r0, (UNDEF: 17)
 378:	00000001 	andeq	r0, r0, r1
 37c:	01000001 	tsteq	r0, r1
 380:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff945 <returnKeys.4003+0xdfffe789>
 384:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 388:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 38c:	2f737570 	svccs	0x00737570
 390:	6b736544 	blvs	1cd98a8 <startup-0x1e326758>
 394:	2f706f74 	svccs	0x00706f74
 398:	30544144 	subscc	r4, r4, r4, asr #2
 39c:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 3a0:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 3a4:	2f657469 	svccs	0x00657469
 3a8:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 3ac:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 3b0:	74000067 	strvc	r0, [r0], #-103	; 0xffffff99
 3b4:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 3b8:	0100632e 	tsteq	r0, lr, lsr #6
 3bc:	00000000 	andeq	r0, r0, r0
 3c0:	097c0205 	ldmdbeq	ip!, {r0, r2, r9}^
 3c4:	2f142000 	svccs	0x00142000
 3c8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 3cc:	01040200 	mrseq	r0, R12_usr
 3d0:	69062006 	stmdbvs	r6, {r1, r2, sp}
 3d4:	214ba03d 	cmpcs	fp, sp, lsr r0
 3d8:	2a2f2f2f 	bcs	bcc09c <startup-0x1f433f64>
 3dc:	764e4c5e 			; <UNDEFINED> instruction: 0x764e4c5e
 3e0:	2f2f2f4c 	svccs	0x002f2f4c
 3e4:	01000302 	tsteq	r0, r2, lsl #6
 3e8:	00008601 	andeq	r8, r0, r1, lsl #12
 3ec:	69000200 	stmdbvs	r0, {r9}
 3f0:	02000000 	andeq	r0, r0, #0
 3f4:	0d0efb01 	vstreq	d15, [lr, #-4]
 3f8:	01010100 	mrseq	r0, (UNDEF: 17)
 3fc:	00000001 	andeq	r0, r0, r1
 400:	01000001 	tsteq	r0, r1
 404:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff9c9 <returnKeys.4003+0xdfffe80d>
 408:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 40c:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 410:	2f737570 	svccs	0x00737570
 414:	6b736544 	blvs	1cd992c <startup-0x1e3266d4>
 418:	2f706f74 	svccs	0x00706f74
 41c:	30544144 	subscc	r4, r4, r4, asr #2
 420:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 424:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 428:	2f657469 	svccs	0x00657469
 42c:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 430:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 434:	70000067 	andvc	r0, r0, r7, rrx
 438:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 43c:	00632e65 	rsbeq	r2, r3, r5, ror #28
 440:	6f000001 	svcvs	0x00000001
 444:	63656a62 	cmnvs	r5, #401408	; 0x62000
 448:	00682e74 	rsbeq	r2, r8, r4, ror lr
 44c:	70000001 	andvc	r0, r0, r1
 450:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 454:	00682e65 	rsbeq	r2, r8, r5, ror #28
 458:	00000001 	andeq	r0, r0, r1
 45c:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
 460:	0320000a 			; <UNDEFINED> instruction: 0x0320000a
 464:	4d4b0136 	stfmie	f0, [fp, #-216]	; 0xffffff28
 468:	834b4b77 	movthi	r4, #47991	; 0xbb77
 46c:	04025977 	streq	r5, [r2], #-2423	; 0xfffff689
 470:	ac010100 	stfges	f0, [r1], {-0}
 474:	02000000 	andeq	r0, r0, #0
 478:	00005100 	andeq	r5, r0, r0, lsl #2
 47c:	fb010200 	blx	40c86 <startup-0x1ffbf37a>
 480:	01000d0e 	tsteq	r0, lr, lsl #26
 484:	00010101 	andeq	r0, r1, r1, lsl #2
 488:	00010000 	andeq	r0, r1, r0
 48c:	3a430100 	bcc	10c0894 <startup-0x1ef3f76c>
 490:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 494:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 498:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 49c:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 4a0:	6f746b73 	svcvs	0x00746b73
 4a4:	41442f70 	hvcmi	17136	; 0x42f0
 4a8:	37313054 			; <UNDEFINED> instruction: 0x37313054
 4ac:	646f432f 	strbtvs	r4, [pc], #-815	; 4b4 <startup-0x1ffffb4c>
 4b0:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 4b4:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 4b8:	705f6c61 	subsvc	r6, pc, r1, ror #24
 4bc:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 4c0:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 4c4:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 4c8:	00010063 	andeq	r0, r1, r3, rrx
 4cc:	05000000 	streq	r0, [r0, #-0]
 4d0:	000a7c02 	andeq	r7, sl, r2, lsl #24
 4d4:	914b1420 	cmpls	fp, r0, lsr #8
 4d8:	4b4b4b4b 	blmi	12d320c <startup-0x1ed2cdf4>
 4dc:	4b3d924c 	blmi	f64e14 <startup-0x1f09b1ec>
 4e0:	01040200 	mrseq	r0, R12_usr
 4e4:	2f065806 	svccs	0x00065806
 4e8:	01040200 	mrseq	r0, R12_usr
 4ec:	2f065806 	svccs	0x00065806
 4f0:	01040200 	mrseq	r0, R12_usr
 4f4:	2f065806 	svccs	0x00065806
 4f8:	01040200 	mrseq	r0, R12_usr
 4fc:	2f065806 	svccs	0x00065806
 500:	683d6821 	ldmdavs	sp!, {r0, r5, fp, sp, lr}
 504:	672f6759 			; <UNDEFINED> instruction: 0x672f6759
 508:	00300859 	eorseq	r0, r0, r9, asr r8
 50c:	03020402 	movweq	r0, #9218	; 0x2402
 510:	02007479 	andeq	r7, r0, #2030043136	; 0x79000000
 514:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
 518:	580a0306 	stmdapl	sl, {r1, r2, r8, r9}
 51c:	0902213d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r8, sp}
 520:	d2010100 	andle	r0, r1, #0, 2
 524:	02000000 	andeq	r0, r0, #0
 528:	00005700 	andeq	r5, r0, r0, lsl #14
 52c:	fb010200 	blx	40d36 <startup-0x1ffbf2ca>
 530:	01000d0e 	tsteq	r0, lr, lsl #26
 534:	00010101 	andeq	r0, r1, r1, lsl #2
 538:	00010000 	andeq	r0, r1, r0
 53c:	3a430100 	bcc	10c0944 <startup-0x1ef3f6bc>
 540:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 544:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 548:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 54c:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 550:	6f746b73 	svcvs	0x00746b73
 554:	41442f70 	hvcmi	17136	; 0x42f0
 558:	37313054 			; <UNDEFINED> instruction: 0x37313054
 55c:	646f432f 	strbtvs	r4, [pc], #-815	; 564 <startup-0x1ffffa9c>
 560:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 564:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 568:	705f6c61 	subsvc	r6, pc, r1, ror #24
 56c:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 570:	63736100 	cmnvs	r3, #0, 2
 574:	69646969 	stmdbvs	r4!, {r0, r3, r5, r6, r8, fp, sp, lr}^
 578:	616c7073 	smcvs	50947	; 0xc703
 57c:	00632e79 	rsbeq	r2, r3, r9, ror lr
 580:	00000001 	andeq	r0, r0, r1
 584:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
 588:	0320000b 			; <UNDEFINED> instruction: 0x0320000b
 58c:	914b0109 	cmpls	fp, r9, lsl #2
 590:	91919191 			; <UNDEFINED> instruction: 0x91919191
 594:	a0919191 	umullsge	r9, r1, r1, r1
 598:	91914b84 	orrsls	r4, r1, r4, lsl #23
 59c:	91919191 			; <UNDEFINED> instruction: 0x91919191
 5a0:	92929191 	addsls	r9, r2, #1073741860	; 0x40000024
 5a4:	2f4b3d67 	svccs	0x004b3d67
 5a8:	3d3d683d 	ldccc	8, cr6, [sp, #-244]!	; 0xffffff0c
 5ac:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
 5b0:	3d67762f 	stclcc	6, cr7, [r7, #-188]!	; 0xffffff44
 5b4:	674c593d 	smlaldxvs	r5, ip, sp, r9
 5b8:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
 5bc:	3d3d673d 	ldccc	7, cr6, [sp, #-244]!	; 0xffffff0c
 5c0:	2f676759 	svccs	0x00676759
 5c4:	3d673d84 	stclcc	13, cr3, [r7, #-528]!	; 0xfffffdf0
 5c8:	6767593d 			; <UNDEFINED> instruction: 0x6767593d
 5cc:	0075842f 	rsbseq	r8, r5, pc, lsr #8
 5d0:	06010402 	streq	r0, [r1], -r2, lsl #8
 5d4:	3d850620 	stccc	6, cr0, [r5, #128]	; 0x80
 5d8:	2f4c4b59 	svccs	0x004c4b59
 5dc:	594b4b3d 	stmdbpl	fp, {r0, r2, r3, r4, r5, r8, r9, fp, lr}^
 5e0:	0067684b 	rsbeq	r6, r7, fp, asr #16
 5e4:	06010402 	streq	r0, [r1], -r2, lsl #8
 5e8:	3d850620 	stccc	6, cr0, [r5, #128]	; 0x80
 5ec:	914c3d59 	cmpls	ip, r9, asr sp
 5f0:	9f764b67 	svcls	0x00764b67
 5f4:	01000402 	tsteq	r0, r2, lsl #8
 5f8:	Address 0x000005f8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	59726964 	ldmdbpl	r2!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	736f7000 	cmnvc	pc, #0
   8:	69730059 	ldmdbvs	r3!, {r0, r3, r4, r6}^
   c:	0058657a 	subseq	r6, r8, sl, ror r5
  10:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
  14:	64615074 	strbtvs	r5, [r1], #-116	; 0xffffff8c
  18:	00656c64 	rsbeq	r6, r5, r4, ror #24
  1c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  20:	72640059 	rsbvc	r0, r4, #89	; 0x59
  24:	43007761 	movwmi	r7, #1889	; 0x761
  28:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  2c:	2f737265 	svccs	0x00737265
  30:	706d6148 	rsbvc	r6, sp, r8, asr #2
  34:	442f7375 	strtmi	r7, [pc], #-885	; 3c <startup-0x1fffffc4>
  38:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  3c:	442f706f 	strtmi	r7, [pc], #-111	; 44 <startup-0x1fffffbc>
  40:	31305441 	teqcc	r0, r1, asr #8
  44:	6f432f37 	svcvs	0x00432f37
  48:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  4c:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  50:	5f6c6165 	svcpl	0x006c6165
  54:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  58:	6174732f 	cmnvs	r4, pc, lsr #6
  5c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  60:	7300632e 	movwvc	r6, #814	; 0x32e
  64:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
  68:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  6c:	6f507400 	svcvs	0x00507400
  70:	00746e69 	rsbseq	r6, r4, r9, ror #28
  74:	70617267 	rsbvc	r7, r1, r7, ror #4
  78:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
  7c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
  80:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
  84:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
  88:	00726165 	rsbseq	r6, r2, r5, ror #2
  8c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  90:	736e7500 	cmnvc	lr, #0, 10
  94:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  98:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  9c:	47007261 	strmi	r7, [r0, -r1, ror #4]
  a0:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  a4:	36203939 			; <UNDEFINED> instruction: 0x36203939
  a8:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  ac:	31303220 	teqcc	r0, r0, lsr #4
  b0:	31323037 	teqcc	r2, r7, lsr r0
  b4:	72282035 	eorvc	r2, r8, #53	; 0x35
  b8:	61656c65 	cmnvs	r5, r5, ror #24
  bc:	20296573 	eorcs	r6, r9, r3, ror r5
  c0:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  c4:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  c8:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  cc:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  d0:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  d4:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  d8:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  dc:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  e0:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  e4:	205d3231 	subscs	r3, sp, r1, lsr r2
  e8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  ec:	20626d75 	rsbcs	r6, r2, r5, ror sp
  f0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  f4:	613d6863 	teqvs	sp, r3, ror #16
  f8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  fc:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 100:	6f6c666d 	svcvs	0x006c666d
 104:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 108:	733d6962 	teqvc	sp, #1605632	; 0x188000
 10c:	2074666f 	rsbscs	r6, r4, pc, ror #12
 110:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 114:	20626d75 	rsbcs	r6, r2, r5, ror sp
 118:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 11c:	613d6863 	teqvs	sp, r3, ror #16
 120:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 124:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 128:	4f2d2067 	svcmi	0x002d2067
 12c:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 130:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 134:	50003939 	andpl	r3, r0, r9, lsr r9
 138:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; 24 <startup-0x1fffffdc>
 13c:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 140:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 144:	70615f74 	rsbvc	r5, r1, r4, ror pc
 148:	47740070 			; <UNDEFINED> instruction: 0x47740070
 14c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 150:	00797274 	rsbseq	r7, r9, r4, ror r2
 154:	73657270 	cmnvc	r5, #112, 4
 158:	4b646573 	blmi	191972c <startup-0x1e6e68d4>
 15c:	00737965 	rsbseq	r7, r3, r5, ror #18
 160:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 164:	00707574 	rsbseq	r7, r0, r4, ror r5
 168:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
 16c:	64646150 	strbtvs	r6, [r4], #-336	; 0xfffffeb0
 170:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
 174:	006e6961 	rsbeq	r6, lr, r1, ror #18
 178:	4a424f50 	bmi	1093ec0 <startup-0x1ef6c140>
 17c:	00544345 	subseq	r4, r4, r5, asr #6
 180:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 184:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 188:	736f7000 	cmnvc	pc, #0
 18c:	69640058 	stmdbvs	r4!, {r3, r4, r6}^
 190:	6e005872 	mcrvs	8, 0, r5, cr0, cr2, {3}
 194:	6f506d75 	svcvs	0x00506d75
 198:	73746e69 	cmnvc	r4, #1680	; 0x690
 19c:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 1a0:	7400544e 	strvc	r5, [r0], #-1102	; 0xfffffbb2
 1a4:	006a624f 	rsbeq	r6, sl, pc, asr #4
 1a8:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 1ac:	6f65675f 	svcvs	0x0065675f
 1b0:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 1b4:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 1b8:	5f79616c 	svcpl	0x0079616c
 1bc:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 1c0:	68740069 	ldmdavs	r4!, {r0, r3, r5, r6}^
 1c4:	6d007369 	stcvs	3, cr7, [r0, #-420]	; 0xfffffe5c
 1c8:	5f65766f 	svcpl	0x0065766f
 1cc:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 1d0:	2f3a4300 	svccs	0x003a4300
 1d4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1d8:	61482f73 	hvcvs	33523	; 0x82f3
 1dc:	7375706d 	cmnvc	r5, #109	; 0x6d
 1e0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1e4:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1e8:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 1ec:	2f373130 	svccs	0x00373130
 1f0:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 1f4:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 1f8:	6165722f 	cmnvs	r5, pc, lsr #4
 1fc:	6f705f6c 	svcvs	0x00705f6c
 200:	622f676e 	eorvs	r6, pc, #28835840	; 0x1b80000
 204:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
 208:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
 20c:	00317473 	eorseq	r7, r1, r3, ror r4
 210:	70617267 	rsbvc	r7, r1, r7, ror #4
 214:	5f636968 	svcpl	0x00636968
 218:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 21c:	6f635f65 	svcvs	0x00635f65
 220:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 224:	69700064 	ldmdbvs	r0!, {r2, r5, r6}^
 228:	006c6578 	rsbeq	r6, ip, r8, ror r5
 22c:	70617267 	rsbvc	r7, r1, r7, ror #4
 230:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 234:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 238:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 23c:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 240:	72670074 	rsbvc	r0, r7, #116	; 0x74
 244:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 248:	725f7363 	subsvc	r7, pc, #-1946157055	; 0x8c000001
 24c:	5f646165 	svcpl	0x00646165
 250:	61746164 	cmnvs	r4, r4, ror #2
 254:	61726700 	cmnvs	r2, r0, lsl #14
 258:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 25c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 260:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 264:	00796461 	rsbseq	r6, r9, r1, ror #8
 268:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff82d <returnKeys.4003+0xdfffe671>
 26c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 270:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 274:	2f737570 	svccs	0x00737570
 278:	6b736544 	blvs	1cd9790 <startup-0x1e326870>
 27c:	2f706f74 	svccs	0x00706f74
 280:	30544144 	subscc	r4, r4, r4, asr #2
 284:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 288:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 28c:	2f657469 	svccs	0x00657469
 290:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 294:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 298:	72672f67 	rsbvc	r2, r7, #412	; 0x19c
 29c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2a0:	00632e63 	rsbeq	r2, r3, r3, ror #28
 2a4:	6b73616d 	blvs	1cd8860 <startup-0x1e3277a0>
 2a8:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 2ac:	745f3874 	ldrbvc	r3, [pc], #-2164	; 2b4 <startup-0x1ffffd4c>
 2b0:	73756200 	cmnvc	r5, #0, 4
 2b4:	72670079 	rsbvc	r0, r7, #121	; 0x79
 2b8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2bc:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 2c0:	00657469 	rsbeq	r7, r5, r9, ror #8
 2c4:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 2c8:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 2cc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 2d0:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 2d4:	65740072 	ldrbvs	r0, [r4, #-114]!	; 0xffffff8e
 2d8:	6900706d 	stmdbvs	r0, {r0, r2, r3, r5, r6, ip, sp, lr}
 2dc:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 2e0:	61726700 	cmnvs	r2, r0, lsl #14
 2e4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2e8:	6165725f 	cmnvs	r5, pc, asr r2
 2ec:	72670064 	rsbvc	r0, r7, #100	; 0x64
 2f0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2f4:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 2f8:	5f657469 	svcpl	0x00657469
 2fc:	61746164 	cmnvs	r4, r4, ror #2
 300:	67617000 	strbvs	r7, [r1, -r0]!
 304:	61760065 	cmnvs	r6, r5, rrx
 308:	0065756c 	rsbeq	r7, r5, ip, ror #10
 30c:	70617267 	rsbvc	r7, r1, r7, ror #4
 310:	5f636968 	svcpl	0x00636968
 314:	61656c63 	cmnvs	r5, r3, ror #24
 318:	63735f72 	cmnvs	r3, #456	; 0x1c8
 31c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 320:	61726700 	cmnvs	r2, r0, lsl #14
 324:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 328:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 32c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 330:	00657a69 	rsbeq	r7, r5, r9, ror #20
 334:	5f746573 	svcpl	0x00746573
 338:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 33c:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 340:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 344:	2f3a4300 	svccs	0x003a4300
 348:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 34c:	61482f73 	hvcvs	33523	; 0x82f3
 350:	7375706d 	cmnvc	r5, #109	; 0x6d
 354:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 358:	706f746b 	rsbvc	r7, pc, fp, ror #8
 35c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 360:	2f373130 	svccs	0x00373130
 364:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 368:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 36c:	6165722f 	cmnvs	r5, pc, lsr #4
 370:	6f705f6c 	svcvs	0x00705f6c
 374:	6f2f676e 	svcvs	0x002f676e
 378:	63656a62 	cmnvs	r5, #401408	; 0x62000
 37c:	00632e74 	rsbeq	r2, r3, r4, ror lr
 380:	61656c63 	cmnvs	r5, r3, ror #24
 384:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 388:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 38c:	61726400 	cmnvs	r2, r0, lsl #8
 390:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 394:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 398:	736e7500 	cmnvc	lr, #0, 10
 39c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 3a0:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 3a4:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 3a8:	5f79616c 	svcpl	0x0079616c
 3ac:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 3b0:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 3b4:	5f79616c 	svcpl	0x0079616c
 3b8:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 3bc:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 3c0:	5f79616c 	svcpl	0x0079616c
 3c4:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 3c8:	3a43006f 	bcc	10c058c <startup-0x1ef3fa74>
 3cc:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 3d0:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 3d4:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 3d8:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 3dc:	6f746b73 	svcvs	0x00746b73
 3e0:	41442f70 	hvcmi	17136	; 0x42f0
 3e4:	37313054 			; <UNDEFINED> instruction: 0x37313054
 3e8:	646f432f 	strbtvs	r4, [pc], #-815	; 3f0 <startup-0x1ffffc10>
 3ec:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 3f0:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 3f4:	705f6c61 	subsvc	r6, pc, r1, ror #24
 3f8:	2f676e6f 	svccs	0x00676e6f
 3fc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 400:	00632e72 	rsbeq	r2, r3, r2, ror lr
 404:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 408:	6461705f 	strbtvs	r7, [r1], #-95	; 0xffffffa1
 40c:	00656c64 	rsbeq	r6, r5, r4, ror #24
 410:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 414:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
 418:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 41c:	00797274 	rsbseq	r7, r9, r4, ror r2
 420:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff9e5 <returnKeys.4003+0xdfffe829>
 424:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 428:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 42c:	2f737570 	svccs	0x00737570
 430:	6b736544 	blvs	1cd9948 <startup-0x1e3266b8>
 434:	2f706f74 	svccs	0x00706f74
 438:	30544144 	subscc	r4, r4, r4, asr #2
 43c:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 440:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 444:	2f657469 	svccs	0x00657469
 448:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 44c:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 450:	61702f67 	cmnvs	r0, r7, ror #30
 454:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 458:	6b00632e 	blvs	19118 <startup-0x1ffe6ee8>
 45c:	00627965 	rsbeq	r7, r2, r5, ror #18
 460:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 464:	654b6e72 	strbvs	r6, [fp, #-3698]	; 0xfffff18e
 468:	72007379 	andvc	r7, r0, #-469762047	; 0xe4000001
 46c:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
 470:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 474:	3a43006e 	bcc	10c0634 <startup-0x1ef3f9cc>
 478:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 47c:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 480:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 484:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 488:	6f746b73 	svcvs	0x00746b73
 48c:	41442f70 	hvcmi	17136	; 0x42f0
 490:	37313054 			; <UNDEFINED> instruction: 0x37313054
 494:	646f432f 	strbtvs	r4, [pc], #-815	; 49c <startup-0x1ffffb64>
 498:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 49c:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 4a0:	705f6c61 	subsvc	r6, pc, r1, ror #24
 4a4:	2f676e6f 	svccs	0x00676e6f
 4a8:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 4ac:	632e6461 			; <UNDEFINED> instruction: 0x632e6461
 4b0:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 4b8 <startup-0x1ffffb48>
 4b4:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 4b8:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 4bc:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
 4c0:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 4c4:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
 4c8:	63736100 	cmnvs	r3, #0, 2
 4cc:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 4d0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 4d4:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 4d8:	63736100 	cmnvs	r3, #0, 2
 4dc:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 4e0:	5f6c7274 	svcpl	0x006c7274
 4e4:	5f746962 	svcpl	0x00746962
 4e8:	61656c63 	cmnvs	r5, r3, ror #24
 4ec:	73610072 	cmnvc	r1, #114	; 0x72
 4f0:	5f696963 	svcpl	0x00696963
 4f4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4f8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 4fc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 334 <startup-0x1ffffccc>
 500:	0072656c 	rsbseq	r6, r2, ip, ror #10
 504:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 508:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 50c:	5f657469 	svcpl	0x00657469
 510:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 514:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 518:	64007265 	strvs	r7, [r0], #-613	; 0xfffffd9b
 51c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 520:	7263694d 	rsbvc	r6, r3, #1261568	; 0x134000
 524:	3a43006f 	bcc	10c06e8 <startup-0x1ef3f918>
 528:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 52c:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 530:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 534:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 538:	6f746b73 	svcvs	0x00746b73
 53c:	41442f70 	hvcmi	17136	; 0x42f0
 540:	37313054 			; <UNDEFINED> instruction: 0x37313054
 544:	646f432f 	strbtvs	r4, [pc], #-815	; 54c <startup-0x1ffffab4>
 548:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 54c:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 550:	705f6c61 	subsvc	r6, pc, r1, ror #24
 554:	2f676e6f 	svccs	0x00676e6f
 558:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 55c:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
 560:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 564:	6100632e 	tstvs	r0, lr, lsr #6
 568:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 56c:	61007373 	tstvs	r0, r3, ror r3
 570:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 574:	6165725f 	cmnvs	r5, pc, asr r2
 578:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 57c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 580:	63736100 	cmnvs	r3, #0, 2
 584:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 588:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 58c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 590:	73610061 	cmnvc	r1, #97	; 0x61
 594:	5f696963 	svcpl	0x00696963
 598:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 59c:	00646e61 	rsbeq	r6, r4, r1, ror #28
 5a0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5a4:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 5a8:	645f6461 	ldrbvs	r6, [pc], #-1121	; 5b0 <startup-0x1ffffa50>
 5ac:	00617461 	rsbeq	r7, r1, r1, ror #8
 5b0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 5b4:	61686300 	cmnvs	r8, r0, lsl #6
 5b8:	576f5472 			; <UNDEFINED> instruction: 0x576f5472
 5bc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 5c0:	546f6700 	strbtpl	r6, [pc], #-1792	; 5c8 <startup-0x1ffffa38>
 5c4:	0059586f 	subseq	r5, r9, pc, ror #16
 5c8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5cc:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 5d0:	5f657469 	svcpl	0x00657469
 5d4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 5d8:	63736100 	cmnvs	r3, #0, 2
 5dc:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 5e0:	5f6c7274 	svcpl	0x006c7274
 5e4:	5f746962 	svcpl	0x00746962
 5e8:	00746573 	rsbseq	r6, r4, r3, ror r5
 5ec:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5f0:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 5f4:	Address 0x000005f4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000048 	andeq	r0, r0, r8, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000058 	andcs	r0, r0, r8, asr r0
  48:	00000108 	andeq	r0, r0, r8, lsl #2
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	200e4101 	andcs	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	00000020 	andeq	r0, r0, r0, lsr #32
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	20000160 	andcs	r0, r0, r0, ror #2
  78:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  7c:	400c0e41 	andmi	r0, ip, r1, asr #28
  80:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  84:	018e4002 	orreq	r4, lr, r2
  88:	41500e41 	cmpmi	r0, r1, asr #28
  8c:	0000070d 	andeq	r0, r0, sp, lsl #14
  90:	0000000c 	andeq	r0, r0, ip
  94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  98:	7c020001 	stcvc	0, cr0, [r2], {1}
  9c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	00000090 	muleq	r0, r0, r0
  a8:	20000350 	andcs	r0, r0, r0, asr r3
  ac:	00000038 	andeq	r0, r0, r8, lsr r0
  b0:	40080e41 	andmi	r0, r8, r1, asr #28
  b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b8:	100e4101 	andne	r4, lr, r1, lsl #2
  bc:	00070d41 	andeq	r0, r7, r1, asr #26
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	00000090 	muleq	r0, r0, r0
  c8:	20000388 	andcs	r0, r0, r8, lsl #7
  cc:	00000034 	andeq	r0, r0, r4, lsr r0
  d0:	40080e41 	andmi	r0, r8, r1, asr #28
  d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d8:	100e4101 	andne	r4, lr, r1, lsl #2
  dc:	00070d41 	andeq	r0, r7, r1, asr #26
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	00000090 	muleq	r0, r0, r0
  e8:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
  ec:	0000006a 	andeq	r0, r0, sl, rrx
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	100e4101 	andne	r4, lr, r1, lsl #2
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	00000090 	muleq	r0, r0, r0
 108:	20000426 	andcs	r0, r0, r6, lsr #8
 10c:	00000072 	andeq	r0, r0, r2, ror r0
 110:	40080e41 	andmi	r0, r8, r1, asr #28
 114:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 118:	100e4101 	andne	r4, lr, r1, lsl #2
 11c:	00070d41 	andeq	r0, r7, r1, asr #26
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	00000090 	muleq	r0, r0, r0
 128:	20000498 	mulcs	r0, r8, r4
 12c:	00000090 	muleq	r0, r0, r0
 130:	40080e41 	andmi	r0, r8, r1, asr #28
 134:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 138:	180e4101 	stmdane	lr, {r0, r8, lr}
 13c:	00070d41 	andeq	r0, r7, r1, asr #26
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	00000090 	muleq	r0, r0, r0
 148:	20000528 	andcs	r0, r0, r8, lsr #10
 14c:	00000080 	andeq	r0, r0, r0, lsl #1
 150:	40080e41 	andmi	r0, r8, r1, asr #28
 154:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 158:	100e4101 	andne	r4, lr, r1, lsl #2
 15c:	00070d41 	andeq	r0, r7, r1, asr #26
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	00000090 	muleq	r0, r0, r0
 168:	200005a8 	andcs	r0, r0, r8, lsr #11
 16c:	00000040 	andeq	r0, r0, r0, asr #32
 170:	40080e41 	andmi	r0, r8, r1, asr #28
 174:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 178:	100e4101 	andne	r4, lr, r1, lsl #2
 17c:	00070d41 	andeq	r0, r7, r1, asr #26
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	00000090 	muleq	r0, r0, r0
 188:	200005e8 	andcs	r0, r0, r8, ror #11
 18c:	00000046 	andeq	r0, r0, r6, asr #32
 190:	40080e41 	andmi	r0, r8, r1, asr #28
 194:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 198:	100e4101 	andne	r4, lr, r1, lsl #2
 19c:	00070d41 	andeq	r0, r7, r1, asr #26
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000090 	muleq	r0, r0, r0
 1a8:	2000062e 	andcs	r0, r0, lr, lsr #12
 1ac:	0000002a 	andeq	r0, r0, sl, lsr #32
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	100e4101 	andne	r4, lr, r1, lsl #2
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	00000018 	andeq	r0, r0, r8, lsl r0
 1c4:	00000090 	muleq	r0, r0, r0
 1c8:	20000658 	andcs	r0, r0, r8, asr r6
 1cc:	0000005c 	andeq	r0, r0, ip, asr r0
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000090 	muleq	r0, r0, r0
 1e4:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
 1e8:	00000058 	andeq	r0, r0, r8, asr r0
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	100e4101 	andne	r4, lr, r1, lsl #2
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	00000090 	muleq	r0, r0, r0
 204:	2000070c 	andcs	r0, r0, ip, lsl #14
 208:	00000194 	muleq	r0, r4, r1
 20c:	400c0e41 	andmi	r0, ip, r1, asr #28
 210:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 214:	018e4002 	orreq	r4, lr, r2
 218:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 21c:	0000070d 	andeq	r0, r0, sp, lsl #14
 220:	0000000c 	andeq	r0, r0, ip
 224:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 228:	7c020001 	stcvc	0, cr0, [r2], {1}
 22c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000220 	andeq	r0, r0, r0, lsr #4
 238:	200008a0 	andcs	r0, r0, r0, lsr #17
 23c:	0000005e 	andeq	r0, r0, lr, asr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000220 	andeq	r0, r0, r0, lsr #4
 258:	200008fe 	strdcs	r0, [r0], -lr
 25c:	0000005e 	andeq	r0, r0, lr, asr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	180e4101 	stmdane	lr, {r0, r8, lr}
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	00000220 	andeq	r0, r0, r0, lsr #4
 278:	2000095c 	andcs	r0, r0, ip, asr r9
 27c:	00000020 	andeq	r0, r0, r0, lsr #32
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	180e4101 	stmdane	lr, {r0, r8, lr}
 28c:	00070d41 	andeq	r0, r7, r1, asr #26
 290:	0000000c 	andeq	r0, r0, ip
 294:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 298:	7c020001 	stcvc	0, cr0, [r2], {1}
 29c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a0:	00000018 	andeq	r0, r0, r8, lsl r0
 2a4:	00000290 	muleq	r0, r0, r2
 2a8:	2000097c 	andcs	r0, r0, ip, ror r9
 2ac:	00000044 	andeq	r0, r0, r4, asr #32
 2b0:	40080e41 	andmi	r0, r8, r1, asr #28
 2b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	00000290 	muleq	r0, r0, r2
 2c4:	200009c0 	andcs	r0, r0, r0, asr #19
 2c8:	0000002c 	andeq	r0, r0, ip, lsr #32
 2cc:	40080e41 	andmi	r0, r8, r1, asr #28
 2d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d4:	100e4101 	andne	r4, lr, r1, lsl #2
 2d8:	00070d41 	andeq	r0, r7, r1, asr #26
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	00000290 	muleq	r0, r0, r2
 2e4:	200009ec 	andcs	r0, r0, ip, ror #19
 2e8:	0000001e 	andeq	r0, r0, lr, lsl r0
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	100e4101 	andne	r4, lr, r1, lsl #2
 2f8:	00070d41 	andeq	r0, r7, r1, asr #26
 2fc:	00000018 	andeq	r0, r0, r8, lsl r0
 300:	00000290 	muleq	r0, r0, r2
 304:	20000a0a 	andcs	r0, r0, sl, lsl #20
 308:	00000012 	andeq	r0, r0, r2, lsl r0
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 318:	0000000c 	andeq	r0, r0, ip
 31c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 320:	7c020001 	stcvc	0, cr0, [r2], {1}
 324:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 328:	0000001c 	andeq	r0, r0, ip, lsl r0
 32c:	00000318 	andeq	r0, r0, r8, lsl r3
 330:	20000a1c 	andcs	r0, r0, ip, lsl sl
 334:	0000005e 	andeq	r0, r0, lr, asr r0
 338:	40080e41 	andmi	r0, r8, r1, asr #28
 33c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 340:	100e4101 	andne	r4, lr, r1, lsl #2
 344:	00070d41 	andeq	r0, r7, r1, asr #26
 348:	0000000c 	andeq	r0, r0, ip
 34c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 350:	7c020001 	stcvc	0, cr0, [r2], {1}
 354:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 358:	0000001c 	andeq	r0, r0, ip, lsl r0
 35c:	00000348 	andeq	r0, r0, r8, asr #6
 360:	20000a7c 	andcs	r0, r0, ip, ror sl
 364:	00000054 	andeq	r0, r0, r4, asr r0
 368:	40080e41 	andmi	r0, r8, r1, asr #28
 36c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 370:	100e4101 	andne	r4, lr, r1, lsl #2
 374:	00070d41 	andeq	r0, r7, r1, asr #26
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	00000348 	andeq	r0, r0, r8, asr #6
 380:	20000ad0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 384:	00000054 	andeq	r0, r0, r4, asr r0
 388:	40080e41 	andmi	r0, r8, r1, asr #28
 38c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 390:	100e4101 	andne	r4, lr, r1, lsl #2
 394:	00070d41 	andeq	r0, r7, r1, asr #26
 398:	00000020 	andeq	r0, r0, r0, lsr #32
 39c:	00000348 	andeq	r0, r0, r8, asr #6
 3a0:	20000b24 	andcs	r0, r0, r4, lsr #22
 3a4:	000000a8 	andeq	r0, r0, r8, lsr #1
 3a8:	400c0e41 	andmi	r0, ip, r1, asr #28
 3ac:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3b0:	018e4002 	orreq	r4, lr, r2
 3b4:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 3b8:	0000070d 	andeq	r0, r0, sp, lsl #14
 3bc:	0000000c 	andeq	r0, r0, ip
 3c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3c4:	7c020001 	stcvc	0, cr0, [r2], {1}
 3c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 3d4:	20000bcc 	andcs	r0, r0, ip, asr #23
 3d8:	000000bc 	strheq	r0, [r0], -ip
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	100e4101 	andne	r4, lr, r1, lsl #2
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 3f4:	20000c88 	andcs	r0, r0, r8, lsl #25
 3f8:	000000bc 	strheq	r0, [r0], -ip
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	100e4101 	andne	r4, lr, r1, lsl #2
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 414:	20000d44 	andcs	r0, r0, r4, asr #26
 418:	00000030 	andeq	r0, r0, r0, lsr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	100e4101 	andne	r4, lr, r1, lsl #2
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 434:	20000d74 	andcs	r0, r0, r4, ror sp
 438:	00000034 	andeq	r0, r0, r4, lsr r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 454:	20000da8 	andcs	r0, r0, r8, lsr #27
 458:	0000002a 	andeq	r0, r0, sl, lsr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 474:	20000dd2 	ldrdcs	r0, [r0], -r2
 478:	0000002a 	andeq	r0, r0, sl, lsr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	00000020 	andeq	r0, r0, r0, lsr #32
 490:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 494:	20000dfc 	strdcs	r0, [r0], -ip
 498:	00000054 	andeq	r0, r0, r4, asr r0
 49c:	400c0e41 	andmi	r0, ip, r1, asr #28
 4a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4a4:	018e4002 	orreq	r4, lr, r2
 4a8:	41180e41 	tstmi	r8, r1, asr #28
 4ac:	0000070d 	andeq	r0, r0, sp, lsl #14
 4b0:	00000020 	andeq	r0, r0, r0, lsr #32
 4b4:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 4b8:	20000e50 	andcs	r0, r0, r0, asr lr
 4bc:	00000054 	andeq	r0, r0, r4, asr r0
 4c0:	400c0e41 	andmi	r0, ip, r1, asr #28
 4c4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4c8:	018e4002 	orreq	r4, lr, r2
 4cc:	41180e41 	tstmi	r8, r1, asr #28
 4d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 4d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d8:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 4dc:	20000ea4 	andcs	r0, r0, r4, lsr #29
 4e0:	00000040 	andeq	r0, r0, r0, asr #32
 4e4:	40080e41 	andmi	r0, r8, r1, asr #28
 4e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4ec:	100e4101 	andne	r4, lr, r1, lsl #2
 4f0:	00070d41 	andeq	r0, r7, r1, asr #26
 4f4:	00000018 	andeq	r0, r0, r8, lsl r0
 4f8:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 4fc:	20000ee4 	andcs	r0, r0, r4, ror #29
 500:	00000038 	andeq	r0, r0, r8, lsr r0
 504:	40080e41 	andmi	r0, r8, r1, asr #28
 508:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 50c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 518:	20000f1c 	andcs	r0, r0, ip, lsl pc
 51c:	0000003c 	andeq	r0, r0, ip, lsr r0
 520:	40080e41 	andmi	r0, r8, r1, asr #28
 524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 528:	100e4101 	andne	r4, lr, r1, lsl #2
 52c:	00070d41 	andeq	r0, r7, r1, asr #26
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
 534:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 538:	20000f58 	andcs	r0, r0, r8, asr pc
 53c:	00000050 	andeq	r0, r0, r0, asr r0
 540:	40080e41 	andmi	r0, r8, r1, asr #28
 544:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 548:	180e4101 	stmdane	lr, {r0, r8, lr}
 54c:	00070d41 	andeq	r0, r7, r1, asr #26
