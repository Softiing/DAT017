
./Debug/real_pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f828 	bl	20000058 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	// Setup display
	*GPIO_E_MODER = 0x55555555;
20000014:	4b0b      	ldr	r3, [pc, #44]	; (20000044 <init_app+0x34>)
20000016:	4a0c      	ldr	r2, [pc, #48]	; (20000048 <init_app+0x38>)
20000018:	601a      	str	r2, [r3, #0]
	
	// Setup for keypad
	*GPIO_D_MODER = 0x55000000;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <init_app+0x3c>)
2000001c:	22aa      	movs	r2, #170	; 0xaa
2000001e:	05d2      	lsls	r2, r2, #23
20000020:	601a      	str	r2, [r3, #0]
	*GPIO_D_OTYPER &= 0x0000FFFF;   
20000022:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <init_app+0x40>)
20000024:	4a0a      	ldr	r2, [pc, #40]	; (20000050 <init_app+0x40>)
20000026:	8812      	ldrh	r2, [r2, #0]
20000028:	b292      	uxth	r2, r2
2000002a:	801a      	strh	r2, [r3, #0]
	*GPIO_D_OTYPER |= 0x00000000;     
2000002c:	4b08      	ldr	r3, [pc, #32]	; (20000050 <init_app+0x40>)
2000002e:	4a08      	ldr	r2, [pc, #32]	; (20000050 <init_app+0x40>)
20000030:	8812      	ldrh	r2, [r2, #0]
20000032:	b292      	uxth	r2, r2
20000034:	801a      	strh	r2, [r3, #0]
	*GPIO_D_PUPDR = 0x00AA0000;    
20000036:	4b07      	ldr	r3, [pc, #28]	; (20000054 <init_app+0x44>)
20000038:	22aa      	movs	r2, #170	; 0xaa
2000003a:	0412      	lsls	r2, r2, #16
2000003c:	601a      	str	r2, [r3, #0]
}
2000003e:	46c0      	nop			; (mov r8, r8)
20000040:	46bd      	mov	sp, r7
20000042:	bd80      	pop	{r7, pc}
20000044:	40021000 	andmi	r1, r2, r0
20000048:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000004c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000050:	40020c04 	andmi	r0, r2, r4, lsl #24
20000054:	40020c0c 	andmi	r0, r2, ip, lsl #24

20000058 <main>:

extern OBJECT ball;
extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void main(void) {
20000058:	b580      	push	{r7, lr}
2000005a:	b086      	sub	sp, #24
2000005c:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
2000005e:	4b3a      	ldr	r3, [pc, #232]	; (20000148 <main+0xf0>)
20000060:	613b      	str	r3, [r7, #16]
	POBJECT pl = &leftPaddle;
20000062:	4b3a      	ldr	r3, [pc, #232]	; (2000014c <main+0xf4>)
20000064:	60fb      	str	r3, [r7, #12]
	POBJECT pr = &rightPaddle;
20000066:	4b3a      	ldr	r3, [pc, #232]	; (20000150 <main+0xf8>)
20000068:	60bb      	str	r3, [r7, #8]
	init_app();
2000006a:	f7ff ffd1 	bl	20000010 <init_app>
	graphic_initialize();
2000006e:	f000 faa3 	bl	200005b8 <graphic_initialize>
  #ifndef SIMULATOR
	graphic_clear_screen();
20000072:	f000 facf 	bl	20000614 <graphic_clear_screen>
  #endif
	
	// Set speed for ball
	p->set_speed(p, 4, 4);
20000076:	693b      	ldr	r3, [r7, #16]
20000078:	6a1b      	ldr	r3, [r3, #32]
2000007a:	6938      	ldr	r0, [r7, #16]
2000007c:	2204      	movs	r2, #4
2000007e:	2104      	movs	r1, #4
20000080:	4798      	blx	r3
	while(1) {
		// Update from keypad
		unsigned char *pressedKeys = keyb();
20000082:	f000 fcff 	bl	20000a84 <keyb>
20000086:	0003      	movs	r3, r0
20000088:	607b      	str	r3, [r7, #4]
		pl->set_speed(pl,0,0);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	6a1b      	ldr	r3, [r3, #32]
2000008e:	68f8      	ldr	r0, [r7, #12]
20000090:	2200      	movs	r2, #0
20000092:	2100      	movs	r1, #0
20000094:	4798      	blx	r3
		pr->set_speed(pr,0,0);
20000096:	68bb      	ldr	r3, [r7, #8]
20000098:	6a1b      	ldr	r3, [r3, #32]
2000009a:	68b8      	ldr	r0, [r7, #8]
2000009c:	2200      	movs	r2, #0
2000009e:	2100      	movs	r1, #0
200000a0:	4798      	blx	r3
		for(unsigned char i = 0; i < 4; i++) {
200000a2:	2317      	movs	r3, #23
200000a4:	18fb      	adds	r3, r7, r3
200000a6:	2200      	movs	r2, #0
200000a8:	701a      	strb	r2, [r3, #0]
200000aa:	e035      	b.n	20000118 <main+0xc0>
			switch(pressedKeys[i]) {
200000ac:	2317      	movs	r3, #23
200000ae:	18fb      	adds	r3, r7, r3
200000b0:	781b      	ldrb	r3, [r3, #0]
200000b2:	687a      	ldr	r2, [r7, #4]
200000b4:	18d3      	adds	r3, r2, r3
200000b6:	781b      	ldrb	r3, [r3, #0]
200000b8:	2b04      	cmp	r3, #4
200000ba:	d010      	beq.n	200000de <main+0x86>
200000bc:	dc02      	bgt.n	200000c4 <main+0x6c>
200000be:	2b01      	cmp	r3, #1
200000c0:	d005      	beq.n	200000ce <main+0x76>
200000c2:	e022      	b.n	2000010a <main+0xb2>
200000c4:	2b0c      	cmp	r3, #12
200000c6:	d011      	beq.n	200000ec <main+0x94>
200000c8:	2b0d      	cmp	r3, #13
200000ca:	d017      	beq.n	200000fc <main+0xa4>
200000cc:	e01d      	b.n	2000010a <main+0xb2>
				case 0x01: pl->set_speed(pl,0,-5); break;
200000ce:	68fb      	ldr	r3, [r7, #12]
200000d0:	6a1b      	ldr	r3, [r3, #32]
200000d2:	2205      	movs	r2, #5
200000d4:	4252      	negs	r2, r2
200000d6:	68f8      	ldr	r0, [r7, #12]
200000d8:	2100      	movs	r1, #0
200000da:	4798      	blx	r3
200000dc:	e015      	b.n	2000010a <main+0xb2>
				case 0x04: pl->set_speed(pl,0,5); break;
200000de:	68fb      	ldr	r3, [r7, #12]
200000e0:	6a1b      	ldr	r3, [r3, #32]
200000e2:	68f8      	ldr	r0, [r7, #12]
200000e4:	2205      	movs	r2, #5
200000e6:	2100      	movs	r1, #0
200000e8:	4798      	blx	r3
200000ea:	e00e      	b.n	2000010a <main+0xb2>
				case 0x0C: pr->set_speed(pr,0,-5); break;
200000ec:	68bb      	ldr	r3, [r7, #8]
200000ee:	6a1b      	ldr	r3, [r3, #32]
200000f0:	2205      	movs	r2, #5
200000f2:	4252      	negs	r2, r2
200000f4:	68b8      	ldr	r0, [r7, #8]
200000f6:	2100      	movs	r1, #0
200000f8:	4798      	blx	r3
200000fa:	e006      	b.n	2000010a <main+0xb2>
				case 0x0D: pr->set_speed(pr,0,5); break;
200000fc:	68bb      	ldr	r3, [r7, #8]
200000fe:	6a1b      	ldr	r3, [r3, #32]
20000100:	68b8      	ldr	r0, [r7, #8]
20000102:	2205      	movs	r2, #5
20000104:	2100      	movs	r1, #0
20000106:	4798      	blx	r3
20000108:	46c0      	nop			; (mov r8, r8)
		for(unsigned char i = 0; i < 4; i++) {
2000010a:	2317      	movs	r3, #23
2000010c:	18fb      	adds	r3, r7, r3
2000010e:	781a      	ldrb	r2, [r3, #0]
20000110:	2317      	movs	r3, #23
20000112:	18fb      	adds	r3, r7, r3
20000114:	3201      	adds	r2, #1
20000116:	701a      	strb	r2, [r3, #0]
20000118:	2317      	movs	r3, #23
2000011a:	18fb      	adds	r3, r7, r3
2000011c:	781b      	ldrb	r3, [r3, #0]
2000011e:	2b03      	cmp	r3, #3
20000120:	d9c4      	bls.n	200000ac <main+0x54>
			}
		}
		
		// Move game objects
		p->move(p);
20000122:	693b      	ldr	r3, [r7, #16]
20000124:	69db      	ldr	r3, [r3, #28]
20000126:	693a      	ldr	r2, [r7, #16]
20000128:	0010      	movs	r0, r2
2000012a:	4798      	blx	r3
		pl->move(pl);
2000012c:	68fb      	ldr	r3, [r7, #12]
2000012e:	69db      	ldr	r3, [r3, #28]
20000130:	68fa      	ldr	r2, [r7, #12]
20000132:	0010      	movs	r0, r2
20000134:	4798      	blx	r3
		pr->move(pr);
20000136:	68bb      	ldr	r3, [r7, #8]
20000138:	69db      	ldr	r3, [r3, #28]
2000013a:	68ba      	ldr	r2, [r7, #8]
2000013c:	0010      	movs	r0, r2
2000013e:	4798      	blx	r3
		delay_milli(30);
20000140:	201e      	movs	r0, #30
20000142:	f000 fc03 	bl	2000094c <delay_milli>
	while(1) {
20000146:	e79c      	b.n	20000082 <main+0x2a>
20000148:	20000c00 	andcs	r0, r0, r0, lsl #24
2000014c:	20000cf8 	strdcs	r0, [r0], -r8
20000150:	20000d1c 	andcs	r0, r0, ip, lsl sp

20000154 <move_ball>:
};

extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void move_ball(POBJECT this) {
20000154:	b580      	push	{r7, lr}
20000156:	b084      	sub	sp, #16
20000158:	af00      	add	r7, sp, #0
2000015a:	6078      	str	r0, [r7, #4]
	clear_object(this);
2000015c:	687b      	ldr	r3, [r7, #4]
2000015e:	0018      	movs	r0, r3
20000160:	f000 fb7d 	bl	2000085e <clear_object>
	
	this->posX += this->dirX;
20000164:	687b      	ldr	r3, [r7, #4]
20000166:	68da      	ldr	r2, [r3, #12]
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	685b      	ldr	r3, [r3, #4]
2000016c:	18d2      	adds	r2, r2, r3
2000016e:	687b      	ldr	r3, [r7, #4]
20000170:	60da      	str	r2, [r3, #12]
	this->posY += this->dirY;
20000172:	687b      	ldr	r3, [r7, #4]
20000174:	691a      	ldr	r2, [r3, #16]
20000176:	687b      	ldr	r3, [r7, #4]
20000178:	689b      	ldr	r3, [r3, #8]
2000017a:	18d2      	adds	r2, r2, r3
2000017c:	687b      	ldr	r3, [r7, #4]
2000017e:	611a      	str	r2, [r3, #16]
	
	// Wall collisions
	if(this->posY < 0) {
20000180:	687b      	ldr	r3, [r7, #4]
20000182:	691b      	ldr	r3, [r3, #16]
20000184:	2b00      	cmp	r3, #0
20000186:	da08      	bge.n	2000019a <move_ball+0x46>
		this->posY = 0;
20000188:	687b      	ldr	r3, [r7, #4]
2000018a:	2200      	movs	r2, #0
2000018c:	611a      	str	r2, [r3, #16]
		this->dirY = -this->dirY;
2000018e:	687b      	ldr	r3, [r7, #4]
20000190:	689b      	ldr	r3, [r3, #8]
20000192:	425a      	negs	r2, r3
20000194:	687b      	ldr	r3, [r7, #4]
20000196:	609a      	str	r2, [r3, #8]
20000198:	e00b      	b.n	200001b2 <move_ball+0x5e>
	} else if(this->posY > 63) {
2000019a:	687b      	ldr	r3, [r7, #4]
2000019c:	691b      	ldr	r3, [r3, #16]
2000019e:	2b3f      	cmp	r3, #63	; 0x3f
200001a0:	dd07      	ble.n	200001b2 <move_ball+0x5e>
		this->posY = 63;
200001a2:	687b      	ldr	r3, [r7, #4]
200001a4:	223f      	movs	r2, #63	; 0x3f
200001a6:	611a      	str	r2, [r3, #16]
		this->dirY = -this->dirY;
200001a8:	687b      	ldr	r3, [r7, #4]
200001aa:	689b      	ldr	r3, [r3, #8]
200001ac:	425a      	negs	r2, r3
200001ae:	687b      	ldr	r3, [r7, #4]
200001b0:	609a      	str	r2, [r3, #8]
	}
	
	// Define left and right paddle
	POBJECT lp = &leftPaddle;
200001b2:	4b3d      	ldr	r3, [pc, #244]	; (200002a8 <move_ball+0x154>)
200001b4:	60fb      	str	r3, [r7, #12]
	POBJECT rp = &rightPaddle;
200001b6:	4b3d      	ldr	r3, [pc, #244]	; (200002ac <move_ball+0x158>)
200001b8:	60bb      	str	r3, [r7, #8]
	
	//For left paddle
	if(this->posX <= lp->posX + lp->geo->sizeX) {
200001ba:	687b      	ldr	r3, [r7, #4]
200001bc:	68da      	ldr	r2, [r3, #12]
200001be:	68fb      	ldr	r3, [r7, #12]
200001c0:	68d9      	ldr	r1, [r3, #12]
200001c2:	68fb      	ldr	r3, [r7, #12]
200001c4:	681b      	ldr	r3, [r3, #0]
200001c6:	685b      	ldr	r3, [r3, #4]
200001c8:	18cb      	adds	r3, r1, r3
200001ca:	429a      	cmp	r2, r3
200001cc:	dc30      	bgt.n	20000230 <move_ball+0xdc>
		if((this->posY >= lp->posY) && (this->posY <= lp->posY + lp->geo->sizeY)) {
200001ce:	687b      	ldr	r3, [r7, #4]
200001d0:	691a      	ldr	r2, [r3, #16]
200001d2:	68fb      	ldr	r3, [r7, #12]
200001d4:	691b      	ldr	r3, [r3, #16]
200001d6:	429a      	cmp	r2, r3
200001d8:	db18      	blt.n	2000020c <move_ball+0xb8>
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	691a      	ldr	r2, [r3, #16]
200001de:	68fb      	ldr	r3, [r7, #12]
200001e0:	6919      	ldr	r1, [r3, #16]
200001e2:	68fb      	ldr	r3, [r7, #12]
200001e4:	681b      	ldr	r3, [r3, #0]
200001e6:	689b      	ldr	r3, [r3, #8]
200001e8:	18cb      	adds	r3, r1, r3
200001ea:	429a      	cmp	r2, r3
200001ec:	dc0e      	bgt.n	2000020c <move_ball+0xb8>
			this->posX = lp->posX + lp->geo->sizeX + 1;
200001ee:	68fb      	ldr	r3, [r7, #12]
200001f0:	68da      	ldr	r2, [r3, #12]
200001f2:	68fb      	ldr	r3, [r7, #12]
200001f4:	681b      	ldr	r3, [r3, #0]
200001f6:	685b      	ldr	r3, [r3, #4]
200001f8:	18d3      	adds	r3, r2, r3
200001fa:	1c5a      	adds	r2, r3, #1
200001fc:	687b      	ldr	r3, [r7, #4]
200001fe:	60da      	str	r2, [r3, #12]
			this->dirX = -this->dirX;
20000200:	687b      	ldr	r3, [r7, #4]
20000202:	685b      	ldr	r3, [r3, #4]
20000204:	425a      	negs	r2, r3
20000206:	687b      	ldr	r3, [r7, #4]
20000208:	605a      	str	r2, [r3, #4]
2000020a:	e011      	b.n	20000230 <move_ball+0xdc>
		} else {
			// Left player lost
			delay_milli(500);
2000020c:	23fa      	movs	r3, #250	; 0xfa
2000020e:	005b      	lsls	r3, r3, #1
20000210:	0018      	movs	r0, r3
20000212:	f000 fb9b 	bl	2000094c <delay_milli>
			this->posX = 63;
20000216:	687b      	ldr	r3, [r7, #4]
20000218:	223f      	movs	r2, #63	; 0x3f
2000021a:	60da      	str	r2, [r3, #12]
			this->dirX = -this->dirX;
2000021c:	687b      	ldr	r3, [r7, #4]
2000021e:	685b      	ldr	r3, [r3, #4]
20000220:	425a      	negs	r2, r3
20000222:	687b      	ldr	r3, [r7, #4]
20000224:	605a      	str	r2, [r3, #4]
			this->dirY = -this->dirY;
20000226:	687b      	ldr	r3, [r7, #4]
20000228:	689b      	ldr	r3, [r3, #8]
2000022a:	425a      	negs	r2, r3
2000022c:	687b      	ldr	r3, [r7, #4]
2000022e:	609a      	str	r2, [r3, #8]
		}
	}
	
	//For right paddle
	if(this->posX >= rp->posX) {
20000230:	687b      	ldr	r3, [r7, #4]
20000232:	68da      	ldr	r2, [r3, #12]
20000234:	68bb      	ldr	r3, [r7, #8]
20000236:	68db      	ldr	r3, [r3, #12]
20000238:	429a      	cmp	r2, r3
2000023a:	db2c      	blt.n	20000296 <move_ball+0x142>
		if((this->posY >= rp->posY) && (this->posY <= rp->posY + rp->geo->sizeY)) {
2000023c:	687b      	ldr	r3, [r7, #4]
2000023e:	691a      	ldr	r2, [r3, #16]
20000240:	68bb      	ldr	r3, [r7, #8]
20000242:	691b      	ldr	r3, [r3, #16]
20000244:	429a      	cmp	r2, r3
20000246:	db14      	blt.n	20000272 <move_ball+0x11e>
20000248:	687b      	ldr	r3, [r7, #4]
2000024a:	691a      	ldr	r2, [r3, #16]
2000024c:	68bb      	ldr	r3, [r7, #8]
2000024e:	6919      	ldr	r1, [r3, #16]
20000250:	68bb      	ldr	r3, [r7, #8]
20000252:	681b      	ldr	r3, [r3, #0]
20000254:	689b      	ldr	r3, [r3, #8]
20000256:	18cb      	adds	r3, r1, r3
20000258:	429a      	cmp	r2, r3
2000025a:	dc0a      	bgt.n	20000272 <move_ball+0x11e>
			this->posX = rp->posX - 1;
2000025c:	68bb      	ldr	r3, [r7, #8]
2000025e:	68db      	ldr	r3, [r3, #12]
20000260:	1e5a      	subs	r2, r3, #1
20000262:	687b      	ldr	r3, [r7, #4]
20000264:	60da      	str	r2, [r3, #12]
			this->dirX = -this->dirX;
20000266:	687b      	ldr	r3, [r7, #4]
20000268:	685b      	ldr	r3, [r3, #4]
2000026a:	425a      	negs	r2, r3
2000026c:	687b      	ldr	r3, [r7, #4]
2000026e:	605a      	str	r2, [r3, #4]
20000270:	e011      	b.n	20000296 <move_ball+0x142>
		} else {
			// Right player lost
			delay_milli(500);
20000272:	23fa      	movs	r3, #250	; 0xfa
20000274:	005b      	lsls	r3, r3, #1
20000276:	0018      	movs	r0, r3
20000278:	f000 fb68 	bl	2000094c <delay_milli>
			this->posX = 63;
2000027c:	687b      	ldr	r3, [r7, #4]
2000027e:	223f      	movs	r2, #63	; 0x3f
20000280:	60da      	str	r2, [r3, #12]
			this->dirX = -this->dirX;
20000282:	687b      	ldr	r3, [r7, #4]
20000284:	685b      	ldr	r3, [r3, #4]
20000286:	425a      	negs	r2, r3
20000288:	687b      	ldr	r3, [r7, #4]
2000028a:	605a      	str	r2, [r3, #4]
			this->dirY = -this->dirY;
2000028c:	687b      	ldr	r3, [r7, #4]
2000028e:	689b      	ldr	r3, [r3, #8]
20000290:	425a      	negs	r2, r3
20000292:	687b      	ldr	r3, [r7, #4]
20000294:	609a      	str	r2, [r3, #8]
		}
	}
	
	this->draw(this);
20000296:	687b      	ldr	r3, [r7, #4]
20000298:	695b      	ldr	r3, [r3, #20]
2000029a:	687a      	ldr	r2, [r7, #4]
2000029c:	0010      	movs	r0, r2
2000029e:	4798      	blx	r3
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b004      	add	sp, #16
200002a6:	bd80      	pop	{r7, pc}
200002a8:	20000cf8 	strdcs	r0, [r0], -r8
200002ac:	20000d1c 	andcs	r0, r0, ip, lsl sp

200002b0 <graphics_ctrl_bit_set>:
#include "graphic.h"


typedef unsigned char uint8_t;

void graphics_ctrl_bit_set(uint8_t x){
200002b0:	b580      	push	{r7, lr}
200002b2:	b082      	sub	sp, #8
200002b4:	af00      	add	r7, sp, #0
200002b6:	0002      	movs	r2, r0
200002b8:	1dfb      	adds	r3, r7, #7
200002ba:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= (x & ~B_SELECT);
200002bc:	4909      	ldr	r1, [pc, #36]	; (200002e4 <graphics_ctrl_bit_set+0x34>)
200002be:	4b09      	ldr	r3, [pc, #36]	; (200002e4 <graphics_ctrl_bit_set+0x34>)
200002c0:	781b      	ldrb	r3, [r3, #0]
200002c2:	b2db      	uxtb	r3, r3
200002c4:	b25a      	sxtb	r2, r3
200002c6:	1dfb      	adds	r3, r7, #7
200002c8:	781b      	ldrb	r3, [r3, #0]
200002ca:	b25b      	sxtb	r3, r3
200002cc:	2004      	movs	r0, #4
200002ce:	4383      	bics	r3, r0
200002d0:	b25b      	sxtb	r3, r3
200002d2:	4313      	orrs	r3, r2
200002d4:	b25b      	sxtb	r3, r3
200002d6:	b2db      	uxtb	r3, r3
200002d8:	700b      	strb	r3, [r1, #0]
}
200002da:	46c0      	nop			; (mov r8, r8)
200002dc:	46bd      	mov	sp, r7
200002de:	b002      	add	sp, #8
200002e0:	bd80      	pop	{r7, pc}
200002e2:	46c0      	nop			; (mov r8, r8)
200002e4:	40021014 	andmi	r1, r2, r4, lsl r0

200002e8 <graphics_ctrl_bit_clear>:

void graphics_ctrl_bit_clear(uint8_t x){
200002e8:	b580      	push	{r7, lr}
200002ea:	b082      	sub	sp, #8
200002ec:	af00      	add	r7, sp, #0
200002ee:	0002      	movs	r2, r0
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ~x;
200002f4:	4908      	ldr	r1, [pc, #32]	; (20000318 <graphics_ctrl_bit_clear+0x30>)
200002f6:	4b08      	ldr	r3, [pc, #32]	; (20000318 <graphics_ctrl_bit_clear+0x30>)
200002f8:	781b      	ldrb	r3, [r3, #0]
200002fa:	b2db      	uxtb	r3, r3
200002fc:	b25b      	sxtb	r3, r3
200002fe:	1dfa      	adds	r2, r7, #7
20000300:	7812      	ldrb	r2, [r2, #0]
20000302:	b252      	sxtb	r2, r2
20000304:	43d2      	mvns	r2, r2
20000306:	b252      	sxtb	r2, r2
20000308:	4013      	ands	r3, r2
2000030a:	b25b      	sxtb	r3, r3
2000030c:	b2db      	uxtb	r3, r3
2000030e:	700b      	strb	r3, [r1, #0]
}
20000310:	46c0      	nop			; (mov r8, r8)
20000312:	46bd      	mov	sp, r7
20000314:	b002      	add	sp, #8
20000316:	bd80      	pop	{r7, pc}
20000318:	40021014 	andmi	r1, r2, r4, lsl r0

2000031c <select_controller>:

void select_controller(uint8_t controller){
2000031c:	b580      	push	{r7, lr}
2000031e:	b082      	sub	sp, #8
20000320:	af00      	add	r7, sp, #0
20000322:	0002      	movs	r2, r0
20000324:	1dfb      	adds	r3, r7, #7
20000326:	701a      	strb	r2, [r3, #0]
    if(controller == 0) {
20000328:	1dfb      	adds	r3, r7, #7
2000032a:	781b      	ldrb	r3, [r3, #0]
2000032c:	2b00      	cmp	r3, #0
2000032e:	d106      	bne.n	2000033e <select_controller+0x22>
        graphics_ctrl_bit_clear(B_CS1);
20000330:	2008      	movs	r0, #8
20000332:	f7ff ffd9 	bl	200002e8 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
20000336:	2010      	movs	r0, #16
20000338:	f7ff ffd6 	bl	200002e8 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
    } else if(controller == B_CS2) {
        graphics_ctrl_bit_clear(B_CS1);
        graphics_ctrl_bit_set(B_CS2);
    }
}
2000033c:	e01f      	b.n	2000037e <select_controller+0x62>
    } else if(controller == (B_CS1 | B_CS2)) {
2000033e:	1dfb      	adds	r3, r7, #7
20000340:	781b      	ldrb	r3, [r3, #0]
20000342:	2b18      	cmp	r3, #24
20000344:	d106      	bne.n	20000354 <select_controller+0x38>
        graphics_ctrl_bit_set(B_CS1);
20000346:	2008      	movs	r0, #8
20000348:	f7ff ffb2 	bl	200002b0 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_set(B_CS2);
2000034c:	2010      	movs	r0, #16
2000034e:	f7ff ffaf 	bl	200002b0 <graphics_ctrl_bit_set>
}
20000352:	e014      	b.n	2000037e <select_controller+0x62>
    } else if(controller == B_CS1) {
20000354:	1dfb      	adds	r3, r7, #7
20000356:	781b      	ldrb	r3, [r3, #0]
20000358:	2b08      	cmp	r3, #8
2000035a:	d106      	bne.n	2000036a <select_controller+0x4e>
        graphics_ctrl_bit_set(B_CS1);
2000035c:	2008      	movs	r0, #8
2000035e:	f7ff ffa7 	bl	200002b0 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_clear(B_CS2);
20000362:	2010      	movs	r0, #16
20000364:	f7ff ffc0 	bl	200002e8 <graphics_ctrl_bit_clear>
}
20000368:	e009      	b.n	2000037e <select_controller+0x62>
    } else if(controller == B_CS2) {
2000036a:	1dfb      	adds	r3, r7, #7
2000036c:	781b      	ldrb	r3, [r3, #0]
2000036e:	2b10      	cmp	r3, #16
20000370:	d105      	bne.n	2000037e <select_controller+0x62>
        graphics_ctrl_bit_clear(B_CS1);
20000372:	2008      	movs	r0, #8
20000374:	f7ff ffb8 	bl	200002e8 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_set(B_CS2);
20000378:	2010      	movs	r0, #16
2000037a:	f7ff ff99 	bl	200002b0 <graphics_ctrl_bit_set>
}
2000037e:	46c0      	nop			; (mov r8, r8)
20000380:	46bd      	mov	sp, r7
20000382:	b002      	add	sp, #8
20000384:	bd80      	pop	{r7, pc}

20000386 <graphic_wait_ready>:

void graphic_wait_ready(){
20000386:	b580      	push	{r7, lr}
20000388:	b082      	sub	sp, #8
2000038a:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_clear(B_E);
2000038c:	2040      	movs	r0, #64	; 0x40
2000038e:	f7ff ffab 	bl	200002e8 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000392:	4b15      	ldr	r3, [pc, #84]	; (200003e8 <graphic_wait_ready+0x62>)
20000394:	4a15      	ldr	r2, [pc, #84]	; (200003ec <graphic_wait_ready+0x66>)
20000396:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_RS);
20000398:	2001      	movs	r0, #1
2000039a:	f7ff ffa5 	bl	200002e8 <graphics_ctrl_bit_clear>
    graphics_ctrl_bit_set(B_RW);
2000039e:	2002      	movs	r0, #2
200003a0:	f7ff ff86 	bl	200002b0 <graphics_ctrl_bit_set>
    delay_500ns();
200003a4:	f000 fae1 	bl	2000096a <delay_500ns>
    
    while(1) { // Wait for display not to be busy
        graphics_ctrl_bit_set(B_E);
200003a8:	2040      	movs	r0, #64	; 0x40
200003aa:	f7ff ff81 	bl	200002b0 <graphics_ctrl_bit_set>
        delay_500ns();
200003ae:	f000 fadc 	bl	2000096a <delay_500ns>
		unsigned char busy = *GPIO_E_IDR_HIGH;
200003b2:	4a0f      	ldr	r2, [pc, #60]	; (200003f0 <graphic_wait_ready+0x6a>)
200003b4:	1dfb      	adds	r3, r7, #7
200003b6:	7812      	ldrb	r2, [r2, #0]
200003b8:	701a      	strb	r2, [r3, #0]
        graphics_ctrl_bit_clear(B_E);
200003ba:	2040      	movs	r0, #64	; 0x40
200003bc:	f7ff ff94 	bl	200002e8 <graphics_ctrl_bit_clear>
        delay_500ns();
200003c0:	f000 fad3 	bl	2000096a <delay_500ns>
        //unsigned char i = *GPIO_IDR_HIGH;
        if((busy & LCD_BUSY) == 0) {
200003c4:	1dfb      	adds	r3, r7, #7
200003c6:	781b      	ldrb	r3, [r3, #0]
200003c8:	b25b      	sxtb	r3, r3
200003ca:	2b00      	cmp	r3, #0
200003cc:	da00      	bge.n	200003d0 <graphic_wait_ready+0x4a>
    while(1) { // Wait for display not to be busy
200003ce:	e7eb      	b.n	200003a8 <graphic_wait_ready+0x22>
            break;
200003d0:	46c0      	nop			; (mov r8, r8)
        }
    }
    graphics_ctrl_bit_set(B_E);
200003d2:	2040      	movs	r0, #64	; 0x40
200003d4:	f7ff ff6c 	bl	200002b0 <graphics_ctrl_bit_set>
    *GPIO_E_MODER = 0x55555555;
200003d8:	4b03      	ldr	r3, [pc, #12]	; (200003e8 <graphic_wait_ready+0x62>)
200003da:	4a06      	ldr	r2, [pc, #24]	; (200003f4 <graphic_wait_ready+0x6e>)
200003dc:	601a      	str	r2, [r3, #0]
    
}
200003de:	46c0      	nop			; (mov r8, r8)
200003e0:	46bd      	mov	sp, r7
200003e2:	b002      	add	sp, #8
200003e4:	bd80      	pop	{r7, pc}
200003e6:	46c0      	nop			; (mov r8, r8)
200003e8:	40021000 	andmi	r1, r2, r0
200003ec:	00005555 	andeq	r5, r0, r5, asr r5
200003f0:	40021011 	andmi	r1, r2, r1, lsl r0
200003f4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003f8 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
200003f8:	b580      	push	{r7, lr}
200003fa:	b084      	sub	sp, #16
200003fc:	af00      	add	r7, sp, #0
200003fe:	0002      	movs	r2, r0
20000400:	1dfb      	adds	r3, r7, #7
20000402:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
20000404:	2040      	movs	r0, #64	; 0x40
20000406:	f7ff ff6f 	bl	200002e8 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
2000040a:	4b1b      	ldr	r3, [pc, #108]	; (20000478 <graphic_read+0x80>)
2000040c:	4a1b      	ldr	r2, [pc, #108]	; (2000047c <graphic_read+0x84>)
2000040e:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_set(B_RS | B_RW);
20000410:	2003      	movs	r0, #3
20000412:	f7ff ff4d 	bl	200002b0 <graphics_ctrl_bit_set>
    select_controller(controller);
20000416:	1dfb      	adds	r3, r7, #7
20000418:	781b      	ldrb	r3, [r3, #0]
2000041a:	0018      	movs	r0, r3
2000041c:	f7ff ff7e 	bl	2000031c <select_controller>
    delay_500ns();
20000420:	f000 faa3 	bl	2000096a <delay_500ns>
    graphics_ctrl_bit_set(B_E);
20000424:	2040      	movs	r0, #64	; 0x40
20000426:	f7ff ff43 	bl	200002b0 <graphics_ctrl_bit_set>
    delay_500ns();
2000042a:	f000 fa9e 	bl	2000096a <delay_500ns>
    
    uint8_t RV = *GPIO_E_IDR_HIGH;
2000042e:	4a14      	ldr	r2, [pc, #80]	; (20000480 <graphic_read+0x88>)
20000430:	230f      	movs	r3, #15
20000432:	18fb      	adds	r3, r7, r3
20000434:	7812      	ldrb	r2, [r2, #0]
20000436:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
20000438:	2040      	movs	r0, #64	; 0x40
2000043a:	f7ff ff55 	bl	200002e8 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
2000043e:	4b0e      	ldr	r3, [pc, #56]	; (20000478 <graphic_read+0x80>)
20000440:	4a10      	ldr	r2, [pc, #64]	; (20000484 <graphic_read+0x8c>)
20000442:	601a      	str	r2, [r3, #0]
    
    if(controller == B_CS1){
20000444:	1dfb      	adds	r3, r7, #7
20000446:	781b      	ldrb	r3, [r3, #0]
20000448:	2b08      	cmp	r3, #8
2000044a:	d104      	bne.n	20000456 <graphic_read+0x5e>
        select_controller(B_CS1);
2000044c:	2008      	movs	r0, #8
2000044e:	f7ff ff65 	bl	2000031c <select_controller>
        graphic_wait_ready();
20000452:	f7ff ff98 	bl	20000386 <graphic_wait_ready>
    }
    
    if(controller == B_CS2){
20000456:	1dfb      	adds	r3, r7, #7
20000458:	781b      	ldrb	r3, [r3, #0]
2000045a:	2b10      	cmp	r3, #16
2000045c:	d104      	bne.n	20000468 <graphic_read+0x70>
        select_controller(B_CS2);
2000045e:	2010      	movs	r0, #16
20000460:	f7ff ff5c 	bl	2000031c <select_controller>
        graphic_wait_ready();
20000464:	f7ff ff8f 	bl	20000386 <graphic_wait_ready>
    }
    
    return RV;
20000468:	230f      	movs	r3, #15
2000046a:	18fb      	adds	r3, r7, r3
2000046c:	781b      	ldrb	r3, [r3, #0]
    
}
2000046e:	0018      	movs	r0, r3
20000470:	46bd      	mov	sp, r7
20000472:	b004      	add	sp, #16
20000474:	bd80      	pop	{r7, pc}
20000476:	46c0      	nop			; (mov r8, r8)
20000478:	40021000 	andmi	r1, r2, r0
2000047c:	00005555 	andeq	r5, r0, r5, asr r5
20000480:	40021011 	andmi	r1, r2, r1, lsl r0
20000484:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000488 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000488:	b580      	push	{r7, lr}
2000048a:	b082      	sub	sp, #8
2000048c:	af00      	add	r7, sp, #0
2000048e:	0002      	movs	r2, r0
20000490:	1dfb      	adds	r3, r7, #7
20000492:	701a      	strb	r2, [r3, #0]
20000494:	1dbb      	adds	r3, r7, #6
20000496:	1c0a      	adds	r2, r1, #0
20000498:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
2000049a:	4a1a      	ldr	r2, [pc, #104]	; (20000504 <graphic_write+0x7c>)
2000049c:	1dfb      	adds	r3, r7, #7
2000049e:	781b      	ldrb	r3, [r3, #0]
200004a0:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
200004a2:	1dbb      	adds	r3, r7, #6
200004a4:	781b      	ldrb	r3, [r3, #0]
200004a6:	0018      	movs	r0, r3
200004a8:	f7ff ff38 	bl	2000031c <select_controller>
    delay_500ns();
200004ac:	f000 fa5d 	bl	2000096a <delay_500ns>
    graphics_ctrl_bit_set(B_E);
200004b0:	2040      	movs	r0, #64	; 0x40
200004b2:	f7ff fefd 	bl	200002b0 <graphics_ctrl_bit_set>
    delay_500ns();
200004b6:	f000 fa58 	bl	2000096a <delay_500ns>
    graphics_ctrl_bit_clear(B_E);
200004ba:	2040      	movs	r0, #64	; 0x40
200004bc:	f7ff ff14 	bl	200002e8 <graphics_ctrl_bit_clear>
    
    if(controller & B_CS1){
200004c0:	1dbb      	adds	r3, r7, #6
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	2208      	movs	r2, #8
200004c6:	4013      	ands	r3, r2
200004c8:	d004      	beq.n	200004d4 <graphic_write+0x4c>
        select_controller(B_CS1);
200004ca:	2008      	movs	r0, #8
200004cc:	f7ff ff26 	bl	2000031c <select_controller>
        graphic_wait_ready();
200004d0:	f7ff ff59 	bl	20000386 <graphic_wait_ready>
    }
    
    if(controller & B_CS2){
200004d4:	1dbb      	adds	r3, r7, #6
200004d6:	781b      	ldrb	r3, [r3, #0]
200004d8:	2210      	movs	r2, #16
200004da:	4013      	ands	r3, r2
200004dc:	d004      	beq.n	200004e8 <graphic_write+0x60>
        select_controller(B_CS2);
200004de:	2010      	movs	r0, #16
200004e0:	f7ff ff1c 	bl	2000031c <select_controller>
        graphic_wait_ready();
200004e4:	f7ff ff4f 	bl	20000386 <graphic_wait_ready>
    }
    
    *GPIO_E_ODR_HIGH = 0;
200004e8:	4b06      	ldr	r3, [pc, #24]	; (20000504 <graphic_write+0x7c>)
200004ea:	2200      	movs	r2, #0
200004ec:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_set(B_E);
200004ee:	2040      	movs	r0, #64	; 0x40
200004f0:	f7ff fede 	bl	200002b0 <graphics_ctrl_bit_set>
    select_controller(0);
200004f4:	2000      	movs	r0, #0
200004f6:	f7ff ff11 	bl	2000031c <select_controller>
}
200004fa:	46c0      	nop			; (mov r8, r8)
200004fc:	46bd      	mov	sp, r7
200004fe:	b002      	add	sp, #8
20000500:	bd80      	pop	{r7, pc}
20000502:	46c0      	nop			; (mov r8, r8)
20000504:	40021015 	andmi	r1, r2, r5, lsl r0

20000508 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000508:	b580      	push	{r7, lr}
2000050a:	b082      	sub	sp, #8
2000050c:	af00      	add	r7, sp, #0
2000050e:	0002      	movs	r2, r0
20000510:	1dfb      	adds	r3, r7, #7
20000512:	701a      	strb	r2, [r3, #0]
20000514:	1dbb      	adds	r3, r7, #6
20000516:	1c0a      	adds	r2, r1, #0
20000518:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
2000051a:	2040      	movs	r0, #64	; 0x40
2000051c:	f7ff fee4 	bl	200002e8 <graphics_ctrl_bit_clear>
    select_controller(controller);
20000520:	1dbb      	adds	r3, r7, #6
20000522:	781b      	ldrb	r3, [r3, #0]
20000524:	0018      	movs	r0, r3
20000526:	f7ff fef9 	bl	2000031c <select_controller>
    graphics_ctrl_bit_clear(B_RS | B_RW);
2000052a:	2003      	movs	r0, #3
2000052c:	f7ff fedc 	bl	200002e8 <graphics_ctrl_bit_clear>
    graphic_write(command, controller);
20000530:	1dbb      	adds	r3, r7, #6
20000532:	781a      	ldrb	r2, [r3, #0]
20000534:	1dfb      	adds	r3, r7, #7
20000536:	781b      	ldrb	r3, [r3, #0]
20000538:	0011      	movs	r1, r2
2000053a:	0018      	movs	r0, r3
2000053c:	f7ff ffa4 	bl	20000488 <graphic_write>
}
20000540:	46c0      	nop			; (mov r8, r8)
20000542:	46bd      	mov	sp, r7
20000544:	b002      	add	sp, #8
20000546:	bd80      	pop	{r7, pc}

20000548 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000548:	b580      	push	{r7, lr}
2000054a:	b082      	sub	sp, #8
2000054c:	af00      	add	r7, sp, #0
2000054e:	0002      	movs	r2, r0
20000550:	1dfb      	adds	r3, r7, #7
20000552:	701a      	strb	r2, [r3, #0]
20000554:	1dbb      	adds	r3, r7, #6
20000556:	1c0a      	adds	r2, r1, #0
20000558:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
2000055a:	2040      	movs	r0, #64	; 0x40
2000055c:	f7ff fec4 	bl	200002e8 <graphics_ctrl_bit_clear>
    select_controller(controller);
20000560:	1dbb      	adds	r3, r7, #6
20000562:	781b      	ldrb	r3, [r3, #0]
20000564:	0018      	movs	r0, r3
20000566:	f7ff fed9 	bl	2000031c <select_controller>
    graphics_ctrl_bit_set(B_RS);
2000056a:	2001      	movs	r0, #1
2000056c:	f7ff fea0 	bl	200002b0 <graphics_ctrl_bit_set>
    graphics_ctrl_bit_clear(B_RW);
20000570:	2002      	movs	r0, #2
20000572:	f7ff feb9 	bl	200002e8 <graphics_ctrl_bit_clear>
    graphic_write(data, controller);
20000576:	1dbb      	adds	r3, r7, #6
20000578:	781a      	ldrb	r2, [r3, #0]
2000057a:	1dfb      	adds	r3, r7, #7
2000057c:	781b      	ldrb	r3, [r3, #0]
2000057e:	0011      	movs	r1, r2
20000580:	0018      	movs	r0, r3
20000582:	f7ff ff81 	bl	20000488 <graphic_write>
}
20000586:	46c0      	nop			; (mov r8, r8)
20000588:	46bd      	mov	sp, r7
2000058a:	b002      	add	sp, #8
2000058c:	bd80      	pop	{r7, pc}

2000058e <graphics_read_data>:

uint8_t graphics_read_data(uint8_t controller){
2000058e:	b580      	push	{r7, lr}
20000590:	b082      	sub	sp, #8
20000592:	af00      	add	r7, sp, #0
20000594:	0002      	movs	r2, r0
20000596:	1dfb      	adds	r3, r7, #7
20000598:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
2000059a:	1dfb      	adds	r3, r7, #7
2000059c:	781b      	ldrb	r3, [r3, #0]
2000059e:	0018      	movs	r0, r3
200005a0:	f7ff ff2a 	bl	200003f8 <graphic_read>
    return graphic_read(controller);
200005a4:	1dfb      	adds	r3, r7, #7
200005a6:	781b      	ldrb	r3, [r3, #0]
200005a8:	0018      	movs	r0, r3
200005aa:	f7ff ff25 	bl	200003f8 <graphic_read>
200005ae:	0003      	movs	r3, r0
}
200005b0:	0018      	movs	r0, r3
200005b2:	46bd      	mov	sp, r7
200005b4:	b002      	add	sp, #8
200005b6:	bd80      	pop	{r7, pc}

200005b8 <graphic_initialize>:

void graphic_initialize(void){
200005b8:	b580      	push	{r7, lr}
200005ba:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_set(B_E);
200005bc:	2040      	movs	r0, #64	; 0x40
200005be:	f7ff fe77 	bl	200002b0 <graphics_ctrl_bit_set>
    graphics_ctrl_bit_set(B_SELECT);
200005c2:	2004      	movs	r0, #4
200005c4:	f7ff fe74 	bl	200002b0 <graphics_ctrl_bit_set>
    delay_micro(10);
200005c8:	200a      	movs	r0, #10
200005ca:	f000 f9a9 	bl	20000920 <delay_micro>
    graphics_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200005ce:	2078      	movs	r0, #120	; 0x78
200005d0:	f7ff fe8a 	bl	200002e8 <graphics_ctrl_bit_clear>
    delay_milli(30);
200005d4:	201e      	movs	r0, #30
200005d6:	f000 f9b9 	bl	2000094c <delay_milli>
    graphics_ctrl_bit_set(B_RST);
200005da:	2020      	movs	r0, #32
200005dc:	f7ff fe68 	bl	200002b0 <graphics_ctrl_bit_set>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
200005e0:	2118      	movs	r1, #24
200005e2:	203e      	movs	r0, #62	; 0x3e
200005e4:	f7ff ff90 	bl	20000508 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
200005e8:	2118      	movs	r1, #24
200005ea:	203f      	movs	r0, #63	; 0x3f
200005ec:	f7ff ff8c 	bl	20000508 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
200005f0:	2118      	movs	r1, #24
200005f2:	20c0      	movs	r0, #192	; 0xc0
200005f4:	f7ff ff88 	bl	20000508 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
200005f8:	2118      	movs	r1, #24
200005fa:	2040      	movs	r0, #64	; 0x40
200005fc:	f7ff ff84 	bl	20000508 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000600:	2118      	movs	r1, #24
20000602:	20b8      	movs	r0, #184	; 0xb8
20000604:	f7ff ff80 	bl	20000508 <graphic_write_command>
    select_controller(0);
20000608:	2000      	movs	r0, #0
2000060a:	f7ff fe87 	bl	2000031c <select_controller>
}
2000060e:	46c0      	nop			; (mov r8, r8)
20000610:	46bd      	mov	sp, r7
20000612:	bd80      	pop	{r7, pc}

20000614 <graphic_clear_screen>:

void graphic_clear_screen(void){
20000614:	b580      	push	{r7, lr}
20000616:	b082      	sub	sp, #8
20000618:	af00      	add	r7, sp, #0
    for(int page = 0; page < PAGE; page++){
2000061a:	2300      	movs	r3, #0
2000061c:	607b      	str	r3, [r7, #4]
2000061e:	e01e      	b.n	2000065e <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20000620:	687b      	ldr	r3, [r7, #4]
20000622:	b25b      	sxtb	r3, r3
20000624:	2248      	movs	r2, #72	; 0x48
20000626:	4252      	negs	r2, r2
20000628:	4313      	orrs	r3, r2
2000062a:	b25b      	sxtb	r3, r3
2000062c:	b2db      	uxtb	r3, r3
2000062e:	2118      	movs	r1, #24
20000630:	0018      	movs	r0, r3
20000632:	f7ff ff69 	bl	20000508 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000636:	2118      	movs	r1, #24
20000638:	2040      	movs	r0, #64	; 0x40
2000063a:	f7ff ff65 	bl	20000508 <graphic_write_command>
        for(int add = 0; add < ADD; add++){
2000063e:	2300      	movs	r3, #0
20000640:	603b      	str	r3, [r7, #0]
20000642:	e006      	b.n	20000652 <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
20000644:	2118      	movs	r1, #24
20000646:	2000      	movs	r0, #0
20000648:	f7ff ff7e 	bl	20000548 <graphic_write_data>
        for(int add = 0; add < ADD; add++){
2000064c:	683b      	ldr	r3, [r7, #0]
2000064e:	3301      	adds	r3, #1
20000650:	603b      	str	r3, [r7, #0]
20000652:	683b      	ldr	r3, [r7, #0]
20000654:	2b3e      	cmp	r3, #62	; 0x3e
20000656:	ddf5      	ble.n	20000644 <graphic_clear_screen+0x30>
    for(int page = 0; page < PAGE; page++){
20000658:	687b      	ldr	r3, [r7, #4]
2000065a:	3301      	adds	r3, #1
2000065c:	607b      	str	r3, [r7, #4]
2000065e:	687b      	ldr	r3, [r7, #4]
20000660:	2b07      	cmp	r3, #7
20000662:	dddd      	ble.n	20000620 <graphic_clear_screen+0xc>
        }
    }
    
}
20000664:	46c0      	nop			; (mov r8, r8)
20000666:	46bd      	mov	sp, r7
20000668:	b002      	add	sp, #8
2000066a:	bd80      	pop	{r7, pc}

2000066c <pixel>:


void pixel(unsigned char x, unsigned char y, unsigned char set) {
2000066c:	b590      	push	{r4, r7, lr}
2000066e:	b085      	sub	sp, #20
20000670:	af00      	add	r7, sp, #0
20000672:	0004      	movs	r4, r0
20000674:	0008      	movs	r0, r1
20000676:	0011      	movs	r1, r2
20000678:	1dfb      	adds	r3, r7, #7
2000067a:	1c22      	adds	r2, r4, #0
2000067c:	701a      	strb	r2, [r3, #0]
2000067e:	1dbb      	adds	r3, r7, #6
20000680:	1c02      	adds	r2, r0, #0
20000682:	701a      	strb	r2, [r3, #0]
20000684:	1d7b      	adds	r3, r7, #5
20000686:	1c0a      	adds	r2, r1, #0
20000688:	701a      	strb	r2, [r3, #0]
	if(x < 0 || y < 0) return;
	if(x > 127 || y > 63) return;
2000068a:	1dfb      	adds	r3, r7, #7
2000068c:	781b      	ldrb	r3, [r3, #0]
2000068e:	b25b      	sxtb	r3, r3
20000690:	2b00      	cmp	r3, #0
20000692:	da00      	bge.n	20000696 <pixel+0x2a>
20000694:	e0ae      	b.n	200007f4 <pixel+0x188>
20000696:	1dbb      	adds	r3, r7, #6
20000698:	781b      	ldrb	r3, [r3, #0]
2000069a:	2b3f      	cmp	r3, #63	; 0x3f
2000069c:	d900      	bls.n	200006a0 <pixel+0x34>
2000069e:	e0a9      	b.n	200007f4 <pixel+0x188>
	unsigned char mask;
	unsigned char index = y / 8;
200006a0:	230d      	movs	r3, #13
200006a2:	18fb      	adds	r3, r7, r3
200006a4:	1dba      	adds	r2, r7, #6
200006a6:	7812      	ldrb	r2, [r2, #0]
200006a8:	08d2      	lsrs	r2, r2, #3
200006aa:	701a      	strb	r2, [r3, #0]
	
	switch(y % 8) {
200006ac:	1dbb      	adds	r3, r7, #6
200006ae:	781b      	ldrb	r3, [r3, #0]
200006b0:	2207      	movs	r2, #7
200006b2:	4013      	ands	r3, r2
200006b4:	2b07      	cmp	r3, #7
200006b6:	d82c      	bhi.n	20000712 <pixel+0xa6>
200006b8:	009a      	lsls	r2, r3, #2
200006ba:	4b50      	ldr	r3, [pc, #320]	; (200007fc <pixel+0x190>)
200006bc:	18d3      	adds	r3, r2, r3
200006be:	681b      	ldr	r3, [r3, #0]
200006c0:	469f      	mov	pc, r3
		case 0: mask = 1; break;
200006c2:	230f      	movs	r3, #15
200006c4:	18fb      	adds	r3, r7, r3
200006c6:	2201      	movs	r2, #1
200006c8:	701a      	strb	r2, [r3, #0]
200006ca:	e022      	b.n	20000712 <pixel+0xa6>
		case 1: mask = 2; break;
200006cc:	230f      	movs	r3, #15
200006ce:	18fb      	adds	r3, r7, r3
200006d0:	2202      	movs	r2, #2
200006d2:	701a      	strb	r2, [r3, #0]
200006d4:	e01d      	b.n	20000712 <pixel+0xa6>
		case 2: mask = 4; break;
200006d6:	230f      	movs	r3, #15
200006d8:	18fb      	adds	r3, r7, r3
200006da:	2204      	movs	r2, #4
200006dc:	701a      	strb	r2, [r3, #0]
200006de:	e018      	b.n	20000712 <pixel+0xa6>
		case 3: mask = 8; break;
200006e0:	230f      	movs	r3, #15
200006e2:	18fb      	adds	r3, r7, r3
200006e4:	2208      	movs	r2, #8
200006e6:	701a      	strb	r2, [r3, #0]
200006e8:	e013      	b.n	20000712 <pixel+0xa6>
		case 4: mask = 16; break;
200006ea:	230f      	movs	r3, #15
200006ec:	18fb      	adds	r3, r7, r3
200006ee:	2210      	movs	r2, #16
200006f0:	701a      	strb	r2, [r3, #0]
200006f2:	e00e      	b.n	20000712 <pixel+0xa6>
		case 5: mask = 32; break;
200006f4:	230f      	movs	r3, #15
200006f6:	18fb      	adds	r3, r7, r3
200006f8:	2220      	movs	r2, #32
200006fa:	701a      	strb	r2, [r3, #0]
200006fc:	e009      	b.n	20000712 <pixel+0xa6>
		case 6: mask = 64; break;
200006fe:	230f      	movs	r3, #15
20000700:	18fb      	adds	r3, r7, r3
20000702:	2240      	movs	r2, #64	; 0x40
20000704:	701a      	strb	r2, [r3, #0]
20000706:	e004      	b.n	20000712 <pixel+0xa6>
		case 7: mask = 128; break;
20000708:	230f      	movs	r3, #15
2000070a:	18fb      	adds	r3, r7, r3
2000070c:	2280      	movs	r2, #128	; 0x80
2000070e:	701a      	strb	r2, [r3, #0]
20000710:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0) {
20000712:	1d7b      	adds	r3, r7, #5
20000714:	781b      	ldrb	r3, [r3, #0]
20000716:	2b00      	cmp	r3, #0
20000718:	d106      	bne.n	20000728 <pixel+0xbc>
		mask = ~mask;
2000071a:	230f      	movs	r3, #15
2000071c:	18fb      	adds	r3, r7, r3
2000071e:	220f      	movs	r2, #15
20000720:	18ba      	adds	r2, r7, r2
20000722:	7812      	ldrb	r2, [r2, #0]
20000724:	43d2      	mvns	r2, r2
20000726:	701a      	strb	r2, [r3, #0]
	}
	
	unsigned char controller;
	if(x > 63) {
20000728:	1dfb      	adds	r3, r7, #7
2000072a:	781b      	ldrb	r3, [r3, #0]
2000072c:	2b3f      	cmp	r3, #63	; 0x3f
2000072e:	d909      	bls.n	20000744 <pixel+0xd8>
		controller = B_CS2;
20000730:	230e      	movs	r3, #14
20000732:	18fb      	adds	r3, r7, r3
20000734:	2210      	movs	r2, #16
20000736:	701a      	strb	r2, [r3, #0]
		x = x - 64;
20000738:	1dfb      	adds	r3, r7, #7
2000073a:	1dfa      	adds	r2, r7, #7
2000073c:	7812      	ldrb	r2, [r2, #0]
2000073e:	3a40      	subs	r2, #64	; 0x40
20000740:	701a      	strb	r2, [r3, #0]
20000742:	e003      	b.n	2000074c <pixel+0xe0>
	} else {
		controller = B_CS1;
20000744:	230e      	movs	r3, #14
20000746:	18fb      	adds	r3, r7, r3
20000748:	2208      	movs	r2, #8
2000074a:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x, controller);
2000074c:	1dfb      	adds	r3, r7, #7
2000074e:	781b      	ldrb	r3, [r3, #0]
20000750:	2240      	movs	r2, #64	; 0x40
20000752:	4313      	orrs	r3, r2
20000754:	b2da      	uxtb	r2, r3
20000756:	230e      	movs	r3, #14
20000758:	18fb      	adds	r3, r7, r3
2000075a:	781b      	ldrb	r3, [r3, #0]
2000075c:	0019      	movs	r1, r3
2000075e:	0010      	movs	r0, r2
20000760:	f7ff fed2 	bl	20000508 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000764:	230d      	movs	r3, #13
20000766:	18fb      	adds	r3, r7, r3
20000768:	781b      	ldrb	r3, [r3, #0]
2000076a:	2248      	movs	r2, #72	; 0x48
2000076c:	4252      	negs	r2, r2
2000076e:	4313      	orrs	r3, r2
20000770:	b2da      	uxtb	r2, r3
20000772:	230e      	movs	r3, #14
20000774:	18fb      	adds	r3, r7, r3
20000776:	781b      	ldrb	r3, [r3, #0]
20000778:	0019      	movs	r1, r3
2000077a:	0010      	movs	r0, r2
2000077c:	f7ff fec4 	bl	20000508 <graphic_write_command>
	unsigned char temp = graphics_read_data(controller);
20000780:	230c      	movs	r3, #12
20000782:	18fc      	adds	r4, r7, r3
20000784:	230e      	movs	r3, #14
20000786:	18fb      	adds	r3, r7, r3
20000788:	781b      	ldrb	r3, [r3, #0]
2000078a:	0018      	movs	r0, r3
2000078c:	f7ff feff 	bl	2000058e <graphics_read_data>
20000790:	0003      	movs	r3, r0
20000792:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000794:	1dfb      	adds	r3, r7, #7
20000796:	781b      	ldrb	r3, [r3, #0]
20000798:	2240      	movs	r2, #64	; 0x40
2000079a:	4313      	orrs	r3, r2
2000079c:	b2da      	uxtb	r2, r3
2000079e:	230e      	movs	r3, #14
200007a0:	18fb      	adds	r3, r7, r3
200007a2:	781b      	ldrb	r3, [r3, #0]
200007a4:	0019      	movs	r1, r3
200007a6:	0010      	movs	r0, r2
200007a8:	f7ff feae 	bl	20000508 <graphic_write_command>
	
	if(set) {
200007ac:	1d7b      	adds	r3, r7, #5
200007ae:	781b      	ldrb	r3, [r3, #0]
200007b0:	2b00      	cmp	r3, #0
200007b2:	d00a      	beq.n	200007ca <pixel+0x15e>
		mask = mask | temp;
200007b4:	230f      	movs	r3, #15
200007b6:	18fb      	adds	r3, r7, r3
200007b8:	220f      	movs	r2, #15
200007ba:	18b9      	adds	r1, r7, r2
200007bc:	220c      	movs	r2, #12
200007be:	18ba      	adds	r2, r7, r2
200007c0:	7809      	ldrb	r1, [r1, #0]
200007c2:	7812      	ldrb	r2, [r2, #0]
200007c4:	430a      	orrs	r2, r1
200007c6:	701a      	strb	r2, [r3, #0]
200007c8:	e009      	b.n	200007de <pixel+0x172>
	} else {
		mask = mask & temp;
200007ca:	230f      	movs	r3, #15
200007cc:	18fb      	adds	r3, r7, r3
200007ce:	220f      	movs	r2, #15
200007d0:	18ba      	adds	r2, r7, r2
200007d2:	210c      	movs	r1, #12
200007d4:	1879      	adds	r1, r7, r1
200007d6:	7812      	ldrb	r2, [r2, #0]
200007d8:	7809      	ldrb	r1, [r1, #0]
200007da:	400a      	ands	r2, r1
200007dc:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
200007de:	230e      	movs	r3, #14
200007e0:	18fb      	adds	r3, r7, r3
200007e2:	781a      	ldrb	r2, [r3, #0]
200007e4:	230f      	movs	r3, #15
200007e6:	18fb      	adds	r3, r7, r3
200007e8:	781b      	ldrb	r3, [r3, #0]
200007ea:	0011      	movs	r1, r2
200007ec:	0018      	movs	r0, r3
200007ee:	f7ff feab 	bl	20000548 <graphic_write_data>
200007f2:	e000      	b.n	200007f6 <pixel+0x18a>
	if(x > 127 || y > 63) return;
200007f4:	46c0      	nop			; (mov r8, r8)
	
}
200007f6:	46bd      	mov	sp, r7
200007f8:	b005      	add	sp, #20
200007fa:	bd90      	pop	{r4, r7, pc}
200007fc:	20000d44 	andcs	r0, r0, r4, asr #26

20000800 <draw_object>:
#include "object.h"
#include "graphic.h"

void draw_object(POBJECT this) {
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af00      	add	r7, sp, #0
20000806:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
20000808:	2300      	movs	r3, #0
2000080a:	60fb      	str	r3, [r7, #12]
2000080c:	e020      	b.n	20000850 <draw_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 1);
2000080e:	687b      	ldr	r3, [r7, #4]
20000810:	681a      	ldr	r2, [r3, #0]
20000812:	68fb      	ldr	r3, [r7, #12]
20000814:	3304      	adds	r3, #4
20000816:	005b      	lsls	r3, r3, #1
20000818:	18d3      	adds	r3, r2, r3
2000081a:	3304      	adds	r3, #4
2000081c:	781a      	ldrb	r2, [r3, #0]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	68db      	ldr	r3, [r3, #12]
20000822:	b2db      	uxtb	r3, r3
20000824:	18d3      	adds	r3, r2, r3
20000826:	b2d8      	uxtb	r0, r3
20000828:	687b      	ldr	r3, [r7, #4]
2000082a:	681a      	ldr	r2, [r3, #0]
2000082c:	68fb      	ldr	r3, [r7, #12]
2000082e:	3304      	adds	r3, #4
20000830:	005b      	lsls	r3, r3, #1
20000832:	18d3      	adds	r3, r2, r3
20000834:	3305      	adds	r3, #5
20000836:	781a      	ldrb	r2, [r3, #0]
20000838:	687b      	ldr	r3, [r7, #4]
2000083a:	691b      	ldr	r3, [r3, #16]
2000083c:	b2db      	uxtb	r3, r3
2000083e:	18d3      	adds	r3, r2, r3
20000840:	b2db      	uxtb	r3, r3
20000842:	2201      	movs	r2, #1
20000844:	0019      	movs	r1, r3
20000846:	f7ff ff11 	bl	2000066c <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
2000084a:	68fb      	ldr	r3, [r7, #12]
2000084c:	3301      	adds	r3, #1
2000084e:	60fb      	str	r3, [r7, #12]
20000850:	68fb      	ldr	r3, [r7, #12]
20000852:	2b63      	cmp	r3, #99	; 0x63
20000854:	dddb      	ble.n	2000080e <draw_object+0xe>
	}
}
20000856:	46c0      	nop			; (mov r8, r8)
20000858:	46bd      	mov	sp, r7
2000085a:	b004      	add	sp, #16
2000085c:	bd80      	pop	{r7, pc}

2000085e <clear_object>:
void clear_object(POBJECT this) {
2000085e:	b580      	push	{r7, lr}
20000860:	b084      	sub	sp, #16
20000862:	af00      	add	r7, sp, #0
20000864:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
20000866:	2300      	movs	r3, #0
20000868:	60fb      	str	r3, [r7, #12]
2000086a:	e020      	b.n	200008ae <clear_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 0);
2000086c:	687b      	ldr	r3, [r7, #4]
2000086e:	681a      	ldr	r2, [r3, #0]
20000870:	68fb      	ldr	r3, [r7, #12]
20000872:	3304      	adds	r3, #4
20000874:	005b      	lsls	r3, r3, #1
20000876:	18d3      	adds	r3, r2, r3
20000878:	3304      	adds	r3, #4
2000087a:	781a      	ldrb	r2, [r3, #0]
2000087c:	687b      	ldr	r3, [r7, #4]
2000087e:	68db      	ldr	r3, [r3, #12]
20000880:	b2db      	uxtb	r3, r3
20000882:	18d3      	adds	r3, r2, r3
20000884:	b2d8      	uxtb	r0, r3
20000886:	687b      	ldr	r3, [r7, #4]
20000888:	681a      	ldr	r2, [r3, #0]
2000088a:	68fb      	ldr	r3, [r7, #12]
2000088c:	3304      	adds	r3, #4
2000088e:	005b      	lsls	r3, r3, #1
20000890:	18d3      	adds	r3, r2, r3
20000892:	3305      	adds	r3, #5
20000894:	781a      	ldrb	r2, [r3, #0]
20000896:	687b      	ldr	r3, [r7, #4]
20000898:	691b      	ldr	r3, [r3, #16]
2000089a:	b2db      	uxtb	r3, r3
2000089c:	18d3      	adds	r3, r2, r3
2000089e:	b2db      	uxtb	r3, r3
200008a0:	2200      	movs	r2, #0
200008a2:	0019      	movs	r1, r3
200008a4:	f7ff fee2 	bl	2000066c <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
200008a8:	68fb      	ldr	r3, [r7, #12]
200008aa:	3301      	adds	r3, #1
200008ac:	60fb      	str	r3, [r7, #12]
200008ae:	68fb      	ldr	r3, [r7, #12]
200008b0:	2b63      	cmp	r3, #99	; 0x63
200008b2:	dddb      	ble.n	2000086c <clear_object+0xe>
	}
}
200008b4:	46c0      	nop			; (mov r8, r8)
200008b6:	46bd      	mov	sp, r7
200008b8:	b004      	add	sp, #16
200008ba:	bd80      	pop	{r7, pc}

200008bc <set_object_speed>:

void set_object_speed(POBJECT this, int x, int y) {
200008bc:	b580      	push	{r7, lr}
200008be:	b084      	sub	sp, #16
200008c0:	af00      	add	r7, sp, #0
200008c2:	60f8      	str	r0, [r7, #12]
200008c4:	60b9      	str	r1, [r7, #8]
200008c6:	607a      	str	r2, [r7, #4]
	this->dirX = x;
200008c8:	68fb      	ldr	r3, [r7, #12]
200008ca:	68ba      	ldr	r2, [r7, #8]
200008cc:	605a      	str	r2, [r3, #4]
	this->dirY = y;
200008ce:	68fb      	ldr	r3, [r7, #12]
200008d0:	687a      	ldr	r2, [r7, #4]
200008d2:	609a      	str	r2, [r3, #8]
200008d4:	46c0      	nop			; (mov r8, r8)
200008d6:	46bd      	mov	sp, r7
200008d8:	b004      	add	sp, #16
200008da:	bd80      	pop	{r7, pc}

200008dc <delay_250ns>:
#include "timer.h"

void delay_250ns(void) {
200008dc:	b580      	push	{r7, lr}
200008de:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
200008e0:	4b0c      	ldr	r3, [pc, #48]	; (20000914 <delay_250ns+0x38>)
200008e2:	2200      	movs	r2, #0
200008e4:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
200008e6:	4b0c      	ldr	r3, [pc, #48]	; (20000918 <delay_250ns+0x3c>)
200008e8:	2231      	movs	r2, #49	; 0x31
200008ea:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200008ec:	4b0b      	ldr	r3, [pc, #44]	; (2000091c <delay_250ns+0x40>)
200008ee:	2200      	movs	r2, #0
200008f0:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <delay_250ns+0x38>)
200008f4:	2205      	movs	r2, #5
200008f6:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
200008f8:	46c0      	nop			; (mov r8, r8)
200008fa:	4b06      	ldr	r3, [pc, #24]	; (20000914 <delay_250ns+0x38>)
200008fc:	681a      	ldr	r2, [r3, #0]
200008fe:	2380      	movs	r3, #128	; 0x80
20000900:	025b      	lsls	r3, r3, #9
20000902:	4013      	ands	r3, r2
20000904:	d0f9      	beq.n	200008fa <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
20000906:	4b03      	ldr	r3, [pc, #12]	; (20000914 <delay_250ns+0x38>)
20000908:	2200      	movs	r2, #0
2000090a:	601a      	str	r2, [r3, #0]
}
2000090c:	46c0      	nop			; (mov r8, r8)
2000090e:	46bd      	mov	sp, r7
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	e000e010 	and	lr, r0, r0, lsl r0
20000918:	e000e014 	and	lr, r0, r4, lsl r0
2000091c:	e000e018 	and	lr, r0, r8, lsl r0

20000920 <delay_micro>:

void delay_micro(unsigned int us) {
20000920:	b580      	push	{r7, lr}
20000922:	b082      	sub	sp, #8
20000924:	af00      	add	r7, sp, #0
20000926:	6078      	str	r0, [r7, #4]
	while(us--) {
20000928:	e007      	b.n	2000093a <delay_micro+0x1a>
		delay_250ns();
2000092a:	f7ff ffd7 	bl	200008dc <delay_250ns>
		delay_250ns();
2000092e:	f7ff ffd5 	bl	200008dc <delay_250ns>
		delay_250ns();
20000932:	f7ff ffd3 	bl	200008dc <delay_250ns>
		delay_250ns();
20000936:	f7ff ffd1 	bl	200008dc <delay_250ns>
	while(us--) {
2000093a:	687b      	ldr	r3, [r7, #4]
2000093c:	1e5a      	subs	r2, r3, #1
2000093e:	607a      	str	r2, [r7, #4]
20000940:	2b00      	cmp	r3, #0
20000942:	d1f2      	bne.n	2000092a <delay_micro+0xa>
	}
}
20000944:	46c0      	nop			; (mov r8, r8)
20000946:	46bd      	mov	sp, r7
20000948:	b002      	add	sp, #8
2000094a:	bd80      	pop	{r7, pc}

2000094c <delay_milli>:

void delay_milli(unsigned int ms) {
2000094c:	b580      	push	{r7, lr}
2000094e:	b082      	sub	sp, #8
20000950:	af00      	add	r7, sp, #0
20000952:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_micro(ms);
	#else
		delay_micro(1000 * ms);
20000954:	687b      	ldr	r3, [r7, #4]
20000956:	22fa      	movs	r2, #250	; 0xfa
20000958:	0092      	lsls	r2, r2, #2
2000095a:	4353      	muls	r3, r2
2000095c:	0018      	movs	r0, r3
2000095e:	f7ff ffdf 	bl	20000920 <delay_micro>
	#endif
}
20000962:	46c0      	nop			; (mov r8, r8)
20000964:	46bd      	mov	sp, r7
20000966:	b002      	add	sp, #8
20000968:	bd80      	pop	{r7, pc}

2000096a <delay_500ns>:

void delay_500ns(void) {
2000096a:	b580      	push	{r7, lr}
2000096c:	af00      	add	r7, sp, #0
	delay_250ns();
2000096e:	f7ff ffb5 	bl	200008dc <delay_250ns>
	delay_250ns();
20000972:	f7ff ffb3 	bl	200008dc <delay_250ns>
}
20000976:	46c0      	nop			; (mov r8, r8)
20000978:	46bd      	mov	sp, r7
2000097a:	bd80      	pop	{r7, pc}

2000097c <move_paddle>:
	clear_object,
	move_paddle,
	set_object_speed
};

void move_paddle(POBJECT this) {
2000097c:	b580      	push	{r7, lr}
2000097e:	b082      	sub	sp, #8
20000980:	af00      	add	r7, sp, #0
20000982:	6078      	str	r0, [r7, #4]
	clear_object(this);
20000984:	687b      	ldr	r3, [r7, #4]
20000986:	0018      	movs	r0, r3
20000988:	f7ff ff69 	bl	2000085e <clear_object>
	
	// Move paddle in y direction only.
	this->posY += this->dirY;
2000098c:	687b      	ldr	r3, [r7, #4]
2000098e:	691a      	ldr	r2, [r3, #16]
20000990:	687b      	ldr	r3, [r7, #4]
20000992:	689b      	ldr	r3, [r3, #8]
20000994:	18d2      	adds	r2, r2, r3
20000996:	687b      	ldr	r3, [r7, #4]
20000998:	611a      	str	r2, [r3, #16]
	
	// Wall collisions todo add width check with paddle.
	if(this->posY < 0) {
2000099a:	687b      	ldr	r3, [r7, #4]
2000099c:	691b      	ldr	r3, [r3, #16]
2000099e:	2b00      	cmp	r3, #0
200009a0:	da03      	bge.n	200009aa <move_paddle+0x2e>
		this->posY = 0;
200009a2:	687b      	ldr	r3, [r7, #4]
200009a4:	2200      	movs	r2, #0
200009a6:	611a      	str	r2, [r3, #16]
200009a8:	e00e      	b.n	200009c8 <move_paddle+0x4c>
	} else if((this->posY + this->geo->sizeY) > 63) {
200009aa:	687b      	ldr	r3, [r7, #4]
200009ac:	691a      	ldr	r2, [r3, #16]
200009ae:	687b      	ldr	r3, [r7, #4]
200009b0:	681b      	ldr	r3, [r3, #0]
200009b2:	689b      	ldr	r3, [r3, #8]
200009b4:	18d3      	adds	r3, r2, r3
200009b6:	2b3f      	cmp	r3, #63	; 0x3f
200009b8:	dd06      	ble.n	200009c8 <move_paddle+0x4c>
		this->posY = (63 - this->geo->sizeY);
200009ba:	687b      	ldr	r3, [r7, #4]
200009bc:	681b      	ldr	r3, [r3, #0]
200009be:	689b      	ldr	r3, [r3, #8]
200009c0:	223f      	movs	r2, #63	; 0x3f
200009c2:	1ad2      	subs	r2, r2, r3
200009c4:	687b      	ldr	r3, [r7, #4]
200009c6:	611a      	str	r2, [r3, #16]
	}
	
	this->draw(this);
200009c8:	687b      	ldr	r3, [r7, #4]
200009ca:	695b      	ldr	r3, [r3, #20]
200009cc:	687a      	ldr	r2, [r7, #4]
200009ce:	0010      	movs	r0, r2
200009d0:	4798      	blx	r3
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	46bd      	mov	sp, r7
200009d6:	b002      	add	sp, #8
200009d8:	bd80      	pop	{r7, pc}
	...

200009dc <activateRow>:
#include "keypad.h"

void activateRow(unsigned int row) {
200009dc:	b580      	push	{r7, lr}
200009de:	b082      	sub	sp, #8
200009e0:	af00      	add	r7, sp, #0
200009e2:	6078      	str	r0, [r7, #4]
	switch(row) {
200009e4:	687b      	ldr	r3, [r7, #4]
200009e6:	2b04      	cmp	r3, #4
200009e8:	d819      	bhi.n	20000a1e <activateRow+0x42>
200009ea:	687b      	ldr	r3, [r7, #4]
200009ec:	009a      	lsls	r2, r3, #2
200009ee:	4b0e      	ldr	r3, [pc, #56]	; (20000a28 <activateRow+0x4c>)
200009f0:	18d3      	adds	r3, r2, r3
200009f2:	681b      	ldr	r3, [r3, #0]
200009f4:	469f      	mov	pc, r3
		case 0: *GPIO_D_ODR_HIGH = 0x00; break;
200009f6:	4b0d      	ldr	r3, [pc, #52]	; (20000a2c <activateRow+0x50>)
200009f8:	2200      	movs	r2, #0
200009fa:	701a      	strb	r2, [r3, #0]
200009fc:	e00f      	b.n	20000a1e <activateRow+0x42>
		case 1: *GPIO_D_ODR_HIGH = 0x10; break;
200009fe:	4b0b      	ldr	r3, [pc, #44]	; (20000a2c <activateRow+0x50>)
20000a00:	2210      	movs	r2, #16
20000a02:	701a      	strb	r2, [r3, #0]
20000a04:	e00b      	b.n	20000a1e <activateRow+0x42>
		case 2: *GPIO_D_ODR_HIGH = 0x20; break;
20000a06:	4b09      	ldr	r3, [pc, #36]	; (20000a2c <activateRow+0x50>)
20000a08:	2220      	movs	r2, #32
20000a0a:	701a      	strb	r2, [r3, #0]
20000a0c:	e007      	b.n	20000a1e <activateRow+0x42>
		case 3: *GPIO_D_ODR_HIGH = 0x40; break;
20000a0e:	4b07      	ldr	r3, [pc, #28]	; (20000a2c <activateRow+0x50>)
20000a10:	2240      	movs	r2, #64	; 0x40
20000a12:	701a      	strb	r2, [r3, #0]
20000a14:	e003      	b.n	20000a1e <activateRow+0x42>
		case 4: *GPIO_D_ODR_HIGH = 0x80; break;
20000a16:	4b05      	ldr	r3, [pc, #20]	; (20000a2c <activateRow+0x50>)
20000a18:	2280      	movs	r2, #128	; 0x80
20000a1a:	701a      	strb	r2, [r3, #0]
20000a1c:	46c0      	nop			; (mov r8, r8)
	}
}
20000a1e:	46c0      	nop			; (mov r8, r8)
20000a20:	46bd      	mov	sp, r7
20000a22:	b002      	add	sp, #8
20000a24:	bd80      	pop	{r7, pc}
20000a26:	46c0      	nop			; (mov r8, r8)
20000a28:	20000d64 	andcs	r0, r0, r4, ror #26
20000a2c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000a30 <readColumn>:

unsigned char readColumn(void) {
20000a30:	b580      	push	{r7, lr}
20000a32:	b082      	sub	sp, #8
20000a34:	af00      	add	r7, sp, #0
	unsigned char idr = *GPIO_D_IDR_HIGH;
20000a36:	4a12      	ldr	r2, [pc, #72]	; (20000a80 <readColumn+0x50>)
20000a38:	1dfb      	adds	r3, r7, #7
20000a3a:	7812      	ldrb	r2, [r2, #0]
20000a3c:	701a      	strb	r2, [r3, #0]
	if(idr & 0x01) return 1;
20000a3e:	1dfb      	adds	r3, r7, #7
20000a40:	781b      	ldrb	r3, [r3, #0]
20000a42:	2201      	movs	r2, #1
20000a44:	4013      	ands	r3, r2
20000a46:	d001      	beq.n	20000a4c <readColumn+0x1c>
20000a48:	2301      	movs	r3, #1
20000a4a:	e015      	b.n	20000a78 <readColumn+0x48>
	if(idr & 0x02) return 2;
20000a4c:	1dfb      	adds	r3, r7, #7
20000a4e:	781b      	ldrb	r3, [r3, #0]
20000a50:	2202      	movs	r2, #2
20000a52:	4013      	ands	r3, r2
20000a54:	d001      	beq.n	20000a5a <readColumn+0x2a>
20000a56:	2302      	movs	r3, #2
20000a58:	e00e      	b.n	20000a78 <readColumn+0x48>
	if(idr & 0x04) return 3;
20000a5a:	1dfb      	adds	r3, r7, #7
20000a5c:	781b      	ldrb	r3, [r3, #0]
20000a5e:	2204      	movs	r2, #4
20000a60:	4013      	ands	r3, r2
20000a62:	d001      	beq.n	20000a68 <readColumn+0x38>
20000a64:	2303      	movs	r3, #3
20000a66:	e007      	b.n	20000a78 <readColumn+0x48>
	if(idr & 0x08) return 4;
20000a68:	1dfb      	adds	r3, r7, #7
20000a6a:	781b      	ldrb	r3, [r3, #0]
20000a6c:	2208      	movs	r2, #8
20000a6e:	4013      	ands	r3, r2
20000a70:	d001      	beq.n	20000a76 <readColumn+0x46>
20000a72:	2304      	movs	r3, #4
20000a74:	e000      	b.n	20000a78 <readColumn+0x48>
	return 0;
20000a76:	2300      	movs	r3, #0
}
20000a78:	0018      	movs	r0, r3
20000a7a:	46bd      	mov	sp, r7
20000a7c:	b002      	add	sp, #8
20000a7e:	bd80      	pop	{r7, pc}
20000a80:	40020c11 	andmi	r0, r2, r1, lsl ip

20000a84 <keyb>:

unsigned char * keyb(void) {
20000a84:	b590      	push	{r4, r7, lr}
20000a86:	b087      	sub	sp, #28
20000a88:	af00      	add	r7, sp, #0
	unsigned char keys[] = {0x1,0x2,0x3,0xA,0x4,0x5,0x6,0xB,0x7,0x8,0x9,0xC,0xE,0x0,0xF,0xD};
20000a8a:	1d3b      	adds	r3, r7, #4
20000a8c:	4a25      	ldr	r2, [pc, #148]	; (20000b24 <keyb+0xa0>)
20000a8e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000a90:	c313      	stmia	r3!, {r0, r1, r4}
20000a92:	6812      	ldr	r2, [r2, #0]
20000a94:	601a      	str	r2, [r3, #0]
	static unsigned char returnKeys[4] = {0xFF,0xFF,0xFF,0xFF};
	for(char row = 1; row <= 4; row++) {
20000a96:	2317      	movs	r3, #23
20000a98:	18fb      	adds	r3, r7, r3
20000a9a:	2201      	movs	r2, #1
20000a9c:	701a      	strb	r2, [r3, #0]
20000a9e:	e033      	b.n	20000b08 <keyb+0x84>
		activateRow(row);
20000aa0:	2317      	movs	r3, #23
20000aa2:	18fb      	adds	r3, r7, r3
20000aa4:	781b      	ldrb	r3, [r3, #0]
20000aa6:	0018      	movs	r0, r3
20000aa8:	f7ff ff98 	bl	200009dc <activateRow>
		delay_250ns();
20000aac:	f7ff ff16 	bl	200008dc <delay_250ns>
		char column = readColumn();
20000ab0:	2316      	movs	r3, #22
20000ab2:	18fc      	adds	r4, r7, r3
20000ab4:	f7ff ffbc 	bl	20000a30 <readColumn>
20000ab8:	0003      	movs	r3, r0
20000aba:	7023      	strb	r3, [r4, #0]
		if(column != 0) {
20000abc:	2316      	movs	r3, #22
20000abe:	18fb      	adds	r3, r7, r3
20000ac0:	781b      	ldrb	r3, [r3, #0]
20000ac2:	2b00      	cmp	r3, #0
20000ac4:	d012      	beq.n	20000aec <keyb+0x68>
			returnKeys[row-1] = keys[4 * (row - 1) + (column - 1)];
20000ac6:	2317      	movs	r3, #23
20000ac8:	18fb      	adds	r3, r7, r3
20000aca:	781b      	ldrb	r3, [r3, #0]
20000acc:	3b01      	subs	r3, #1
20000ace:	2217      	movs	r2, #23
20000ad0:	18ba      	adds	r2, r7, r2
20000ad2:	7812      	ldrb	r2, [r2, #0]
20000ad4:	3a01      	subs	r2, #1
20000ad6:	0091      	lsls	r1, r2, #2
20000ad8:	2216      	movs	r2, #22
20000ada:	18ba      	adds	r2, r7, r2
20000adc:	7812      	ldrb	r2, [r2, #0]
20000ade:	3a01      	subs	r2, #1
20000ae0:	188a      	adds	r2, r1, r2
20000ae2:	1d39      	adds	r1, r7, #4
20000ae4:	5c89      	ldrb	r1, [r1, r2]
20000ae6:	4a10      	ldr	r2, [pc, #64]	; (20000b28 <keyb+0xa4>)
20000ae8:	54d1      	strb	r1, [r2, r3]
20000aea:	e006      	b.n	20000afa <keyb+0x76>
		} else {
			returnKeys[row-1] = 0xFF;
20000aec:	2317      	movs	r3, #23
20000aee:	18fb      	adds	r3, r7, r3
20000af0:	781b      	ldrb	r3, [r3, #0]
20000af2:	3b01      	subs	r3, #1
20000af4:	4a0c      	ldr	r2, [pc, #48]	; (20000b28 <keyb+0xa4>)
20000af6:	21ff      	movs	r1, #255	; 0xff
20000af8:	54d1      	strb	r1, [r2, r3]
	for(char row = 1; row <= 4; row++) {
20000afa:	2317      	movs	r3, #23
20000afc:	18fb      	adds	r3, r7, r3
20000afe:	781a      	ldrb	r2, [r3, #0]
20000b00:	2317      	movs	r3, #23
20000b02:	18fb      	adds	r3, r7, r3
20000b04:	3201      	adds	r2, #1
20000b06:	701a      	strb	r2, [r3, #0]
20000b08:	2317      	movs	r3, #23
20000b0a:	18fb      	adds	r3, r7, r3
20000b0c:	781b      	ldrb	r3, [r3, #0]
20000b0e:	2b04      	cmp	r3, #4
20000b10:	d9c6      	bls.n	20000aa0 <keyb+0x1c>
		}
	}
	activateRow(0);
20000b12:	2000      	movs	r0, #0
20000b14:	f7ff ff62 	bl	200009dc <activateRow>
	return returnKeys;
20000b18:	4b03      	ldr	r3, [pc, #12]	; (20000b28 <keyb+0xa4>)
20000b1a:	0018      	movs	r0, r3
20000b1c:	46bd      	mov	sp, r7
20000b1e:	b007      	add	sp, #28
20000b20:	bd90      	pop	{r4, r7, pc}
20000b22:	46c0      	nop			; (mov r8, r8)
20000b24:	20000d78 	andcs	r0, r0, r8, ror sp
20000b28:	20000d40 	andcs	r0, r0, r0, asr #26

20000b2c <ball_geometry>:
20000b2c:	0000000c 	andeq	r0, r0, ip
20000b30:	00000004 	andeq	r0, r0, r4
20000b34:	00000004 	andeq	r0, r0, r4
20000b38:	02000100 	andeq	r0, r0, #0, 2
20000b3c:	01010001 	tsteq	r1, r1
20000b40:	03010201 	movweq	r0, #4609	; 0x1201
20000b44:	01020002 	tsteq	r2, r2
20000b48:	03020202 	movweq	r0, #8706	; 0x2202
20000b4c:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000c00 <ball>:
20000c00:	20000b2c 	andcs	r0, r0, ip, lsr #22
	...
20000c0c:	0000003f 	andeq	r0, r0, pc, lsr r0
20000c10:	00000020 	andeq	r0, r0, r0, lsr #32
20000c14:	20000801 	andcs	r0, r0, r1, lsl #16
20000c18:	2000085f 	andcs	r0, r0, pc, asr r8
20000c1c:	20000155 	andcs	r0, r0, r5, asr r1
20000c20:	200008bd 			; <UNDEFINED> instruction: 0x200008bd

20000c24 <paddle_geometry>:
20000c24:	00000064 	andeq	r0, r0, r4, rrx
20000c28:	00000004 	andeq	r0, r0, r4
20000c2c:	00000019 	andeq	r0, r0, r9, lsl r0
20000c30:	00010000 	andeq	r0, r1, r0
20000c34:	00030002 	andeq	r0, r3, r2
20000c38:	01010100 	mrseq	r0, (UNDEF: 17)
20000c3c:	01030102 	tsteq	r3, r2, lsl #2
20000c40:	02010200 	andeq	r0, r1, #0, 4
20000c44:	02030202 	andeq	r0, r3, #536870912	; 0x20000000
20000c48:	03010300 	movweq	r0, #4864	; 0x1300
20000c4c:	03030302 	movweq	r0, #13058	; 0x3302
20000c50:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
20000c54:	04030402 	streq	r0, [r3], #-1026	; 0xfffffbfe
20000c58:	05010500 	streq	r0, [r1, #-1280]	; 0xfffffb00
20000c5c:	05030502 	streq	r0, [r3, #-1282]	; 0xfffffafe
20000c60:	06010600 	streq	r0, [r1], -r0, lsl #12
20000c64:	06030602 	streq	r0, [r3], -r2, lsl #12
20000c68:	07010700 	streq	r0, [r1, -r0, lsl #14]
20000c6c:	07030702 	streq	r0, [r3, -r2, lsl #14]
20000c70:	08010800 	stmdaeq	r1, {fp}
20000c74:	08030802 	stmdaeq	r3, {r1, fp}
20000c78:	09010900 	stmdbeq	r1, {r8, fp}
20000c7c:	09030902 	stmdbeq	r3, {r1, r8, fp}
20000c80:	0a010a00 	beq	20043488 <returnKeys.4003+0x42748>
20000c84:	0a030a02 	beq	200c3494 <returnKeys.4003+0xc2754>
20000c88:	0b010b00 	bleq	20043890 <returnKeys.4003+0x42b50>
20000c8c:	0b030b02 	bleq	200c389c <returnKeys.4003+0xc2b5c>
20000c90:	0c010c00 	stceq	12, cr0, [r1], {-0}
20000c94:	0c030c02 	stceq	12, cr0, [r3], {2}
20000c98:	0d010d00 	stceq	13, cr0, [r1, #-0]
20000c9c:	0d030d02 	stceq	13, cr0, [r3, #-8]
20000ca0:	0e010e00 	cdpeq	14, 0, cr0, cr1, cr0, {0}
20000ca4:	0e030e02 	cdpeq	14, 0, cr0, cr3, cr2, {0}
20000ca8:	0f010f00 	svceq	0x00010f00
20000cac:	0f030f02 	svceq	0x00030f02
20000cb0:	10011000 	andne	r1, r1, r0
20000cb4:	10031002 	andne	r1, r3, r2
20000cb8:	11011100 	mrsne	r1, (UNDEF: 17)
20000cbc:	11031102 	tstne	r3, r2, lsl #2
20000cc0:	12011200 	andne	r1, r1, #0, 4
20000cc4:	12031202 	andne	r1, r3, #536870912	; 0x20000000
20000cc8:	13011300 	movwne	r1, #4864	; 0x1300
20000ccc:	13031302 	movwne	r1, #13058	; 0x3302
20000cd0:	14011400 	strne	r1, [r1], #-1024	; 0xfffffc00
20000cd4:	14031402 	strne	r1, [r3], #-1026	; 0xfffffbfe
20000cd8:	15011500 	strne	r1, [r1, #-1280]	; 0xfffffb00
20000cdc:	15031502 	strne	r1, [r3, #-1282]	; 0xfffffafe
20000ce0:	16011600 	strne	r1, [r1], -r0, lsl #12
20000ce4:	16031602 	strne	r1, [r3], -r2, lsl #12
20000ce8:	17011700 	strne	r1, [r1, -r0, lsl #14]
20000cec:	17031702 	strne	r1, [r3, -r2, lsl #14]
20000cf0:	18011800 	stmdane	r1, {fp, ip}
20000cf4:	18031802 	stmdane	r3, {r1, fp, ip}

20000cf8 <leftPaddle>:
20000cf8:	20000c24 	andcs	r0, r0, r4, lsr #24
	...
20000d04:	00000001 	andeq	r0, r0, r1
20000d08:	00000020 	andeq	r0, r0, r0, lsr #32
20000d0c:	20000801 	andcs	r0, r0, r1, lsl #16
20000d10:	2000085f 	andcs	r0, r0, pc, asr r8
20000d14:	2000097d 	andcs	r0, r0, sp, ror r9
20000d18:	200008bd 			; <UNDEFINED> instruction: 0x200008bd

20000d1c <rightPaddle>:
20000d1c:	20000c24 	andcs	r0, r0, r4, lsr #24
	...
20000d28:	0000007c 	andeq	r0, r0, ip, ror r0
20000d2c:	00000020 	andeq	r0, r0, r0, lsr #32
20000d30:	20000801 	andcs	r0, r0, r1, lsl #16
20000d34:	2000085f 	andcs	r0, r0, pc, asr r8
20000d38:	2000097d 	andcs	r0, r0, sp, ror r9
20000d3c:	200008bd 			; <UNDEFINED> instruction: 0x200008bd

20000d40 <returnKeys.4003>:
20000d40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20000d44:	200006c2 	andcs	r0, r0, r2, asr #13
20000d48:	200006cc 	andcs	r0, r0, ip, asr #13
20000d4c:	200006d6 	ldrdcs	r0, [r0], -r6
20000d50:	200006e0 	andcs	r0, r0, r0, ror #13
20000d54:	200006ea 	andcs	r0, r0, sl, ror #13
20000d58:	200006f4 	strdcs	r0, [r0], -r4
20000d5c:	200006fe 	strdcs	r0, [r0], -lr
20000d60:	20000708 	andcs	r0, r0, r8, lsl #14
20000d64:	200009f6 	strdcs	r0, [r0], -r6
20000d68:	200009fe 	strdcs	r0, [r0], -lr
20000d6c:	20000a06 	andcs	r0, r0, r6, lsl #20
20000d70:	20000a0e 	andcs	r0, r0, lr, lsl #20
20000d74:	20000a16 	andcs	r0, r0, r6, lsl sl
20000d78:	0a030201 	beq	200c1584 <returnKeys.4003+0xc0844>
20000d7c:	0b060504 	bleq	20182194 <returnKeys.4003+0x181454>
20000d80:	0c090807 	stceq	8, cr0, [r9], {7}
20000d84:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000d54 <returnKeys.4003+0x14>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000230 	andeq	r0, r0, r0, lsr r2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000087 	andeq	r0, r0, r7, lsl #1
  10:	0000270c 	andeq	r2, r0, ip, lsl #14
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	00000079 	andeq	r0, r0, r9, ror r0
  28:	00006d03 	andeq	r6, r0, r3, lsl #26
  2c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
  30:	00000049 	andeq	r0, r0, r9, asr #32
  34:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
  38:	00002106 	andeq	r2, r0, r6, lsl #2
  3c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
  40:	21070200 	mrscs	r0, (UNDEF: 39)
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	01850500 	orreq	r0, r5, r0, lsl #10
  4c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  50:	00000028 	andeq	r0, r0, r8, lsr #32
  54:	00013203 	andeq	r3, r1, r3, lsl #4
  58:	0b02d400 	bleq	b5060 <startup-0x1ff4afa0>
  5c:	00000090 	muleq	r0, r0, r0
  60:	00017b06 	andeq	r7, r1, r6, lsl #22
  64:	900c0200 	andls	r0, ip, r0, lsl #4
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000a06 	andeq	r0, r0, r6, lsl #20
  70:	900d0200 	andls	r0, sp, r0, lsl #4
  74:	04000000 	streq	r0, [r0], #-0
  78:	00001c06 	andeq	r1, r0, r6, lsl #24
  7c:	900e0200 	andls	r0, lr, r0, lsl #4
  80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  84:	00787004 	rsbseq	r7, r8, r4
  88:	00970f02 	addseq	r0, r7, r2, lsl #30
  8c:	000c0000 	andeq	r0, ip, r0
  90:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  94:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  98:	00000049 	andeq	r0, r0, r9, asr #32
  9c:	000000a7 	andeq	r0, r0, r7, lsr #1
  a0:	0000a709 	andeq	sl, r0, r9, lsl #14
  a4:	02006300 	andeq	r6, r0, #0, 6
  a8:	01680704 	cmneq	r8, r4, lsl #14
  ac:	1f050000 	svcne	0x00050000
  b0:	02000001 	andeq	r0, r0, #1
  b4:	0000b910 	andeq	fp, r0, r0, lsl r9
  b8:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
  bc:	03000000 	movweq	r0, #0
  c0:	0000018b 	andeq	r0, r0, fp, lsl #3
  c4:	38120224 	ldmdacc	r2, {r2, r5, r9}
  c8:	04000001 	streq	r0, [r0], #-1
  cc:	006f6567 	rsbeq	r6, pc, r7, ror #10
  d0:	00ae1302 	adceq	r1, lr, r2, lsl #6
  d4:	06000000 	streq	r0, [r0], -r0
  d8:	00000176 	andeq	r0, r0, r6, ror r1
  dc:	00901402 	addseq	r1, r0, r2, lsl #8
  e0:	06040000 	streq	r0, [r4], -r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	00901402 	addseq	r1, r0, r2, lsl #8
  ec:	06080000 	streq	r0, [r8], -r0
  f0:	00000171 	andeq	r0, r0, r1, ror r1
  f4:	00901502 	addseq	r1, r0, r2, lsl #10
  f8:	060c0000 	streq	r0, [ip], -r0
  fc:	00000005 	andeq	r0, r0, r5
 100:	00901502 	addseq	r1, r0, r2, lsl #10
 104:	06100000 	ldreq	r0, [r0], -r0
 108:	00000022 	andeq	r0, r0, r2, lsr #32
 10c:	01491602 	cmpeq	r9, r2, lsl #12
 110:	06140000 	ldreq	r0, [r4], -r0
 114:	0000021a 	andeq	r0, r0, sl, lsl r2
 118:	01491702 	cmpeq	r9, r2, lsl #14
 11c:	06180000 	ldreq	r0, [r8], -r0
 120:	00000074 	andeq	r0, r0, r4, ror r0
 124:	01491802 	cmpeq	r9, r2, lsl #16
 128:	061c0000 	ldreq	r0, [ip], -r0
 12c:	00000063 	andeq	r0, r0, r3, rrx
 130:	01641902 	cmneq	r4, r2, lsl #18
 134:	00200000 	eoreq	r0, r0, r0
 138:	0001430b 	andeq	r4, r1, fp, lsl #6
 13c:	01430c00 	cmpeq	r3, r0, lsl #24
 140:	0a000000 	beq	148 <startup-0x1ffffeb8>
 144:	0000bf04 	andeq	fp, r0, r4, lsl #30
 148:	38040a00 	stmdacc	r4, {r9, fp}
 14c:	0b000001 	bleq	158 <startup-0x1ffffea8>
 150:	00000164 	andeq	r0, r0, r4, ror #2
 154:	0001430c 	andeq	r4, r1, ip, lsl #6
 158:	00900c00 	addseq	r0, r0, r0, lsl #24
 15c:	900c0000 	andls	r0, ip, r0
 160:	00000000 	andeq	r0, r0, r0
 164:	014f040a 	cmpeq	pc, sl, lsl #8
 168:	61050000 	mrsvs	r0, (UNDEF: 5)
 16c:	02000001 	andeq	r0, r0, #1
 170:	0000bf1a 	andeq	fp, r0, sl, lsl pc
 174:	01600500 	cmneq	r0, r0, lsl #10
 178:	1a020000 	bne	80180 <startup-0x1ff7fe80>
 17c:	00000143 	andeq	r0, r0, r3, asr #2
 180:	0001a80d 	andeq	sl, r1, sp, lsl #16
 184:	6a050300 	bvs	140d8c <startup-0x1febf274>
 188:	0d000001 	stceq	0, cr0, [r0, #-4]
 18c:	00000150 	andeq	r0, r0, r0, asr r1
 190:	016a0404 	cmneq	sl, r4, lsl #8
 194:	100d0000 	andne	r0, sp, r0
 198:	04000000 	streq	r0, [r0], #-0
 19c:	00016a05 	andeq	r6, r1, r5, lsl #20
 1a0:	015b0e00 	cmpeq	fp, r0, lsl #28
 1a4:	25010000 	strcs	r0, [r1, #-0]
 1a8:	20000058 	andcs	r0, r0, r8, asr r0
 1ac:	000000fc 	strdeq	r0, [r0], -ip
 1b0:	020b9c01 	andeq	r9, fp, #256	; 0x100
 1b4:	700f0000 	andvc	r0, pc, r0
 1b8:	75260100 	strvc	r0, [r6, #-256]!	; 0xffffff00
 1bc:	02000001 	andeq	r0, r0, #1
 1c0:	700f7091 	mulvc	pc, r1, r0	; <UNPREDICTABLE>
 1c4:	2701006c 	strcs	r0, [r1, -ip, rrx]
 1c8:	00000175 	andeq	r0, r0, r5, ror r1
 1cc:	0f6c9102 	svceq	0x006c9102
 1d0:	01007270 	tsteq	r0, r0, ror r2
 1d4:	00017528 	andeq	r7, r1, r8, lsr #10
 1d8:	68910200 	ldmvs	r1, {r9}
 1dc:	00008210 	andeq	r8, r0, r0, lsl r2
 1e0:	0000c420 	andeq	ip, r0, r0, lsr #8
 1e4:	013c1100 	teqeq	ip, r0, lsl #2
 1e8:	33010000 	movwcc	r0, #4096	; 0x1000
 1ec:	0000020b 	andeq	r0, r0, fp, lsl #4
 1f0:	10649102 	rsbne	r9, r4, r2, lsl #2
 1f4:	200000a2 	andcs	r0, r0, r2, lsr #1
 1f8:	00000080 	andeq	r0, r0, r0, lsl #1
 1fc:	0100690f 	tsteq	r0, pc, lsl #18
 200:	00002136 	andeq	r2, r0, r6, lsr r1
 204:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 208:	0a000000 	beq	210 <startup-0x1ffffdf0>
 20c:	00002104 	andeq	r2, r0, r4, lsl #2
 210:	01291200 			; <UNDEFINED> instruction: 0x01291200
 214:	14010000 	strne	r0, [r1], #-0
 218:	20000010 	andcs	r0, r0, r0, lsl r0
 21c:	00000048 	andeq	r0, r0, r8, asr #32
 220:	48129c01 	ldmdami	r2, {r0, sl, fp, ip, pc}
 224:	01000001 	tsteq	r0, r1
 228:	0000000a 	andeq	r0, r0, sl
 22c:	00000c20 	andeq	r0, r0, r0, lsr #24
 230:	009c0100 	addseq	r0, ip, r0, lsl #2
 234:	00000233 	andeq	r0, r0, r3, lsr r2
 238:	00f70004 	rscseq	r0, r7, r4
 23c:	01040000 	mrseq	r0, (UNDEF: 4)
 240:	00000087 	andeq	r0, r0, r7, lsl #1
 244:	0001ad0c 	andeq	sl, r1, ip, lsl #26
 248:	00015400 	andeq	r5, r1, r0, lsl #8
 24c:	00015c20 	andeq	r5, r1, r0, lsr #24
 250:	0000cb00 	andeq	ip, r0, r0, lsl #22
 254:	006d0200 	rsbeq	r0, sp, r0, lsl #4
 258:	02020000 	andeq	r0, r2, #0
 25c:	00004205 	andeq	r4, r0, r5, lsl #4
 260:	00780300 	rsbseq	r0, r8, r0, lsl #6
 264:	00420602 	subeq	r0, r2, r2, lsl #12
 268:	03000000 	movweq	r0, #0
 26c:	07020079 	smlsdxeq	r2, r9, r0, r0
 270:	00000042 	andeq	r0, r0, r2, asr #32
 274:	01040001 	tsteq	r4, r1
 278:	00007908 	andeq	r7, r0, r8, lsl #18
 27c:	01850500 	orreq	r0, r5, r0, lsl #10
 280:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 284:	00000021 	andeq	r0, r0, r1, lsr #32
 288:	00013202 	andeq	r3, r1, r2, lsl #4
 28c:	0b02d400 	bleq	b5294 <startup-0x1ff4ad6c>
 290:	00000090 	muleq	r0, r0, r0
 294:	00017b06 	andeq	r7, r1, r6, lsl #22
 298:	900c0200 	andls	r0, ip, r0, lsl #4
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	00000a06 	andeq	r0, r0, r6, lsl #20
 2a4:	900d0200 	andls	r0, sp, r0, lsl #4
 2a8:	04000000 	streq	r0, [r0], #-0
 2ac:	00001c06 	andeq	r1, r0, r6, lsl #24
 2b0:	900e0200 	andls	r0, lr, r0, lsl #4
 2b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 2b8:	00787003 	rsbseq	r7, r8, r3
 2bc:	00970f02 	addseq	r0, r7, r2, lsl #30
 2c0:	000c0000 	andeq	r0, ip, r0
 2c4:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 2c8:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 2cc:	00000049 	andeq	r0, r0, r9, asr #32
 2d0:	000000a7 	andeq	r0, r0, r7, lsr #1
 2d4:	0000a709 	andeq	sl, r0, r9, lsl #14
 2d8:	04006300 	streq	r6, [r0], #-768	; 0xfffffd00
 2dc:	01680704 	cmneq	r8, r4, lsl #14
 2e0:	20050000 	andcs	r0, r5, r0
 2e4:	02000001 	andeq	r0, r0, #1
 2e8:	00005410 	andeq	r5, r0, r0, lsl r4
 2ec:	011f0500 	tsteq	pc, r0, lsl #10
 2f0:	10020000 	andne	r0, r2, r0
 2f4:	000000c4 	andeq	r0, r0, r4, asr #1
 2f8:	0054040a 	subseq	r0, r4, sl, lsl #8
 2fc:	8b020000 	blhi	80304 <startup-0x1ff7fcfc>
 300:	24000001 	strcs	r0, [r0], #-1
 304:	01431202 	cmpeq	r3, r2, lsl #4
 308:	67030000 	strvs	r0, [r3, -r0]
 30c:	02006f65 	andeq	r6, r0, #404	; 0x194
 310:	0000b913 	andeq	fp, r0, r3, lsl r9
 314:	76060000 	strvc	r0, [r6], -r0
 318:	02000001 	andeq	r0, r0, #1
 31c:	00009014 	andeq	r9, r0, r4, lsl r0
 320:	00060400 	andeq	r0, r6, r0, lsl #8
 324:	02000000 	andeq	r0, r0, #0
 328:	00009014 	andeq	r9, r0, r4, lsl r0
 32c:	71060800 	tstvc	r6, r0, lsl #16
 330:	02000001 	andeq	r0, r0, #1
 334:	00009015 	andeq	r9, r0, r5, lsl r0
 338:	05060c00 	streq	r0, [r6, #-3072]	; 0xfffff400
 33c:	02000000 	andeq	r0, r0, #0
 340:	00009015 	andeq	r9, r0, r5, lsl r0
 344:	22061000 	andcs	r1, r6, #0
 348:	02000000 	andeq	r0, r0, #0
 34c:	00015416 	andeq	r5, r1, r6, lsl r4
 350:	1a061400 	bne	185358 <startup-0x1fe7aca8>
 354:	02000002 	andeq	r0, r0, #2
 358:	00015417 	andeq	r5, r1, r7, lsl r4
 35c:	74061800 	strvc	r1, [r6], #-2048	; 0xfffff800
 360:	02000000 	andeq	r0, r0, #0
 364:	00015418 	andeq	r5, r1, r8, lsl r4
 368:	63061c00 	movwvs	r1, #27648	; 0x6c00
 36c:	02000000 	andeq	r0, r0, #0
 370:	00016f19 	andeq	r6, r1, r9, lsl pc
 374:	0b002000 	bleq	837c <startup-0x1fff7c84>
 378:	0000014e 	andeq	r0, r0, lr, asr #2
 37c:	00014e0c 	andeq	r4, r1, ip, lsl #28
 380:	040a0000 	streq	r0, [sl], #-0
 384:	000000ca 	andeq	r0, r0, sl, asr #1
 388:	0143040a 	cmpeq	r3, sl, lsl #8
 38c:	6f0b0000 	svcvs	0x000b0000
 390:	0c000001 	stceq	0, cr0, [r0], {1}
 394:	0000014e 	andeq	r0, r0, lr, asr #2
 398:	0000900c 	andeq	r9, r0, ip
 39c:	00900c00 	addseq	r0, r0, r0, lsl #24
 3a0:	0a000000 	beq	3a8 <startup-0x1ffffc58>
 3a4:	00015a04 	andeq	r5, r1, r4, lsl #20
 3a8:	01610500 	cmneq	r1, r0, lsl #10
 3ac:	1a020000 	bne	803b4 <startup-0x1ff7fc4c>
 3b0:	000000ca 	andeq	r0, r0, sl, asr #1
 3b4:	00016005 	andeq	r6, r1, r5
 3b8:	4e1a0200 	cdpmi	2, 1, cr0, cr10, cr0, {0}
 3bc:	0d000001 	stceq	0, cr0, [r0, #-4]
 3c0:	000001a8 	andeq	r0, r0, r8, lsr #3
 3c4:	01750503 	cmneq	r5, r3, lsl #10
 3c8:	500d0000 	andpl	r0, sp, r0
 3cc:	04000001 	streq	r0, [r0], #-1
 3d0:	00017504 	andeq	r7, r1, r4, lsl #10
 3d4:	00100d00 	andseq	r0, r0, r0, lsl #26
 3d8:	05040000 	streq	r0, [r4, #-0]
 3dc:	00000175 	andeq	r0, r0, r5, ror r1
 3e0:	0001900e 	andeq	r9, r1, lr
 3e4:	ae040100 	adfges	f0, f4, f0
 3e8:	05000000 	streq	r0, [r0, #-0]
 3ec:	000b2c03 	andeq	r2, fp, r3, lsl #24
 3f0:	018b0f20 	orreq	r0, fp, r0, lsr #30
 3f4:	0f010000 	svceq	0x00010000
 3f8:	0c000305 	stceq	3, cr0, [r0], {5}
 3fc:	a3102000 	tstge	r0, #0
 400:	01000001 	tsteq	r0, r1
 404:	0001541c 	andeq	r5, r1, ip, lsl r4
 408:	00015c20 	andeq	r5, r1, r0, lsr #24
 40c:	119c0100 	orrsne	r0, ip, r0, lsl #2
 410:	0000019e 	muleq	r0, lr, r1
 414:	01801c01 	orreq	r1, r0, r1, lsl #24
 418:	91020000 	mrsls	r0, (UNDEF: 2)
 41c:	706c126c 	rsbvc	r1, ip, ip, ror #4
 420:	802c0100 	eorhi	r0, ip, r0, lsl #2
 424:	02000001 	andeq	r0, r0, #1
 428:	72127491 	andsvc	r7, r2, #-1862270976	; 0x91000000
 42c:	2d010070 	stccs	0, cr0, [r1, #-448]	; 0xfffffe40
 430:	00000180 	andeq	r0, r0, r0, lsl #3
 434:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
 438:	2000020c 	andcs	r0, r0, ip, lsl #4
 43c:	00000024 	andeq	r0, r0, r4, lsr #32
 440:	0000021e 	andeq	r0, r0, lr, lsl r2
 444:	0001e614 	andeq	lr, r1, r4, lsl r6
 448:	90360100 	eorsls	r0, r6, r0, lsl #2
 44c:	15000000 	strne	r0, [r0, #-0]
 450:	72160000 	andsvc	r0, r6, #0
 454:	24200002 	strtcs	r0, [r0], #-2
 458:	14000000 	strne	r0, [r0], #-0
 45c:	000001e6 	andeq	r0, r0, r6, ror #3
 460:	00903601 	addseq	r3, r0, r1, lsl #12
 464:	00150000 	andseq	r0, r5, r0
 468:	83000000 	movwhi	r0, #0
 46c:	04000002 	streq	r0, [r0], #-2
 470:	00021300 	andeq	r1, r2, r0, lsl #6
 474:	87010400 	strhi	r0, [r1, -r0, lsl #8]
 478:	0c000000 	stceq	0, cr0, [r0], {-0}
 47c:	00000262 	andeq	r0, r0, r2, ror #4
 480:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
 484:	00000550 	andeq	r0, r0, r0, asr r5
 488:	00000180 	andeq	r0, r0, r0, lsl #3
 48c:	0002a302 	andeq	sl, r2, r2, lsl #6
 490:	2c260200 	sfmcs	f0, 4, [r6], #-0
 494:	03000000 	movweq	r0, #0
 498:	00790801 	rsbseq	r0, r9, r1, lsl #16
 49c:	20040000 	andcs	r0, r4, r0
 4a0:	01000002 	tsteq	r0, r2
 4a4:	00066c97 	muleq	r6, r7, ip
 4a8:	00019420 	andeq	r9, r1, r0, lsr #8
 4ac:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
 4b0:	05000000 	streq	r0, [r0, #-0]
 4b4:	97010078 	smlsdxls	r1, r8, r0, r0
 4b8:	0000002c 	andeq	r0, r0, ip, lsr #32
 4bc:	05679102 	strbeq	r9, [r7, #-258]!	; 0xfffffefe
 4c0:	97010079 	smlsdxls	r1, r9, r0, r0
 4c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 4c8:	05669102 	strbeq	r9, [r6, #-258]!	; 0xfffffefe
 4cc:	00746573 	rsbseq	r6, r4, r3, ror r5
 4d0:	002c9701 	eoreq	r9, ip, r1, lsl #14
 4d4:	91020000 	mrsls	r0, (UNDEF: 2)
 4d8:	029e0665 	addseq	r0, lr, #105906176	; 0x6500000
 4dc:	9a010000 	bls	404e4 <startup-0x1ffbfb1c>
 4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
 4e4:	066f9102 	strbteq	r9, [pc], -r2, lsl #2
 4e8:	000002d5 	ldrdeq	r0, [r0], -r5
 4ec:	002c9b01 	eoreq	r9, ip, r1, lsl #22
 4f0:	91020000 	mrsls	r0, (UNDEF: 2)
 4f4:	02c5066d 	sbceq	r0, r5, #114294784	; 0x6d00000
 4f8:	ac010000 	stcge	0, cr0, [r1], {-0}
 4fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 500:	066e9102 	strbteq	r9, [lr], -r2, lsl #2
 504:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 508:	002cb601 	eoreq	fp, ip, r1, lsl #12
 50c:	91020000 	mrsls	r0, (UNDEF: 2)
 510:	0604006c 	streq	r0, [r4], -ip, rrx
 514:	01000003 	tsteq	r0, r3
 518:	0006148b 	andeq	r1, r6, fp, lsl #9
 51c:	00005820 	andeq	r5, r0, r0, lsr #16
 520:	ed9c0100 	ldfs	f0, [ip]
 524:	07000000 	streq	r0, [r0, -r0]
 528:	2000061a 	andcs	r0, r0, sl, lsl r6
 52c:	0000004a 	andeq	r0, r0, sl, asr #32
 530:	0002fb06 	andeq	pc, r2, r6, lsl #22
 534:	ed8c0100 	stfs	f0, [ip]
 538:	02000000 	andeq	r0, r0, #0
 53c:	3e077491 	mcrcc	4, 0, r7, cr7, cr1, {4}
 540:	1a200006 	bne	800560 <startup-0x1f7ffaa0>
 544:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 548:	00646461 	rsbeq	r6, r4, r1, ror #8
 54c:	00ed8f01 	rsceq	r8, sp, r1, lsl #30
 550:	91020000 	mrsls	r0, (UNDEF: 2)
 554:	00000070 	andeq	r0, r0, r0, ror r0
 558:	69050409 	stmdbvs	r5, {r0, r3, sl}
 55c:	0a00746e 	beq	1d71c <startup-0x1ffe28e4>
 560:	0000031b 	andeq	r0, r0, fp, lsl r3
 564:	05b87c01 	ldreq	r7, [r8, #3073]!	; 0xc01
 568:	005c2000 	subseq	r2, ip, r0
 56c:	9c010000 	stcls	0, cr0, [r1], {-0}
 570:	00023c0b 	andeq	r3, r2, fp, lsl #24
 574:	21770100 	cmncs	r7, r0, lsl #2
 578:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
 57c:	2a200005 	bcs	800598 <startup-0x1f7ffa68>
 580:	01000000 	mrseq	r0, (UNDEF: 0)
 584:	00012d9c 	muleq	r1, ip, sp
 588:	02c50c00 	sbceq	r0, r5, #0, 24
 58c:	77010000 	strvc	r0, [r1, -r0]
 590:	00000021 	andeq	r0, r0, r1, lsr #32
 594:	00779102 	rsbseq	r9, r7, r2, lsl #2
 598:	0002e804 	andeq	lr, r2, r4, lsl #16
 59c:	486f0100 	stmdami	pc!, {r8}^	; <UNPREDICTABLE>
 5a0:	46200005 	strtmi	r0, [r0], -r5
 5a4:	01000000 	mrseq	r0, (UNDEF: 0)
 5a8:	00015f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
 5ac:	024a0c00 	subeq	r0, sl, #0, 24
 5b0:	6f010000 	svcvs	0x00010000
 5b4:	00000021 	andeq	r0, r0, r1, lsr #32
 5b8:	0c779102 	ldfeqp	f1, [r7], #-8
 5bc:	000002c5 	andeq	r0, r0, r5, asr #5
 5c0:	00216f01 	eoreq	r6, r1, r1, lsl #30
 5c4:	91020000 	mrsls	r0, (UNDEF: 2)
 5c8:	f2040076 	vqadd.s8	q0, q2, q11
 5cc:	01000001 	tsteq	r0, r1
 5d0:	00050868 	andeq	r0, r5, r8, ror #16
 5d4:	00004020 	andeq	r4, r0, r0, lsr #32
 5d8:	919c0100 	orrsls	r0, ip, r0, lsl #2
 5dc:	0c000001 	stceq	0, cr0, [r0], {1}
 5e0:	00000200 	andeq	r0, r0, r0, lsl #4
 5e4:	00216801 	eoreq	r6, r1, r1, lsl #16
 5e8:	91020000 	mrsls	r0, (UNDEF: 2)
 5ec:	02c50c77 	sbceq	r0, r5, #30464	; 0x7700
 5f0:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
 5f4:	00000021 	andeq	r0, r0, r1, lsr #32
 5f8:	00769102 	rsbseq	r9, r6, r2, lsl #2
 5fc:	0002b004 	andeq	fp, r2, r4
 600:	88510100 	ldmdahi	r1, {r8}^
 604:	80200004 	eorhi	r0, r0, r4
 608:	01000000 	mrseq	r0, (UNDEF: 0)
 60c:	0001c39c 	muleq	r1, ip, r3
 610:	03000c00 	movweq	r0, #3072	; 0xc00
 614:	51010000 	mrspl	r0, (UNDEF: 1)
 618:	00000021 	andeq	r0, r0, r1, lsr #32
 61c:	0c779102 	ldfeqp	f1, [r7], #-8
 620:	000002c5 	andeq	r0, r0, r5, asr #5
 624:	00215101 	eoreq	r5, r1, r1, lsl #2
 628:	91020000 	mrsls	r0, (UNDEF: 2)
 62c:	db0b0076 	blle	2c080c <startup-0x1fd3f7f4>
 630:	01000002 	tsteq	r0, r2
 634:	00002136 	andeq	r2, r0, r6, lsr r1
 638:	0003f800 	andeq	pc, r3, r0, lsl #16
 63c:	00009020 	andeq	r9, r0, r0, lsr #32
 640:	f89c0100 			; <UNDEFINED> instruction: 0xf89c0100
 644:	0c000001 	stceq	0, cr0, [r0], {1}
 648:	000002c5 	andeq	r0, r0, r5, asr #5
 64c:	00213601 	eoreq	r3, r1, r1, lsl #12
 650:	91020000 	mrsls	r0, (UNDEF: 2)
 654:	5652086f 	ldrbpl	r0, [r2], -pc, ror #16
 658:	213f0100 	teqcs	pc, r0, lsl #2
 65c:	02000000 	andeq	r0, r0, #0
 660:	04007791 	streq	r7, [r0], #-1937	; 0xfffff86f
 664:	0000024f 	andeq	r0, r0, pc, asr #4
 668:	03861f01 	orreq	r1, r6, #1, 30
 66c:	00722000 	rsbseq	r2, r2, r0
 670:	9c010000 	stcls	0, cr0, [r1], {-0}
 674:	00000222 	andeq	r0, r0, r2, lsr #4
 678:	0000180d 	andeq	r1, r0, sp, lsl #16
 67c:	02ab0600 	adceq	r0, fp, #0, 12
 680:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
 684:	0000002c 	andeq	r0, r0, ip, lsr #32
 688:	00779102 	rsbseq	r9, r7, r2, lsl #2
 68c:	02be0400 	adcseq	r0, lr, #0, 8
 690:	0f010000 	svceq	0x00010000
 694:	2000031c 	andcs	r0, r0, ip, lsl r3
 698:	0000006a 	andeq	r0, r0, sl, rrx
 69c:	02469c01 	subeq	r9, r6, #256	; 0x100
 6a0:	c50c0000 	strgt	r0, [ip, #-0]
 6a4:	01000002 	tsteq	r0, r2
 6a8:	0000210f 	andeq	r2, r0, pc, lsl #2
 6ac:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6b0:	02080e00 	andeq	r0, r8, #0, 28
 6b4:	0b010000 	bleq	406bc <startup-0x1ffbf944>
 6b8:	200002e8 	andcs	r0, r0, r8, ror #5
 6bc:	00000034 	andeq	r0, r0, r4, lsr r0
 6c0:	02689c01 	rsbeq	r9, r8, #256	; 0x100
 6c4:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
 6c8:	210b0100 	mrscs	r0, (UNDEF: 27)
 6cc:	02000000 	andeq	r0, r0, #0
 6d0:	0f007791 	svceq	0x00007791
 6d4:	00000226 	andeq	r0, r0, r6, lsr #4
 6d8:	02b00701 	adcseq	r0, r0, #262144	; 0x40000
 6dc:	00382000 	eorseq	r2, r8, r0
 6e0:	9c010000 	stcls	0, cr0, [r1], {-0}
 6e4:	01007805 	tsteq	r0, r5, lsl #16
 6e8:	00002107 	andeq	r2, r0, r7, lsl #2
 6ec:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6f0:	021e0000 	andseq	r0, lr, #0
 6f4:	00040000 	andeq	r0, r4, r0
 6f8:	00000314 	andeq	r0, r0, r4, lsl r3
 6fc:	00870104 	addeq	r0, r7, r4, lsl #2
 700:	3f0c0000 	svccc	0x000c0000
 704:	00000003 	andeq	r0, r0, r3
 708:	dc200008 	stcle	0, cr0, [r0], #-32	; 0xffffffe0
 70c:	b2000000 	andlt	r0, r0, #0
 710:	02000002 	andeq	r0, r0, #2
 714:	0000006d 	andeq	r0, r0, sp, rrx
 718:	42050202 	andmi	r0, r5, #536870912	; 0x20000000
 71c:	03000000 	movweq	r0, #0
 720:	06020078 			; <UNDEFINED> instruction: 0x06020078
 724:	00000042 	andeq	r0, r0, r2, asr #32
 728:	00790300 	rsbseq	r0, r9, r0, lsl #6
 72c:	00420702 	subeq	r0, r2, r2, lsl #14
 730:	00010000 	andeq	r0, r1, r0
 734:	79080104 	stmdbvc	r8, {r2, r8}
 738:	05000000 	streq	r0, [r0, #-0]
 73c:	00000185 	andeq	r0, r0, r5, lsl #3
 740:	00210802 	eoreq	r0, r1, r2, lsl #16
 744:	32020000 	andcc	r0, r2, #0
 748:	d4000001 	strle	r0, [r0], #-1
 74c:	00900b02 	addseq	r0, r0, r2, lsl #22
 750:	7b060000 	blvc	180758 <startup-0x1fe7f8a8>
 754:	02000001 	andeq	r0, r0, #1
 758:	0000900c 	andeq	r9, r0, ip
 75c:	0a060000 	beq	180764 <startup-0x1fe7f89c>
 760:	02000000 	andeq	r0, r0, #0
 764:	0000900d 	andeq	r9, r0, sp
 768:	1c060400 	cfstrsne	mvf0, [r6], {-0}
 76c:	02000000 	andeq	r0, r0, #0
 770:	0000900e 	andeq	r9, r0, lr
 774:	70030800 	andvc	r0, r3, r0, lsl #16
 778:	0f020078 	svceq	0x00020078
 77c:	00000097 	muleq	r0, r7, r0
 780:	0407000c 	streq	r0, [r7], #-12
 784:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 788:	00490800 	subeq	r0, r9, r0, lsl #16
 78c:	00a70000 	adceq	r0, r7, r0
 790:	a7090000 	strge	r0, [r9, -r0]
 794:	63000000 	movwvs	r0, #0
 798:	07040400 	streq	r0, [r4, -r0, lsl #8]
 79c:	00000168 	andeq	r0, r0, r8, ror #2
 7a0:	00011f05 	andeq	r1, r1, r5, lsl #30
 7a4:	b9100200 	ldmdblt	r0, {r9}
 7a8:	0a000000 	beq	7b0 <startup-0x1ffff850>
 7ac:	00005404 	andeq	r5, r0, r4, lsl #8
 7b0:	018b0200 	orreq	r0, fp, r0, lsl #4
 7b4:	02240000 	eoreq	r0, r4, #0
 7b8:	00013812 	andeq	r3, r1, r2, lsl r8
 7bc:	65670300 	strbvs	r0, [r7, #-768]!	; 0xfffffd00
 7c0:	1302006f 	movwne	r0, #8303	; 0x206f
 7c4:	000000ae 	andeq	r0, r0, lr, lsr #1
 7c8:	01760600 	cmneq	r6, r0, lsl #12
 7cc:	14020000 	strne	r0, [r2], #-0
 7d0:	00000090 	muleq	r0, r0, r0
 7d4:	00000604 	andeq	r0, r0, r4, lsl #12
 7d8:	14020000 	strne	r0, [r2], #-0
 7dc:	00000090 	muleq	r0, r0, r0
 7e0:	01710608 	cmneq	r1, r8, lsl #12
 7e4:	15020000 	strne	r0, [r2, #-0]
 7e8:	00000090 	muleq	r0, r0, r0
 7ec:	0005060c 	andeq	r0, r5, ip, lsl #12
 7f0:	15020000 	strne	r0, [r2, #-0]
 7f4:	00000090 	muleq	r0, r0, r0
 7f8:	00220610 	eoreq	r0, r2, r0, lsl r6
 7fc:	16020000 	strne	r0, [r2], -r0
 800:	00000149 	andeq	r0, r0, r9, asr #2
 804:	021a0614 	andseq	r0, sl, #20, 12	; 0x1400000
 808:	17020000 	strne	r0, [r2, -r0]
 80c:	00000149 	andeq	r0, r0, r9, asr #2
 810:	00740618 	rsbseq	r0, r4, r8, lsl r6
 814:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
 818:	00000149 	andeq	r0, r0, r9, asr #2
 81c:	0063061c 	rsbeq	r0, r3, ip, lsl r6
 820:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
 824:	00000164 	andeq	r0, r0, r4, ror #2
 828:	430b0020 	movwmi	r0, #45088	; 0xb020
 82c:	0c000001 	stceq	0, cr0, [r0], {1}
 830:	00000143 	andeq	r0, r0, r3, asr #2
 834:	bf040a00 	svclt	0x00040a00
 838:	0a000000 	beq	840 <startup-0x1ffff7c0>
 83c:	00013804 	andeq	r3, r1, r4, lsl #16
 840:	01640b00 	cmneq	r4, r0, lsl #22
 844:	430c0000 	movwmi	r0, #49152	; 0xc000
 848:	0c000001 	stceq	0, cr0, [r0], {1}
 84c:	00000090 	muleq	r0, r0, r0
 850:	0000900c 	andeq	r9, r0, ip
 854:	040a0000 	streq	r0, [sl], #-0
 858:	0000014f 	andeq	r0, r0, pc, asr #2
 85c:	00016005 	andeq	r6, r1, r5
 860:	431a0200 	tstmi	sl, #0, 4
 864:	0d000001 	stceq	0, cr0, [r0, #-4]
 868:	0000032e 	andeq	r0, r0, lr, lsr #6
 86c:	08bc0f01 	ldmeq	ip!, {r0, r8, r9, sl, fp}
 870:	00202000 	eoreq	r2, r0, r0
 874:	9c010000 	stcls	0, cr0, [r1], {-0}
 878:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
 87c:	00019e0e 	andeq	r9, r1, lr, lsl #28
 880:	6a0f0100 	bvs	3c0c88 <startup-0x1fc3f378>
 884:	02000001 	andeq	r0, r0, #1
 888:	780f7491 	stmdavc	pc, {r0, r4, r7, sl, ip, sp, lr}	; <UNPREDICTABLE>
 88c:	900f0100 	andls	r0, pc, r0, lsl #2
 890:	02000000 	andeq	r0, r0, #0
 894:	790f7091 	stmdbvc	pc, {r0, r4, r7, ip, sp, lr}	; <UNPREDICTABLE>
 898:	900f0100 	andls	r0, pc, r0, lsl #2
 89c:	02000000 	andeq	r0, r0, #0
 8a0:	10006c91 	mulne	r0, r1, ip
 8a4:	0000037a 	andeq	r0, r0, sl, ror r3
 8a8:	085e0901 	ldmdaeq	lr, {r0, r8, fp}^
 8ac:	005e2000 	subseq	r2, lr, r0
 8b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 8b4:	000001eb 	andeq	r0, r0, fp, ror #3
 8b8:	00019e0e 	andeq	r9, r1, lr, lsl #28
 8bc:	6a090100 	bvs	240cc4 <startup-0x1fdbf33c>
 8c0:	02000001 	andeq	r0, r0, #1
 8c4:	66116c91 			; <UNDEFINED> instruction: 0x66116c91
 8c8:	4e200008 	cdpmi	0, 2, cr0, cr0, cr8, {0}
 8cc:	12000000 	andne	r0, r0, #0
 8d0:	0a010069 	beq	40a7c <startup-0x1ffbf584>
 8d4:	00000090 	muleq	r0, r0, r0
 8d8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 8dc:	03871300 	orreq	r1, r7, #0, 6
 8e0:	04010000 	streq	r0, [r1], #-0
 8e4:	20000800 	andcs	r0, r0, r0, lsl #16
 8e8:	0000005e 	andeq	r0, r0, lr, asr r0
 8ec:	9e0e9c01 	cdpls	12, 0, cr9, cr14, cr1, {0}
 8f0:	01000001 	tsteq	r0, r1
 8f4:	00016a04 	andeq	r6, r1, r4, lsl #20
 8f8:	6c910200 	lfmvs	f0, 4, [r1], {0}
 8fc:	00080811 	andeq	r0, r8, r1, lsl r8
 900:	00004e20 	andeq	r4, r0, r0, lsr #28
 904:	00691200 	rsbeq	r1, r9, r0, lsl #4
 908:	00900501 	addseq	r0, r0, r1, lsl #10
 90c:	91020000 	mrsls	r0, (UNDEF: 2)
 910:	00000074 	andeq	r0, r0, r4, ror r0
 914:	0000008d 	andeq	r0, r0, sp, lsl #1
 918:	04230004 	strteq	r0, [r3], #-4
 91c:	01040000 	mrseq	r0, (UNDEF: 4)
 920:	00000087 	andeq	r0, r0, r7, lsl #1
 924:	0003c40c 	andeq	ip, r3, ip, lsl #8
 928:	0008dc00 	andeq	sp, r8, r0, lsl #24
 92c:	0000a020 	andeq	sl, r0, r0, lsr #32
 930:	00035300 	andeq	r5, r3, r0, lsl #6
 934:	03a00200 	moveq	r0, #0, 4
 938:	1f010000 	svcne	0x00010000
 93c:	2000096a 	andcs	r0, r0, sl, ror #18
 940:	00000012 	andeq	r0, r0, r2, lsl r0
 944:	e6039c01 	str	r9, [r3], -r1, lsl #24
 948:	01000001 	tsteq	r0, r1
 94c:	00094c17 	andeq	r4, r9, r7, lsl ip
 950:	00001e20 	andeq	r1, r0, r0, lsr #28
 954:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
 958:	04000000 	streq	r0, [r0], #-0
 95c:	0100736d 	tsteq	r0, sp, ror #6
 960:	00005517 	andeq	r5, r0, r7, lsl r5
 964:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 968:	07040500 	streq	r0, [r4, -r0, lsl #10]
 96c:	00000393 	muleq	r0, r3, r3
 970:	0003b803 	andeq	fp, r3, r3, lsl #16
 974:	200e0100 	andcs	r0, lr, r0, lsl #2
 978:	2c200009 	stccs	0, cr0, [r0], #-36	; 0xffffffdc
 97c:	01000000 	mrseq	r0, (UNDEF: 0)
 980:	00007f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
 984:	73750400 	cmnvc	r5, #0, 8
 988:	550e0100 	strpl	r0, [lr, #-256]	; 0xffffff00
 98c:	02000000 	andeq	r0, r0, #0
 990:	06007491 			; <UNDEFINED> instruction: 0x06007491
 994:	000003ac 	andeq	r0, r0, ip, lsr #7
 998:	08dc0301 	ldmeq	ip, {r0, r8, r9}^
 99c:	00442000 	subeq	r2, r4, r0
 9a0:	9c010000 	stcls	0, cr0, [r1], {-0}
 9a4:	0001e900 	andeq	lr, r1, r0, lsl #18
 9a8:	99000400 	stmdbls	r0, {sl}
 9ac:	04000004 	streq	r0, [r0], #-4
 9b0:	00008701 	andeq	r8, r0, r1, lsl #14
 9b4:	041a0c00 	ldreq	r0, [sl], #-3072	; 0xfffff400
 9b8:	097c0000 	ldmdbeq	ip!, {}^	; <UNPREDICTABLE>
 9bc:	005e2000 	subseq	r2, lr, r0
 9c0:	03d70000 	bicseq	r0, r7, #0
 9c4:	6d020000 	stcvs	0, cr0, [r2, #-0]
 9c8:	02000000 	andeq	r0, r0, #0
 9cc:	00420502 	subeq	r0, r2, r2, lsl #10
 9d0:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
 9d4:	42060200 	andmi	r0, r6, #0, 4
 9d8:	00000000 	andeq	r0, r0, r0
 9dc:	02007903 	andeq	r7, r0, #49152	; 0xc000
 9e0:	00004207 	andeq	r4, r0, r7, lsl #4
 9e4:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
 9e8:	00790801 	rsbseq	r0, r9, r1, lsl #16
 9ec:	85050000 	strhi	r0, [r5, #-0]
 9f0:	02000001 	andeq	r0, r0, #1
 9f4:	00002108 	andeq	r2, r0, r8, lsl #2
 9f8:	01320200 	teqeq	r2, r0, lsl #4
 9fc:	02d40000 	sbcseq	r0, r4, #0
 a00:	0000900b 	andeq	r9, r0, fp
 a04:	017b0600 	cmneq	fp, r0, lsl #12
 a08:	0c020000 	stceq	0, cr0, [r2], {-0}
 a0c:	00000090 	muleq	r0, r0, r0
 a10:	000a0600 	andeq	r0, sl, r0, lsl #12
 a14:	0d020000 	stceq	0, cr0, [r2, #-0]
 a18:	00000090 	muleq	r0, r0, r0
 a1c:	001c0604 	andseq	r0, ip, r4, lsl #12
 a20:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
 a24:	00000090 	muleq	r0, r0, r0
 a28:	78700308 	ldmdavc	r0!, {r3, r8, r9}^
 a2c:	970f0200 	strls	r0, [pc, -r0, lsl #4]
 a30:	0c000000 	stceq	0, cr0, [r0], {-0}
 a34:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
 a38:	00746e69 	rsbseq	r6, r4, r9, ror #28
 a3c:	00004908 	andeq	r4, r0, r8, lsl #18
 a40:	0000a700 	andeq	sl, r0, r0, lsl #14
 a44:	00a70900 	adceq	r0, r7, r0, lsl #18
 a48:	00630000 	rsbeq	r0, r3, r0
 a4c:	68070404 	stmdavs	r7, {r2, sl}
 a50:	05000001 	streq	r0, [r0, #-1]
 a54:	00000120 	andeq	r0, r0, r0, lsr #2
 a58:	00541002 	subseq	r1, r4, r2
 a5c:	1f050000 	svcne	0x00050000
 a60:	02000001 	andeq	r0, r0, #1
 a64:	0000c410 	andeq	ip, r0, r0, lsl r4
 a68:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
 a6c:	02000000 	andeq	r0, r0, #0
 a70:	0000018b 	andeq	r0, r0, fp, lsl #3
 a74:	43120224 	tstmi	r2, #36, 4	; 0x40000002
 a78:	03000001 	movweq	r0, #1
 a7c:	006f6567 	rsbeq	r6, pc, r7, ror #10
 a80:	00b91302 	adcseq	r1, r9, r2, lsl #6
 a84:	06000000 	streq	r0, [r0], -r0
 a88:	00000176 	andeq	r0, r0, r6, ror r1
 a8c:	00901402 	addseq	r1, r0, r2, lsl #8
 a90:	06040000 	streq	r0, [r4], -r0
 a94:	00000000 	andeq	r0, r0, r0
 a98:	00901402 	addseq	r1, r0, r2, lsl #8
 a9c:	06080000 	streq	r0, [r8], -r0
 aa0:	00000171 	andeq	r0, r0, r1, ror r1
 aa4:	00901502 	addseq	r1, r0, r2, lsl #10
 aa8:	060c0000 	streq	r0, [ip], -r0
 aac:	00000005 	andeq	r0, r0, r5
 ab0:	00901502 	addseq	r1, r0, r2, lsl #10
 ab4:	06100000 	ldreq	r0, [r0], -r0
 ab8:	00000022 	andeq	r0, r0, r2, lsr #32
 abc:	01541602 	cmpeq	r4, r2, lsl #12
 ac0:	06140000 	ldreq	r0, [r4], -r0
 ac4:	0000021a 	andeq	r0, r0, sl, lsl r2
 ac8:	01541702 	cmpeq	r4, r2, lsl #14
 acc:	06180000 	ldreq	r0, [r8], -r0
 ad0:	00000074 	andeq	r0, r0, r4, ror r0
 ad4:	01541802 	cmpeq	r4, r2, lsl #16
 ad8:	061c0000 	ldreq	r0, [ip], -r0
 adc:	00000063 	andeq	r0, r0, r3, rrx
 ae0:	016f1902 	cmneq	pc, r2, lsl #18
 ae4:	00200000 	eoreq	r0, r0, r0
 ae8:	00014e0b 	andeq	r4, r1, fp, lsl #28
 aec:	014e0c00 	cmpeq	lr, r0, lsl #24
 af0:	0a000000 	beq	af8 <startup-0x1ffff508>
 af4:	0000ca04 	andeq	ip, r0, r4, lsl #20
 af8:	43040a00 	movwmi	r0, #18944	; 0x4a00
 afc:	0b000001 	bleq	b08 <startup-0x1ffff4f8>
 b00:	0000016f 	andeq	r0, r0, pc, ror #2
 b04:	00014e0c 	andeq	r4, r1, ip, lsl #28
 b08:	00900c00 	addseq	r0, r0, r0, lsl #24
 b0c:	900c0000 	andls	r0, ip, r0
 b10:	00000000 	andeq	r0, r0, r0
 b14:	015a040a 	cmpeq	sl, sl, lsl #8
 b18:	61050000 	mrsvs	r0, (UNDEF: 5)
 b1c:	02000001 	andeq	r0, r0, #1
 b20:	0000ca1a 	andeq	ip, r0, sl, lsl sl
 b24:	01600500 	cmneq	r0, r0, lsl #10
 b28:	1a020000 	bne	80b30 <startup-0x1ff7f4d0>
 b2c:	0000014e 	andeq	r0, r0, lr, asr #2
 b30:	0001500d 	andeq	r5, r1, sp
 b34:	75040300 	strvc	r0, [r4, #-768]	; 0xfffffd00
 b38:	0d000001 	stceq	0, cr0, [r0, #-4]
 b3c:	00000010 	andeq	r0, r0, r0, lsl r0
 b40:	01750503 	cmneq	r5, r3, lsl #10
 b44:	0a0e0000 	beq	380b4c <startup-0x1fc7f4b4>
 b48:	01000004 	tsteq	r0, r4
 b4c:	0000ae03 	andeq	sl, r0, r3, lsl #28
 b50:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
 b54:	0f20000c 	svceq	0x0020000c
 b58:	0000018b 	andeq	r0, r0, fp, lsl #3
 b5c:	03052301 	movweq	r2, #21249	; 0x5301
 b60:	20000cf8 	strdcs	r0, [r0], -r8
 b64:	0001960f 	andeq	r9, r1, pc, lsl #12
 b68:	052d0100 	streq	r0, [sp, #-256]!	; 0xffffff00
 b6c:	000d1c03 	andeq	r1, sp, r3, lsl #24
 b70:	03fe1020 	mvnseq	r1, #32
 b74:	37010000 	strcc	r0, [r1, -r0]
 b78:	2000097c 	andcs	r0, r0, ip, ror r9
 b7c:	0000005e 	andeq	r0, r0, lr, asr r0
 b80:	9e119c01 	cdpls	12, 1, cr9, cr1, cr1, {0}
 b84:	01000001 	tsteq	r0, r1
 b88:	00018037 	andeq	r8, r1, r7, lsr r0
 b8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 b90:	012d0000 			; <UNDEFINED> instruction: 0x012d0000
 b94:	00040000 	andeq	r0, r4, r0
 b98:	0000057c 	andeq	r0, r0, ip, ror r5
 b9c:	00870104 	addeq	r0, r7, r4, lsl #2
 ba0:	700c0000 	andvc	r0, ip, r0
 ba4:	dc000004 	stcle	0, cr0, [r0], {4}
 ba8:	50200009 	eorpl	r0, r0, r9
 bac:	61000001 	tstvs	r0, r1
 bb0:	02000004 	andeq	r0, r0, #4
 bb4:	00000455 	andeq	r0, r0, r5, asr r4
 bb8:	009b1601 	addseq	r1, fp, r1, lsl #12
 bbc:	0a840000 	beq	fe100bc4 <returnKeys.4003+0xde0ffe84>
 bc0:	00a82000 	adceq	r2, r8, r0
 bc4:	9c010000 	stcls	0, cr0, [r1], {-0}
 bc8:	0000009b 	muleq	r0, fp, r0
 bcc:	0004b203 	andeq	fp, r4, r3, lsl #4
 bd0:	a8170100 	ldmdage	r7, {r8}
 bd4:	02000000 	andeq	r0, r0, #0
 bd8:	5a035c91 	bpl	d7e24 <startup-0x1ff281dc>
 bdc:	01000004 	tsteq	r0, r4
 be0:	0000bf18 	andeq	fp, r0, r8, lsl pc
 be4:	40030500 	andmi	r0, r3, r0, lsl #10
 be8:	0420000d 	strteq	r0, [r0], #-13
 bec:	20000a96 	mulcs	r0, r6, sl
 bf0:	0000007c 	andeq	r0, r0, ip, ror r0
 bf4:	776f7205 	strbvc	r7, [pc, -r5, lsl #4]!
 bf8:	cf190100 	svcgt	0x00190100
 bfc:	02000000 	andeq	r0, r0, #0
 c00:	a0046f91 	mulge	r4, r1, pc	; <UNPREDICTABLE>
 c04:	5a20000a 	bpl	800c34 <startup-0x1f7ff3cc>
 c08:	06000000 	streq	r0, [r0], -r0
 c0c:	000003ac 	andeq	r0, r0, ip, lsr #7
 c10:	00d61b01 	sbcseq	r1, r6, r1, lsl #22
 c14:	008a0000 	addeq	r0, sl, r0
 c18:	00070000 	andeq	r0, r7, r0
 c1c:	0004ab03 	andeq	sl, r4, r3, lsl #22
 c20:	cf1c0100 	svcgt	0x001c0100
 c24:	02000000 	andeq	r0, r0, #0
 c28:	00006e91 	muleq	r0, r1, lr
 c2c:	a1040800 	tstge	r4, r0, lsl #16
 c30:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 c34:	00790801 	rsbseq	r0, r9, r1, lsl #16
 c38:	a10a0000 	mrsge	r0, (UNDEF: 10)
 c3c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 c40:	0b000000 	bleq	c48 <startup-0x1ffff3b8>
 c44:	000000b8 	strheq	r0, [r0], -r8
 c48:	0409000f 	streq	r0, [r9], #-15
 c4c:	00016807 	andeq	r6, r1, r7, lsl #16
 c50:	00a10a00 	adceq	r0, r1, r0, lsl #20
 c54:	00cf0000 	sbceq	r0, pc, r0
 c58:	b80b0000 	stmdalt	fp, {}	; <UNPREDICTABLE>
 c5c:	03000000 	movweq	r0, #0
 c60:	08010900 	stmdaeq	r1, {r8, fp}
 c64:	00000082 	andeq	r0, r0, r2, lsl #1
 c68:	6905040c 	stmdbvs	r5, {r2, r3, sl}
 c6c:	0d00746e 	cfstrseq	mvf7, [r0, #-440]	; 0xfffffe48
 c70:	00000465 	andeq	r0, r0, r5, ror #8
 c74:	00a10d01 	adceq	r0, r1, r1, lsl #26
 c78:	0a300000 	beq	c00c80 <startup-0x1f3ff380>
 c7c:	00542000 	subseq	r2, r4, r0
 c80:	9c010000 	stcls	0, cr0, [r1], {-0}
 c84:	00000105 	andeq	r0, r0, r5, lsl #2
 c88:	72646905 	rsbvc	r6, r4, #81920	; 0x14000
 c8c:	a10e0100 	mrsge	r0, (UNDEF: 30)
 c90:	02000000 	andeq	r0, r0, #0
 c94:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
 c98:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
 c9c:	09dc0301 	ldmibeq	ip, {r0, r8, r9}^
 ca0:	00542000 	subseq	r2, r4, r0
 ca4:	9c010000 	stcls	0, cr0, [r1], {-0}
 ca8:	00000129 	andeq	r0, r0, r9, lsr #2
 cac:	776f720f 	strbvc	r7, [pc, -pc, lsl #4]!
 cb0:	29030100 	stmdbcs	r3, {r8}
 cb4:	02000001 	andeq	r0, r0, #1
 cb8:	09007491 	stmdbeq	r0, {r0, r4, r7, sl, ip, sp, lr}
 cbc:	03930704 	orrseq	r0, r3, #4, 14	; 0x100000
 cc0:	Address 0x00000cc0 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03011303 	movweq	r1, #4867	; 0x1303
  20:	3a0b0b0e 	bcc	2c2c60 <startup-0x1fd3d3a0>
  24:	010b3b0b 	tsteq	fp, fp, lsl #22
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	0b381349 	bleq	e04d60 <startup-0x1f1fb2a0>
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	3f13490b 	svccc	0x0013490b
  98:	00193c19 	andseq	r3, r9, r9, lsl ip
  9c:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	01111927 	tsteq	r1, r7, lsr #18
  ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b4:	0f000013 	svceq	0x00000013
  b8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c4:	0b100000 	bleq	4000cc <startup-0x1fbfff34>
  c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  cc:	11000006 	tstne	r0, r6
  d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  d4:	0b3b0b3a 	bleq	ec2dc4 <startup-0x1f13d23c>
  d8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  dc:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
  e0:	03193f00 	tsteq	r9, #0, 30
  e4:	3b0b3a0e 	blcc	2ce924 <startup-0x1fd316dc>
  e8:	1119270b 	tstne	r9, fp, lsl #14
  ec:	40061201 	andmi	r1, r6, r1, lsl #4
  f0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  f4:	01000000 	mrseq	r0, (UNDEF: 0)
  f8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  fc:	0e030b13 	vmoveq.32	d3[0], r0
 100:	06120111 			; <UNDEFINED> instruction: 0x06120111
 104:	00001710 	andeq	r1, r0, r0, lsl r7
 108:	03011302 	movweq	r1, #4866	; 0x1302
 10c:	3a0b0b0e 	bcc	2c2d4c <startup-0x1fd3d2b4>
 110:	010b3b0b 	tsteq	fp, fp, lsl #22
 114:	03000013 	movweq	r0, #19
 118:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	0b381349 	bleq	e04e4c <startup-0x1f1fb1b4>
 124:	24040000 	strcs	r0, [r4], #-0
 128:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 12c:	000e030b 	andeq	r0, lr, fp, lsl #6
 130:	00160500 	andseq	r0, r6, r0, lsl #10
 134:	0b3a0e03 	bleq	e83948 <startup-0x1f17c6b8>
 138:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 13c:	0d060000 	stceq	0, cr0, [r6, #-0]
 140:	3a0e0300 	bcc	380d48 <startup-0x1fc7f2b8>
 144:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 148:	000b3813 	andeq	r3, fp, r3, lsl r8
 14c:	00240700 	eoreq	r0, r4, r0, lsl #14
 150:	0b3e0b0b 	bleq	f82d84 <startup-0x1f07d27c>
 154:	00000803 	andeq	r0, r0, r3, lsl #16
 158:	49010108 	stmdbmi	r1, {r3, r8}
 15c:	00130113 	andseq	r0, r3, r3, lsl r1
 160:	00210900 	eoreq	r0, r1, r0, lsl #18
 164:	0b2f1349 	bleq	bc4e90 <startup-0x1f43b170>
 168:	0f0a0000 	svceq	0x000a0000
 16c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 170:	0b000013 	bleq	1c4 <startup-0x1ffffe3c>
 174:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 178:	00001301 	andeq	r1, r0, r1, lsl #6
 17c:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 180:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 184:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 188:	0b3b0b3a 	bleq	ec2e78 <startup-0x1f13d188>
 18c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 190:	0000193c 	andeq	r1, r0, ip, lsr r9
 194:	0300340e 	movweq	r3, #1038	; 0x40e
 198:	3b0b3a0e 	blcc	2ce9d8 <startup-0x1fd31628>
 19c:	3f13490b 	svccc	0x0013490b
 1a0:	00180219 	andseq	r0, r8, r9, lsl r2
 1a4:	00340f00 	eorseq	r0, r4, r0, lsl #30
 1a8:	0b3a1347 	bleq	e84ecc <startup-0x1f17b134>
 1ac:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 1b0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 1b4:	03193f01 	tsteq	r9, #1, 30
 1b8:	3b0b3a0e 	blcc	2ce9f8 <startup-0x1fd31608>
 1bc:	1119270b 	tstne	r9, fp, lsl #14
 1c0:	40061201 	andmi	r1, r6, r1, lsl #4
 1c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1c8:	05110000 	ldreq	r0, [r1, #-0]
 1cc:	3a0e0300 	bcc	380dd4 <startup-0x1fc7f22c>
 1d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d4:	00180213 	andseq	r0, r8, r3, lsl r2
 1d8:	00341200 	eorseq	r1, r4, r0, lsl #4
 1dc:	0b3a0803 	bleq	e821f0 <startup-0x1f17de10>
 1e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1e4:	00001802 	andeq	r1, r0, r2, lsl #16
 1e8:	11010b13 	tstne	r1, r3, lsl fp
 1ec:	01061201 	tsteq	r6, r1, lsl #4
 1f0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 1f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1f8:	0b3a0e03 	bleq	e83a0c <startup-0x1f17c5f4>
 1fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 200:	0000193c 	andeq	r1, r0, ip, lsr r9
 204:	00001815 	andeq	r1, r0, r5, lsl r8
 208:	010b1600 	tsteq	fp, r0, lsl #12
 20c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 210:	01000000 	mrseq	r0, (UNDEF: 0)
 214:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 218:	0e030b13 	vmoveq.32	d3[0], r0
 21c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 220:	00001710 	andeq	r1, r0, r0, lsl r7
 224:	03001602 	movweq	r1, #1538	; 0x602
 228:	3b0b3a0e 	blcc	2cea68 <startup-0x1fd31598>
 22c:	0013490b 	andseq	r4, r3, fp, lsl #18
 230:	00240300 	eoreq	r0, r4, r0, lsl #6
 234:	0b3e0b0b 	bleq	f82e68 <startup-0x1f07d198>
 238:	00000e03 	andeq	r0, r0, r3, lsl #28
 23c:	3f012e04 	svccc	0x00012e04
 240:	3a0e0319 	bcc	380eac <startup-0x1fc7f154>
 244:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 248:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 24c:	96184006 	ldrls	r4, [r8], -r6
 250:	13011942 	movwne	r1, #6466	; 0x1942
 254:	05050000 	streq	r0, [r5, #-0]
 258:	3a080300 	bcc	200e60 <startup-0x1fdff1a0>
 25c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 260:	00180213 	andseq	r0, r8, r3, lsl r2
 264:	00340600 	eorseq	r0, r4, r0, lsl #12
 268:	0b3a0e03 	bleq	e83a7c <startup-0x1f17c584>
 26c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 270:	00001802 	andeq	r1, r0, r2, lsl #16
 274:	11010b07 	tstne	r1, r7, lsl #22
 278:	00061201 	andeq	r1, r6, r1, lsl #4
 27c:	00340800 	eorseq	r0, r4, r0, lsl #16
 280:	0b3a0803 	bleq	e82294 <startup-0x1f17dd6c>
 284:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 288:	00001802 	andeq	r1, r0, r2, lsl #16
 28c:	0b002409 	bleq	92b8 <startup-0x1fff6d48>
 290:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 294:	0a000008 	beq	2bc <startup-0x1ffffd44>
 298:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 29c:	0b3a0e03 	bleq	e83ab0 <startup-0x1f17c550>
 2a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2ac:	0b000019 	bleq	318 <startup-0x1ffffce8>
 2b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2b4:	0b3a0e03 	bleq	e83ac8 <startup-0x1f17c538>
 2b8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2bc:	01111349 	tsteq	r1, r9, asr #6
 2c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2c8:	0c000013 	stceq	0, cr0, [r0], {19}
 2cc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 2d0:	0b3b0b3a 	bleq	ec2fc0 <startup-0x1f13d040>
 2d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2d8:	0b0d0000 	bleq	3402e0 <startup-0x1fcbfd20>
 2dc:	00175501 	andseq	r5, r7, r1, lsl #10
 2e0:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 2e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2e8:	0b3b0b3a 	bleq	ec2fd8 <startup-0x1f13d028>
 2ec:	01111927 	tsteq	r1, r7, lsr #18
 2f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 2f8:	0f000013 	svceq	0x00000013
 2fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 300:	0b3a0e03 	bleq	e83b14 <startup-0x1f17c4ec>
 304:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 308:	06120111 			; <UNDEFINED> instruction: 0x06120111
 30c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 310:	00000019 	andeq	r0, r0, r9, lsl r0
 314:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 318:	030b130e 	movweq	r1, #45838	; 0xb30e
 31c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 320:	00171006 	andseq	r1, r7, r6
 324:	01130200 	tsteq	r3, r0, lsl #4
 328:	0b0b0e03 	bleq	2c3b3c <startup-0x1fd3c4c4>
 32c:	0b3b0b3a 	bleq	ec301c <startup-0x1f13cfe4>
 330:	00001301 	andeq	r1, r0, r1, lsl #6
 334:	03000d03 	movweq	r0, #3331	; 0xd03
 338:	3b0b3a08 	blcc	2ceb60 <startup-0x1fd314a0>
 33c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 340:	0400000b 	streq	r0, [r0], #-11
 344:	0b0b0024 	bleq	2c03dc <startup-0x1fd3fc24>
 348:	0e030b3e 	vmoveq.16	d3[0], r0
 34c:	16050000 	strne	r0, [r5], -r0
 350:	3a0e0300 	bcc	380f58 <startup-0x1fc7f0a8>
 354:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 358:	06000013 			; <UNDEFINED> instruction: 0x06000013
 35c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 360:	0b3b0b3a 	bleq	ec3050 <startup-0x1f13cfb0>
 364:	0b381349 	bleq	e05090 <startup-0x1f1faf70>
 368:	24070000 	strcs	r0, [r7], #-0
 36c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 370:	0008030b 	andeq	r0, r8, fp, lsl #6
 374:	01010800 	tsteq	r1, r0, lsl #16
 378:	13011349 	movwne	r1, #4937	; 0x1349
 37c:	21090000 	mrscs	r0, (UNDEF: 9)
 380:	2f134900 	svccs	0x00134900
 384:	0a00000b 	beq	3b8 <startup-0x1ffffc48>
 388:	0b0b000f 	bleq	2c03cc <startup-0x1fd3fc34>
 38c:	00001349 	andeq	r1, r0, r9, asr #6
 390:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 394:	00130119 	andseq	r0, r3, r9, lsl r1
 398:	00050c00 	andeq	r0, r5, r0, lsl #24
 39c:	00001349 	andeq	r1, r0, r9, asr #6
 3a0:	3f012e0d 	svccc	0x00012e0d
 3a4:	3a0e0319 	bcc	381010 <startup-0x1fc7eff0>
 3a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3ac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3b0:	97184006 	ldrls	r4, [r8, -r6]
 3b4:	13011942 	movwne	r1, #6466	; 0x1942
 3b8:	050e0000 	streq	r0, [lr, #-0]
 3bc:	3a0e0300 	bcc	380fc4 <startup-0x1fc7f03c>
 3c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3c4:	00180213 	andseq	r0, r8, r3, lsl r2
 3c8:	00050f00 	andeq	r0, r5, r0, lsl #30
 3cc:	0b3a0803 	bleq	e823e0 <startup-0x1f17dc20>
 3d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3d4:	00001802 	andeq	r1, r0, r2, lsl #16
 3d8:	3f012e10 	svccc	0x00012e10
 3dc:	3a0e0319 	bcc	381048 <startup-0x1fc7efb8>
 3e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3e8:	96184006 	ldrls	r4, [r8], -r6
 3ec:	13011942 	movwne	r1, #6466	; 0x1942
 3f0:	0b110000 	bleq	4403f8 <startup-0x1fbbfc08>
 3f4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 3f8:	12000006 	andne	r0, r0, #6
 3fc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 400:	0b3b0b3a 	bleq	ec30f0 <startup-0x1f13cf10>
 404:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 408:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 40c:	03193f01 	tsteq	r9, #1, 30
 410:	3b0b3a0e 	blcc	2cec50 <startup-0x1fd313b0>
 414:	1119270b 	tstne	r9, fp, lsl #14
 418:	40061201 	andmi	r1, r6, r1, lsl #4
 41c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 420:	01000000 	mrseq	r0, (UNDEF: 0)
 424:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 428:	0e030b13 	vmoveq.32	d3[0], r0
 42c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 430:	00001710 	andeq	r1, r0, r0, lsl r7
 434:	3f002e02 	svccc	0x00002e02
 438:	3a0e0319 	bcc	3810a4 <startup-0x1fc7ef5c>
 43c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 440:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 444:	96184006 	ldrls	r4, [r8], -r6
 448:	00001942 	andeq	r1, r0, r2, asr #18
 44c:	3f012e03 	svccc	0x00012e03
 450:	3a0e0319 	bcc	3810bc <startup-0x1fc7ef44>
 454:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 458:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 45c:	96184006 	ldrls	r4, [r8], -r6
 460:	13011942 	movwne	r1, #6466	; 0x1942
 464:	05040000 	streq	r0, [r4, #-0]
 468:	3a080300 	bcc	201070 <startup-0x1fdfef90>
 46c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 470:	00180213 	andseq	r0, r8, r3, lsl r2
 474:	00240500 	eoreq	r0, r4, r0, lsl #10
 478:	0b3e0b0b 	bleq	f830ac <startup-0x1f07cf54>
 47c:	00000e03 	andeq	r0, r0, r3, lsl #28
 480:	3f002e06 	svccc	0x00002e06
 484:	3a0e0319 	bcc	3810f0 <startup-0x1fc7ef10>
 488:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 48c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 490:	97184006 	ldrls	r4, [r8, -r6]
 494:	00001942 	andeq	r1, r0, r2, asr #18
 498:	01110100 	tsteq	r1, r0, lsl #2
 49c:	0b130e25 	bleq	4c3d38 <startup-0x1fb3c2c8>
 4a0:	01110e03 	tsteq	r1, r3, lsl #28
 4a4:	17100612 			; <UNDEFINED> instruction: 0x17100612
 4a8:	13020000 	movwne	r0, #8192	; 0x2000
 4ac:	0b0e0301 	bleq	3810b8 <startup-0x1fc7ef48>
 4b0:	3b0b3a0b 	blcc	2cece4 <startup-0x1fd3131c>
 4b4:	0013010b 	andseq	r0, r3, fp, lsl #2
 4b8:	000d0300 	andeq	r0, sp, r0, lsl #6
 4bc:	0b3a0803 	bleq	e824d0 <startup-0x1f17db30>
 4c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4c4:	00000b38 	andeq	r0, r0, r8, lsr fp
 4c8:	0b002404 	bleq	94e0 <startup-0x1fff6b20>
 4cc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4d0:	0500000e 	streq	r0, [r0, #-14]
 4d4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 4d8:	0b3b0b3a 	bleq	ec31c8 <startup-0x1f13ce38>
 4dc:	00001349 	andeq	r1, r0, r9, asr #6
 4e0:	03000d06 	movweq	r0, #3334	; 0xd06
 4e4:	3b0b3a0e 	blcc	2ced24 <startup-0x1fd312dc>
 4e8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 4ec:	0700000b 	streq	r0, [r0, -fp]
 4f0:	0b0b0024 	bleq	2c0588 <startup-0x1fd3fa78>
 4f4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 4f8:	01080000 	mrseq	r0, (UNDEF: 8)
 4fc:	01134901 	tsteq	r3, r1, lsl #18
 500:	09000013 	stmdbeq	r0, {r0, r1, r4}
 504:	13490021 	movtne	r0, #36897	; 0x9021
 508:	00000b2f 	andeq	r0, r0, pc, lsr #22
 50c:	0b000f0a 	bleq	413c <startup-0x1fffbec4>
 510:	0013490b 	andseq	r4, r3, fp, lsl #18
 514:	01150b00 	tsteq	r5, r0, lsl #22
 518:	13011927 	movwne	r1, #6439	; 0x1927
 51c:	050c0000 	streq	r0, [ip, #-0]
 520:	00134900 	andseq	r4, r3, r0, lsl #18
 524:	00340d00 	eorseq	r0, r4, r0, lsl #26
 528:	0b3a0e03 	bleq	e83d3c <startup-0x1f17c2c4>
 52c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 530:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 534:	340e0000 	strcc	r0, [lr], #-0
 538:	3a0e0300 	bcc	381140 <startup-0x1fc7eec0>
 53c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 540:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 544:	0f000018 	svceq	0x00000018
 548:	13470034 	movtne	r0, #28724	; 0x7034
 54c:	0b3b0b3a 	bleq	ec323c <startup-0x1f13cdc4>
 550:	00001802 	andeq	r1, r0, r2, lsl #16
 554:	3f012e10 	svccc	0x00012e10
 558:	3a0e0319 	bcc	3811c4 <startup-0x1fc7ee3c>
 55c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 560:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 564:	96184006 	ldrls	r4, [r8], -r6
 568:	00001942 	andeq	r1, r0, r2, asr #18
 56c:	03000511 	movweq	r0, #1297	; 0x511
 570:	3b0b3a0e 	blcc	2cedb0 <startup-0x1fd31250>
 574:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 578:	00000018 	andeq	r0, r0, r8, lsl r0
 57c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 580:	030b130e 	movweq	r1, #45838	; 0xb30e
 584:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 588:	00171006 	andseq	r1, r7, r6
 58c:	012e0200 			; <UNDEFINED> instruction: 0x012e0200
 590:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 594:	0b3b0b3a 	bleq	ec3284 <startup-0x1f13cd7c>
 598:	13491927 	movtne	r1, #39207	; 0x9927
 59c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5a0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 5a4:	00130119 	andseq	r0, r3, r9, lsl r1
 5a8:	00340300 	eorseq	r0, r4, r0, lsl #6
 5ac:	0b3a0e03 	bleq	e83dc0 <startup-0x1f17c240>
 5b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5b4:	00001802 	andeq	r1, r0, r2, lsl #16
 5b8:	11010b04 	tstne	r1, r4, lsl #22
 5bc:	00061201 	andeq	r1, r6, r1, lsl #4
 5c0:	00340500 	eorseq	r0, r4, r0, lsl #10
 5c4:	0b3a0803 	bleq	e825d8 <startup-0x1f17da28>
 5c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5cc:	00001802 	andeq	r1, r0, r2, lsl #16
 5d0:	3f012e06 	svccc	0x00012e06
 5d4:	3a0e0319 	bcc	381240 <startup-0x1fc7edc0>
 5d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5dc:	01193c13 	tsteq	r9, r3, lsl ip
 5e0:	07000013 	smladeq	r0, r3, r0, r0
 5e4:	00000018 	andeq	r0, r0, r8, lsl r0
 5e8:	0b000f08 	bleq	4210 <startup-0x1fffbdf0>
 5ec:	0013490b 	andseq	r4, r3, fp, lsl #18
 5f0:	00240900 	eoreq	r0, r4, r0, lsl #18
 5f4:	0b3e0b0b 	bleq	f83228 <startup-0x1f07cdd8>
 5f8:	00000e03 	andeq	r0, r0, r3, lsl #28
 5fc:	4901010a 	stmdbmi	r1, {r1, r3, r8}
 600:	00130113 	andseq	r0, r3, r3, lsl r1
 604:	00210b00 	eoreq	r0, r1, r0, lsl #22
 608:	0b2f1349 	bleq	bc5334 <startup-0x1f43accc>
 60c:	240c0000 	strcs	r0, [ip], #-0
 610:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 614:	0008030b 	andeq	r0, r8, fp, lsl #6
 618:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 61c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 620:	0b3b0b3a 	bleq	ec3310 <startup-0x1f13ccf0>
 624:	13491927 	movtne	r1, #39207	; 0x9927
 628:	06120111 			; <UNDEFINED> instruction: 0x06120111
 62c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 630:	00130119 	andseq	r0, r3, r9, lsl r1
 634:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 638:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 63c:	0b3b0b3a 	bleq	ec332c <startup-0x1f13ccd4>
 640:	01111927 	tsteq	r1, r7, lsr #18
 644:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 648:	01194297 			; <UNDEFINED> instruction: 0x01194297
 64c:	0f000013 	svceq	0x00000013
 650:	08030005 	stmdaeq	r3, {r0, r2}
 654:	0b3b0b3a 	bleq	ec3344 <startup-0x1f13ccbc>
 658:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 65c:	Address 0x0000065c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000144 	andeq	r0, r0, r4, asr #2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02340002 	eorseq	r0, r4, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000154 	andcs	r0, r0, r4, asr r1
  3c:	0000015c 	andeq	r0, r0, ip, asr r1
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	046b0002 	strbteq	r0, [fp], #-2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
  5c:	00000550 	andeq	r0, r0, r0, asr r5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	06f20002 	ldrbteq	r0, [r2], r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000800 	andcs	r0, r0, r0, lsl #16
  7c:	000000dc 	ldrdeq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	09140002 	ldmdbeq	r4, {r1}
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200008dc 	ldrdcs	r0, [r0], -ip
  9c:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	09a50002 	stmibeq	r5!, {r1}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	2000097c 	andcs	r0, r0, ip, ror r9
  bc:	0000005e 	andeq	r0, r0, lr, asr r0
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	0b920002 	bleq	fe4800dc <returnKeys.4003+0xde47f39c>
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200009dc 	ldrdcs	r0, [r0], -ip
  dc:	00000150 	andeq	r0, r0, r0, asr r1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000154 	andcs	r0, r0, r4, asr r1
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
  18:	000000f8 	strdeq	r0, [r0], -r8
  1c:	0000011e 	andeq	r0, r0, lr, lsl r1
  20:	00000120 	andeq	r0, r0, r0, lsr #2
  24:	00000122 	andeq	r0, r0, r2, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000c7 	andeq	r0, r0, r7, asr #1
   4:	00740002 	rsbseq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  44:	5f6c6165 	svcpl	0x006c6165
  48:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  4c:	74730000 	ldrbtvc	r0, [r3], #-0
  50:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  54:	00632e70 	rsbeq	r2, r3, r0, ror lr
  58:	6f000001 	svcvs	0x00000001
  5c:	63656a62 	cmnvs	r5, #401408	; 0x62000
  60:	00682e74 	rsbeq	r2, r8, r4, ror lr
  64:	62000001 	andvs	r0, r0, #1
  68:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
  6c:	00010068 	andeq	r0, r1, r8, rrx
  70:	64617000 	strbtvs	r7, [r1], #-0
  74:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
  78:	00010068 	andeq	r0, r1, r8, rrx
  7c:	05000000 	streq	r0, [r0, #-0]
  80:	00000002 	andeq	r0, r0, r2
  84:	010a0320 	tsteq	sl, r0, lsr #6
  88:	03025e13 	movweq	r5, #11795	; 0x2e13
  8c:	00010100 	andeq	r0, r1, r0, lsl #2
  90:	00100205 	andseq	r0, r0, r5, lsl #4
  94:	13032000 	movwne	r2, #12288	; 0x3000
  98:	4b3f3001 	blmi	fcc0a4 <startup-0x1f033f5c>
  9c:	d04b5959 	suble	r5, fp, r9, asr r9
  a0:	2f2f2f3d 	svccs	0x002f2f3d
  a4:	6932302f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, ip, sp}
  a8:	5967674b 	stmdbpl	r7!, {r0, r1, r3, r6, r8, r9, sl, sp, lr}^
  ac:	75831308 	strvc	r1, [r3, #776]	; 0x308
  b0:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
  b4:	02006f02 	andeq	r6, r0, #2, 30
  b8:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
  bc:	580a0306 	stmdapl	sl, {r1, r2, r8, r9}
  c0:	03595959 	cmpeq	r9, #1458176	; 0x164000
  c4:	07023c6e 	streq	r3, [r2, -lr, ror #24]
  c8:	b1010100 	mrslt	r0, (UNDEF: 17)
  cc:	02000000 	andeq	r0, r0, #0
  d0:	00007100 	andeq	r7, r0, r0, lsl #2
  d4:	fb010200 	blx	408de <startup-0x1ffbf722>
  d8:	01000d0e 	tsteq	r0, lr, lsl #26
  dc:	00010101 	andeq	r0, r1, r1, lsl #2
  e0:	00010000 	andeq	r0, r1, r0
  e4:	3a430100 	bcc	10c04ec <startup-0x1ef3fb14>
  e8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  ec:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
  f0:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
  f4:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
  f8:	6f746b73 	svcvs	0x00746b73
  fc:	41442f70 	hvcmi	17136	; 0x42f0
 100:	37313054 			; <UNDEFINED> instruction: 0x37313054
 104:	646f432f 	strbtvs	r4, [pc], #-815	; 10c <startup-0x1ffffef4>
 108:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 10c:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 110:	705f6c61 	subsvc	r6, pc, r1, ror #24
 114:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 118:	6c616200 	sfmvs	f6, 2, [r1], #-0
 11c:	00632e6c 	rsbeq	r2, r3, ip, ror #28
 120:	6f000001 	svcvs	0x00000001
 124:	63656a62 	cmnvs	r5, #401408	; 0x62000
 128:	00682e74 	rsbeq	r2, r8, r4, ror lr
 12c:	62000001 	andvs	r0, r0, #1
 130:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
 134:	00010068 	andeq	r0, r1, r8, rrx
 138:	64617000 	strbtvs	r7, [r1], #-0
 13c:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
 140:	00010068 	andeq	r0, r1, r8, rrx
 144:	05000000 	streq	r0, [r0, #-0]
 148:	00015402 	andeq	r5, r1, r2, lsl #8
 14c:	011b0320 	tsteq	fp, r0, lsr #6
 150:	77754c4b 	ldrbvc	r4, [r5, -fp, asr #24]!
 154:	4b673d4b 	blmi	19cf688 <startup-0x1e630978>
 158:	312f5c3d 			; <UNDEFINED> instruction: 0x312f5c3d
 15c:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 160:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 164:	5969919f 	stmdbpl	r9!, {r0, r1, r2, r3, r4, r7, r8, ip, pc}^
 168:	675d593d 	smmlarvs	sp, sp, r9, r5
 16c:	01040200 	mrseq	r0, R12_usr
 170:	9f066606 	svcls	0x00066606
 174:	3d596959 	vldrcc.16	s13, [r9, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
 178:	02595c59 	subseq	r5, r9, #22784	; 0x5900
 17c:	01010008 	tsteq	r1, r8
 180:	0000012e 	andeq	r0, r0, lr, lsr #2
 184:	005f0002 	subseq	r0, pc, r2
 188:	01020000 	mrseq	r0, (UNDEF: 2)
 18c:	000d0efb 	strdeq	r0, [sp], -fp
 190:	01010101 	tsteq	r1, r1, lsl #2
 194:	01000000 	mrseq	r0, (UNDEF: 0)
 198:	43010000 	movwmi	r0, #4096	; 0x1000
 19c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 1a0:	2f737265 	svccs	0x00737265
 1a4:	706d6148 	rsbvc	r6, sp, r8, asr #2
 1a8:	442f7375 	strtmi	r7, [pc], #-885	; 1b0 <startup-0x1ffffe50>
 1ac:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 1b0:	442f706f 	strtmi	r7, [pc], #-111	; 1b8 <startup-0x1ffffe48>
 1b4:	31305441 	teqcc	r0, r1, asr #8
 1b8:	6f432f37 	svcvs	0x00432f37
 1bc:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 1c0:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 1c4:	5f6c6165 	svcpl	0x006c6165
 1c8:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 1cc:	72670000 	rsbvc	r0, r7, #0
 1d0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1d4:	00632e63 	rsbeq	r2, r3, r3, ror #28
 1d8:	67000001 	strvs	r0, [r0, -r1]
 1dc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1e0:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
 1e4:	00000100 	andeq	r0, r0, r0, lsl #2
 1e8:	02050000 	andeq	r0, r5, #0
 1ec:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
 1f0:	76e56718 	usatvc	r6, #5, r8, lsl #14
 1f4:	6768d767 	strbvs	sp, [r8, -r7, ror #14]!
 1f8:	0b033d4b 	bleq	cf72c <startup-0x1ff308d4>
 1fc:	2076033c 	rsbscs	r0, r6, ip, lsr r3
 200:	03443d4b 	movteq	r3, #19787	; 0x4d4b
 204:	3d4b2079 	stclcc	0, cr2, [fp, #-484]	; 0xfffffe1c
 208:	3d4b1c41 	stclcc	12, cr1, [fp, #-260]	; 0xfffffefc
 20c:	3d3d4c3e 	ldccc	12, cr4, [sp, #-248]!	; 0xffffff08
 210:	313d3d3d 	teqcc	sp, sp, lsr sp
 214:	3d4b2f3d 	stclcc	15, cr2, [fp, #-244]	; 0xffffff0c
 218:	58790330 	ldmdapl	r9!, {r4, r5, r8, r9}^
 21c:	3e3d2328 	cdpcc	3, 3, cr2, cr13, cr8, {1}
 220:	3d3d67ca 	ldccc	7, cr6, [sp, #-808]!	; 0xfffffcd8
 224:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 228:	3e3d5930 			; <UNDEFINED> instruction: 0x3e3d5930
 22c:	4b313d4b 	blmi	c4f760 <startup-0x1f3b08a0>
 230:	ca3e313d 	bgt	f8c72c <startup-0x1f0738d4>
 234:	2f594b91 	svccs	0x00594b91
 238:	593e2f3d 	ldmdbpl	lr!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 23c:	3d59313d 	ldfcce	f3, [r9, #-244]	; 0xffffff0c
 240:	3d3d3d31 	ldccc	13, cr3, [sp, #-196]!	; 0xffffff3c
 244:	593d9176 	ldmdbpl	sp!, {r1, r2, r4, r5, r6, r8, ip, pc}
 248:	914c833d 	cmpls	ip, sp, lsr r3
 24c:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 250:	59674c83 	stmdbpl	r7!, {r0, r1, r7, sl, fp, lr}^
 254:	3d2f4c67 	stccc	12, cr4, [pc, #-412]!	; c0 <startup-0x1fffff40>
 258:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 25c:	4b4b4b3d 	blmi	12d2f58 <startup-0x1ed2d0a8>
 260:	3e3d4b4b 	vsubcc.f64	d4, d13, d11
 264:	4bad3d3d 	blmi	feb4f760 <returnKeys.4003+0xdeb4ea20>
 268:	03040200 	movweq	r0, #16896	; 0x4200
 26c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 270:	02004903 	andeq	r4, r0, #49152	; 0xc000
 274:	3c060104 	stfccs	f0, [r6], {4}
 278:	02040200 	andeq	r0, r4, #0, 4
 27c:	02003906 	andeq	r3, r0, #98304	; 0x18000
 280:	3c060104 	stfccs	f0, [r6], {4}
 284:	e64d4406 	strb	r4, [sp], -r6, lsl #8
 288:	01040200 	mrseq	r0, R12_usr
 28c:	5a066606 	bpl	199aac <startup-0x1fe66554>
 290:	5959ad68 	ldmdbpl	r9, {r3, r5, r6, r8, sl, fp, sp, pc}^
 294:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 298:	784b5b59 	stmdavc	fp, {r0, r3, r4, r6, r8, r9, fp, ip, lr}^
 29c:	4d684b4b 	fstmdbxmi	r8!, {d20-d56}	;@ Deprecated
 2a0:	bc9fd7bb 	ldclt	7, cr13, [pc], {187}	; 0xbb
 2a4:	03a1ae4b 			; <UNDEFINED> instruction: 0x03a1ae4b
 2a8:	2803ac5a 	stmdacs	r3, {r1, r3, r4, r6, sl, fp, sp, pc}
 2ac:	00050220 	andeq	r0, r5, r0, lsr #4
 2b0:	009d0101 	addseq	r0, sp, r1, lsl #2
 2b4:	00020000 	andeq	r0, r2, r0
 2b8:	0000005d 	andeq	r0, r0, sp, asr r0
 2bc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 2c0:	0101000d 	tsteq	r1, sp
 2c4:	00000101 	andeq	r0, r0, r1, lsl #2
 2c8:	00000100 	andeq	r0, r0, r0, lsl #2
 2cc:	2f3a4301 	svccs	0x003a4301
 2d0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 2d4:	61482f73 	hvcvs	33523	; 0x82f3
 2d8:	7375706d 	cmnvc	r5, #109	; 0x6d
 2dc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 2e0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 2e4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 2e8:	2f373130 	svccs	0x00373130
 2ec:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 2f0:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 2f4:	6165722f 	cmnvs	r5, pc, lsr #4
 2f8:	6f705f6c 	svcvs	0x00705f6c
 2fc:	0000676e 	andeq	r6, r0, lr, ror #14
 300:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 304:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
 308:	00000100 	andeq	r0, r0, r0, lsl #2
 30c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 310:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 314:	00000100 	andeq	r0, r0, r0, lsl #2
 318:	02050000 	andeq	r0, r5, #0
 31c:	20000800 	andcs	r0, r0, r0, lsl #16
 320:	02004b15 	andeq	r4, r0, #21504	; 0x5400
 324:	003d0304 	eorseq	r0, sp, r4, lsl #6
 328:	08030402 	stmdaeq	r3, {r1, sl}
 32c:	040200c7 	streq	r0, [r2], #-199	; 0xffffff39
 330:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 334:	004b4b3f 	subeq	r4, fp, pc, lsr fp
 338:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 33c:	03040200 	movweq	r0, #16896	; 0x4200
 340:	0200c708 	andeq	ip, r0, #8, 14	; 0x200000
 344:	3c060104 	stfccs	f0, [r6], {4}
 348:	674c3f06 	strbvs	r3, [ip, -r6, lsl #30]
 34c:	04023d3d 	streq	r3, [r2], #-3389	; 0xfffff2c3
 350:	80010100 	andhi	r0, r1, r0, lsl #2
 354:	02000000 	andeq	r0, r0, #0
 358:	00005000 	andeq	r5, r0, r0
 35c:	fb010200 	blx	40b66 <startup-0x1ffbf49a>
 360:	01000d0e 	tsteq	r0, lr, lsl #26
 364:	00010101 	andeq	r0, r1, r1, lsl #2
 368:	00010000 	andeq	r0, r1, r0
 36c:	3a430100 	bcc	10c0774 <startup-0x1ef3f88c>
 370:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 374:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 378:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 37c:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 380:	6f746b73 	svcvs	0x00746b73
 384:	41442f70 	hvcmi	17136	; 0x42f0
 388:	37313054 			; <UNDEFINED> instruction: 0x37313054
 38c:	646f432f 	strbtvs	r4, [pc], #-815	; 394 <startup-0x1ffffc6c>
 390:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 394:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 398:	705f6c61 	subsvc	r6, pc, r1, ror #24
 39c:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 3a0:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 3a4:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
 3a8:	00000100 	andeq	r0, r0, r0, lsl #2
 3ac:	02050000 	andeq	r0, r5, #0
 3b0:	200008dc 	ldrdcs	r0, [r0], -ip
 3b4:	3d3d2f14 	ldccc	15, cr2, [sp, #-80]!	; 0xffffffb0
 3b8:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 3bc:	20060104 	andcs	r0, r6, r4, lsl #2
 3c0:	a03d6906 	eorsge	r6, sp, r6, lsl #18
 3c4:	2f2f214b 	svccs	0x002f214b
 3c8:	4c5e2a2f 	mrrcmi	10, 2, r2, lr, cr15
 3cc:	2f4c764e 	svccs	0x004c764e
 3d0:	03022f2f 	movweq	r2, #12079	; 0x2f2f
 3d4:	86010100 	strhi	r0, [r1], -r0, lsl #2
 3d8:	02000000 	andeq	r0, r0, #0
 3dc:	00006900 	andeq	r6, r0, r0, lsl #18
 3e0:	fb010200 	blx	40bea <startup-0x1ffbf416>
 3e4:	01000d0e 	tsteq	r0, lr, lsl #26
 3e8:	00010101 	andeq	r0, r1, r1, lsl #2
 3ec:	00010000 	andeq	r0, r1, r0
 3f0:	3a430100 	bcc	10c07f8 <startup-0x1ef3f808>
 3f4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 3f8:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 3fc:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 400:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 404:	6f746b73 	svcvs	0x00746b73
 408:	41442f70 	hvcmi	17136	; 0x42f0
 40c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 410:	646f432f 	strbtvs	r4, [pc], #-815	; 418 <startup-0x1ffffbe8>
 414:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 418:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 41c:	705f6c61 	subsvc	r6, pc, r1, ror #24
 420:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 424:	64617000 	strbtvs	r7, [r1], #-0
 428:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
 42c:	00010063 	andeq	r0, r1, r3, rrx
 430:	6a626f00 	bvs	189c038 <startup-0x1e763fc8>
 434:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 438:	00010068 	andeq	r0, r1, r8, rrx
 43c:	64617000 	strbtvs	r7, [r1], #-0
 440:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
 444:	00010068 	andeq	r0, r1, r8, rrx
 448:	05000000 	streq	r0, [r0, #-0]
 44c:	00097c02 	andeq	r7, r9, r2, lsl #24
 450:	01360320 	teqeq	r6, r0, lsr #6
 454:	4b774d4b 	blmi	1dd3988 <startup-0x1e22c678>
 458:	5977834b 	ldmdbpl	r7!, {r0, r1, r3, r6, r8, r9, pc}^
 45c:	01000402 	tsteq	r0, r2, lsl #8
 460:	0000ac01 	andeq	sl, r0, r1, lsl #24
 464:	51000200 	mrspl	r0, R8_usr
 468:	02000000 	andeq	r0, r0, #0
 46c:	0d0efb01 	vstreq	d15, [lr, #-4]
 470:	01010100 	mrseq	r0, (UNDEF: 17)
 474:	00000001 	andeq	r0, r0, r1
 478:	01000001 	tsteq	r0, r1
 47c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa41 <returnKeys.4003+0xdfffed01>
 480:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 484:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 488:	2f737570 	svccs	0x00737570
 48c:	6b736544 	blvs	1cd99a4 <startup-0x1e32665c>
 490:	2f706f74 	svccs	0x00706f74
 494:	30544144 	subscc	r4, r4, r4, asr #2
 498:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 49c:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 4a0:	2f657469 	svccs	0x00657469
 4a4:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 4a8:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 4ac:	6b000067 	blvs	650 <startup-0x1ffff9b0>
 4b0:	61707965 	cmnvs	r0, r5, ror #18
 4b4:	00632e64 	rsbeq	r2, r3, r4, ror #28
 4b8:	00000001 	andeq	r0, r0, r1
 4bc:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
 4c0:	14200009 	strtne	r0, [r0], #-9
 4c4:	4b4b914b 	blmi	12e49f8 <startup-0x1ed1b608>
 4c8:	924c4b4b 	subls	r4, ip, #76800	; 0x12c00
 4cc:	02004b3d 	andeq	r4, r0, #62464	; 0xf400
 4d0:	58060104 	stmdapl	r6, {r2, r8}
 4d4:	02002f06 	andeq	r2, r0, #6, 30
 4d8:	58060104 	stmdapl	r6, {r2, r8}
 4dc:	02002f06 	andeq	r2, r0, #6, 30
 4e0:	58060104 	stmdapl	r6, {r2, r8}
 4e4:	02002f06 	andeq	r2, r0, #6, 30
 4e8:	58060104 	stmdapl	r6, {r2, r8}
 4ec:	68212f06 	stmdavs	r1!, {r1, r2, r8, r9, sl, fp, sp}
 4f0:	6759683d 	smmlarvs	r9, sp, r8, r6
 4f4:	0859672f 	ldmdaeq	r9, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
 4f8:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
 4fc:	74790302 	ldrbtvc	r0, [r9], #-770	; 0xfffffcfe
 500:	01040200 	mrseq	r0, R12_usr
 504:	03067406 	movweq	r7, #25606	; 0x6406
 508:	213d580a 	teqcs	sp, sl, lsl #16
 50c:	01000902 	tsteq	r0, r2, lsl #18
 510:	Address 0x00000510 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	59726964 	ldmdbpl	r2!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	736f7000 	cmnvc	pc, #0
   8:	69730059 	ldmdbvs	r3!, {r0, r3, r4, r6}^
   c:	0058657a 	subseq	r6, r8, sl, ror r5
  10:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
  14:	64615074 	strbtvs	r5, [r1], #-116	; 0xffffff8c
  18:	00656c64 	rsbeq	r6, r5, r4, ror #24
  1c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  20:	72640059 	rsbvc	r0, r4, #89	; 0x59
  24:	43007761 	movwmi	r7, #1889	; 0x761
  28:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  2c:	2f737265 	svccs	0x00737265
  30:	706d6148 	rsbvc	r6, sp, r8, asr #2
  34:	442f7375 	strtmi	r7, [pc], #-885	; 3c <startup-0x1fffffc4>
  38:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  3c:	442f706f 	strtmi	r7, [pc], #-111	; 44 <startup-0x1fffffbc>
  40:	31305441 	teqcc	r0, r1, asr #8
  44:	6f432f37 	svcvs	0x00432f37
  48:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  4c:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  50:	5f6c6165 	svcpl	0x006c6165
  54:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  58:	6174732f 	cmnvs	r4, pc, lsr #6
  5c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  60:	7300632e 	movwvc	r6, #814	; 0x32e
  64:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
  68:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  6c:	6f507400 	svcvs	0x00507400
  70:	00746e69 	rsbseq	r6, r4, r9, ror #28
  74:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  78:	736e7500 	cmnvc	lr, #0, 10
  7c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  80:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  84:	47007261 	strmi	r7, [r0, -r1, ror #4]
  88:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  8c:	36203939 			; <UNDEFINED> instruction: 0x36203939
  90:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  94:	31303220 	teqcc	r0, r0, lsr #4
  98:	31323037 	teqcc	r2, r7, lsr r0
  9c:	72282035 	eorvc	r2, r8, #53	; 0x35
  a0:	61656c65 	cmnvs	r5, r5, ror #24
  a4:	20296573 	eorcs	r6, r9, r3, ror r5
  a8:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  ac:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  b0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  b4:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  b8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  bc:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  c0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  c4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  c8:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  cc:	205d3231 	subscs	r3, sp, r1, lsr r2
  d0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  d4:	20626d75 	rsbcs	r6, r2, r5, ror sp
  d8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  dc:	613d6863 	teqvs	sp, r3, ror #16
  e0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  e4:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  e8:	6f6c666d 	svcvs	0x006c666d
  ec:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  f0:	733d6962 	teqvc	sp, #1605632	; 0x188000
  f4:	2074666f 	rsbscs	r6, r4, pc, ror #12
  f8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  fc:	20626d75 	rsbcs	r6, r2, r5, ror sp
 100:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 104:	613d6863 	teqvs	sp, r3, ror #16
 108:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 10c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 110:	4f2d2067 	svcmi	0x002d2067
 114:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 118:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 11c:	50003939 	andpl	r3, r0, r9, lsr r9
 120:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; c <startup-0x1ffffff4>
 124:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 128:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 12c:	70615f74 	rsbvc	r5, r1, r4, ror pc
 130:	47740070 			; <UNDEFINED> instruction: 0x47740070
 134:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 138:	00797274 	rsbseq	r7, r9, r4, ror r2
 13c:	73657270 	cmnvc	r5, #112, 4
 140:	4b646573 	blmi	1919714 <startup-0x1e6e68ec>
 144:	00737965 	rsbseq	r7, r3, r5, ror #18
 148:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 14c:	00707574 	rsbseq	r7, r0, r4, ror r5
 150:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
 154:	64646150 	strbtvs	r6, [r4], #-336	; 0xfffffeb0
 158:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
 15c:	006e6961 	rsbeq	r6, lr, r1, ror #18
 160:	4a424f50 	bmi	1093ea8 <startup-0x1ef6c158>
 164:	00544345 	subseq	r4, r4, r5, asr #6
 168:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 16c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 170:	736f7000 	cmnvc	pc, #0
 174:	69640058 	stmdbvs	r4!, {r3, r4, r6}^
 178:	6e005872 	mcrvs	8, 0, r5, cr0, cr2, {3}
 17c:	6f506d75 	svcvs	0x00506d75
 180:	73746e69 	cmnvc	r4, #1680	; 0x690
 184:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 188:	7400544e 	strvc	r5, [r0], #-1102	; 0xfffffbb2
 18c:	006a624f 	rsbeq	r6, sl, pc, asr #4
 190:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 194:	6f65675f 	svcvs	0x0065675f
 198:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 19c:	68740079 	ldmdavs	r4!, {r0, r3, r4, r5, r6}^
 1a0:	6d007369 	stcvs	3, cr7, [r0, #-420]	; 0xfffffe5c
 1a4:	5f65766f 	svcpl	0x0065766f
 1a8:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 1ac:	2f3a4300 	svccs	0x003a4300
 1b0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1b4:	61482f73 	hvcvs	33523	; 0x82f3
 1b8:	7375706d 	cmnvc	r5, #109	; 0x6d
 1bc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1c0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1c4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 1c8:	2f373130 	svccs	0x00373130
 1cc:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 1d0:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 1d4:	6165722f 	cmnvs	r5, pc, lsr #4
 1d8:	6f705f6c 	svcvs	0x00705f6c
 1dc:	622f676e 	eorvs	r6, pc, #28835840	; 0x1b80000
 1e0:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
 1e4:	65640063 	strbvs	r0, [r4, #-99]!	; 0xffffff9d
 1e8:	5f79616c 	svcpl	0x0079616c
 1ec:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 1f0:	72670069 	rsbvc	r0, r7, #105	; 0x69
 1f4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1f8:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 1fc:	5f657469 	svcpl	0x00657469
 200:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 204:	00646e61 	rsbeq	r6, r4, r1, ror #28
 208:	70617267 	rsbvc	r7, r1, r7, ror #4
 20c:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 210:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 214:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 218:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 21c:	00726165 	rsbseq	r6, r2, r5, ror #2
 220:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 224:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
 228:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 22c:	635f7363 	cmpvs	pc, #-1946157055	; 0x8c000001
 230:	5f6c7274 	svcpl	0x006c7274
 234:	5f746962 	svcpl	0x00746962
 238:	00746573 	rsbseq	r6, r4, r3, ror r5
 23c:	70617267 	rsbvc	r7, r1, r7, ror #4
 240:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 244:	6165725f 	cmnvs	r5, pc, asr r2
 248:	61645f64 	cmnvs	r4, r4, ror #30
 24c:	67006174 	smlsdxvs	r0, r4, r1, r6
 250:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 254:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 258:	5f746961 	svcpl	0x00746961
 25c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 260:	3a430079 	bcc	10c044c <startup-0x1ef3fbb4>
 264:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 268:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 26c:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 270:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 274:	6f746b73 	svcvs	0x00746b73
 278:	41442f70 	hvcmi	17136	; 0x42f0
 27c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 280:	646f432f 	strbtvs	r4, [pc], #-815	; 288 <startup-0x1ffffd78>
 284:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 288:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 28c:	705f6c61 	subsvc	r6, pc, r1, ror #24
 290:	2f676e6f 	svccs	0x00676e6f
 294:	70617267 	rsbvc	r7, r1, r7, ror #4
 298:	2e636968 	vnmulcs.f16	s13, s6, s17	; <UNPREDICTABLE>
 29c:	616d0063 	cmnvs	sp, r3, rrx
 2a0:	75006b73 	strvc	r6, [r0, #-2931]	; 0xfffff48d
 2a4:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 2a8:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
 2ac:	00797375 	rsbseq	r7, r9, r5, ror r3
 2b0:	70617267 	rsbvc	r7, r1, r7, ror #4
 2b4:	5f636968 	svcpl	0x00636968
 2b8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2bc:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 2c0:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 2c4:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 2c8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 100 <startup-0x1fffff00>
 2cc:	0072656c 	rsbseq	r6, r2, ip, ror #10
 2d0:	706d6574 	rsbvc	r6, sp, r4, ror r5
 2d4:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 2d8:	67007865 	strvs	r7, [r0, -r5, ror #16]
 2dc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2e0:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 2e4:	00646165 	rsbeq	r6, r4, r5, ror #2
 2e8:	70617267 	rsbvc	r7, r1, r7, ror #4
 2ec:	5f636968 	svcpl	0x00636968
 2f0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2f4:	61645f65 	cmnvs	r4, r5, ror #30
 2f8:	70006174 	andvc	r6, r0, r4, ror r1
 2fc:	00656761 	rsbeq	r6, r5, r1, ror #14
 300:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 304:	72670065 	rsbvc	r0, r7, #101	; 0x65
 308:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 30c:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 310:	5f726165 	svcpl	0x00726165
 314:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 318:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 31c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 320:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 324:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 328:	7a696c61 	bvc	1a5b4b4 <startup-0x1e5a4b4c>
 32c:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 330:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 334:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 338:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 33c:	43006465 	movwmi	r6, #1125	; 0x465
 340:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 344:	2f737265 	svccs	0x00737265
 348:	706d6148 	rsbvc	r6, sp, r8, asr #2
 34c:	442f7375 	strtmi	r7, [pc], #-885	; 354 <startup-0x1ffffcac>
 350:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 354:	442f706f 	strtmi	r7, [pc], #-111	; 35c <startup-0x1ffffca4>
 358:	31305441 	teqcc	r0, r1, asr #8
 35c:	6f432f37 	svcvs	0x00432f37
 360:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 364:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 368:	5f6c6165 	svcpl	0x006c6165
 36c:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 370:	6a626f2f 	bvs	189c034 <startup-0x1e763fcc>
 374:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 378:	6c630063 	stclvs	0, cr0, [r3], #-396	; 0xfffffe74
 37c:	5f726165 	svcpl	0x00726165
 380:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 384:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 388:	5f776172 	svcpl	0x00776172
 38c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 390:	75007463 	strvc	r7, [r0, #-1123]	; 0xfffffb9d
 394:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 398:	2064656e 	rsbcs	r6, r4, lr, ror #10
 39c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 3a0:	616c6564 	cmnvs	ip, r4, ror #10
 3a4:	30355f79 	eorscc	r5, r5, r9, ror pc
 3a8:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 3ac:	616c6564 	cmnvs	ip, r4, ror #10
 3b0:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 3b4:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 3b8:	616c6564 	cmnvs	ip, r4, ror #10
 3bc:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 3c0:	006f7263 	rsbeq	r7, pc, r3, ror #4
 3c4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff989 <returnKeys.4003+0xdfffec49>
 3c8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3cc:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 3d0:	2f737570 	svccs	0x00737570
 3d4:	6b736544 	blvs	1cd98ec <startup-0x1e326714>
 3d8:	2f706f74 	svccs	0x00706f74
 3dc:	30544144 	subscc	r4, r4, r4, asr #2
 3e0:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 3e4:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 3e8:	2f657469 	svccs	0x00657469
 3ec:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 3f0:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 3f4:	69742f67 	ldmdbvs	r4!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp}^
 3f8:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 3fc:	6f6d0063 	svcvs	0x006d0063
 400:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 404:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 408:	61700065 	cmnvs	r0, r5, rrx
 40c:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 410:	6f65675f 	svcvs	0x0065675f
 414:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 418:	3a430079 	bcc	10c0604 <startup-0x1ef3f9fc>
 41c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 420:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 424:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 428:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 42c:	6f746b73 	svcvs	0x00746b73
 430:	41442f70 	hvcmi	17136	; 0x42f0
 434:	37313054 			; <UNDEFINED> instruction: 0x37313054
 438:	646f432f 	strbtvs	r4, [pc], #-815	; 440 <startup-0x1ffffbc0>
 43c:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 440:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 444:	705f6c61 	subsvc	r6, pc, r1, ror #24
 448:	2f676e6f 	svccs	0x00676e6f
 44c:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 450:	632e656c 			; <UNDEFINED> instruction: 0x632e656c
 454:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 458:	65720062 	ldrbvs	r0, [r2, #-98]!	; 0xffffff9e
 45c:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 460:	7379654b 	cmnvc	r9, #314572800	; 0x12c00000
 464:	61657200 	cmnvs	r5, r0, lsl #4
 468:	6c6f4364 	stclvs	3, cr4, [pc], #-400	; 2e0 <startup-0x1ffffd20>
 46c:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 470:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa35 <returnKeys.4003+0xdfffecf5>
 474:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 478:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 47c:	2f737570 	svccs	0x00737570
 480:	6b736544 	blvs	1cd9998 <startup-0x1e326668>
 484:	2f706f74 	svccs	0x00706f74
 488:	30544144 	subscc	r4, r4, r4, asr #2
 48c:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 490:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 494:	2f657469 	svccs	0x00657469
 498:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 49c:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 4a0:	656b2f67 	strbvs	r2, [fp, #-3943]!	; 0xfffff099
 4a4:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 4a8:	6300632e 	movwvs	r6, #814	; 0x32e
 4ac:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 4b0:	656b006e 	strbvs	r0, [fp, #-110]!	; 0xffffff92
 4b4:	61007379 	tstvs	r0, r9, ror r3
 4b8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 4bc:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
 4c0:	Address 0x000004c0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000048 	andeq	r0, r0, r8, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000058 	andcs	r0, r0, r8, asr r0
  48:	000000fc 	strdeq	r0, [r0], -ip
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	200e4101 	andcs	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	20000154 	andcs	r0, r0, r4, asr r1
  78:	0000015c 	andeq	r0, r0, ip, asr r1
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	180e4101 	stmdane	lr, {r0, r8, lr}
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	0000000c 	andeq	r0, r0, ip
  90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  94:	7c020001 	stcvc	0, cr0, [r2], {1}
  98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	0000008c 	andeq	r0, r0, ip, lsl #1
  a4:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
  a8:	00000038 	andeq	r0, r0, r8, lsr r0
  ac:	40080e41 	andmi	r0, r8, r1, asr #28
  b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b4:	100e4101 	andne	r4, lr, r1, lsl #2
  b8:	00070d41 	andeq	r0, r7, r1, asr #26
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	0000008c 	andeq	r0, r0, ip, lsl #1
  c4:	200002e8 	andcs	r0, r0, r8, ror #5
  c8:	00000034 	andeq	r0, r0, r4, lsr r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	100e4101 	andne	r4, lr, r1, lsl #2
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	0000008c 	andeq	r0, r0, ip, lsl #1
  e4:	2000031c 	andcs	r0, r0, ip, lsl r3
  e8:	0000006a 	andeq	r0, r0, sl, rrx
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	0000008c 	andeq	r0, r0, ip, lsl #1
 104:	20000386 	andcs	r0, r0, r6, lsl #7
 108:	00000072 	andeq	r0, r0, r2, ror r0
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	100e4101 	andne	r4, lr, r1, lsl #2
 118:	00070d41 	andeq	r0, r7, r1, asr #26
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	0000008c 	andeq	r0, r0, ip, lsl #1
 124:	200003f8 	strdcs	r0, [r0], -r8
 128:	00000090 	muleq	r0, r0, r0
 12c:	40080e41 	andmi	r0, r8, r1, asr #28
 130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 134:	180e4101 	stmdane	lr, {r0, r8, lr}
 138:	00070d41 	andeq	r0, r7, r1, asr #26
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	0000008c 	andeq	r0, r0, ip, lsl #1
 144:	20000488 	andcs	r0, r0, r8, lsl #9
 148:	00000080 	andeq	r0, r0, r0, lsl #1
 14c:	40080e41 	andmi	r0, r8, r1, asr #28
 150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 154:	100e4101 	andne	r4, lr, r1, lsl #2
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	0000008c 	andeq	r0, r0, ip, lsl #1
 164:	20000508 	andcs	r0, r0, r8, lsl #10
 168:	00000040 	andeq	r0, r0, r0, asr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 174:	100e4101 	andne	r4, lr, r1, lsl #2
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	0000008c 	andeq	r0, r0, ip, lsl #1
 184:	20000548 	andcs	r0, r0, r8, asr #10
 188:	00000046 	andeq	r0, r0, r6, asr #32
 18c:	40080e41 	andmi	r0, r8, r1, asr #28
 190:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 194:	100e4101 	andne	r4, lr, r1, lsl #2
 198:	00070d41 	andeq	r0, r7, r1, asr #26
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1a4:	2000058e 	andcs	r0, r0, lr, lsl #11
 1a8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	100e4101 	andne	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1c4:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
 1c8:	0000005c 	andeq	r0, r0, ip, asr r0
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	0000008c 	andeq	r0, r0, ip, lsl #1
 1e0:	20000614 	andcs	r0, r0, r4, lsl r6
 1e4:	00000058 	andeq	r0, r0, r8, asr r0
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	100e4101 	andne	r4, lr, r1, lsl #2
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	00000020 	andeq	r0, r0, r0, lsr #32
 1fc:	0000008c 	andeq	r0, r0, ip, lsl #1
 200:	2000066c 	andcs	r0, r0, ip, ror #12
 204:	00000194 	muleq	r0, r4, r1
 208:	400c0e41 	andmi	r0, ip, r1, asr #28
 20c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 210:	018e4002 	orreq	r4, lr, r2
 214:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 218:	0000070d 	andeq	r0, r0, sp, lsl #14
 21c:	0000000c 	andeq	r0, r0, ip
 220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 224:	7c020001 	stcvc	0, cr0, [r2], {1}
 228:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 22c:	0000001c 	andeq	r0, r0, ip, lsl r0
 230:	0000021c 	andeq	r0, r0, ip, lsl r2
 234:	20000800 	andcs	r0, r0, r0, lsl #16
 238:	0000005e 	andeq	r0, r0, lr, asr r0
 23c:	40080e41 	andmi	r0, r8, r1, asr #28
 240:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 244:	180e4101 	stmdane	lr, {r0, r8, lr}
 248:	00070d41 	andeq	r0, r7, r1, asr #26
 24c:	0000001c 	andeq	r0, r0, ip, lsl r0
 250:	0000021c 	andeq	r0, r0, ip, lsl r2
 254:	2000085e 	andcs	r0, r0, lr, asr r8
 258:	0000005e 	andeq	r0, r0, lr, asr r0
 25c:	40080e41 	andmi	r0, r8, r1, asr #28
 260:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 264:	180e4101 	stmdane	lr, {r0, r8, lr}
 268:	00070d41 	andeq	r0, r7, r1, asr #26
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	0000021c 	andeq	r0, r0, ip, lsl r2
 274:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
 278:	00000020 	andeq	r0, r0, r0, lsr #32
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	180e4101 	stmdane	lr, {r0, r8, lr}
 288:	00070d41 	andeq	r0, r7, r1, asr #26
 28c:	0000000c 	andeq	r0, r0, ip
 290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 294:	7c020001 	stcvc	0, cr0, [r2], {1}
 298:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	0000028c 	andeq	r0, r0, ip, lsl #5
 2a4:	200008dc 	ldrdcs	r0, [r0], -ip
 2a8:	00000044 	andeq	r0, r0, r4, asr #32
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	0000028c 	andeq	r0, r0, ip, lsl #5
 2c0:	20000920 	andcs	r0, r0, r0, lsr #18
 2c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	100e4101 	andne	r4, lr, r1, lsl #2
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	0000028c 	andeq	r0, r0, ip, lsl #5
 2e0:	2000094c 	andcs	r0, r0, ip, asr #18
 2e4:	0000001e 	andeq	r0, r0, lr, lsl r0
 2e8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f0:	100e4101 	andne	r4, lr, r1, lsl #2
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	00000018 	andeq	r0, r0, r8, lsl r0
 2fc:	0000028c 	andeq	r0, r0, ip, lsl #5
 300:	2000096a 	andcs	r0, r0, sl, ror #18
 304:	00000012 	andeq	r0, r0, r2, lsl r0
 308:	40080e41 	andmi	r0, r8, r1, asr #28
 30c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 310:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 314:	0000000c 	andeq	r0, r0, ip
 318:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 31c:	7c020001 	stcvc	0, cr0, [r2], {1}
 320:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	00000314 	andeq	r0, r0, r4, lsl r3
 32c:	2000097c 	andcs	r0, r0, ip, ror r9
 330:	0000005e 	andeq	r0, r0, lr, asr r0
 334:	40080e41 	andmi	r0, r8, r1, asr #28
 338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 33c:	100e4101 	andne	r4, lr, r1, lsl #2
 340:	00070d41 	andeq	r0, r7, r1, asr #26
 344:	0000000c 	andeq	r0, r0, ip
 348:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 34c:	7c020001 	stcvc	0, cr0, [r2], {1}
 350:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 354:	0000001c 	andeq	r0, r0, ip, lsl r0
 358:	00000344 	andeq	r0, r0, r4, asr #6
 35c:	200009dc 	ldrdcs	r0, [r0], -ip
 360:	00000054 	andeq	r0, r0, r4, asr r0
 364:	40080e41 	andmi	r0, r8, r1, asr #28
 368:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 36c:	100e4101 	andne	r4, lr, r1, lsl #2
 370:	00070d41 	andeq	r0, r7, r1, asr #26
 374:	0000001c 	andeq	r0, r0, ip, lsl r0
 378:	00000344 	andeq	r0, r0, r4, asr #6
 37c:	20000a30 	andcs	r0, r0, r0, lsr sl
 380:	00000054 	andeq	r0, r0, r4, asr r0
 384:	40080e41 	andmi	r0, r8, r1, asr #28
 388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 38c:	100e4101 	andne	r4, lr, r1, lsl #2
 390:	00070d41 	andeq	r0, r7, r1, asr #26
 394:	00000020 	andeq	r0, r0, r0, lsr #32
 398:	00000344 	andeq	r0, r0, r4, asr #6
 39c:	20000a84 	andcs	r0, r0, r4, lsl #21
 3a0:	000000a8 	andeq	r0, r0, r8, lsr #1
 3a4:	400c0e41 	andmi	r0, ip, r1, asr #28
 3a8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3ac:	018e4002 	orreq	r4, lr, r2
 3b0:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 3b4:	0000070d 	andeq	r0, r0, sp, lsl #14
