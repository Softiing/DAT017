
./Debug/real_pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f832 	bl	2000006c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	// Setup display
	*GPIO_E_MODER = 0x55555555;
20000014:	4b10      	ldr	r3, [pc, #64]	; (20000058 <init_app+0x48>)
20000016:	4a11      	ldr	r2, [pc, #68]	; (2000005c <init_app+0x4c>)
20000018:	601a      	str	r2, [r3, #0]
	
	// Setup for keypad
	*GPIO_D_MODER &= 0x0000FFFF;
2000001a:	4b11      	ldr	r3, [pc, #68]	; (20000060 <init_app+0x50>)
2000001c:	4a10      	ldr	r2, [pc, #64]	; (20000060 <init_app+0x50>)
2000001e:	6812      	ldr	r2, [r2, #0]
20000020:	0412      	lsls	r2, r2, #16
20000022:	0c12      	lsrs	r2, r2, #16
20000024:	601a      	str	r2, [r3, #0]
	*GPIO_D_MODER |= 0x55000000;
20000026:	4b0e      	ldr	r3, [pc, #56]	; (20000060 <init_app+0x50>)
20000028:	4a0d      	ldr	r2, [pc, #52]	; (20000060 <init_app+0x50>)
2000002a:	6812      	ldr	r2, [r2, #0]
2000002c:	21aa      	movs	r1, #170	; 0xaa
2000002e:	05c9      	lsls	r1, r1, #23
20000030:	430a      	orrs	r2, r1
20000032:	601a      	str	r2, [r3, #0]
	
	*GPIO_D_OTYPER &= 0x0000FFFF;   
20000034:	4b0b      	ldr	r3, [pc, #44]	; (20000064 <init_app+0x54>)
20000036:	4a0b      	ldr	r2, [pc, #44]	; (20000064 <init_app+0x54>)
20000038:	8812      	ldrh	r2, [r2, #0]
2000003a:	b292      	uxth	r2, r2
2000003c:	801a      	strh	r2, [r3, #0]
	*GPIO_D_OTYPER |= 0x00000000;   
2000003e:	4b09      	ldr	r3, [pc, #36]	; (20000064 <init_app+0x54>)
20000040:	4a08      	ldr	r2, [pc, #32]	; (20000064 <init_app+0x54>)
20000042:	8812      	ldrh	r2, [r2, #0]
20000044:	b292      	uxth	r2, r2
20000046:	801a      	strh	r2, [r3, #0]
	*GPIO_D_PUPDR = 0x00AA0000;   
20000048:	4b07      	ldr	r3, [pc, #28]	; (20000068 <init_app+0x58>)
2000004a:	22aa      	movs	r2, #170	; 0xaa
2000004c:	0412      	lsls	r2, r2, #16
2000004e:	601a      	str	r2, [r3, #0]
}
20000050:	46c0      	nop			; (mov r8, r8)
20000052:	46bd      	mov	sp, r7
20000054:	bd80      	pop	{r7, pc}
20000056:	46c0      	nop			; (mov r8, r8)
20000058:	40021000 	andmi	r1, r2, r0
2000005c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000060:	40020c00 	andmi	r0, r2, r0, lsl #24
20000064:	40020c04 	andmi	r0, r2, r4, lsl #24
20000068:	40020c0c 	andmi	r0, r2, ip, lsl #24

2000006c <main>:

extern OBJECT ball;
extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void main(void) {
2000006c:	b580      	push	{r7, lr}
2000006e:	b084      	sub	sp, #16
20000070:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
20000072:	4b17      	ldr	r3, [pc, #92]	; (200000d0 <main+0x64>)
20000074:	60fb      	str	r3, [r7, #12]
	POBJECT pl = &leftPaddle;
20000076:	4b17      	ldr	r3, [pc, #92]	; (200000d4 <main+0x68>)
20000078:	60bb      	str	r3, [r7, #8]
	POBJECT pr = &rightPaddle;
2000007a:	4b17      	ldr	r3, [pc, #92]	; (200000d8 <main+0x6c>)
2000007c:	607b      	str	r3, [r7, #4]
	init_app();
2000007e:	f7ff ffc7 	bl	20000010 <init_app>
	graphic_initialize();
20000082:	f000 fa1d 	bl	200004c0 <graphic_initialize>
  #ifndef SIMULATOR
	graphic_clear_screen();
20000086:	f000 fa49 	bl	2000051c <graphic_clear_screen>
  #endif
  
//	p->set_speed(p, 4, 4);
	while(1) {
		// Update from keypad
		unsigned char *pressedKeys = keyb();
2000008a:	f000 fc7d 	bl	20000988 <keyb>
2000008e:	0003      	movs	r3, r0
20000090:	603b      	str	r3, [r7, #0]
		pl->set_speed(pl,0,1);
20000092:	68bb      	ldr	r3, [r7, #8]
20000094:	6a1b      	ldr	r3, [r3, #32]
20000096:	68b8      	ldr	r0, [r7, #8]
20000098:	2201      	movs	r2, #1
2000009a:	2100      	movs	r1, #0
2000009c:	4798      	blx	r3
		pr->set_speed(pr,0,0);
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	6a1b      	ldr	r3, [r3, #32]
200000a2:	6878      	ldr	r0, [r7, #4]
200000a4:	2200      	movs	r2, #0
200000a6:	2100      	movs	r1, #0
200000a8:	4798      	blx	r3
//				case 0x04: pl->set_speed(pl,0,-10); break;
//				case 0x0C: pr->set_speed(pr,0,10); break;
//				case 0x0D: pr->set_speed(pr,0,-10); break;
//			}
//		}
		p->move(p);
200000aa:	68fb      	ldr	r3, [r7, #12]
200000ac:	69db      	ldr	r3, [r3, #28]
200000ae:	68fa      	ldr	r2, [r7, #12]
200000b0:	0010      	movs	r0, r2
200000b2:	4798      	blx	r3
		pl->move(pl);
200000b4:	68bb      	ldr	r3, [r7, #8]
200000b6:	69db      	ldr	r3, [r3, #28]
200000b8:	68ba      	ldr	r2, [r7, #8]
200000ba:	0010      	movs	r0, r2
200000bc:	4798      	blx	r3
		pr->move(pr);
200000be:	687b      	ldr	r3, [r7, #4]
200000c0:	69db      	ldr	r3, [r3, #28]
200000c2:	687a      	ldr	r2, [r7, #4]
200000c4:	0010      	movs	r0, r2
200000c6:	4798      	blx	r3
		delay_milli(50);
200000c8:	2032      	movs	r0, #50	; 0x32
200000ca:	f000 fbc3 	bl	20000854 <delay_milli>
	while(1) {
200000ce:	e7dc      	b.n	2000008a <main+0x1e>
200000d0:	20000af4 	strdcs	r0, [r0], -r4
200000d4:	20000bec 	andcs	r0, r0, ip, ror #23
200000d8:	20000c10 	andcs	r0, r0, r0, lsl ip

200000dc <move_ball>:
};

extern OBJECT leftPaddle;
extern OBJECT rightPaddle;

void move_ball(POBJECT this) {
200000dc:	b580      	push	{r7, lr}
200000de:	b084      	sub	sp, #16
200000e0:	af00      	add	r7, sp, #0
200000e2:	6078      	str	r0, [r7, #4]
	clear_object(this);
200000e4:	687b      	ldr	r3, [r7, #4]
200000e6:	0018      	movs	r0, r3
200000e8:	f000 fb3d 	bl	20000766 <clear_object>
	
	this->posX += this->dirX;
200000ec:	687b      	ldr	r3, [r7, #4]
200000ee:	68da      	ldr	r2, [r3, #12]
200000f0:	687b      	ldr	r3, [r7, #4]
200000f2:	685b      	ldr	r3, [r3, #4]
200000f4:	18d2      	adds	r2, r2, r3
200000f6:	687b      	ldr	r3, [r7, #4]
200000f8:	60da      	str	r2, [r3, #12]
	this->posY += this->dirY;
200000fa:	687b      	ldr	r3, [r7, #4]
200000fc:	691a      	ldr	r2, [r3, #16]
200000fe:	687b      	ldr	r3, [r7, #4]
20000100:	689b      	ldr	r3, [r3, #8]
20000102:	18d2      	adds	r2, r2, r3
20000104:	687b      	ldr	r3, [r7, #4]
20000106:	611a      	str	r2, [r3, #16]
	
	// Wall collisions
	if((this->posY < 0) ||  this->posY > 63 ) {
20000108:	687b      	ldr	r3, [r7, #4]
2000010a:	691b      	ldr	r3, [r3, #16]
2000010c:	2b00      	cmp	r3, #0
2000010e:	db03      	blt.n	20000118 <move_ball+0x3c>
20000110:	687b      	ldr	r3, [r7, #4]
20000112:	691b      	ldr	r3, [r3, #16]
20000114:	2b3f      	cmp	r3, #63	; 0x3f
20000116:	dd04      	ble.n	20000122 <move_ball+0x46>
		this->dirY = -this->dirY;
20000118:	687b      	ldr	r3, [r7, #4]
2000011a:	689b      	ldr	r3, [r3, #8]
2000011c:	425a      	negs	r2, r3
2000011e:	687b      	ldr	r3, [r7, #4]
20000120:	609a      	str	r2, [r3, #8]
	}
	
	// Define left and right paddle
	POBJECT lp = &leftPaddle;
20000122:	4b23      	ldr	r3, [pc, #140]	; (200001b0 <move_ball+0xd4>)
20000124:	60fb      	str	r3, [r7, #12]
	POBJECT rp = &rightPaddle;
20000126:	4b23      	ldr	r3, [pc, #140]	; (200001b4 <move_ball+0xd8>)
20000128:	60bb      	str	r3, [r7, #8]
	
	//For left paddle
	if(this->posX <= lp->posX + lp->geo->sizeX) {
2000012a:	687b      	ldr	r3, [r7, #4]
2000012c:	68da      	ldr	r2, [r3, #12]
2000012e:	68fb      	ldr	r3, [r7, #12]
20000130:	68d9      	ldr	r1, [r3, #12]
20000132:	68fb      	ldr	r3, [r7, #12]
20000134:	681b      	ldr	r3, [r3, #0]
20000136:	685b      	ldr	r3, [r3, #4]
20000138:	18cb      	adds	r3, r1, r3
2000013a:	429a      	cmp	r2, r3
2000013c:	dc14      	bgt.n	20000168 <move_ball+0x8c>
		if((this->posY >= lp->posY) && (this->posY <= lp->posY + lp->geo->sizeY)) {
2000013e:	687b      	ldr	r3, [r7, #4]
20000140:	691a      	ldr	r2, [r3, #16]
20000142:	68fb      	ldr	r3, [r7, #12]
20000144:	691b      	ldr	r3, [r3, #16]
20000146:	429a      	cmp	r2, r3
20000148:	db0e      	blt.n	20000168 <move_ball+0x8c>
2000014a:	687b      	ldr	r3, [r7, #4]
2000014c:	691a      	ldr	r2, [r3, #16]
2000014e:	68fb      	ldr	r3, [r7, #12]
20000150:	6919      	ldr	r1, [r3, #16]
20000152:	68fb      	ldr	r3, [r7, #12]
20000154:	681b      	ldr	r3, [r3, #0]
20000156:	689b      	ldr	r3, [r3, #8]
20000158:	18cb      	adds	r3, r1, r3
2000015a:	429a      	cmp	r2, r3
2000015c:	dc04      	bgt.n	20000168 <move_ball+0x8c>
			this->dirX = -this->dirX;
2000015e:	687b      	ldr	r3, [r7, #4]
20000160:	685b      	ldr	r3, [r3, #4]
20000162:	425a      	negs	r2, r3
20000164:	687b      	ldr	r3, [r7, #4]
20000166:	605a      	str	r2, [r3, #4]
			// Left player lost
		}
	}
	
	//For right paddle
	if(this->posX >= rp->posX) {
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	68da      	ldr	r2, [r3, #12]
2000016c:	68bb      	ldr	r3, [r7, #8]
2000016e:	68db      	ldr	r3, [r3, #12]
20000170:	429a      	cmp	r2, r3
20000172:	db14      	blt.n	2000019e <move_ball+0xc2>
		if((this->posY >= rp->posY) && (this->posY <= rp->posY + rp->geo->sizeY)) {
20000174:	687b      	ldr	r3, [r7, #4]
20000176:	691a      	ldr	r2, [r3, #16]
20000178:	68bb      	ldr	r3, [r7, #8]
2000017a:	691b      	ldr	r3, [r3, #16]
2000017c:	429a      	cmp	r2, r3
2000017e:	db0e      	blt.n	2000019e <move_ball+0xc2>
20000180:	687b      	ldr	r3, [r7, #4]
20000182:	691a      	ldr	r2, [r3, #16]
20000184:	68bb      	ldr	r3, [r7, #8]
20000186:	6919      	ldr	r1, [r3, #16]
20000188:	68bb      	ldr	r3, [r7, #8]
2000018a:	681b      	ldr	r3, [r3, #0]
2000018c:	689b      	ldr	r3, [r3, #8]
2000018e:	18cb      	adds	r3, r1, r3
20000190:	429a      	cmp	r2, r3
20000192:	dc04      	bgt.n	2000019e <move_ball+0xc2>
			this->dirX = -this->dirX;
20000194:	687b      	ldr	r3, [r7, #4]
20000196:	685b      	ldr	r3, [r3, #4]
20000198:	425a      	negs	r2, r3
2000019a:	687b      	ldr	r3, [r7, #4]
2000019c:	605a      	str	r2, [r3, #4]
		} else {
			// Right player lost
		}
	}
	
	this->draw(this);
2000019e:	687b      	ldr	r3, [r7, #4]
200001a0:	695b      	ldr	r3, [r3, #20]
200001a2:	687a      	ldr	r2, [r7, #4]
200001a4:	0010      	movs	r0, r2
200001a6:	4798      	blx	r3
200001a8:	46c0      	nop			; (mov r8, r8)
200001aa:	46bd      	mov	sp, r7
200001ac:	b004      	add	sp, #16
200001ae:	bd80      	pop	{r7, pc}
200001b0:	20000bec 	andcs	r0, r0, ip, ror #23
200001b4:	20000c10 	andcs	r0, r0, r0, lsl ip

200001b8 <graphics_ctrl_bit_set>:
#include "graphic.h"


typedef unsigned char uint8_t;

void graphics_ctrl_bit_set(uint8_t x){
200001b8:	b580      	push	{r7, lr}
200001ba:	b082      	sub	sp, #8
200001bc:	af00      	add	r7, sp, #0
200001be:	0002      	movs	r2, r0
200001c0:	1dfb      	adds	r3, r7, #7
200001c2:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW |= (x & ~B_SELECT);
200001c4:	4909      	ldr	r1, [pc, #36]	; (200001ec <graphics_ctrl_bit_set+0x34>)
200001c6:	4b09      	ldr	r3, [pc, #36]	; (200001ec <graphics_ctrl_bit_set+0x34>)
200001c8:	781b      	ldrb	r3, [r3, #0]
200001ca:	b2db      	uxtb	r3, r3
200001cc:	b25a      	sxtb	r2, r3
200001ce:	1dfb      	adds	r3, r7, #7
200001d0:	781b      	ldrb	r3, [r3, #0]
200001d2:	b25b      	sxtb	r3, r3
200001d4:	2004      	movs	r0, #4
200001d6:	4383      	bics	r3, r0
200001d8:	b25b      	sxtb	r3, r3
200001da:	4313      	orrs	r3, r2
200001dc:	b25b      	sxtb	r3, r3
200001de:	b2db      	uxtb	r3, r3
200001e0:	700b      	strb	r3, [r1, #0]
}
200001e2:	46c0      	nop			; (mov r8, r8)
200001e4:	46bd      	mov	sp, r7
200001e6:	b002      	add	sp, #8
200001e8:	bd80      	pop	{r7, pc}
200001ea:	46c0      	nop			; (mov r8, r8)
200001ec:	40021014 	andmi	r1, r2, r4, lsl r0

200001f0 <graphics_ctrl_bit_clear>:

void graphics_ctrl_bit_clear(uint8_t x){
200001f0:	b580      	push	{r7, lr}
200001f2:	b082      	sub	sp, #8
200001f4:	af00      	add	r7, sp, #0
200001f6:	0002      	movs	r2, r0
200001f8:	1dfb      	adds	r3, r7, #7
200001fa:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW &= ~x;
200001fc:	4908      	ldr	r1, [pc, #32]	; (20000220 <graphics_ctrl_bit_clear+0x30>)
200001fe:	4b08      	ldr	r3, [pc, #32]	; (20000220 <graphics_ctrl_bit_clear+0x30>)
20000200:	781b      	ldrb	r3, [r3, #0]
20000202:	b2db      	uxtb	r3, r3
20000204:	b25b      	sxtb	r3, r3
20000206:	1dfa      	adds	r2, r7, #7
20000208:	7812      	ldrb	r2, [r2, #0]
2000020a:	b252      	sxtb	r2, r2
2000020c:	43d2      	mvns	r2, r2
2000020e:	b252      	sxtb	r2, r2
20000210:	4013      	ands	r3, r2
20000212:	b25b      	sxtb	r3, r3
20000214:	b2db      	uxtb	r3, r3
20000216:	700b      	strb	r3, [r1, #0]
}
20000218:	46c0      	nop			; (mov r8, r8)
2000021a:	46bd      	mov	sp, r7
2000021c:	b002      	add	sp, #8
2000021e:	bd80      	pop	{r7, pc}
20000220:	40021014 	andmi	r1, r2, r4, lsl r0

20000224 <select_controller>:

void select_controller(uint8_t controller){
20000224:	b580      	push	{r7, lr}
20000226:	b082      	sub	sp, #8
20000228:	af00      	add	r7, sp, #0
2000022a:	0002      	movs	r2, r0
2000022c:	1dfb      	adds	r3, r7, #7
2000022e:	701a      	strb	r2, [r3, #0]
    if(controller == 0) {
20000230:	1dfb      	adds	r3, r7, #7
20000232:	781b      	ldrb	r3, [r3, #0]
20000234:	2b00      	cmp	r3, #0
20000236:	d106      	bne.n	20000246 <select_controller+0x22>
        graphics_ctrl_bit_clear(B_CS1);
20000238:	2008      	movs	r0, #8
2000023a:	f7ff ffd9 	bl	200001f0 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
2000023e:	2010      	movs	r0, #16
20000240:	f7ff ffd6 	bl	200001f0 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_clear(B_CS2);
    } else if(controller == B_CS2) {
        graphics_ctrl_bit_clear(B_CS1);
        graphics_ctrl_bit_set(B_CS2);
    }
}
20000244:	e01f      	b.n	20000286 <select_controller+0x62>
    } else if(controller == (B_CS1 | B_CS2)) {
20000246:	1dfb      	adds	r3, r7, #7
20000248:	781b      	ldrb	r3, [r3, #0]
2000024a:	2b18      	cmp	r3, #24
2000024c:	d106      	bne.n	2000025c <select_controller+0x38>
        graphics_ctrl_bit_set(B_CS1);
2000024e:	2008      	movs	r0, #8
20000250:	f7ff ffb2 	bl	200001b8 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_set(B_CS2);
20000254:	2010      	movs	r0, #16
20000256:	f7ff ffaf 	bl	200001b8 <graphics_ctrl_bit_set>
}
2000025a:	e014      	b.n	20000286 <select_controller+0x62>
    } else if(controller == B_CS1) {
2000025c:	1dfb      	adds	r3, r7, #7
2000025e:	781b      	ldrb	r3, [r3, #0]
20000260:	2b08      	cmp	r3, #8
20000262:	d106      	bne.n	20000272 <select_controller+0x4e>
        graphics_ctrl_bit_set(B_CS1);
20000264:	2008      	movs	r0, #8
20000266:	f7ff ffa7 	bl	200001b8 <graphics_ctrl_bit_set>
        graphics_ctrl_bit_clear(B_CS2);
2000026a:	2010      	movs	r0, #16
2000026c:	f7ff ffc0 	bl	200001f0 <graphics_ctrl_bit_clear>
}
20000270:	e009      	b.n	20000286 <select_controller+0x62>
    } else if(controller == B_CS2) {
20000272:	1dfb      	adds	r3, r7, #7
20000274:	781b      	ldrb	r3, [r3, #0]
20000276:	2b10      	cmp	r3, #16
20000278:	d105      	bne.n	20000286 <select_controller+0x62>
        graphics_ctrl_bit_clear(B_CS1);
2000027a:	2008      	movs	r0, #8
2000027c:	f7ff ffb8 	bl	200001f0 <graphics_ctrl_bit_clear>
        graphics_ctrl_bit_set(B_CS2);
20000280:	2010      	movs	r0, #16
20000282:	f7ff ff99 	bl	200001b8 <graphics_ctrl_bit_set>
}
20000286:	46c0      	nop			; (mov r8, r8)
20000288:	46bd      	mov	sp, r7
2000028a:	b002      	add	sp, #8
2000028c:	bd80      	pop	{r7, pc}

2000028e <graphic_wait_ready>:

void graphic_wait_ready(){
2000028e:	b580      	push	{r7, lr}
20000290:	b082      	sub	sp, #8
20000292:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_clear(B_E);
20000294:	2040      	movs	r0, #64	; 0x40
20000296:	f7ff ffab 	bl	200001f0 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
2000029a:	4b15      	ldr	r3, [pc, #84]	; (200002f0 <graphic_wait_ready+0x62>)
2000029c:	4a15      	ldr	r2, [pc, #84]	; (200002f4 <graphic_wait_ready+0x66>)
2000029e:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_RS);
200002a0:	2001      	movs	r0, #1
200002a2:	f7ff ffa5 	bl	200001f0 <graphics_ctrl_bit_clear>
    graphics_ctrl_bit_set(B_RW);
200002a6:	2002      	movs	r0, #2
200002a8:	f7ff ff86 	bl	200001b8 <graphics_ctrl_bit_set>
    delay_500ns();
200002ac:	f000 fae1 	bl	20000872 <delay_500ns>
    
    while(1) { // Wait for display not to be busy
        graphics_ctrl_bit_set(B_E);
200002b0:	2040      	movs	r0, #64	; 0x40
200002b2:	f7ff ff81 	bl	200001b8 <graphics_ctrl_bit_set>
        delay_500ns();
200002b6:	f000 fadc 	bl	20000872 <delay_500ns>
		unsigned char busy = *GPIO_E_IDR_HIGH;
200002ba:	4a0f      	ldr	r2, [pc, #60]	; (200002f8 <graphic_wait_ready+0x6a>)
200002bc:	1dfb      	adds	r3, r7, #7
200002be:	7812      	ldrb	r2, [r2, #0]
200002c0:	701a      	strb	r2, [r3, #0]
        graphics_ctrl_bit_clear(B_E);
200002c2:	2040      	movs	r0, #64	; 0x40
200002c4:	f7ff ff94 	bl	200001f0 <graphics_ctrl_bit_clear>
        delay_500ns();
200002c8:	f000 fad3 	bl	20000872 <delay_500ns>
        //unsigned char i = *GPIO_IDR_HIGH;
        if((busy & LCD_BUSY) == 0) {
200002cc:	1dfb      	adds	r3, r7, #7
200002ce:	781b      	ldrb	r3, [r3, #0]
200002d0:	b25b      	sxtb	r3, r3
200002d2:	2b00      	cmp	r3, #0
200002d4:	da00      	bge.n	200002d8 <graphic_wait_ready+0x4a>
    while(1) { // Wait for display not to be busy
200002d6:	e7eb      	b.n	200002b0 <graphic_wait_ready+0x22>
            break;
200002d8:	46c0      	nop			; (mov r8, r8)
        }
    }
    graphics_ctrl_bit_set(B_E);
200002da:	2040      	movs	r0, #64	; 0x40
200002dc:	f7ff ff6c 	bl	200001b8 <graphics_ctrl_bit_set>
    *GPIO_E_MODER = 0x55555555;
200002e0:	4b03      	ldr	r3, [pc, #12]	; (200002f0 <graphic_wait_ready+0x62>)
200002e2:	4a06      	ldr	r2, [pc, #24]	; (200002fc <graphic_wait_ready+0x6e>)
200002e4:	601a      	str	r2, [r3, #0]
    
}
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	40021000 	andmi	r1, r2, r0
200002f4:	00005555 	andeq	r5, r0, r5, asr r5
200002f8:	40021011 	andmi	r1, r2, r1, lsl r0
200002fc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000300 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000300:	b580      	push	{r7, lr}
20000302:	b084      	sub	sp, #16
20000304:	af00      	add	r7, sp, #0
20000306:	0002      	movs	r2, r0
20000308:	1dfb      	adds	r3, r7, #7
2000030a:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
2000030c:	2040      	movs	r0, #64	; 0x40
2000030e:	f7ff ff6f 	bl	200001f0 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x00005555;
20000312:	4b1b      	ldr	r3, [pc, #108]	; (20000380 <graphic_read+0x80>)
20000314:	4a1b      	ldr	r2, [pc, #108]	; (20000384 <graphic_read+0x84>)
20000316:	601a      	str	r2, [r3, #0]
    graphics_ctrl_bit_set(B_RS | B_RW);
20000318:	2003      	movs	r0, #3
2000031a:	f7ff ff4d 	bl	200001b8 <graphics_ctrl_bit_set>
    select_controller(controller);
2000031e:	1dfb      	adds	r3, r7, #7
20000320:	781b      	ldrb	r3, [r3, #0]
20000322:	0018      	movs	r0, r3
20000324:	f7ff ff7e 	bl	20000224 <select_controller>
    delay_500ns();
20000328:	f000 faa3 	bl	20000872 <delay_500ns>
    graphics_ctrl_bit_set(B_E);
2000032c:	2040      	movs	r0, #64	; 0x40
2000032e:	f7ff ff43 	bl	200001b8 <graphics_ctrl_bit_set>
    delay_500ns();
20000332:	f000 fa9e 	bl	20000872 <delay_500ns>
    
    uint8_t RV = *GPIO_E_IDR_HIGH;
20000336:	4a14      	ldr	r2, [pc, #80]	; (20000388 <graphic_read+0x88>)
20000338:	230f      	movs	r3, #15
2000033a:	18fb      	adds	r3, r7, r3
2000033c:	7812      	ldrb	r2, [r2, #0]
2000033e:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
20000340:	2040      	movs	r0, #64	; 0x40
20000342:	f7ff ff55 	bl	200001f0 <graphics_ctrl_bit_clear>
    *GPIO_E_MODER = 0x55555555;
20000346:	4b0e      	ldr	r3, [pc, #56]	; (20000380 <graphic_read+0x80>)
20000348:	4a10      	ldr	r2, [pc, #64]	; (2000038c <graphic_read+0x8c>)
2000034a:	601a      	str	r2, [r3, #0]
    
    if(controller == B_CS1){
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	781b      	ldrb	r3, [r3, #0]
20000350:	2b08      	cmp	r3, #8
20000352:	d104      	bne.n	2000035e <graphic_read+0x5e>
        select_controller(B_CS1);
20000354:	2008      	movs	r0, #8
20000356:	f7ff ff65 	bl	20000224 <select_controller>
        graphic_wait_ready();
2000035a:	f7ff ff98 	bl	2000028e <graphic_wait_ready>
    }
    
    if(controller == B_CS2){
2000035e:	1dfb      	adds	r3, r7, #7
20000360:	781b      	ldrb	r3, [r3, #0]
20000362:	2b10      	cmp	r3, #16
20000364:	d104      	bne.n	20000370 <graphic_read+0x70>
        select_controller(B_CS2);
20000366:	2010      	movs	r0, #16
20000368:	f7ff ff5c 	bl	20000224 <select_controller>
        graphic_wait_ready();
2000036c:	f7ff ff8f 	bl	2000028e <graphic_wait_ready>
    }
    
    return RV;
20000370:	230f      	movs	r3, #15
20000372:	18fb      	adds	r3, r7, r3
20000374:	781b      	ldrb	r3, [r3, #0]
    
}
20000376:	0018      	movs	r0, r3
20000378:	46bd      	mov	sp, r7
2000037a:	b004      	add	sp, #16
2000037c:	bd80      	pop	{r7, pc}
2000037e:	46c0      	nop			; (mov r8, r8)
20000380:	40021000 	andmi	r1, r2, r0
20000384:	00005555 	andeq	r5, r0, r5, asr r5
20000388:	40021011 	andmi	r1, r2, r1, lsl r0
2000038c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000390 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000390:	b580      	push	{r7, lr}
20000392:	b082      	sub	sp, #8
20000394:	af00      	add	r7, sp, #0
20000396:	0002      	movs	r2, r0
20000398:	1dfb      	adds	r3, r7, #7
2000039a:	701a      	strb	r2, [r3, #0]
2000039c:	1dbb      	adds	r3, r7, #6
2000039e:	1c0a      	adds	r2, r1, #0
200003a0:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_HIGH = value;
200003a2:	4a1a      	ldr	r2, [pc, #104]	; (2000040c <graphic_write+0x7c>)
200003a4:	1dfb      	adds	r3, r7, #7
200003a6:	781b      	ldrb	r3, [r3, #0]
200003a8:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
200003aa:	1dbb      	adds	r3, r7, #6
200003ac:	781b      	ldrb	r3, [r3, #0]
200003ae:	0018      	movs	r0, r3
200003b0:	f7ff ff38 	bl	20000224 <select_controller>
    delay_500ns();
200003b4:	f000 fa5d 	bl	20000872 <delay_500ns>
    graphics_ctrl_bit_set(B_E);
200003b8:	2040      	movs	r0, #64	; 0x40
200003ba:	f7ff fefd 	bl	200001b8 <graphics_ctrl_bit_set>
    delay_500ns();
200003be:	f000 fa58 	bl	20000872 <delay_500ns>
    graphics_ctrl_bit_clear(B_E);
200003c2:	2040      	movs	r0, #64	; 0x40
200003c4:	f7ff ff14 	bl	200001f0 <graphics_ctrl_bit_clear>
    
    if(controller & B_CS1){
200003c8:	1dbb      	adds	r3, r7, #6
200003ca:	781b      	ldrb	r3, [r3, #0]
200003cc:	2208      	movs	r2, #8
200003ce:	4013      	ands	r3, r2
200003d0:	d004      	beq.n	200003dc <graphic_write+0x4c>
        select_controller(B_CS1);
200003d2:	2008      	movs	r0, #8
200003d4:	f7ff ff26 	bl	20000224 <select_controller>
        graphic_wait_ready();
200003d8:	f7ff ff59 	bl	2000028e <graphic_wait_ready>
    }
    
    if(controller & B_CS2){
200003dc:	1dbb      	adds	r3, r7, #6
200003de:	781b      	ldrb	r3, [r3, #0]
200003e0:	2210      	movs	r2, #16
200003e2:	4013      	ands	r3, r2
200003e4:	d004      	beq.n	200003f0 <graphic_write+0x60>
        select_controller(B_CS2);
200003e6:	2010      	movs	r0, #16
200003e8:	f7ff ff1c 	bl	20000224 <select_controller>
        graphic_wait_ready();
200003ec:	f7ff ff4f 	bl	2000028e <graphic_wait_ready>
    }
    
    *GPIO_E_ODR_HIGH = 0;
200003f0:	4b06      	ldr	r3, [pc, #24]	; (2000040c <graphic_write+0x7c>)
200003f2:	2200      	movs	r2, #0
200003f4:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_set(B_E);
200003f6:	2040      	movs	r0, #64	; 0x40
200003f8:	f7ff fede 	bl	200001b8 <graphics_ctrl_bit_set>
    select_controller(0);
200003fc:	2000      	movs	r0, #0
200003fe:	f7ff ff11 	bl	20000224 <select_controller>
}
20000402:	46c0      	nop			; (mov r8, r8)
20000404:	46bd      	mov	sp, r7
20000406:	b002      	add	sp, #8
20000408:	bd80      	pop	{r7, pc}
2000040a:	46c0      	nop			; (mov r8, r8)
2000040c:	40021015 	andmi	r1, r2, r5, lsl r0

20000410 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000410:	b580      	push	{r7, lr}
20000412:	b082      	sub	sp, #8
20000414:	af00      	add	r7, sp, #0
20000416:	0002      	movs	r2, r0
20000418:	1dfb      	adds	r3, r7, #7
2000041a:	701a      	strb	r2, [r3, #0]
2000041c:	1dbb      	adds	r3, r7, #6
2000041e:	1c0a      	adds	r2, r1, #0
20000420:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
20000422:	2040      	movs	r0, #64	; 0x40
20000424:	f7ff fee4 	bl	200001f0 <graphics_ctrl_bit_clear>
    select_controller(controller);
20000428:	1dbb      	adds	r3, r7, #6
2000042a:	781b      	ldrb	r3, [r3, #0]
2000042c:	0018      	movs	r0, r3
2000042e:	f7ff fef9 	bl	20000224 <select_controller>
    graphics_ctrl_bit_clear(B_RS | B_RW);
20000432:	2003      	movs	r0, #3
20000434:	f7ff fedc 	bl	200001f0 <graphics_ctrl_bit_clear>
    graphic_write(command, controller);
20000438:	1dbb      	adds	r3, r7, #6
2000043a:	781a      	ldrb	r2, [r3, #0]
2000043c:	1dfb      	adds	r3, r7, #7
2000043e:	781b      	ldrb	r3, [r3, #0]
20000440:	0011      	movs	r1, r2
20000442:	0018      	movs	r0, r3
20000444:	f7ff ffa4 	bl	20000390 <graphic_write>
}
20000448:	46c0      	nop			; (mov r8, r8)
2000044a:	46bd      	mov	sp, r7
2000044c:	b002      	add	sp, #8
2000044e:	bd80      	pop	{r7, pc}

20000450 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000450:	b580      	push	{r7, lr}
20000452:	b082      	sub	sp, #8
20000454:	af00      	add	r7, sp, #0
20000456:	0002      	movs	r2, r0
20000458:	1dfb      	adds	r3, r7, #7
2000045a:	701a      	strb	r2, [r3, #0]
2000045c:	1dbb      	adds	r3, r7, #6
2000045e:	1c0a      	adds	r2, r1, #0
20000460:	701a      	strb	r2, [r3, #0]
    graphics_ctrl_bit_clear(B_E);
20000462:	2040      	movs	r0, #64	; 0x40
20000464:	f7ff fec4 	bl	200001f0 <graphics_ctrl_bit_clear>
    select_controller(controller);
20000468:	1dbb      	adds	r3, r7, #6
2000046a:	781b      	ldrb	r3, [r3, #0]
2000046c:	0018      	movs	r0, r3
2000046e:	f7ff fed9 	bl	20000224 <select_controller>
    graphics_ctrl_bit_set(B_RS);
20000472:	2001      	movs	r0, #1
20000474:	f7ff fea0 	bl	200001b8 <graphics_ctrl_bit_set>
    graphics_ctrl_bit_clear(B_RW);
20000478:	2002      	movs	r0, #2
2000047a:	f7ff feb9 	bl	200001f0 <graphics_ctrl_bit_clear>
    graphic_write(data, controller);
2000047e:	1dbb      	adds	r3, r7, #6
20000480:	781a      	ldrb	r2, [r3, #0]
20000482:	1dfb      	adds	r3, r7, #7
20000484:	781b      	ldrb	r3, [r3, #0]
20000486:	0011      	movs	r1, r2
20000488:	0018      	movs	r0, r3
2000048a:	f7ff ff81 	bl	20000390 <graphic_write>
}
2000048e:	46c0      	nop			; (mov r8, r8)
20000490:	46bd      	mov	sp, r7
20000492:	b002      	add	sp, #8
20000494:	bd80      	pop	{r7, pc}

20000496 <graphics_read_data>:

uint8_t graphics_read_data(uint8_t controller){
20000496:	b580      	push	{r7, lr}
20000498:	b082      	sub	sp, #8
2000049a:	af00      	add	r7, sp, #0
2000049c:	0002      	movs	r2, r0
2000049e:	1dfb      	adds	r3, r7, #7
200004a0:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
200004a2:	1dfb      	adds	r3, r7, #7
200004a4:	781b      	ldrb	r3, [r3, #0]
200004a6:	0018      	movs	r0, r3
200004a8:	f7ff ff2a 	bl	20000300 <graphic_read>
    return graphic_read(controller);
200004ac:	1dfb      	adds	r3, r7, #7
200004ae:	781b      	ldrb	r3, [r3, #0]
200004b0:	0018      	movs	r0, r3
200004b2:	f7ff ff25 	bl	20000300 <graphic_read>
200004b6:	0003      	movs	r3, r0
}
200004b8:	0018      	movs	r0, r3
200004ba:	46bd      	mov	sp, r7
200004bc:	b002      	add	sp, #8
200004be:	bd80      	pop	{r7, pc}

200004c0 <graphic_initialize>:

void graphic_initialize(void){
200004c0:	b580      	push	{r7, lr}
200004c2:	af00      	add	r7, sp, #0
    graphics_ctrl_bit_set(B_E);
200004c4:	2040      	movs	r0, #64	; 0x40
200004c6:	f7ff fe77 	bl	200001b8 <graphics_ctrl_bit_set>
    graphics_ctrl_bit_set(B_SELECT);
200004ca:	2004      	movs	r0, #4
200004cc:	f7ff fe74 	bl	200001b8 <graphics_ctrl_bit_set>
    delay_micro(10);
200004d0:	200a      	movs	r0, #10
200004d2:	f000 f9a9 	bl	20000828 <delay_micro>
    graphics_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200004d6:	2078      	movs	r0, #120	; 0x78
200004d8:	f7ff fe8a 	bl	200001f0 <graphics_ctrl_bit_clear>
    delay_milli(30);
200004dc:	201e      	movs	r0, #30
200004de:	f000 f9b9 	bl	20000854 <delay_milli>
    graphics_ctrl_bit_set(B_RST);
200004e2:	2020      	movs	r0, #32
200004e4:	f7ff fe68 	bl	200001b8 <graphics_ctrl_bit_set>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);
200004e8:	2118      	movs	r1, #24
200004ea:	203e      	movs	r0, #62	; 0x3e
200004ec:	f7ff ff90 	bl	20000410 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);
200004f0:	2118      	movs	r1, #24
200004f2:	203f      	movs	r0, #63	; 0x3f
200004f4:	f7ff ff8c 	bl	20000410 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
200004f8:	2118      	movs	r1, #24
200004fa:	20c0      	movs	r0, #192	; 0xc0
200004fc:	f7ff ff88 	bl	20000410 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000500:	2118      	movs	r1, #24
20000502:	2040      	movs	r0, #64	; 0x40
20000504:	f7ff ff84 	bl	20000410 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000508:	2118      	movs	r1, #24
2000050a:	20b8      	movs	r0, #184	; 0xb8
2000050c:	f7ff ff80 	bl	20000410 <graphic_write_command>
    select_controller(0);
20000510:	2000      	movs	r0, #0
20000512:	f7ff fe87 	bl	20000224 <select_controller>
}
20000516:	46c0      	nop			; (mov r8, r8)
20000518:	46bd      	mov	sp, r7
2000051a:	bd80      	pop	{r7, pc}

2000051c <graphic_clear_screen>:

void graphic_clear_screen(void){
2000051c:	b580      	push	{r7, lr}
2000051e:	b082      	sub	sp, #8
20000520:	af00      	add	r7, sp, #0
    for(int page = 0; page < PAGE; page++){
20000522:	2300      	movs	r3, #0
20000524:	607b      	str	r3, [r7, #4]
20000526:	e01e      	b.n	20000566 <graphic_clear_screen+0x4a>
        graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20000528:	687b      	ldr	r3, [r7, #4]
2000052a:	b25b      	sxtb	r3, r3
2000052c:	2248      	movs	r2, #72	; 0x48
2000052e:	4252      	negs	r2, r2
20000530:	4313      	orrs	r3, r2
20000532:	b25b      	sxtb	r3, r3
20000534:	b2db      	uxtb	r3, r3
20000536:	2118      	movs	r1, #24
20000538:	0018      	movs	r0, r3
2000053a:	f7ff ff69 	bl	20000410 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
2000053e:	2118      	movs	r1, #24
20000540:	2040      	movs	r0, #64	; 0x40
20000542:	f7ff ff65 	bl	20000410 <graphic_write_command>
        for(int add = 0; add < ADD; add++){
20000546:	2300      	movs	r3, #0
20000548:	603b      	str	r3, [r7, #0]
2000054a:	e006      	b.n	2000055a <graphic_clear_screen+0x3e>
            graphic_write_data(0, B_CS1|B_CS2);
2000054c:	2118      	movs	r1, #24
2000054e:	2000      	movs	r0, #0
20000550:	f7ff ff7e 	bl	20000450 <graphic_write_data>
        for(int add = 0; add < ADD; add++){
20000554:	683b      	ldr	r3, [r7, #0]
20000556:	3301      	adds	r3, #1
20000558:	603b      	str	r3, [r7, #0]
2000055a:	683b      	ldr	r3, [r7, #0]
2000055c:	2b3e      	cmp	r3, #62	; 0x3e
2000055e:	ddf5      	ble.n	2000054c <graphic_clear_screen+0x30>
    for(int page = 0; page < PAGE; page++){
20000560:	687b      	ldr	r3, [r7, #4]
20000562:	3301      	adds	r3, #1
20000564:	607b      	str	r3, [r7, #4]
20000566:	687b      	ldr	r3, [r7, #4]
20000568:	2b07      	cmp	r3, #7
2000056a:	dddd      	ble.n	20000528 <graphic_clear_screen+0xc>
        }
    }
    
}
2000056c:	46c0      	nop			; (mov r8, r8)
2000056e:	46bd      	mov	sp, r7
20000570:	b002      	add	sp, #8
20000572:	bd80      	pop	{r7, pc}

20000574 <pixel>:


void pixel(unsigned char x, unsigned char y, unsigned char set) {
20000574:	b590      	push	{r4, r7, lr}
20000576:	b085      	sub	sp, #20
20000578:	af00      	add	r7, sp, #0
2000057a:	0004      	movs	r4, r0
2000057c:	0008      	movs	r0, r1
2000057e:	0011      	movs	r1, r2
20000580:	1dfb      	adds	r3, r7, #7
20000582:	1c22      	adds	r2, r4, #0
20000584:	701a      	strb	r2, [r3, #0]
20000586:	1dbb      	adds	r3, r7, #6
20000588:	1c02      	adds	r2, r0, #0
2000058a:	701a      	strb	r2, [r3, #0]
2000058c:	1d7b      	adds	r3, r7, #5
2000058e:	1c0a      	adds	r2, r1, #0
20000590:	701a      	strb	r2, [r3, #0]
	if(x < 0 || y < 0) return;
	if(x > 127 || y > 63) return;
20000592:	1dfb      	adds	r3, r7, #7
20000594:	781b      	ldrb	r3, [r3, #0]
20000596:	b25b      	sxtb	r3, r3
20000598:	2b00      	cmp	r3, #0
2000059a:	da00      	bge.n	2000059e <pixel+0x2a>
2000059c:	e0ae      	b.n	200006fc <pixel+0x188>
2000059e:	1dbb      	adds	r3, r7, #6
200005a0:	781b      	ldrb	r3, [r3, #0]
200005a2:	2b3f      	cmp	r3, #63	; 0x3f
200005a4:	d900      	bls.n	200005a8 <pixel+0x34>
200005a6:	e0a9      	b.n	200006fc <pixel+0x188>
	unsigned char mask;
	unsigned char index = y / 8;
200005a8:	230d      	movs	r3, #13
200005aa:	18fb      	adds	r3, r7, r3
200005ac:	1dba      	adds	r2, r7, #6
200005ae:	7812      	ldrb	r2, [r2, #0]
200005b0:	08d2      	lsrs	r2, r2, #3
200005b2:	701a      	strb	r2, [r3, #0]
	
	switch(y % 8) {
200005b4:	1dbb      	adds	r3, r7, #6
200005b6:	781b      	ldrb	r3, [r3, #0]
200005b8:	2207      	movs	r2, #7
200005ba:	4013      	ands	r3, r2
200005bc:	2b07      	cmp	r3, #7
200005be:	d82c      	bhi.n	2000061a <pixel+0xa6>
200005c0:	009a      	lsls	r2, r3, #2
200005c2:	4b50      	ldr	r3, [pc, #320]	; (20000704 <pixel+0x190>)
200005c4:	18d3      	adds	r3, r2, r3
200005c6:	681b      	ldr	r3, [r3, #0]
200005c8:	469f      	mov	pc, r3
		case 0: mask = 1; break;
200005ca:	230f      	movs	r3, #15
200005cc:	18fb      	adds	r3, r7, r3
200005ce:	2201      	movs	r2, #1
200005d0:	701a      	strb	r2, [r3, #0]
200005d2:	e022      	b.n	2000061a <pixel+0xa6>
		case 1: mask = 2; break;
200005d4:	230f      	movs	r3, #15
200005d6:	18fb      	adds	r3, r7, r3
200005d8:	2202      	movs	r2, #2
200005da:	701a      	strb	r2, [r3, #0]
200005dc:	e01d      	b.n	2000061a <pixel+0xa6>
		case 2: mask = 4; break;
200005de:	230f      	movs	r3, #15
200005e0:	18fb      	adds	r3, r7, r3
200005e2:	2204      	movs	r2, #4
200005e4:	701a      	strb	r2, [r3, #0]
200005e6:	e018      	b.n	2000061a <pixel+0xa6>
		case 3: mask = 8; break;
200005e8:	230f      	movs	r3, #15
200005ea:	18fb      	adds	r3, r7, r3
200005ec:	2208      	movs	r2, #8
200005ee:	701a      	strb	r2, [r3, #0]
200005f0:	e013      	b.n	2000061a <pixel+0xa6>
		case 4: mask = 16; break;
200005f2:	230f      	movs	r3, #15
200005f4:	18fb      	adds	r3, r7, r3
200005f6:	2210      	movs	r2, #16
200005f8:	701a      	strb	r2, [r3, #0]
200005fa:	e00e      	b.n	2000061a <pixel+0xa6>
		case 5: mask = 32; break;
200005fc:	230f      	movs	r3, #15
200005fe:	18fb      	adds	r3, r7, r3
20000600:	2220      	movs	r2, #32
20000602:	701a      	strb	r2, [r3, #0]
20000604:	e009      	b.n	2000061a <pixel+0xa6>
		case 6: mask = 64; break;
20000606:	230f      	movs	r3, #15
20000608:	18fb      	adds	r3, r7, r3
2000060a:	2240      	movs	r2, #64	; 0x40
2000060c:	701a      	strb	r2, [r3, #0]
2000060e:	e004      	b.n	2000061a <pixel+0xa6>
		case 7: mask = 128; break;
20000610:	230f      	movs	r3, #15
20000612:	18fb      	adds	r3, r7, r3
20000614:	2280      	movs	r2, #128	; 0x80
20000616:	701a      	strb	r2, [r3, #0]
20000618:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0) {
2000061a:	1d7b      	adds	r3, r7, #5
2000061c:	781b      	ldrb	r3, [r3, #0]
2000061e:	2b00      	cmp	r3, #0
20000620:	d106      	bne.n	20000630 <pixel+0xbc>
		mask = ~mask;
20000622:	230f      	movs	r3, #15
20000624:	18fb      	adds	r3, r7, r3
20000626:	220f      	movs	r2, #15
20000628:	18ba      	adds	r2, r7, r2
2000062a:	7812      	ldrb	r2, [r2, #0]
2000062c:	43d2      	mvns	r2, r2
2000062e:	701a      	strb	r2, [r3, #0]
	}
	
	unsigned char controller;
	if(x > 63) {
20000630:	1dfb      	adds	r3, r7, #7
20000632:	781b      	ldrb	r3, [r3, #0]
20000634:	2b3f      	cmp	r3, #63	; 0x3f
20000636:	d909      	bls.n	2000064c <pixel+0xd8>
		controller = B_CS2;
20000638:	230e      	movs	r3, #14
2000063a:	18fb      	adds	r3, r7, r3
2000063c:	2210      	movs	r2, #16
2000063e:	701a      	strb	r2, [r3, #0]
		x = x - 64;
20000640:	1dfb      	adds	r3, r7, #7
20000642:	1dfa      	adds	r2, r7, #7
20000644:	7812      	ldrb	r2, [r2, #0]
20000646:	3a40      	subs	r2, #64	; 0x40
20000648:	701a      	strb	r2, [r3, #0]
2000064a:	e003      	b.n	20000654 <pixel+0xe0>
	} else {
		controller = B_CS1;
2000064c:	230e      	movs	r3, #14
2000064e:	18fb      	adds	r3, r7, r3
20000650:	2208      	movs	r2, #8
20000652:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x, controller);
20000654:	1dfb      	adds	r3, r7, #7
20000656:	781b      	ldrb	r3, [r3, #0]
20000658:	2240      	movs	r2, #64	; 0x40
2000065a:	4313      	orrs	r3, r2
2000065c:	b2da      	uxtb	r2, r3
2000065e:	230e      	movs	r3, #14
20000660:	18fb      	adds	r3, r7, r3
20000662:	781b      	ldrb	r3, [r3, #0]
20000664:	0019      	movs	r1, r3
20000666:	0010      	movs	r0, r2
20000668:	f7ff fed2 	bl	20000410 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
2000066c:	230d      	movs	r3, #13
2000066e:	18fb      	adds	r3, r7, r3
20000670:	781b      	ldrb	r3, [r3, #0]
20000672:	2248      	movs	r2, #72	; 0x48
20000674:	4252      	negs	r2, r2
20000676:	4313      	orrs	r3, r2
20000678:	b2da      	uxtb	r2, r3
2000067a:	230e      	movs	r3, #14
2000067c:	18fb      	adds	r3, r7, r3
2000067e:	781b      	ldrb	r3, [r3, #0]
20000680:	0019      	movs	r1, r3
20000682:	0010      	movs	r0, r2
20000684:	f7ff fec4 	bl	20000410 <graphic_write_command>
	unsigned char temp = graphics_read_data(controller);
20000688:	230c      	movs	r3, #12
2000068a:	18fc      	adds	r4, r7, r3
2000068c:	230e      	movs	r3, #14
2000068e:	18fb      	adds	r3, r7, r3
20000690:	781b      	ldrb	r3, [r3, #0]
20000692:	0018      	movs	r0, r3
20000694:	f7ff feff 	bl	20000496 <graphics_read_data>
20000698:	0003      	movs	r3, r0
2000069a:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
2000069c:	1dfb      	adds	r3, r7, #7
2000069e:	781b      	ldrb	r3, [r3, #0]
200006a0:	2240      	movs	r2, #64	; 0x40
200006a2:	4313      	orrs	r3, r2
200006a4:	b2da      	uxtb	r2, r3
200006a6:	230e      	movs	r3, #14
200006a8:	18fb      	adds	r3, r7, r3
200006aa:	781b      	ldrb	r3, [r3, #0]
200006ac:	0019      	movs	r1, r3
200006ae:	0010      	movs	r0, r2
200006b0:	f7ff feae 	bl	20000410 <graphic_write_command>
	
	if(set) {
200006b4:	1d7b      	adds	r3, r7, #5
200006b6:	781b      	ldrb	r3, [r3, #0]
200006b8:	2b00      	cmp	r3, #0
200006ba:	d00a      	beq.n	200006d2 <pixel+0x15e>
		mask = mask | temp;
200006bc:	230f      	movs	r3, #15
200006be:	18fb      	adds	r3, r7, r3
200006c0:	220f      	movs	r2, #15
200006c2:	18b9      	adds	r1, r7, r2
200006c4:	220c      	movs	r2, #12
200006c6:	18ba      	adds	r2, r7, r2
200006c8:	7809      	ldrb	r1, [r1, #0]
200006ca:	7812      	ldrb	r2, [r2, #0]
200006cc:	430a      	orrs	r2, r1
200006ce:	701a      	strb	r2, [r3, #0]
200006d0:	e009      	b.n	200006e6 <pixel+0x172>
	} else {
		mask = mask & temp;
200006d2:	230f      	movs	r3, #15
200006d4:	18fb      	adds	r3, r7, r3
200006d6:	220f      	movs	r2, #15
200006d8:	18ba      	adds	r2, r7, r2
200006da:	210c      	movs	r1, #12
200006dc:	1879      	adds	r1, r7, r1
200006de:	7812      	ldrb	r2, [r2, #0]
200006e0:	7809      	ldrb	r1, [r1, #0]
200006e2:	400a      	ands	r2, r1
200006e4:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
200006e6:	230e      	movs	r3, #14
200006e8:	18fb      	adds	r3, r7, r3
200006ea:	781a      	ldrb	r2, [r3, #0]
200006ec:	230f      	movs	r3, #15
200006ee:	18fb      	adds	r3, r7, r3
200006f0:	781b      	ldrb	r3, [r3, #0]
200006f2:	0011      	movs	r1, r2
200006f4:	0018      	movs	r0, r3
200006f6:	f7ff feab 	bl	20000450 <graphic_write_data>
200006fa:	e000      	b.n	200006fe <pixel+0x18a>
	if(x > 127 || y > 63) return;
200006fc:	46c0      	nop			; (mov r8, r8)
	
}
200006fe:	46bd      	mov	sp, r7
20000700:	b005      	add	sp, #20
20000702:	bd90      	pop	{r4, r7, pc}
20000704:	20000c38 	andcs	r0, r0, r8, lsr ip

20000708 <draw_object>:
#include "object.h"
#include "graphic.h"

void draw_object(POBJECT this) {
20000708:	b580      	push	{r7, lr}
2000070a:	b084      	sub	sp, #16
2000070c:	af00      	add	r7, sp, #0
2000070e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
20000710:	2300      	movs	r3, #0
20000712:	60fb      	str	r3, [r7, #12]
20000714:	e020      	b.n	20000758 <draw_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 1);
20000716:	687b      	ldr	r3, [r7, #4]
20000718:	681a      	ldr	r2, [r3, #0]
2000071a:	68fb      	ldr	r3, [r7, #12]
2000071c:	3304      	adds	r3, #4
2000071e:	005b      	lsls	r3, r3, #1
20000720:	18d3      	adds	r3, r2, r3
20000722:	3304      	adds	r3, #4
20000724:	781a      	ldrb	r2, [r3, #0]
20000726:	687b      	ldr	r3, [r7, #4]
20000728:	68db      	ldr	r3, [r3, #12]
2000072a:	b2db      	uxtb	r3, r3
2000072c:	18d3      	adds	r3, r2, r3
2000072e:	b2d8      	uxtb	r0, r3
20000730:	687b      	ldr	r3, [r7, #4]
20000732:	681a      	ldr	r2, [r3, #0]
20000734:	68fb      	ldr	r3, [r7, #12]
20000736:	3304      	adds	r3, #4
20000738:	005b      	lsls	r3, r3, #1
2000073a:	18d3      	adds	r3, r2, r3
2000073c:	3305      	adds	r3, #5
2000073e:	781a      	ldrb	r2, [r3, #0]
20000740:	687b      	ldr	r3, [r7, #4]
20000742:	691b      	ldr	r3, [r3, #16]
20000744:	b2db      	uxtb	r3, r3
20000746:	18d3      	adds	r3, r2, r3
20000748:	b2db      	uxtb	r3, r3
2000074a:	2201      	movs	r2, #1
2000074c:	0019      	movs	r1, r3
2000074e:	f7ff ff11 	bl	20000574 <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
20000752:	68fb      	ldr	r3, [r7, #12]
20000754:	3301      	adds	r3, #1
20000756:	60fb      	str	r3, [r7, #12]
20000758:	68fb      	ldr	r3, [r7, #12]
2000075a:	2b63      	cmp	r3, #99	; 0x63
2000075c:	dddb      	ble.n	20000716 <draw_object+0xe>
	}
}
2000075e:	46c0      	nop			; (mov r8, r8)
20000760:	46bd      	mov	sp, r7
20000762:	b004      	add	sp, #16
20000764:	bd80      	pop	{r7, pc}

20000766 <clear_object>:
void clear_object(POBJECT this) {
20000766:	b580      	push	{r7, lr}
20000768:	b084      	sub	sp, #16
2000076a:	af00      	add	r7, sp, #0
2000076c:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++) {
2000076e:	2300      	movs	r3, #0
20000770:	60fb      	str	r3, [r7, #12]
20000772:	e020      	b.n	200007b6 <clear_object+0x50>
		pixel(this->geo->px[i].x + this->posX, this->geo->px[i].y + this->posY, 0);
20000774:	687b      	ldr	r3, [r7, #4]
20000776:	681a      	ldr	r2, [r3, #0]
20000778:	68fb      	ldr	r3, [r7, #12]
2000077a:	3304      	adds	r3, #4
2000077c:	005b      	lsls	r3, r3, #1
2000077e:	18d3      	adds	r3, r2, r3
20000780:	3304      	adds	r3, #4
20000782:	781a      	ldrb	r2, [r3, #0]
20000784:	687b      	ldr	r3, [r7, #4]
20000786:	68db      	ldr	r3, [r3, #12]
20000788:	b2db      	uxtb	r3, r3
2000078a:	18d3      	adds	r3, r2, r3
2000078c:	b2d8      	uxtb	r0, r3
2000078e:	687b      	ldr	r3, [r7, #4]
20000790:	681a      	ldr	r2, [r3, #0]
20000792:	68fb      	ldr	r3, [r7, #12]
20000794:	3304      	adds	r3, #4
20000796:	005b      	lsls	r3, r3, #1
20000798:	18d3      	adds	r3, r2, r3
2000079a:	3305      	adds	r3, #5
2000079c:	781a      	ldrb	r2, [r3, #0]
2000079e:	687b      	ldr	r3, [r7, #4]
200007a0:	691b      	ldr	r3, [r3, #16]
200007a2:	b2db      	uxtb	r3, r3
200007a4:	18d3      	adds	r3, r2, r3
200007a6:	b2db      	uxtb	r3, r3
200007a8:	2200      	movs	r2, #0
200007aa:	0019      	movs	r1, r3
200007ac:	f7ff fee2 	bl	20000574 <pixel>
	for(int i = 0; i < MAX_POINTS; i++) {
200007b0:	68fb      	ldr	r3, [r7, #12]
200007b2:	3301      	adds	r3, #1
200007b4:	60fb      	str	r3, [r7, #12]
200007b6:	68fb      	ldr	r3, [r7, #12]
200007b8:	2b63      	cmp	r3, #99	; 0x63
200007ba:	dddb      	ble.n	20000774 <clear_object+0xe>
	}
}
200007bc:	46c0      	nop			; (mov r8, r8)
200007be:	46bd      	mov	sp, r7
200007c0:	b004      	add	sp, #16
200007c2:	bd80      	pop	{r7, pc}

200007c4 <set_object_speed>:

void set_object_speed(POBJECT this, int x, int y) {
200007c4:	b580      	push	{r7, lr}
200007c6:	b084      	sub	sp, #16
200007c8:	af00      	add	r7, sp, #0
200007ca:	60f8      	str	r0, [r7, #12]
200007cc:	60b9      	str	r1, [r7, #8]
200007ce:	607a      	str	r2, [r7, #4]
	this->dirX = x;
200007d0:	68fb      	ldr	r3, [r7, #12]
200007d2:	68ba      	ldr	r2, [r7, #8]
200007d4:	605a      	str	r2, [r3, #4]
	this->dirY = y;
200007d6:	68fb      	ldr	r3, [r7, #12]
200007d8:	687a      	ldr	r2, [r7, #4]
200007da:	609a      	str	r2, [r3, #8]
200007dc:	46c0      	nop			; (mov r8, r8)
200007de:	46bd      	mov	sp, r7
200007e0:	b004      	add	sp, #16
200007e2:	bd80      	pop	{r7, pc}

200007e4 <delay_250ns>:
#include "timer.h"


void delay_250ns(void) {
200007e4:	b580      	push	{r7, lr}
200007e6:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
200007e8:	4b0c      	ldr	r3, [pc, #48]	; (2000081c <delay_250ns+0x38>)
200007ea:	2200      	movs	r2, #0
200007ec:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 49; //  48 + 1. Have to add one as said in manual
200007ee:	4b0c      	ldr	r3, [pc, #48]	; (20000820 <delay_250ns+0x3c>)
200007f0:	2231      	movs	r2, #49	; 0x31
200007f2:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200007f4:	4b0b      	ldr	r3, [pc, #44]	; (20000824 <delay_250ns+0x40>)
200007f6:	2200      	movs	r2, #0
200007f8:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200007fa:	4b08      	ldr	r3, [pc, #32]	; (2000081c <delay_250ns+0x38>)
200007fc:	2205      	movs	r2, #5
200007fe:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {
20000800:	46c0      	nop			; (mov r8, r8)
20000802:	4b06      	ldr	r3, [pc, #24]	; (2000081c <delay_250ns+0x38>)
20000804:	681a      	ldr	r2, [r3, #0]
20000806:	2380      	movs	r3, #128	; 0x80
20000808:	025b      	lsls	r3, r3, #9
2000080a:	4013      	ands	r3, r2
2000080c:	d0f9      	beq.n	20000802 <delay_250ns+0x1e>
		// Do nothing :S
	}
	*STK_CTRL = 0;
2000080e:	4b03      	ldr	r3, [pc, #12]	; (2000081c <delay_250ns+0x38>)
20000810:	2200      	movs	r2, #0
20000812:	601a      	str	r2, [r3, #0]
}
20000814:	46c0      	nop			; (mov r8, r8)
20000816:	46bd      	mov	sp, r7
20000818:	bd80      	pop	{r7, pc}
2000081a:	46c0      	nop			; (mov r8, r8)
2000081c:	e000e010 	and	lr, r0, r0, lsl r0
20000820:	e000e014 	and	lr, r0, r4, lsl r0
20000824:	e000e018 	and	lr, r0, r8, lsl r0

20000828 <delay_micro>:

void delay_micro(unsigned int us) {
20000828:	b580      	push	{r7, lr}
2000082a:	b082      	sub	sp, #8
2000082c:	af00      	add	r7, sp, #0
2000082e:	6078      	str	r0, [r7, #4]
	while(us--) {
20000830:	e007      	b.n	20000842 <delay_micro+0x1a>
		delay_250ns();
20000832:	f7ff ffd7 	bl	200007e4 <delay_250ns>
		delay_250ns();
20000836:	f7ff ffd5 	bl	200007e4 <delay_250ns>
		delay_250ns();
2000083a:	f7ff ffd3 	bl	200007e4 <delay_250ns>
		delay_250ns();
2000083e:	f7ff ffd1 	bl	200007e4 <delay_250ns>
	while(us--) {
20000842:	687b      	ldr	r3, [r7, #4]
20000844:	1e5a      	subs	r2, r3, #1
20000846:	607a      	str	r2, [r7, #4]
20000848:	2b00      	cmp	r3, #0
2000084a:	d1f2      	bne.n	20000832 <delay_micro+0xa>
	}
}
2000084c:	46c0      	nop			; (mov r8, r8)
2000084e:	46bd      	mov	sp, r7
20000850:	b002      	add	sp, #8
20000852:	bd80      	pop	{r7, pc}

20000854 <delay_milli>:

void delay_milli(unsigned int ms) {
20000854:	b580      	push	{r7, lr}
20000856:	b082      	sub	sp, #8
20000858:	af00      	add	r7, sp, #0
2000085a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_micro(ms);
	#else
		delay_micro(1000 * ms);
2000085c:	687b      	ldr	r3, [r7, #4]
2000085e:	22fa      	movs	r2, #250	; 0xfa
20000860:	0092      	lsls	r2, r2, #2
20000862:	4353      	muls	r3, r2
20000864:	0018      	movs	r0, r3
20000866:	f7ff ffdf 	bl	20000828 <delay_micro>
	#endif
}
2000086a:	46c0      	nop			; (mov r8, r8)
2000086c:	46bd      	mov	sp, r7
2000086e:	b002      	add	sp, #8
20000870:	bd80      	pop	{r7, pc}

20000872 <delay_500ns>:

void delay_500ns(void) {
20000872:	b580      	push	{r7, lr}
20000874:	af00      	add	r7, sp, #0
	delay_250ns();
20000876:	f7ff ffb5 	bl	200007e4 <delay_250ns>
	delay_250ns();
2000087a:	f7ff ffb3 	bl	200007e4 <delay_250ns>
}
2000087e:	46c0      	nop			; (mov r8, r8)
20000880:	46bd      	mov	sp, r7
20000882:	bd80      	pop	{r7, pc}

20000884 <move_paddle>:
	clear_object,
	move_paddle,
	set_object_speed
};

void move_paddle(POBJECT this) {
20000884:	b580      	push	{r7, lr}
20000886:	b082      	sub	sp, #8
20000888:	af00      	add	r7, sp, #0
2000088a:	6078      	str	r0, [r7, #4]
	clear_object(this);
2000088c:	687b      	ldr	r3, [r7, #4]
2000088e:	0018      	movs	r0, r3
20000890:	f7ff ff69 	bl	20000766 <clear_object>
	
	// Move paddle in y direction only.
	this->posY += this->dirY;
20000894:	687b      	ldr	r3, [r7, #4]
20000896:	691a      	ldr	r2, [r3, #16]
20000898:	687b      	ldr	r3, [r7, #4]
2000089a:	689b      	ldr	r3, [r3, #8]
2000089c:	18d2      	adds	r2, r2, r3
2000089e:	687b      	ldr	r3, [r7, #4]
200008a0:	611a      	str	r2, [r3, #16]
	
	// Wall collisions todo add width check with paddle.
	if(this->posY < 0) {
200008a2:	687b      	ldr	r3, [r7, #4]
200008a4:	691b      	ldr	r3, [r3, #16]
200008a6:	2b00      	cmp	r3, #0
200008a8:	da03      	bge.n	200008b2 <move_paddle+0x2e>
		this->posY = 0;
200008aa:	687b      	ldr	r3, [r7, #4]
200008ac:	2200      	movs	r2, #0
200008ae:	611a      	str	r2, [r3, #16]
200008b0:	e00e      	b.n	200008d0 <move_paddle+0x4c>
	} else if((this->posY + this->geo->sizeY) > 63) {
200008b2:	687b      	ldr	r3, [r7, #4]
200008b4:	691a      	ldr	r2, [r3, #16]
200008b6:	687b      	ldr	r3, [r7, #4]
200008b8:	681b      	ldr	r3, [r3, #0]
200008ba:	689b      	ldr	r3, [r3, #8]
200008bc:	18d3      	adds	r3, r2, r3
200008be:	2b3f      	cmp	r3, #63	; 0x3f
200008c0:	dd06      	ble.n	200008d0 <move_paddle+0x4c>
		this->posY = (63 - this->geo->sizeY);
200008c2:	687b      	ldr	r3, [r7, #4]
200008c4:	681b      	ldr	r3, [r3, #0]
200008c6:	689b      	ldr	r3, [r3, #8]
200008c8:	223f      	movs	r2, #63	; 0x3f
200008ca:	1ad2      	subs	r2, r2, r3
200008cc:	687b      	ldr	r3, [r7, #4]
200008ce:	611a      	str	r2, [r3, #16]
	}
	
	this->draw(this);
200008d0:	687b      	ldr	r3, [r7, #4]
200008d2:	695b      	ldr	r3, [r3, #20]
200008d4:	687a      	ldr	r2, [r7, #4]
200008d6:	0010      	movs	r0, r2
200008d8:	4798      	blx	r3
200008da:	46c0      	nop			; (mov r8, r8)
200008dc:	46bd      	mov	sp, r7
200008de:	b002      	add	sp, #8
200008e0:	bd80      	pop	{r7, pc}
	...

200008e4 <activateRow>:
#include "keypad.h"

void activateRow(unsigned char row) {
200008e4:	b580      	push	{r7, lr}
200008e6:	b082      	sub	sp, #8
200008e8:	af00      	add	r7, sp, #0
200008ea:	0002      	movs	r2, r0
200008ec:	1dfb      	adds	r3, r7, #7
200008ee:	701a      	strb	r2, [r3, #0]
	switch(row) {
200008f0:	1dfb      	adds	r3, r7, #7
200008f2:	781b      	ldrb	r3, [r3, #0]
200008f4:	2b04      	cmp	r3, #4
200008f6:	d818      	bhi.n	2000092a <activateRow+0x46>
200008f8:	009a      	lsls	r2, r3, #2
200008fa:	4b0e      	ldr	r3, [pc, #56]	; (20000934 <activateRow+0x50>)
200008fc:	18d3      	adds	r3, r2, r3
200008fe:	681b      	ldr	r3, [r3, #0]
20000900:	469f      	mov	pc, r3
		case 0: *GPIO_D_ODR_HIGH = 0x00; break;
20000902:	4b0d      	ldr	r3, [pc, #52]	; (20000938 <activateRow+0x54>)
20000904:	2200      	movs	r2, #0
20000906:	701a      	strb	r2, [r3, #0]
20000908:	e00f      	b.n	2000092a <activateRow+0x46>
		case 1: *GPIO_D_ODR_HIGH = 0x10; break;
2000090a:	4b0b      	ldr	r3, [pc, #44]	; (20000938 <activateRow+0x54>)
2000090c:	2210      	movs	r2, #16
2000090e:	701a      	strb	r2, [r3, #0]
20000910:	e00b      	b.n	2000092a <activateRow+0x46>
		case 2: *GPIO_D_ODR_HIGH = 0x20; break;
20000912:	4b09      	ldr	r3, [pc, #36]	; (20000938 <activateRow+0x54>)
20000914:	2220      	movs	r2, #32
20000916:	701a      	strb	r2, [r3, #0]
20000918:	e007      	b.n	2000092a <activateRow+0x46>
		case 3: *GPIO_D_ODR_HIGH = 0x40; break;
2000091a:	4b07      	ldr	r3, [pc, #28]	; (20000938 <activateRow+0x54>)
2000091c:	2240      	movs	r2, #64	; 0x40
2000091e:	701a      	strb	r2, [r3, #0]
20000920:	e003      	b.n	2000092a <activateRow+0x46>
		case 4: *GPIO_D_ODR_HIGH = 0x80; break;
20000922:	4b05      	ldr	r3, [pc, #20]	; (20000938 <activateRow+0x54>)
20000924:	2280      	movs	r2, #128	; 0x80
20000926:	701a      	strb	r2, [r3, #0]
20000928:	46c0      	nop			; (mov r8, r8)
	}
}
2000092a:	46c0      	nop			; (mov r8, r8)
2000092c:	46bd      	mov	sp, r7
2000092e:	b002      	add	sp, #8
20000930:	bd80      	pop	{r7, pc}
20000932:	46c0      	nop			; (mov r8, r8)
20000934:	20000c58 	andcs	r0, r0, r8, asr ip
20000938:	40020c15 	andmi	r0, r2, r5, lsl ip

2000093c <readColumn>:

unsigned char readColumn(void) {
2000093c:	b580      	push	{r7, lr}
2000093e:	b082      	sub	sp, #8
20000940:	af00      	add	r7, sp, #0
	unsigned char idr = *GPIO_D_IDR_HIGH;
20000942:	4a10      	ldr	r2, [pc, #64]	; (20000984 <readColumn+0x48>)
20000944:	1dfb      	adds	r3, r7, #7
20000946:	7812      	ldrb	r2, [r2, #0]
20000948:	701a      	strb	r2, [r3, #0]
	if(idr == 0x01) return 1;
2000094a:	1dfb      	adds	r3, r7, #7
2000094c:	781b      	ldrb	r3, [r3, #0]
2000094e:	2b01      	cmp	r3, #1
20000950:	d101      	bne.n	20000956 <readColumn+0x1a>
20000952:	2301      	movs	r3, #1
20000954:	e012      	b.n	2000097c <readColumn+0x40>
	if(idr == 0x02) return 2;
20000956:	1dfb      	adds	r3, r7, #7
20000958:	781b      	ldrb	r3, [r3, #0]
2000095a:	2b02      	cmp	r3, #2
2000095c:	d101      	bne.n	20000962 <readColumn+0x26>
2000095e:	2302      	movs	r3, #2
20000960:	e00c      	b.n	2000097c <readColumn+0x40>
	if(idr == 0x04) return 3;
20000962:	1dfb      	adds	r3, r7, #7
20000964:	781b      	ldrb	r3, [r3, #0]
20000966:	2b04      	cmp	r3, #4
20000968:	d101      	bne.n	2000096e <readColumn+0x32>
2000096a:	2303      	movs	r3, #3
2000096c:	e006      	b.n	2000097c <readColumn+0x40>
	if(idr == 0x08) return 4;
2000096e:	1dfb      	adds	r3, r7, #7
20000970:	781b      	ldrb	r3, [r3, #0]
20000972:	2b08      	cmp	r3, #8
20000974:	d101      	bne.n	2000097a <readColumn+0x3e>
20000976:	2304      	movs	r3, #4
20000978:	e000      	b.n	2000097c <readColumn+0x40>
	return 0;
2000097a:	2300      	movs	r3, #0
}
2000097c:	0018      	movs	r0, r3
2000097e:	46bd      	mov	sp, r7
20000980:	b002      	add	sp, #8
20000982:	bd80      	pop	{r7, pc}
20000984:	40020c11 	andmi	r0, r2, r1, lsl ip

20000988 <keyb>:

unsigned char * keyb(void) {
20000988:	b590      	push	{r4, r7, lr}
2000098a:	b087      	sub	sp, #28
2000098c:	af00      	add	r7, sp, #0
	unsigned char keys[] = {0x1,0x2,0x3,0xA,0x4,0x5,0x6,0xB,0x7,0x8,0x9,0xC,0xE,0x0,0xF,0xD};
2000098e:	1d3b      	adds	r3, r7, #4
20000990:	4a21      	ldr	r2, [pc, #132]	; (20000a18 <keyb+0x90>)
20000992:	ca13      	ldmia	r2!, {r0, r1, r4}
20000994:	c313      	stmia	r3!, {r0, r1, r4}
20000996:	6812      	ldr	r2, [r2, #0]
20000998:	601a      	str	r2, [r3, #0]
	static unsigned char returnKeys[4] = {0xFF,0xFF,0xFF,0xFF};
	for(char row = 1; row <= 4; row++) {
2000099a:	2317      	movs	r3, #23
2000099c:	18fb      	adds	r3, r7, r3
2000099e:	2201      	movs	r2, #1
200009a0:	701a      	strb	r2, [r3, #0]
200009a2:	e02c      	b.n	200009fe <keyb+0x76>
		activateRow(row);
200009a4:	2317      	movs	r3, #23
200009a6:	18fb      	adds	r3, r7, r3
200009a8:	781b      	ldrb	r3, [r3, #0]
200009aa:	0018      	movs	r0, r3
200009ac:	f7ff ff9a 	bl	200008e4 <activateRow>
		char column = readColumn();
200009b0:	2316      	movs	r3, #22
200009b2:	18fc      	adds	r4, r7, r3
200009b4:	f7ff ffc2 	bl	2000093c <readColumn>
200009b8:	0003      	movs	r3, r0
200009ba:	7023      	strb	r3, [r4, #0]
		if(column != 0) {
200009bc:	2316      	movs	r3, #22
200009be:	18fb      	adds	r3, r7, r3
200009c0:	781b      	ldrb	r3, [r3, #0]
200009c2:	2b00      	cmp	r3, #0
200009c4:	d014      	beq.n	200009f0 <keyb+0x68>
			activateRow(0);
200009c6:	2000      	movs	r0, #0
200009c8:	f7ff ff8c 	bl	200008e4 <activateRow>
			returnKeys[row-4] = keys[4 * (row - 1) + (column - 1)];
200009cc:	2317      	movs	r3, #23
200009ce:	18fb      	adds	r3, r7, r3
200009d0:	781b      	ldrb	r3, [r3, #0]
200009d2:	3b04      	subs	r3, #4
200009d4:	2217      	movs	r2, #23
200009d6:	18ba      	adds	r2, r7, r2
200009d8:	7812      	ldrb	r2, [r2, #0]
200009da:	3a01      	subs	r2, #1
200009dc:	0091      	lsls	r1, r2, #2
200009de:	2216      	movs	r2, #22
200009e0:	18ba      	adds	r2, r7, r2
200009e2:	7812      	ldrb	r2, [r2, #0]
200009e4:	3a01      	subs	r2, #1
200009e6:	188a      	adds	r2, r1, r2
200009e8:	1d39      	adds	r1, r7, #4
200009ea:	5c89      	ldrb	r1, [r1, r2]
200009ec:	4a0b      	ldr	r2, [pc, #44]	; (20000a1c <keyb+0x94>)
200009ee:	54d1      	strb	r1, [r2, r3]
	for(char row = 1; row <= 4; row++) {
200009f0:	2317      	movs	r3, #23
200009f2:	18fb      	adds	r3, r7, r3
200009f4:	781a      	ldrb	r2, [r3, #0]
200009f6:	2317      	movs	r3, #23
200009f8:	18fb      	adds	r3, r7, r3
200009fa:	3201      	adds	r2, #1
200009fc:	701a      	strb	r2, [r3, #0]
200009fe:	2317      	movs	r3, #23
20000a00:	18fb      	adds	r3, r7, r3
20000a02:	781b      	ldrb	r3, [r3, #0]
20000a04:	2b04      	cmp	r3, #4
20000a06:	d9cd      	bls.n	200009a4 <keyb+0x1c>
		}
	}
	activateRow(0);
20000a08:	2000      	movs	r0, #0
20000a0a:	f7ff ff6b 	bl	200008e4 <activateRow>
	return returnKeys;
20000a0e:	4b03      	ldr	r3, [pc, #12]	; (20000a1c <keyb+0x94>)
20000a10:	0018      	movs	r0, r3
20000a12:	46bd      	mov	sp, r7
20000a14:	b007      	add	sp, #28
20000a16:	bd90      	pop	{r4, r7, pc}
20000a18:	20000c6c 	andcs	r0, r0, ip, ror #24
20000a1c:	20000c34 	andcs	r0, r0, r4, lsr ip

20000a20 <ball_geometry>:
20000a20:	0000000c 	andeq	r0, r0, ip
20000a24:	00000004 	andeq	r0, r0, r4
20000a28:	00000004 	andeq	r0, r0, r4
20000a2c:	02000100 	andeq	r0, r0, #0, 2
20000a30:	01010001 	tsteq	r1, r1
20000a34:	03010201 	movweq	r0, #4609	; 0x1201
20000a38:	01020002 	tsteq	r2, r2
20000a3c:	03020202 	movweq	r0, #8706	; 0x2202
20000a40:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000af4 <ball>:
20000af4:	20000a20 	andcs	r0, r0, r0, lsr #20
	...
20000b00:	00000001 	andeq	r0, r0, r1
20000b04:	00000001 	andeq	r0, r0, r1
20000b08:	20000709 	andcs	r0, r0, r9, lsl #14
20000b0c:	20000767 	andcs	r0, r0, r7, ror #14
20000b10:	200000dd 	ldrdcs	r0, [r0], -sp
20000b14:	200007c5 	andcs	r0, r0, r5, asr #15

20000b18 <paddle_geometry>:
20000b18:	00000064 	andeq	r0, r0, r4, rrx
20000b1c:	00000004 	andeq	r0, r0, r4
20000b20:	00000019 	andeq	r0, r0, r9, lsl r0
20000b24:	00010000 	andeq	r0, r1, r0
20000b28:	00030002 	andeq	r0, r3, r2
20000b2c:	01010100 	mrseq	r0, (UNDEF: 17)
20000b30:	01030102 	tsteq	r3, r2, lsl #2
20000b34:	02010200 	andeq	r0, r1, #0, 4
20000b38:	02030202 	andeq	r0, r3, #536870912	; 0x20000000
20000b3c:	03010300 	movweq	r0, #4864	; 0x1300
20000b40:	03030302 	movweq	r0, #13058	; 0x3302
20000b44:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
20000b48:	04030402 	streq	r0, [r3], #-1026	; 0xfffffbfe
20000b4c:	05010500 	streq	r0, [r1, #-1280]	; 0xfffffb00
20000b50:	05030502 	streq	r0, [r3, #-1282]	; 0xfffffafe
20000b54:	06010600 	streq	r0, [r1], -r0, lsl #12
20000b58:	06030602 	streq	r0, [r3], -r2, lsl #12
20000b5c:	07010700 	streq	r0, [r1, -r0, lsl #14]
20000b60:	07030702 	streq	r0, [r3, -r2, lsl #14]
20000b64:	08010800 	stmdaeq	r1, {fp}
20000b68:	08030802 	stmdaeq	r3, {r1, fp}
20000b6c:	09010900 	stmdbeq	r1, {r8, fp}
20000b70:	09030902 	stmdbeq	r3, {r1, r8, fp}
20000b74:	0a010a00 	beq	2004337c <returnKeys.4003+0x42748>
20000b78:	0a030a02 	beq	200c3388 <returnKeys.4003+0xc2754>
20000b7c:	0b010b00 	bleq	20043784 <returnKeys.4003+0x42b50>
20000b80:	0b030b02 	bleq	200c3790 <returnKeys.4003+0xc2b5c>
20000b84:	0c010c00 	stceq	12, cr0, [r1], {-0}
20000b88:	0c030c02 	stceq	12, cr0, [r3], {2}
20000b8c:	0d010d00 	stceq	13, cr0, [r1, #-0]
20000b90:	0d030d02 	stceq	13, cr0, [r3, #-8]
20000b94:	0e010e00 	cdpeq	14, 0, cr0, cr1, cr0, {0}
20000b98:	0e030e02 	cdpeq	14, 0, cr0, cr3, cr2, {0}
20000b9c:	0f010f00 	svceq	0x00010f00
20000ba0:	0f030f02 	svceq	0x00030f02
20000ba4:	10011000 	andne	r1, r1, r0
20000ba8:	10031002 	andne	r1, r3, r2
20000bac:	11011100 	mrsne	r1, (UNDEF: 17)
20000bb0:	11031102 	tstne	r3, r2, lsl #2
20000bb4:	12011200 	andne	r1, r1, #0, 4
20000bb8:	12031202 	andne	r1, r3, #536870912	; 0x20000000
20000bbc:	13011300 	movwne	r1, #4864	; 0x1300
20000bc0:	13031302 	movwne	r1, #13058	; 0x3302
20000bc4:	14011400 	strne	r1, [r1], #-1024	; 0xfffffc00
20000bc8:	14031402 	strne	r1, [r3], #-1026	; 0xfffffbfe
20000bcc:	15011500 	strne	r1, [r1, #-1280]	; 0xfffffb00
20000bd0:	15031502 	strne	r1, [r3, #-1282]	; 0xfffffafe
20000bd4:	16011600 	strne	r1, [r1], -r0, lsl #12
20000bd8:	16031602 	strne	r1, [r3], -r2, lsl #12
20000bdc:	17011700 	strne	r1, [r1, -r0, lsl #14]
20000be0:	17031702 	strne	r1, [r3, -r2, lsl #14]
20000be4:	18011800 	stmdane	r1, {fp, ip}
20000be8:	18031802 	stmdane	r3, {r1, fp, ip}

20000bec <leftPaddle>:
20000bec:	20000b18 	andcs	r0, r0, r8, lsl fp
	...
20000bf8:	00000001 	andeq	r0, r0, r1
20000bfc:	00000020 	andeq	r0, r0, r0, lsr #32
20000c00:	20000709 	andcs	r0, r0, r9, lsl #14
20000c04:	20000767 	andcs	r0, r0, r7, ror #14
20000c08:	20000885 	andcs	r0, r0, r5, lsl #17
20000c0c:	200007c5 	andcs	r0, r0, r5, asr #15

20000c10 <rightPaddle>:
20000c10:	20000b18 	andcs	r0, r0, r8, lsl fp
	...
20000c1c:	0000007c 	andeq	r0, r0, ip, ror r0
20000c20:	00000020 	andeq	r0, r0, r0, lsr #32
20000c24:	20000709 	andcs	r0, r0, r9, lsl #14
20000c28:	20000767 	andcs	r0, r0, r7, ror #14
20000c2c:	20000885 	andcs	r0, r0, r5, lsl #17
20000c30:	200007c5 	andcs	r0, r0, r5, asr #15

20000c34 <returnKeys.4003>:
20000c34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20000c38:	200005ca 	andcs	r0, r0, sl, asr #11
20000c3c:	200005d4 	ldrdcs	r0, [r0], -r4
20000c40:	200005de 	ldrdcs	r0, [r0], -lr
20000c44:	200005e8 	andcs	r0, r0, r8, ror #11
20000c48:	200005f2 	strdcs	r0, [r0], -r2
20000c4c:	200005fc 	strdcs	r0, [r0], -ip
20000c50:	20000606 	andcs	r0, r0, r6, lsl #12
20000c54:	20000610 	andcs	r0, r0, r0, lsl r6
20000c58:	20000902 	andcs	r0, r0, r2, lsl #18
20000c5c:	2000090a 	andcs	r0, r0, sl, lsl #18
20000c60:	20000912 	andcs	r0, r0, r2, lsl r9
20000c64:	2000091a 	andcs	r0, r0, sl, lsl r9
20000c68:	20000922 	andcs	r0, r0, r2, lsr #18
20000c6c:	0a030201 	beq	200c1478 <returnKeys.4003+0xc0844>
20000c70:	0b060504 	bleq	20182088 <returnKeys.4003+0x181454>
20000c74:	0c090807 	stceq	8, cr0, [r9], {7}
20000c78:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000c48 <returnKeys.4003+0x14>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000021a 	andeq	r0, r0, sl, lsl r2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000087 	andeq	r0, r0, r7, lsl #1
  10:	0000270c 	andeq	r2, r0, ip, lsl #14
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	00000079 	andeq	r0, r0, r9, ror r0
  28:	00006d03 	andeq	r6, r0, r3, lsl #26
  2c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
  30:	00000049 	andeq	r0, r0, r9, asr #32
  34:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
  38:	00002106 	andeq	r2, r0, r6, lsl #2
  3c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
  40:	21070200 	mrscs	r0, (UNDEF: 39)
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	01850500 	orreq	r0, r5, r0, lsl #10
  4c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  50:	00000028 	andeq	r0, r0, r8, lsr #32
  54:	00013203 	andeq	r3, r1, r3, lsl #4
  58:	0b02d400 	bleq	b5060 <startup-0x1ff4afa0>
  5c:	00000090 	muleq	r0, r0, r0
  60:	00017b06 	andeq	r7, r1, r6, lsl #22
  64:	900c0200 	andls	r0, ip, r0, lsl #4
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000a06 	andeq	r0, r0, r6, lsl #20
  70:	900d0200 	andls	r0, sp, r0, lsl #4
  74:	04000000 	streq	r0, [r0], #-0
  78:	00001c06 	andeq	r1, r0, r6, lsl #24
  7c:	900e0200 	andls	r0, lr, r0, lsl #4
  80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  84:	00787004 	rsbseq	r7, r8, r4
  88:	00970f02 	addseq	r0, r7, r2, lsl #30
  8c:	000c0000 	andeq	r0, ip, r0
  90:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  94:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  98:	00000049 	andeq	r0, r0, r9, asr #32
  9c:	000000a7 	andeq	r0, r0, r7, lsr #1
  a0:	0000a709 	andeq	sl, r0, r9, lsl #14
  a4:	02006300 	andeq	r6, r0, #0, 6
  a8:	01680704 	cmneq	r8, r4, lsl #14
  ac:	1f050000 	svcne	0x00050000
  b0:	02000001 	andeq	r0, r0, #1
  b4:	0000b910 	andeq	fp, r0, r0, lsl r9
  b8:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
  bc:	03000000 	movweq	r0, #0
  c0:	0000018b 	andeq	r0, r0, fp, lsl #3
  c4:	38120224 	ldmdacc	r2, {r2, r5, r9}
  c8:	04000001 	streq	r0, [r0], #-1
  cc:	006f6567 	rsbeq	r6, pc, r7, ror #10
  d0:	00ae1302 	adceq	r1, lr, r2, lsl #6
  d4:	06000000 	streq	r0, [r0], -r0
  d8:	00000176 	andeq	r0, r0, r6, ror r1
  dc:	00901402 	addseq	r1, r0, r2, lsl #8
  e0:	06040000 	streq	r0, [r4], -r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	00901402 	addseq	r1, r0, r2, lsl #8
  ec:	06080000 	streq	r0, [r8], -r0
  f0:	00000171 	andeq	r0, r0, r1, ror r1
  f4:	00901502 	addseq	r1, r0, r2, lsl #10
  f8:	060c0000 	streq	r0, [ip], -r0
  fc:	00000005 	andeq	r0, r0, r5
 100:	00901502 	addseq	r1, r0, r2, lsl #10
 104:	06100000 	ldreq	r0, [r0], -r0
 108:	00000022 	andeq	r0, r0, r2, lsr #32
 10c:	01491602 	cmpeq	r9, r2, lsl #12
 110:	06140000 	ldreq	r0, [r4], -r0
 114:	0000020e 	andeq	r0, r0, lr, lsl #4
 118:	01491702 	cmpeq	r9, r2, lsl #14
 11c:	06180000 	ldreq	r0, [r8], -r0
 120:	00000074 	andeq	r0, r0, r4, ror r0
 124:	01491802 	cmpeq	r9, r2, lsl #16
 128:	061c0000 	ldreq	r0, [ip], -r0
 12c:	00000063 	andeq	r0, r0, r3, rrx
 130:	01641902 	cmneq	r4, r2, lsl #18
 134:	00200000 	eoreq	r0, r0, r0
 138:	0001430b 	andeq	r4, r1, fp, lsl #6
 13c:	01430c00 	cmpeq	r3, r0, lsl #24
 140:	0a000000 	beq	148 <startup-0x1ffffeb8>
 144:	0000bf04 	andeq	fp, r0, r4, lsl #30
 148:	38040a00 	stmdacc	r4, {r9, fp}
 14c:	0b000001 	bleq	158 <startup-0x1ffffea8>
 150:	00000164 	andeq	r0, r0, r4, ror #2
 154:	0001430c 	andeq	r4, r1, ip, lsl #6
 158:	00900c00 	addseq	r0, r0, r0, lsl #24
 15c:	900c0000 	andls	r0, ip, r0
 160:	00000000 	andeq	r0, r0, r0
 164:	014f040a 	cmpeq	pc, sl, lsl #8
 168:	61050000 	mrsvs	r0, (UNDEF: 5)
 16c:	02000001 	andeq	r0, r0, #1
 170:	0000bf1a 	andeq	fp, r0, sl, lsl pc
 174:	01600500 	cmneq	r0, r0, lsl #10
 178:	1a020000 	bne	80180 <startup-0x1ff7fe80>
 17c:	00000143 	andeq	r0, r0, r3, asr #2
 180:	0001a80d 	andeq	sl, r1, sp, lsl #16
 184:	6a050300 	bvs	140d8c <startup-0x1febf274>
 188:	0d000001 	stceq	0, cr0, [r0, #-4]
 18c:	00000150 	andeq	r0, r0, r0, asr r1
 190:	016a0404 	cmneq	sl, r4, lsl #8
 194:	100d0000 	andne	r0, sp, r0
 198:	04000000 	streq	r0, [r0], #-0
 19c:	00016a05 	andeq	r6, r1, r5, lsl #20
 1a0:	015b0e00 	cmpeq	fp, r0, lsl #28
 1a4:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
 1a8:	2000006c 	andcs	r0, r0, ip, rrx
 1ac:	00000070 	andeq	r0, r0, r0, ror r0
 1b0:	01f59c01 	mvnseq	r9, r1, lsl #24
 1b4:	700f0000 	andvc	r0, pc, r0
 1b8:	75290100 	strvc	r0, [r9, #-256]!	; 0xffffff00
 1bc:	02000001 	andeq	r0, r0, #1
 1c0:	700f7491 	mulvc	pc, r1, r4	; <UNPREDICTABLE>
 1c4:	2a01006c 	bcs	4037c <startup-0x1ffbfc84>
 1c8:	00000175 	andeq	r0, r0, r5, ror r1
 1cc:	0f709102 	svceq	0x00709102
 1d0:	01007270 	tsteq	r0, r0, ror r2
 1d4:	0001752b 	andeq	r7, r1, fp, lsr #10
 1d8:	6c910200 	lfmvs	f0, 4, [r1], {0}
 1dc:	00008a10 	andeq	r8, r0, r0, lsl sl
 1e0:	00004420 	andeq	r4, r0, r0, lsr #8
 1e4:	013c1100 	teqeq	ip, r0, lsl #2
 1e8:	35010000 	strcc	r0, [r1, #-0]
 1ec:	000001f5 	strdeq	r0, [r0], -r5
 1f0:	00689102 	rsbeq	r9, r8, r2, lsl #2
 1f4:	21040a00 	tstcs	r4, r0, lsl #20
 1f8:	12000000 	andne	r0, r0, #0
 1fc:	00000129 	andeq	r0, r0, r9, lsr #2
 200:	00101501 	andseq	r1, r0, r1, lsl #10
 204:	005c2000 	subseq	r2, ip, r0
 208:	9c010000 	stcls	0, cr0, [r1], {-0}
 20c:	00014812 	andeq	r4, r1, r2, lsl r8
 210:	000b0100 	andeq	r0, fp, r0, lsl #2
 214:	0c200000 	stceq	0, cr0, [r0], #-0
 218:	01000000 	mrseq	r0, (UNDEF: 0)
 21c:	0201009c 	andeq	r0, r1, #156	; 0x9c
 220:	00040000 	andeq	r0, r4, r0
 224:	000000f7 	strdeq	r0, [r0], -r7
 228:	00870104 	addeq	r0, r7, r4, lsl #2
 22c:	ad0c0000 	stcge	0, cr0, [ip, #-0]
 230:	dc000001 	stcle	0, cr0, [r0], {1}
 234:	dc200000 	stcle	0, cr0, [r0], #-0
 238:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
 23c:	02000000 	andeq	r0, r0, #0
 240:	0000006d 	andeq	r0, r0, sp, rrx
 244:	42050202 	andmi	r0, r5, #536870912	; 0x20000000
 248:	03000000 	movweq	r0, #0
 24c:	06020078 			; <UNDEFINED> instruction: 0x06020078
 250:	00000042 	andeq	r0, r0, r2, asr #32
 254:	00790300 	rsbseq	r0, r9, r0, lsl #6
 258:	00420702 	subeq	r0, r2, r2, lsl #14
 25c:	00010000 	andeq	r0, r1, r0
 260:	79080104 	stmdbvc	r8, {r2, r8}
 264:	05000000 	streq	r0, [r0, #-0]
 268:	00000185 	andeq	r0, r0, r5, lsl #3
 26c:	00210802 	eoreq	r0, r1, r2, lsl #16
 270:	32020000 	andcc	r0, r2, #0
 274:	d4000001 	strle	r0, [r0], #-1
 278:	00900b02 	addseq	r0, r0, r2, lsl #22
 27c:	7b060000 	blvc	180284 <startup-0x1fe7fd7c>
 280:	02000001 	andeq	r0, r0, #1
 284:	0000900c 	andeq	r9, r0, ip
 288:	0a060000 	beq	180290 <startup-0x1fe7fd70>
 28c:	02000000 	andeq	r0, r0, #0
 290:	0000900d 	andeq	r9, r0, sp
 294:	1c060400 	cfstrsne	mvf0, [r6], {-0}
 298:	02000000 	andeq	r0, r0, #0
 29c:	0000900e 	andeq	r9, r0, lr
 2a0:	70030800 	andvc	r0, r3, r0, lsl #16
 2a4:	0f020078 	svceq	0x00020078
 2a8:	00000097 	muleq	r0, r7, r0
 2ac:	0407000c 	streq	r0, [r7], #-12
 2b0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 2b4:	00490800 	subeq	r0, r9, r0, lsl #16
 2b8:	00a70000 	adceq	r0, r7, r0
 2bc:	a7090000 	strge	r0, [r9, -r0]
 2c0:	63000000 	movwvs	r0, #0
 2c4:	07040400 	streq	r0, [r4, -r0, lsl #8]
 2c8:	00000168 	andeq	r0, r0, r8, ror #2
 2cc:	00012005 	andeq	r2, r1, r5
 2d0:	54100200 	ldrpl	r0, [r0], #-512	; 0xfffffe00
 2d4:	05000000 	streq	r0, [r0, #-0]
 2d8:	0000011f 	andeq	r0, r0, pc, lsl r1
 2dc:	00c41002 	sbceq	r1, r4, r2
 2e0:	040a0000 	streq	r0, [sl], #-0
 2e4:	00000054 	andeq	r0, r0, r4, asr r0
 2e8:	00018b02 	andeq	r8, r1, r2, lsl #22
 2ec:	12022400 	andne	r2, r2, #0, 8
 2f0:	00000143 	andeq	r0, r0, r3, asr #2
 2f4:	6f656703 	svcvs	0x00656703
 2f8:	b9130200 	ldmdblt	r3, {r9}
 2fc:	00000000 	andeq	r0, r0, r0
 300:	00017606 	andeq	r7, r1, r6, lsl #12
 304:	90140200 	andsls	r0, r4, r0, lsl #4
 308:	04000000 	streq	r0, [r0], #-0
 30c:	00000006 	andeq	r0, r0, r6
 310:	90140200 	andsls	r0, r4, r0, lsl #4
 314:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 318:	00017106 	andeq	r7, r1, r6, lsl #2
 31c:	90150200 	andsls	r0, r5, r0, lsl #4
 320:	0c000000 	stceq	0, cr0, [r0], {-0}
 324:	00000506 	andeq	r0, r0, r6, lsl #10
 328:	90150200 	andsls	r0, r5, r0, lsl #4
 32c:	10000000 	andne	r0, r0, r0
 330:	00002206 	andeq	r2, r0, r6, lsl #4
 334:	54160200 	ldrpl	r0, [r6], #-512	; 0xfffffe00
 338:	14000001 	strne	r0, [r0], #-1
 33c:	00020e06 	andeq	r0, r2, r6, lsl #28
 340:	54170200 	ldrpl	r0, [r7], #-512	; 0xfffffe00
 344:	18000001 	stmdane	r0, {r0}
 348:	00007406 	andeq	r7, r0, r6, lsl #8
 34c:	54180200 	ldrpl	r0, [r8], #-512	; 0xfffffe00
 350:	1c000001 	stcne	0, cr0, [r0], {1}
 354:	00006306 	andeq	r6, r0, r6, lsl #6
 358:	6f190200 	svcvs	0x00190200
 35c:	20000001 	andcs	r0, r0, r1
 360:	014e0b00 	cmpeq	lr, r0, lsl #22
 364:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
 368:	00000001 	andeq	r0, r0, r1
 36c:	00ca040a 	sbceq	r0, sl, sl, lsl #8
 370:	040a0000 	streq	r0, [sl], #-0
 374:	00000143 	andeq	r0, r0, r3, asr #2
 378:	00016f0b 	andeq	r6, r1, fp, lsl #30
 37c:	014e0c00 	cmpeq	lr, r0, lsl #24
 380:	900c0000 	andls	r0, ip, r0
 384:	0c000000 	stceq	0, cr0, [r0], {-0}
 388:	00000090 	muleq	r0, r0, r0
 38c:	5a040a00 	bpl	102b94 <startup-0x1fefd46c>
 390:	05000001 	streq	r0, [r0, #-1]
 394:	00000161 	andeq	r0, r0, r1, ror #2
 398:	00ca1a02 	sbceq	r1, sl, r2, lsl #20
 39c:	60050000 	andvs	r0, r5, r0
 3a0:	02000001 	andeq	r0, r0, #1
 3a4:	00014e1a 	andeq	r4, r1, sl, lsl lr
 3a8:	01a80d00 			; <UNDEFINED> instruction: 0x01a80d00
 3ac:	05030000 	streq	r0, [r3, #-0]
 3b0:	00000175 	andeq	r0, r0, r5, ror r1
 3b4:	0001500d 	andeq	r5, r1, sp
 3b8:	75040400 	strvc	r0, [r4, #-1024]	; 0xfffffc00
 3bc:	0d000001 	stceq	0, cr0, [r0, #-4]
 3c0:	00000010 	andeq	r0, r0, r0, lsl r0
 3c4:	01750504 	cmneq	r5, r4, lsl #10
 3c8:	900e0000 	andls	r0, lr, r0
 3cc:	01000001 	tsteq	r0, r1
 3d0:	0000ae04 	andeq	sl, r0, r4, lsl #28
 3d4:	20030500 	andcs	r0, r3, r0, lsl #10
 3d8:	0f20000a 	svceq	0x0020000a
 3dc:	0000018b 	andeq	r0, r0, fp, lsl #3
 3e0:	03050f01 	movweq	r0, #24321	; 0x5f01
 3e4:	20000af4 	strdcs	r0, [r0], -r4
 3e8:	0001a310 	andeq	sl, r1, r0, lsl r3
 3ec:	dc1c0100 	ldfles	f0, [ip], {-0}
 3f0:	dc200000 	stcle	0, cr0, [r0], #-0
 3f4:	01000000 	mrseq	r0, (UNDEF: 0)
 3f8:	019e119c 			; <UNDEFINED> instruction: 0x019e119c
 3fc:	1c010000 	stcne	0, cr0, [r1], {-0}
 400:	00000180 	andeq	r0, r0, r0, lsl #3
 404:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
 408:	0100706c 	tsteq	r0, ip, rrx
 40c:	00018028 	andeq	r8, r1, r8, lsr #32
 410:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 414:	00707212 	rsbseq	r7, r0, r2, lsl r2
 418:	01802901 	orreq	r2, r0, r1, lsl #18
 41c:	91020000 	mrsls	r0, (UNDEF: 2)
 420:	83000070 	movwhi	r0, #112	; 0x70
 424:	04000002 	streq	r0, [r0], #-2
 428:	0001e900 	andeq	lr, r1, r0, lsl #18
 42c:	87010400 	strhi	r0, [r1, -r0, lsl #8]
 430:	0c000000 	stceq	0, cr0, [r0], {-0}
 434:	00000256 	andeq	r0, r0, r6, asr r2
 438:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
 43c:	00000550 	andeq	r0, r0, r0, asr r5
 440:	00000186 	andeq	r0, r0, r6, lsl #3
 444:	00029702 	andeq	r9, r2, r2, lsl #14
 448:	2c260200 	sfmcs	f0, 4, [r6], #-0
 44c:	03000000 	movweq	r0, #0
 450:	00790801 	rsbseq	r0, r9, r1, lsl #16
 454:	14040000 	strne	r0, [r4], #-0
 458:	01000002 	tsteq	r0, r2
 45c:	00057497 	muleq	r5, r7, r4
 460:	00019420 	andeq	r9, r1, r0, lsr #8
 464:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
 468:	05000000 	streq	r0, [r0, #-0]
 46c:	97010078 	smlsdxls	r1, r8, r0, r0
 470:	0000002c 	andeq	r0, r0, ip, lsr #32
 474:	05679102 	strbeq	r9, [r7, #-258]!	; 0xfffffefe
 478:	97010079 	smlsdxls	r1, r9, r0, r0
 47c:	0000002c 	andeq	r0, r0, ip, lsr #32
 480:	05669102 	strbeq	r9, [r6, #-258]!	; 0xfffffefe
 484:	00746573 	rsbseq	r6, r4, r3, ror r5
 488:	002c9701 	eoreq	r9, ip, r1, lsl #14
 48c:	91020000 	mrsls	r0, (UNDEF: 2)
 490:	02920665 	addseq	r0, r2, #105906176	; 0x6500000
 494:	9a010000 	bls	4049c <startup-0x1ffbfb64>
 498:	0000002c 	andeq	r0, r0, ip, lsr #32
 49c:	066f9102 	strbteq	r9, [pc], -r2, lsl #2
 4a0:	000002c9 	andeq	r0, r0, r9, asr #5
 4a4:	002c9b01 	eoreq	r9, ip, r1, lsl #22
 4a8:	91020000 	mrsls	r0, (UNDEF: 2)
 4ac:	02b9066d 	adcseq	r0, r9, #114294784	; 0x6d00000
 4b0:	ac010000 	stcge	0, cr0, [r1], {-0}
 4b4:	0000002c 	andeq	r0, r0, ip, lsr #32
 4b8:	066e9102 	strbteq	r9, [lr], -r2, lsl #2
 4bc:	000002c4 	andeq	r0, r0, r4, asr #5
 4c0:	002cb601 	eoreq	fp, ip, r1, lsl #12
 4c4:	91020000 	mrsls	r0, (UNDEF: 2)
 4c8:	fa04006c 	blx	100680 <startup-0x1feff980>
 4cc:	01000002 	tsteq	r0, r2
 4d0:	00051c8b 	andeq	r1, r5, fp, lsl #25
 4d4:	00005820 	andeq	r5, r0, r0, lsr #16
 4d8:	ed9c0100 	ldfs	f0, [ip]
 4dc:	07000000 	streq	r0, [r0, -r0]
 4e0:	20000522 	andcs	r0, r0, r2, lsr #10
 4e4:	0000004a 	andeq	r0, r0, sl, asr #32
 4e8:	0002ef06 	andeq	lr, r2, r6, lsl #30
 4ec:	ed8c0100 	stfs	f0, [ip]
 4f0:	02000000 	andeq	r0, r0, #0
 4f4:	46077491 			; <UNDEFINED> instruction: 0x46077491
 4f8:	1a200005 	bne	800514 <startup-0x1f7ffaec>
 4fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 500:	00646461 	rsbeq	r6, r4, r1, ror #8
 504:	00ed8f01 	rsceq	r8, sp, r1, lsl #30
 508:	91020000 	mrsls	r0, (UNDEF: 2)
 50c:	00000070 	andeq	r0, r0, r0, ror r0
 510:	69050409 	stmdbvs	r5, {r0, r3, sl}
 514:	0a00746e 	beq	1d6d4 <startup-0x1ffe292c>
 518:	0000030f 	andeq	r0, r0, pc, lsl #6
 51c:	04c07c01 	strbeq	r7, [r0], #3073	; 0xc01
 520:	005c2000 	subseq	r2, ip, r0
 524:	9c010000 	stcls	0, cr0, [r1], {-0}
 528:	0002300b 	andeq	r3, r2, fp
 52c:	21770100 	cmncs	r7, r0, lsl #2
 530:	96000000 	strls	r0, [r0], -r0
 534:	2a200004 	bcs	80054c <startup-0x1f7ffab4>
 538:	01000000 	mrseq	r0, (UNDEF: 0)
 53c:	00012d9c 	muleq	r1, ip, sp
 540:	02b90c00 	adcseq	r0, r9, #0, 24
 544:	77010000 	strvc	r0, [r1, -r0]
 548:	00000021 	andeq	r0, r0, r1, lsr #32
 54c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 550:	0002dc04 	andeq	sp, r2, r4, lsl #24
 554:	506f0100 	rsbpl	r0, pc, r0, lsl #2
 558:	46200004 	strtmi	r0, [r0], -r4
 55c:	01000000 	mrseq	r0, (UNDEF: 0)
 560:	00015f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
 564:	023e0c00 	eorseq	r0, lr, #0, 24
 568:	6f010000 	svcvs	0x00010000
 56c:	00000021 	andeq	r0, r0, r1, lsr #32
 570:	0c779102 	ldfeqp	f1, [r7], #-8
 574:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
 578:	00216f01 	eoreq	r6, r1, r1, lsl #30
 57c:	91020000 	mrsls	r0, (UNDEF: 2)
 580:	e6040076 			; <UNDEFINED> instruction: 0xe6040076
 584:	01000001 	tsteq	r0, r1
 588:	00041068 	andeq	r1, r4, r8, rrx
 58c:	00004020 	andeq	r4, r0, r0, lsr #32
 590:	919c0100 	orrsls	r0, ip, r0, lsl #2
 594:	0c000001 	stceq	0, cr0, [r0], {1}
 598:	000001f4 	strdeq	r0, [r0], -r4
 59c:	00216801 	eoreq	r6, r1, r1, lsl #16
 5a0:	91020000 	mrsls	r0, (UNDEF: 2)
 5a4:	02b90c77 	adcseq	r0, r9, #30464	; 0x7700
 5a8:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
 5ac:	00000021 	andeq	r0, r0, r1, lsr #32
 5b0:	00769102 	rsbseq	r9, r6, r2, lsl #2
 5b4:	0002a404 	andeq	sl, r2, r4, lsl #8
 5b8:	90510100 	subsls	r0, r1, r0, lsl #2
 5bc:	80200003 	eorhi	r0, r0, r3
 5c0:	01000000 	mrseq	r0, (UNDEF: 0)
 5c4:	0001c39c 	muleq	r1, ip, r3
 5c8:	02f40c00 	rscseq	r0, r4, #0, 24
 5cc:	51010000 	mrspl	r0, (UNDEF: 1)
 5d0:	00000021 	andeq	r0, r0, r1, lsr #32
 5d4:	0c779102 	ldfeqp	f1, [r7], #-8
 5d8:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
 5dc:	00215101 	eoreq	r5, r1, r1, lsl #2
 5e0:	91020000 	mrsls	r0, (UNDEF: 2)
 5e4:	cf0b0076 	svcgt	0x000b0076
 5e8:	01000002 	tsteq	r0, r2
 5ec:	00002136 	andeq	r2, r0, r6, lsr r1
 5f0:	00030000 	andeq	r0, r3, r0
 5f4:	00009020 	andeq	r9, r0, r0, lsr #32
 5f8:	f89c0100 			; <UNDEFINED> instruction: 0xf89c0100
 5fc:	0c000001 	stceq	0, cr0, [r0], {1}
 600:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
 604:	00213601 	eoreq	r3, r1, r1, lsl #12
 608:	91020000 	mrsls	r0, (UNDEF: 2)
 60c:	5652086f 	ldrbpl	r0, [r2], -pc, ror #16
 610:	213f0100 	teqcs	pc, r0, lsl #2
 614:	02000000 	andeq	r0, r0, #0
 618:	04007791 	streq	r7, [r0], #-1937	; 0xfffff86f
 61c:	00000243 	andeq	r0, r0, r3, asr #4
 620:	028e1f01 	addeq	r1, lr, #1, 30
 624:	00722000 	rsbseq	r2, r2, r0
 628:	9c010000 	stcls	0, cr0, [r1], {-0}
 62c:	00000222 	andeq	r0, r0, r2, lsr #4
 630:	0000180d 	andeq	r1, r0, sp, lsl #16
 634:	029f0600 	addseq	r0, pc, #0, 12
 638:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
 63c:	0000002c 	andeq	r0, r0, ip, lsr #32
 640:	00779102 	rsbseq	r9, r7, r2, lsl #2
 644:	02b20400 	adcseq	r0, r2, #0, 8
 648:	0f010000 	svceq	0x00010000
 64c:	20000224 	andcs	r0, r0, r4, lsr #4
 650:	0000006a 	andeq	r0, r0, sl, rrx
 654:	02469c01 	subeq	r9, r6, #256	; 0x100
 658:	b90c0000 	stmdblt	ip, {}	; <UNPREDICTABLE>
 65c:	01000002 	tsteq	r0, r2
 660:	0000210f 	andeq	r2, r0, pc, lsl #2
 664:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 668:	01fc0e00 	mvnseq	r0, r0, lsl #28
 66c:	0b010000 	bleq	40674 <startup-0x1ffbf98c>
 670:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 674:	00000034 	andeq	r0, r0, r4, lsr r0
 678:	02689c01 	rsbeq	r9, r8, #256	; 0x100
 67c:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
 680:	210b0100 	mrscs	r0, (UNDEF: 27)
 684:	02000000 	andeq	r0, r0, #0
 688:	0f007791 	svceq	0x00007791
 68c:	0000021a 	andeq	r0, r0, sl, lsl r2
 690:	01b80701 			; <UNDEFINED> instruction: 0x01b80701
 694:	00382000 	eorseq	r2, r8, r0
 698:	9c010000 	stcls	0, cr0, [r1], {-0}
 69c:	01007805 	tsteq	r0, r5, lsl #16
 6a0:	00002107 	andeq	r2, r0, r7, lsl #2
 6a4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6a8:	021e0000 	andseq	r0, lr, #0
 6ac:	00040000 	andeq	r0, r4, r0
 6b0:	000002ea 	andeq	r0, r0, sl, ror #5
 6b4:	00870104 	addeq	r0, r7, r4, lsl #2
 6b8:	330c0000 	movwcc	r0, #49152	; 0xc000
 6bc:	08000003 	stmdaeq	r0, {r0, r1}
 6c0:	dc200007 	stcle	0, cr0, [r0], #-28	; 0xffffffe4
 6c4:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 6c8:	02000002 	andeq	r0, r0, #2
 6cc:	0000006d 	andeq	r0, r0, sp, rrx
 6d0:	42050202 	andmi	r0, r5, #536870912	; 0x20000000
 6d4:	03000000 	movweq	r0, #0
 6d8:	06020078 			; <UNDEFINED> instruction: 0x06020078
 6dc:	00000042 	andeq	r0, r0, r2, asr #32
 6e0:	00790300 	rsbseq	r0, r9, r0, lsl #6
 6e4:	00420702 	subeq	r0, r2, r2, lsl #14
 6e8:	00010000 	andeq	r0, r1, r0
 6ec:	79080104 	stmdbvc	r8, {r2, r8}
 6f0:	05000000 	streq	r0, [r0, #-0]
 6f4:	00000185 	andeq	r0, r0, r5, lsl #3
 6f8:	00210802 	eoreq	r0, r1, r2, lsl #16
 6fc:	32020000 	andcc	r0, r2, #0
 700:	d4000001 	strle	r0, [r0], #-1
 704:	00900b02 	addseq	r0, r0, r2, lsl #22
 708:	7b060000 	blvc	180710 <startup-0x1fe7f8f0>
 70c:	02000001 	andeq	r0, r0, #1
 710:	0000900c 	andeq	r9, r0, ip
 714:	0a060000 	beq	18071c <startup-0x1fe7f8e4>
 718:	02000000 	andeq	r0, r0, #0
 71c:	0000900d 	andeq	r9, r0, sp
 720:	1c060400 	cfstrsne	mvf0, [r6], {-0}
 724:	02000000 	andeq	r0, r0, #0
 728:	0000900e 	andeq	r9, r0, lr
 72c:	70030800 	andvc	r0, r3, r0, lsl #16
 730:	0f020078 	svceq	0x00020078
 734:	00000097 	muleq	r0, r7, r0
 738:	0407000c 	streq	r0, [r7], #-12
 73c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 740:	00490800 	subeq	r0, r9, r0, lsl #16
 744:	00a70000 	adceq	r0, r7, r0
 748:	a7090000 	strge	r0, [r9, -r0]
 74c:	63000000 	movwvs	r0, #0
 750:	07040400 	streq	r0, [r4, -r0, lsl #8]
 754:	00000168 	andeq	r0, r0, r8, ror #2
 758:	00011f05 	andeq	r1, r1, r5, lsl #30
 75c:	b9100200 	ldmdblt	r0, {r9}
 760:	0a000000 	beq	768 <startup-0x1ffff898>
 764:	00005404 	andeq	r5, r0, r4, lsl #8
 768:	018b0200 	orreq	r0, fp, r0, lsl #4
 76c:	02240000 	eoreq	r0, r4, #0
 770:	00013812 	andeq	r3, r1, r2, lsl r8
 774:	65670300 	strbvs	r0, [r7, #-768]!	; 0xfffffd00
 778:	1302006f 	movwne	r0, #8303	; 0x206f
 77c:	000000ae 	andeq	r0, r0, lr, lsr #1
 780:	01760600 	cmneq	r6, r0, lsl #12
 784:	14020000 	strne	r0, [r2], #-0
 788:	00000090 	muleq	r0, r0, r0
 78c:	00000604 	andeq	r0, r0, r4, lsl #12
 790:	14020000 	strne	r0, [r2], #-0
 794:	00000090 	muleq	r0, r0, r0
 798:	01710608 	cmneq	r1, r8, lsl #12
 79c:	15020000 	strne	r0, [r2, #-0]
 7a0:	00000090 	muleq	r0, r0, r0
 7a4:	0005060c 	andeq	r0, r5, ip, lsl #12
 7a8:	15020000 	strne	r0, [r2, #-0]
 7ac:	00000090 	muleq	r0, r0, r0
 7b0:	00220610 	eoreq	r0, r2, r0, lsl r6
 7b4:	16020000 	strne	r0, [r2], -r0
 7b8:	00000149 	andeq	r0, r0, r9, asr #2
 7bc:	020e0614 	andeq	r0, lr, #20, 12	; 0x1400000
 7c0:	17020000 	strne	r0, [r2, -r0]
 7c4:	00000149 	andeq	r0, r0, r9, asr #2
 7c8:	00740618 	rsbseq	r0, r4, r8, lsl r6
 7cc:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
 7d0:	00000149 	andeq	r0, r0, r9, asr #2
 7d4:	0063061c 	rsbeq	r0, r3, ip, lsl r6
 7d8:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
 7dc:	00000164 	andeq	r0, r0, r4, ror #2
 7e0:	430b0020 	movwmi	r0, #45088	; 0xb020
 7e4:	0c000001 	stceq	0, cr0, [r0], {1}
 7e8:	00000143 	andeq	r0, r0, r3, asr #2
 7ec:	bf040a00 	svclt	0x00040a00
 7f0:	0a000000 	beq	7f8 <startup-0x1ffff808>
 7f4:	00013804 	andeq	r3, r1, r4, lsl #16
 7f8:	01640b00 	cmneq	r4, r0, lsl #22
 7fc:	430c0000 	movwmi	r0, #49152	; 0xc000
 800:	0c000001 	stceq	0, cr0, [r0], {1}
 804:	00000090 	muleq	r0, r0, r0
 808:	0000900c 	andeq	r9, r0, ip
 80c:	040a0000 	streq	r0, [sl], #-0
 810:	0000014f 	andeq	r0, r0, pc, asr #2
 814:	00016005 	andeq	r6, r1, r5
 818:	431a0200 	tstmi	sl, #0, 4
 81c:	0d000001 	stceq	0, cr0, [r0, #-4]
 820:	00000322 	andeq	r0, r0, r2, lsr #6
 824:	07c40f01 	strbeq	r0, [r4, r1, lsl #30]
 828:	00202000 	eoreq	r2, r0, r0
 82c:	9c010000 	stcls	0, cr0, [r1], {-0}
 830:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
 834:	00019e0e 	andeq	r9, r1, lr, lsl #28
 838:	6a0f0100 	bvs	3c0c40 <startup-0x1fc3f3c0>
 83c:	02000001 	andeq	r0, r0, #1
 840:	780f7491 	stmdavc	pc, {r0, r4, r7, sl, ip, sp, lr}	; <UNPREDICTABLE>
 844:	900f0100 	andls	r0, pc, r0, lsl #2
 848:	02000000 	andeq	r0, r0, #0
 84c:	790f7091 	stmdbvc	pc, {r0, r4, r7, ip, sp, lr}	; <UNPREDICTABLE>
 850:	900f0100 	andls	r0, pc, r0, lsl #2
 854:	02000000 	andeq	r0, r0, #0
 858:	10006c91 	mulne	r0, r1, ip
 85c:	0000036e 	andeq	r0, r0, lr, ror #6
 860:	07660901 	strbeq	r0, [r6, -r1, lsl #18]!
 864:	005e2000 	subseq	r2, lr, r0
 868:	9c010000 	stcls	0, cr0, [r1], {-0}
 86c:	000001eb 	andeq	r0, r0, fp, ror #3
 870:	00019e0e 	andeq	r9, r1, lr, lsl #28
 874:	6a090100 	bvs	240c7c <startup-0x1fdbf384>
 878:	02000001 	andeq	r0, r0, #1
 87c:	6e116c91 	mrcvs	12, 0, r6, cr1, cr1, {4}
 880:	4e200007 	cdpmi	0, 2, cr0, cr0, cr7, {0}
 884:	12000000 	andne	r0, r0, #0
 888:	0a010069 	beq	40a34 <startup-0x1ffbf5cc>
 88c:	00000090 	muleq	r0, r0, r0
 890:	00749102 	rsbseq	r9, r4, r2, lsl #2
 894:	037b1300 	cmneq	fp, #0, 6
 898:	04010000 	streq	r0, [r1], #-0
 89c:	20000708 	andcs	r0, r0, r8, lsl #14
 8a0:	0000005e 	andeq	r0, r0, lr, asr r0
 8a4:	9e0e9c01 	cdpls	12, 0, cr9, cr14, cr1, {0}
 8a8:	01000001 	tsteq	r0, r1
 8ac:	00016a04 	andeq	r6, r1, r4, lsl #20
 8b0:	6c910200 	lfmvs	f0, 4, [r1], {0}
 8b4:	00071011 	andeq	r1, r7, r1, lsl r0
 8b8:	00004e20 	andeq	r4, r0, r0, lsr #28
 8bc:	00691200 	rsbeq	r1, r9, r0, lsl #4
 8c0:	00900501 	addseq	r0, r0, r1, lsl #10
 8c4:	91020000 	mrsls	r0, (UNDEF: 2)
 8c8:	00000074 	andeq	r0, r0, r4, ror r0
 8cc:	0000008d 	andeq	r0, r0, sp, lsl #1
 8d0:	03f90004 	mvnseq	r0, #4
 8d4:	01040000 	mrseq	r0, (UNDEF: 4)
 8d8:	00000087 	andeq	r0, r0, r7, lsl #1
 8dc:	0003c40c 	andeq	ip, r3, ip, lsl #8
 8e0:	0007e400 	andeq	lr, r7, r0, lsl #8
 8e4:	0000a020 	andeq	sl, r0, r0, lsr #32
 8e8:	00035900 	andeq	r5, r3, r0, lsl #18
 8ec:	03a00200 	moveq	r0, #0, 4
 8f0:	20010000 	andcs	r0, r1, r0
 8f4:	20000872 	andcs	r0, r0, r2, ror r8
 8f8:	00000012 	andeq	r0, r0, r2, lsl r0
 8fc:	87039c01 	strhi	r9, [r3, -r1, lsl #24]
 900:	01000003 	tsteq	r0, r3
 904:	00085418 	andeq	r5, r8, r8, lsl r4
 908:	00001e20 	andeq	r1, r0, r0, lsr #28
 90c:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
 910:	04000000 	streq	r0, [r0], #-0
 914:	0100736d 	tsteq	r0, sp, ror #6
 918:	00005518 	andeq	r5, r0, r8, lsl r5
 91c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 920:	07040500 	streq	r0, [r4, -r0, lsl #10]
 924:	00000393 	muleq	r0, r3, r3
 928:	0003b803 	andeq	fp, r3, r3, lsl #16
 92c:	280f0100 	stmdacs	pc, {r8}	; <UNPREDICTABLE>
 930:	2c200008 	stccs	0, cr0, [r0], #-32	; 0xffffffe0
 934:	01000000 	mrseq	r0, (UNDEF: 0)
 938:	00007f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
 93c:	73750400 	cmnvc	r5, #0, 8
 940:	550f0100 	strpl	r0, [pc, #-256]	; 848 <startup-0x1ffff7b8>
 944:	02000000 	andeq	r0, r0, #0
 948:	06007491 			; <UNDEFINED> instruction: 0x06007491
 94c:	000003ac 	andeq	r0, r0, ip, lsr #7
 950:	07e40401 	strbeq	r0, [r4, r1, lsl #8]!
 954:	00442000 	subeq	r2, r4, r0
 958:	9c010000 	stcls	0, cr0, [r1], {-0}
 95c:	0001e900 	andeq	lr, r1, r0, lsl #18
 960:	6f000400 	svcvs	0x00000400
 964:	04000004 	streq	r0, [r0], #-4
 968:	00008701 	andeq	r8, r0, r1, lsl #14
 96c:	041a0c00 	ldreq	r0, [sl], #-3072	; 0xfffff400
 970:	08840000 	stmeq	r4, {}	; <UNPREDICTABLE>
 974:	005e2000 	subseq	r2, lr, r0
 978:	03dd0000 	bicseq	r0, sp, #0
 97c:	6d020000 	stcvs	0, cr0, [r2, #-0]
 980:	02000000 	andeq	r0, r0, #0
 984:	00420502 	subeq	r0, r2, r2, lsl #10
 988:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
 98c:	42060200 	andmi	r0, r6, #0, 4
 990:	00000000 	andeq	r0, r0, r0
 994:	02007903 	andeq	r7, r0, #49152	; 0xc000
 998:	00004207 	andeq	r4, r0, r7, lsl #4
 99c:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
 9a0:	00790801 	rsbseq	r0, r9, r1, lsl #16
 9a4:	85050000 	strhi	r0, [r5, #-0]
 9a8:	02000001 	andeq	r0, r0, #1
 9ac:	00002108 	andeq	r2, r0, r8, lsl #2
 9b0:	01320200 	teqeq	r2, r0, lsl #4
 9b4:	02d40000 	sbcseq	r0, r4, #0
 9b8:	0000900b 	andeq	r9, r0, fp
 9bc:	017b0600 	cmneq	fp, r0, lsl #12
 9c0:	0c020000 	stceq	0, cr0, [r2], {-0}
 9c4:	00000090 	muleq	r0, r0, r0
 9c8:	000a0600 	andeq	r0, sl, r0, lsl #12
 9cc:	0d020000 	stceq	0, cr0, [r2, #-0]
 9d0:	00000090 	muleq	r0, r0, r0
 9d4:	001c0604 	andseq	r0, ip, r4, lsl #12
 9d8:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
 9dc:	00000090 	muleq	r0, r0, r0
 9e0:	78700308 	ldmdavc	r0!, {r3, r8, r9}^
 9e4:	970f0200 	strls	r0, [pc, -r0, lsl #4]
 9e8:	0c000000 	stceq	0, cr0, [r0], {-0}
 9ec:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
 9f0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 9f4:	00004908 	andeq	r4, r0, r8, lsl #18
 9f8:	0000a700 	andeq	sl, r0, r0, lsl #14
 9fc:	00a70900 	adceq	r0, r7, r0, lsl #18
 a00:	00630000 	rsbeq	r0, r3, r0
 a04:	68070404 	stmdavs	r7, {r2, sl}
 a08:	05000001 	streq	r0, [r0, #-1]
 a0c:	00000120 	andeq	r0, r0, r0, lsr #2
 a10:	00541002 	subseq	r1, r4, r2
 a14:	1f050000 	svcne	0x00050000
 a18:	02000001 	andeq	r0, r0, #1
 a1c:	0000c410 	andeq	ip, r0, r0, lsl r4
 a20:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
 a24:	02000000 	andeq	r0, r0, #0
 a28:	0000018b 	andeq	r0, r0, fp, lsl #3
 a2c:	43120224 	tstmi	r2, #36, 4	; 0x40000002
 a30:	03000001 	movweq	r0, #1
 a34:	006f6567 	rsbeq	r6, pc, r7, ror #10
 a38:	00b91302 	adcseq	r1, r9, r2, lsl #6
 a3c:	06000000 	streq	r0, [r0], -r0
 a40:	00000176 	andeq	r0, r0, r6, ror r1
 a44:	00901402 	addseq	r1, r0, r2, lsl #8
 a48:	06040000 	streq	r0, [r4], -r0
 a4c:	00000000 	andeq	r0, r0, r0
 a50:	00901402 	addseq	r1, r0, r2, lsl #8
 a54:	06080000 	streq	r0, [r8], -r0
 a58:	00000171 	andeq	r0, r0, r1, ror r1
 a5c:	00901502 	addseq	r1, r0, r2, lsl #10
 a60:	060c0000 	streq	r0, [ip], -r0
 a64:	00000005 	andeq	r0, r0, r5
 a68:	00901502 	addseq	r1, r0, r2, lsl #10
 a6c:	06100000 	ldreq	r0, [r0], -r0
 a70:	00000022 	andeq	r0, r0, r2, lsr #32
 a74:	01541602 	cmpeq	r4, r2, lsl #12
 a78:	06140000 	ldreq	r0, [r4], -r0
 a7c:	0000020e 	andeq	r0, r0, lr, lsl #4
 a80:	01541702 	cmpeq	r4, r2, lsl #14
 a84:	06180000 	ldreq	r0, [r8], -r0
 a88:	00000074 	andeq	r0, r0, r4, ror r0
 a8c:	01541802 	cmpeq	r4, r2, lsl #16
 a90:	061c0000 	ldreq	r0, [ip], -r0
 a94:	00000063 	andeq	r0, r0, r3, rrx
 a98:	016f1902 	cmneq	pc, r2, lsl #18
 a9c:	00200000 	eoreq	r0, r0, r0
 aa0:	00014e0b 	andeq	r4, r1, fp, lsl #28
 aa4:	014e0c00 	cmpeq	lr, r0, lsl #24
 aa8:	0a000000 	beq	ab0 <startup-0x1ffff550>
 aac:	0000ca04 	andeq	ip, r0, r4, lsl #20
 ab0:	43040a00 	movwmi	r0, #18944	; 0x4a00
 ab4:	0b000001 	bleq	ac0 <startup-0x1ffff540>
 ab8:	0000016f 	andeq	r0, r0, pc, ror #2
 abc:	00014e0c 	andeq	r4, r1, ip, lsl #28
 ac0:	00900c00 	addseq	r0, r0, r0, lsl #24
 ac4:	900c0000 	andls	r0, ip, r0
 ac8:	00000000 	andeq	r0, r0, r0
 acc:	015a040a 	cmpeq	sl, sl, lsl #8
 ad0:	61050000 	mrsvs	r0, (UNDEF: 5)
 ad4:	02000001 	andeq	r0, r0, #1
 ad8:	0000ca1a 	andeq	ip, r0, sl, lsl sl
 adc:	01600500 	cmneq	r0, r0, lsl #10
 ae0:	1a020000 	bne	80ae8 <startup-0x1ff7f518>
 ae4:	0000014e 	andeq	r0, r0, lr, asr #2
 ae8:	0001500d 	andeq	r5, r1, sp
 aec:	75040300 	strvc	r0, [r4, #-768]	; 0xfffffd00
 af0:	0d000001 	stceq	0, cr0, [r0, #-4]
 af4:	00000010 	andeq	r0, r0, r0, lsl r0
 af8:	01750503 	cmneq	r5, r3, lsl #10
 afc:	0a0e0000 	beq	380b04 <startup-0x1fc7f4fc>
 b00:	01000004 	tsteq	r0, r4
 b04:	0000ae03 	andeq	sl, r0, r3, lsl #28
 b08:	18030500 	stmdane	r3, {r8, sl}
 b0c:	0f20000b 	svceq	0x0020000b
 b10:	0000018b 	andeq	r0, r0, fp, lsl #3
 b14:	03052301 	movweq	r2, #21249	; 0x5301
 b18:	20000bec 	andcs	r0, r0, ip, ror #23
 b1c:	0001960f 	andeq	r9, r1, pc, lsl #12
 b20:	052d0100 	streq	r0, [sp, #-256]!	; 0xffffff00
 b24:	000c1003 	andeq	r1, ip, r3
 b28:	03fe1020 	mvnseq	r1, #32
 b2c:	37010000 	strcc	r0, [r1, -r0]
 b30:	20000884 	andcs	r0, r0, r4, lsl #17
 b34:	0000005e 	andeq	r0, r0, lr, asr r0
 b38:	9e119c01 	cdpls	12, 1, cr9, cr1, cr1, {0}
 b3c:	01000001 	tsteq	r0, r1
 b40:	00018037 	andeq	r8, r1, r7, lsr r0
 b44:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 b48:	010a0000 	mrseq	r0, (UNDEF: 10)
 b4c:	00040000 	andeq	r0, r4, r0
 b50:	00000552 	andeq	r0, r0, r2, asr r5
 b54:	00870104 	addeq	r0, r7, r4, lsl #2
 b58:	700c0000 	andvc	r0, ip, r0
 b5c:	e4000004 	str	r0, [r0], #-4
 b60:	3c200008 	stccc	0, cr0, [r0], #-32	; 0xffffffe0
 b64:	67000001 	strvs	r0, [r0, -r1]
 b68:	02000004 	andeq	r0, r0, #4
 b6c:	00000455 	andeq	r0, r0, r5, asr r4
 b70:	008a1601 	addeq	r1, sl, r1, lsl #12
 b74:	09880000 	stmibeq	r8, {}	; <UNPREDICTABLE>
 b78:	00982000 	addseq	r2, r8, r0
 b7c:	9c010000 	stcls	0, cr0, [r1], {-0}
 b80:	0000008a 	andeq	r0, r0, sl, lsl #1
 b84:	0004b203 	andeq	fp, r4, r3, lsl #4
 b88:	97170100 	ldrls	r0, [r7, -r0, lsl #2]
 b8c:	02000000 	andeq	r0, r0, #0
 b90:	5a035c91 	bpl	d7ddc <startup-0x1ff28224>
 b94:	01000004 	tsteq	r0, r4
 b98:	0000ae18 	andeq	sl, r0, r8, lsl lr
 b9c:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
 ba0:	0420000c 	strteq	r0, [r0], #-12
 ba4:	2000099a 	mulcs	r0, sl, r9
 ba8:	0000006e 	andeq	r0, r0, lr, rrx
 bac:	776f7205 	strbvc	r7, [pc, -r5, lsl #4]!
 bb0:	be190100 	muflte	f0, f1, f0
 bb4:	02000000 	andeq	r0, r0, #0
 bb8:	a4046f91 	strge	r6, [r4], #-3985	; 0xfffff06f
 bbc:	4c200009 	stcmi	0, cr0, [r0], #-36	; 0xffffffdc
 bc0:	03000000 	movweq	r0, #0
 bc4:	000004ab 	andeq	r0, r0, fp, lsr #9
 bc8:	00be1b01 	adcseq	r1, lr, r1, lsl #22
 bcc:	91020000 	mrsls	r0, (UNDEF: 2)
 bd0:	0000006e 	andeq	r0, r0, lr, rrx
 bd4:	00900406 	addseq	r0, r0, r6, lsl #8
 bd8:	01070000 	mrseq	r0, (UNDEF: 7)
 bdc:	00007908 	andeq	r7, r0, r8, lsl #18
 be0:	00900800 	addseq	r0, r0, r0, lsl #16
 be4:	00a70000 	adceq	r0, r7, r0
 be8:	a7090000 	strge	r0, [r9, -r0]
 bec:	0f000000 	svceq	0x00000000
 bf0:	07040700 	streq	r0, [r4, -r0, lsl #14]
 bf4:	00000168 	andeq	r0, r0, r8, ror #2
 bf8:	00009008 	andeq	r9, r0, r8
 bfc:	0000be00 	andeq	fp, r0, r0, lsl #28
 c00:	00a70900 	adceq	r0, r7, r0, lsl #18
 c04:	00030000 	andeq	r0, r3, r0
 c08:	82080107 	andhi	r0, r8, #-1073741823	; 0xc0000001
 c0c:	0a000000 	beq	c14 <startup-0x1ffff3ec>
 c10:	00000465 	andeq	r0, r0, r5, ror #8
 c14:	00900d01 	addseq	r0, r0, r1, lsl #26
 c18:	093c0000 	ldmdbeq	ip!, {}	; <UNPREDICTABLE>
 c1c:	004c2000 	subeq	r2, ip, r0
 c20:	9c010000 	stcls	0, cr0, [r1], {-0}
 c24:	000000ed 	andeq	r0, r0, sp, ror #1
 c28:	72646905 	rsbvc	r6, r4, #81920	; 0x14000
 c2c:	900e0100 	andls	r0, lr, r0, lsl #2
 c30:	02000000 	andeq	r0, r0, #0
 c34:	0b007791 	bleq	1ea80 <startup-0x1ffe1580>
 c38:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
 c3c:	08e40301 	stmiaeq	r4!, {r0, r8, r9}^
 c40:	00582000 	subseq	r2, r8, r0
 c44:	9c010000 	stcls	0, cr0, [r1], {-0}
 c48:	776f720c 	strbvc	r7, [pc, -ip, lsl #4]!
 c4c:	90030100 	andls	r0, r3, r0, lsl #2
 c50:	02000000 	andeq	r0, r0, #0
 c54:	00007791 	muleq	r0, r1, r7

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03011303 	movweq	r1, #4867	; 0x1303
  20:	3a0b0b0e 	bcc	2c2c60 <startup-0x1fd3d3a0>
  24:	010b3b0b 	tsteq	fp, fp, lsl #22
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	0b381349 	bleq	e04d60 <startup-0x1f1fb2a0>
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	3f13490b 	svccc	0x0013490b
  98:	00193c19 	andseq	r3, r9, r9, lsl ip
  9c:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	01111927 	tsteq	r1, r7, lsr #18
  ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b4:	0f000013 	svceq	0x00000013
  b8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c4:	0b100000 	bleq	4000cc <startup-0x1fbfff34>
  c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  cc:	11000006 	tstne	r0, r6
  d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  d4:	0b3b0b3a 	bleq	ec2dc4 <startup-0x1f13d23c>
  d8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  dc:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
  e0:	03193f00 	tsteq	r9, #0, 30
  e4:	3b0b3a0e 	blcc	2ce924 <startup-0x1fd316dc>
  e8:	1119270b 	tstne	r9, fp, lsl #14
  ec:	40061201 	andmi	r1, r6, r1, lsl #4
  f0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  f4:	01000000 	mrseq	r0, (UNDEF: 0)
  f8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  fc:	0e030b13 	vmoveq.32	d3[0], r0
 100:	06120111 			; <UNDEFINED> instruction: 0x06120111
 104:	00001710 	andeq	r1, r0, r0, lsl r7
 108:	03011302 	movweq	r1, #4866	; 0x1302
 10c:	3a0b0b0e 	bcc	2c2d4c <startup-0x1fd3d2b4>
 110:	010b3b0b 	tsteq	fp, fp, lsl #22
 114:	03000013 	movweq	r0, #19
 118:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	0b381349 	bleq	e04e4c <startup-0x1f1fb1b4>
 124:	24040000 	strcs	r0, [r4], #-0
 128:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 12c:	000e030b 	andeq	r0, lr, fp, lsl #6
 130:	00160500 	andseq	r0, r6, r0, lsl #10
 134:	0b3a0e03 	bleq	e83948 <startup-0x1f17c6b8>
 138:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 13c:	0d060000 	stceq	0, cr0, [r6, #-0]
 140:	3a0e0300 	bcc	380d48 <startup-0x1fc7f2b8>
 144:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 148:	000b3813 	andeq	r3, fp, r3, lsl r8
 14c:	00240700 	eoreq	r0, r4, r0, lsl #14
 150:	0b3e0b0b 	bleq	f82d84 <startup-0x1f07d27c>
 154:	00000803 	andeq	r0, r0, r3, lsl #16
 158:	49010108 	stmdbmi	r1, {r3, r8}
 15c:	00130113 	andseq	r0, r3, r3, lsl r1
 160:	00210900 	eoreq	r0, r1, r0, lsl #18
 164:	0b2f1349 	bleq	bc4e90 <startup-0x1f43b170>
 168:	0f0a0000 	svceq	0x000a0000
 16c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 170:	0b000013 	bleq	1c4 <startup-0x1ffffe3c>
 174:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 178:	00001301 	andeq	r1, r0, r1, lsl #6
 17c:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 180:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 184:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 188:	0b3b0b3a 	bleq	ec2e78 <startup-0x1f13d188>
 18c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 190:	0000193c 	andeq	r1, r0, ip, lsr r9
 194:	0300340e 	movweq	r3, #1038	; 0x40e
 198:	3b0b3a0e 	blcc	2ce9d8 <startup-0x1fd31628>
 19c:	3f13490b 	svccc	0x0013490b
 1a0:	00180219 	andseq	r0, r8, r9, lsl r2
 1a4:	00340f00 	eorseq	r0, r4, r0, lsl #30
 1a8:	0b3a1347 	bleq	e84ecc <startup-0x1f17b134>
 1ac:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 1b0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 1b4:	03193f01 	tsteq	r9, #1, 30
 1b8:	3b0b3a0e 	blcc	2ce9f8 <startup-0x1fd31608>
 1bc:	1119270b 	tstne	r9, fp, lsl #14
 1c0:	40061201 	andmi	r1, r6, r1, lsl #4
 1c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1c8:	05110000 	ldreq	r0, [r1, #-0]
 1cc:	3a0e0300 	bcc	380dd4 <startup-0x1fc7f22c>
 1d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d4:	00180213 	andseq	r0, r8, r3, lsl r2
 1d8:	00341200 	eorseq	r1, r4, r0, lsl #4
 1dc:	0b3a0803 	bleq	e821f0 <startup-0x1f17de10>
 1e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1e4:	00001802 	andeq	r1, r0, r2, lsl #16
 1e8:	01110100 	tsteq	r1, r0, lsl #2
 1ec:	0b130e25 	bleq	4c3a88 <startup-0x1fb3c578>
 1f0:	01110e03 	tsteq	r1, r3, lsl #28
 1f4:	17100612 			; <UNDEFINED> instruction: 0x17100612
 1f8:	16020000 	strne	r0, [r2], -r0
 1fc:	3a0e0300 	bcc	380e04 <startup-0x1fc7f1fc>
 200:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 204:	03000013 	movweq	r0, #19
 208:	0b0b0024 	bleq	2c02a0 <startup-0x1fd3fd60>
 20c:	0e030b3e 	vmoveq.16	d3[0], r0
 210:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 214:	03193f01 	tsteq	r9, #1, 30
 218:	3b0b3a0e 	blcc	2cea58 <startup-0x1fd315a8>
 21c:	1119270b 	tstne	r9, fp, lsl #14
 220:	40061201 	andmi	r1, r6, r1, lsl #4
 224:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 228:	00001301 	andeq	r1, r0, r1, lsl #6
 22c:	03000505 	movweq	r0, #1285	; 0x505
 230:	3b0b3a08 	blcc	2cea58 <startup-0x1fd315a8>
 234:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 238:	06000018 			; <UNDEFINED> instruction: 0x06000018
 23c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 240:	0b3b0b3a 	bleq	ec2f30 <startup-0x1f13d0d0>
 244:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 248:	0b070000 	bleq	1c0250 <startup-0x1fe3fdb0>
 24c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 250:	08000006 	stmdaeq	r0, {r1, r2}
 254:	08030034 	stmdaeq	r3, {r2, r4, r5}
 258:	0b3b0b3a 	bleq	ec2f48 <startup-0x1f13d0b8>
 25c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 260:	24090000 	strcs	r0, [r9], #-0
 264:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 268:	0008030b 	andeq	r0, r8, fp, lsl #6
 26c:	002e0a00 	eoreq	r0, lr, r0, lsl #20
 270:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 274:	0b3b0b3a 	bleq	ec2f64 <startup-0x1f13d09c>
 278:	01111927 	tsteq	r1, r7, lsr #18
 27c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 280:	00194296 	mulseq	r9, r6, r2
 284:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 288:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 28c:	0b3b0b3a 	bleq	ec2f7c <startup-0x1f13d084>
 290:	13491927 	movtne	r1, #39207	; 0x9927
 294:	06120111 			; <UNDEFINED> instruction: 0x06120111
 298:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 29c:	00130119 	andseq	r0, r3, r9, lsl r1
 2a0:	00050c00 	andeq	r0, r5, r0, lsl #24
 2a4:	0b3a0e03 	bleq	e83ab8 <startup-0x1f17c548>
 2a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2ac:	00001802 	andeq	r1, r0, r2, lsl #16
 2b0:	55010b0d 	strpl	r0, [r1, #-2829]	; 0xfffff4f3
 2b4:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
 2b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2bc:	0b3a0e03 	bleq	e83ad0 <startup-0x1f17c530>
 2c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2cc:	00130119 	andseq	r0, r3, r9, lsl r1
 2d0:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 2d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2d8:	0b3b0b3a 	bleq	ec2fc8 <startup-0x1f13d038>
 2dc:	01111927 	tsteq	r1, r7, lsr #18
 2e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2e4:	00194297 	mulseq	r9, r7, r2
 2e8:	11010000 	mrsne	r0, (UNDEF: 1)
 2ec:	130e2501 	movwne	r2, #58625	; 0xe501
 2f0:	110e030b 	tstne	lr, fp, lsl #6
 2f4:	10061201 	andne	r1, r6, r1, lsl #4
 2f8:	02000017 	andeq	r0, r0, #23
 2fc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 300:	0b3a0b0b 	bleq	e82f34 <startup-0x1f17d0cc>
 304:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 308:	0d030000 	stceq	0, cr0, [r3, #-0]
 30c:	3a080300 	bcc	200f14 <startup-0x1fdff0ec>
 310:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 314:	000b3813 	andeq	r3, fp, r3, lsl r8
 318:	00240400 	eoreq	r0, r4, r0, lsl #8
 31c:	0b3e0b0b 	bleq	f82f50 <startup-0x1f07d0b0>
 320:	00000e03 	andeq	r0, r0, r3, lsl #28
 324:	03001605 	movweq	r1, #1541	; 0x605
 328:	3b0b3a0e 	blcc	2ceb68 <startup-0x1fd31498>
 32c:	0013490b 	andseq	r4, r3, fp, lsl #18
 330:	000d0600 	andeq	r0, sp, r0, lsl #12
 334:	0b3a0e03 	bleq	e83b48 <startup-0x1f17c4b8>
 338:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 33c:	00000b38 	andeq	r0, r0, r8, lsr fp
 340:	0b002407 	bleq	9364 <startup-0x1fff6c9c>
 344:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 348:	08000008 	stmdaeq	r0, {r3}
 34c:	13490101 	movtne	r0, #37121	; 0x9101
 350:	00001301 	andeq	r1, r0, r1, lsl #6
 354:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 358:	000b2f13 	andeq	r2, fp, r3, lsl pc
 35c:	000f0a00 	andeq	r0, pc, r0, lsl #20
 360:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 364:	150b0000 	strne	r0, [fp, #-0]
 368:	01192701 	tsteq	r9, r1, lsl #14
 36c:	0c000013 	stceq	0, cr0, [r0], {19}
 370:	13490005 	movtne	r0, #36869	; 0x9005
 374:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 378:	03193f01 	tsteq	r9, #1, 30
 37c:	3b0b3a0e 	blcc	2cebbc <startup-0x1fd31444>
 380:	1119270b 	tstne	r9, fp, lsl #14
 384:	40061201 	andmi	r1, r6, r1, lsl #4
 388:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 38c:	00001301 	andeq	r1, r0, r1, lsl #6
 390:	0300050e 	movweq	r0, #1294	; 0x50e
 394:	3b0b3a0e 	blcc	2cebd4 <startup-0x1fd3142c>
 398:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 39c:	0f000018 	svceq	0x00000018
 3a0:	08030005 	stmdaeq	r3, {r0, r2}
 3a4:	0b3b0b3a 	bleq	ec3094 <startup-0x1f13cf6c>
 3a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3ac:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 3b0:	03193f01 	tsteq	r9, #1, 30
 3b4:	3b0b3a0e 	blcc	2cebf4 <startup-0x1fd3140c>
 3b8:	1119270b 	tstne	r9, fp, lsl #14
 3bc:	40061201 	andmi	r1, r6, r1, lsl #4
 3c0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3c4:	00001301 	andeq	r1, r0, r1, lsl #6
 3c8:	11010b11 	tstne	r1, r1, lsl fp
 3cc:	00061201 	andeq	r1, r6, r1, lsl #4
 3d0:	00341200 	eorseq	r1, r4, r0, lsl #4
 3d4:	0b3a0803 	bleq	e823e8 <startup-0x1f17dc18>
 3d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3dc:	00001802 	andeq	r1, r0, r2, lsl #16
 3e0:	3f012e13 	svccc	0x00012e13
 3e4:	3a0e0319 	bcc	381050 <startup-0x1fc7efb0>
 3e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3f0:	96184006 	ldrls	r4, [r8], -r6
 3f4:	00001942 	andeq	r1, r0, r2, asr #18
 3f8:	01110100 	tsteq	r1, r0, lsl #2
 3fc:	0b130e25 	bleq	4c3c98 <startup-0x1fb3c368>
 400:	01110e03 	tsteq	r1, r3, lsl #28
 404:	17100612 			; <UNDEFINED> instruction: 0x17100612
 408:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
 40c:	03193f00 	tsteq	r9, #0, 30
 410:	3b0b3a0e 	blcc	2cec50 <startup-0x1fd313b0>
 414:	1119270b 	tstne	r9, fp, lsl #14
 418:	40061201 	andmi	r1, r6, r1, lsl #4
 41c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 420:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 424:	03193f01 	tsteq	r9, #1, 30
 428:	3b0b3a0e 	blcc	2cec68 <startup-0x1fd31398>
 42c:	1119270b 	tstne	r9, fp, lsl #14
 430:	40061201 	andmi	r1, r6, r1, lsl #4
 434:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 438:	00001301 	andeq	r1, r0, r1, lsl #6
 43c:	03000504 	movweq	r0, #1284	; 0x504
 440:	3b0b3a08 	blcc	2cec68 <startup-0x1fd31398>
 444:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 448:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
 44c:	0b0b0024 	bleq	2c04e4 <startup-0x1fd3fb1c>
 450:	0e030b3e 	vmoveq.16	d3[0], r0
 454:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 458:	03193f00 	tsteq	r9, #0, 30
 45c:	3b0b3a0e 	blcc	2cec9c <startup-0x1fd31364>
 460:	1119270b 	tstne	r9, fp, lsl #14
 464:	40061201 	andmi	r1, r6, r1, lsl #4
 468:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 46c:	01000000 	mrseq	r0, (UNDEF: 0)
 470:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 474:	0e030b13 	vmoveq.32	d3[0], r0
 478:	06120111 			; <UNDEFINED> instruction: 0x06120111
 47c:	00001710 	andeq	r1, r0, r0, lsl r7
 480:	03011302 	movweq	r1, #4866	; 0x1302
 484:	3a0b0b0e 	bcc	2c30c4 <startup-0x1fd3cf3c>
 488:	010b3b0b 	tsteq	fp, fp, lsl #22
 48c:	03000013 	movweq	r0, #19
 490:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 494:	0b3b0b3a 	bleq	ec3184 <startup-0x1f13ce7c>
 498:	0b381349 	bleq	e051c4 <startup-0x1f1fae3c>
 49c:	24040000 	strcs	r0, [r4], #-0
 4a0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4a4:	000e030b 	andeq	r0, lr, fp, lsl #6
 4a8:	00160500 	andseq	r0, r6, r0, lsl #10
 4ac:	0b3a0e03 	bleq	e83cc0 <startup-0x1f17c340>
 4b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4b4:	0d060000 	stceq	0, cr0, [r6, #-0]
 4b8:	3a0e0300 	bcc	3810c0 <startup-0x1fc7ef40>
 4bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4c0:	000b3813 	andeq	r3, fp, r3, lsl r8
 4c4:	00240700 	eoreq	r0, r4, r0, lsl #14
 4c8:	0b3e0b0b 	bleq	f830fc <startup-0x1f07cf04>
 4cc:	00000803 	andeq	r0, r0, r3, lsl #16
 4d0:	49010108 	stmdbmi	r1, {r3, r8}
 4d4:	00130113 	andseq	r0, r3, r3, lsl r1
 4d8:	00210900 	eoreq	r0, r1, r0, lsl #18
 4dc:	0b2f1349 	bleq	bc5208 <startup-0x1f43adf8>
 4e0:	0f0a0000 	svceq	0x000a0000
 4e4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 4e8:	0b000013 	bleq	53c <startup-0x1ffffac4>
 4ec:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 4f0:	00001301 	andeq	r1, r0, r1, lsl #6
 4f4:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 4f8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 4fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 500:	0b3b0b3a 	bleq	ec31f0 <startup-0x1f13ce10>
 504:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 508:	0000193c 	andeq	r1, r0, ip, lsr r9
 50c:	0300340e 	movweq	r3, #1038	; 0x40e
 510:	3b0b3a0e 	blcc	2ced50 <startup-0x1fd312b0>
 514:	3f13490b 	svccc	0x0013490b
 518:	00180219 	andseq	r0, r8, r9, lsl r2
 51c:	00340f00 	eorseq	r0, r4, r0, lsl #30
 520:	0b3a1347 	bleq	e85244 <startup-0x1f17adbc>
 524:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 528:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 52c:	03193f01 	tsteq	r9, #1, 30
 530:	3b0b3a0e 	blcc	2ced70 <startup-0x1fd31290>
 534:	1119270b 	tstne	r9, fp, lsl #14
 538:	40061201 	andmi	r1, r6, r1, lsl #4
 53c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 540:	05110000 	ldreq	r0, [r1, #-0]
 544:	3a0e0300 	bcc	38114c <startup-0x1fc7eeb4>
 548:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 54c:	00180213 	andseq	r0, r8, r3, lsl r2
 550:	11010000 	mrsne	r0, (UNDEF: 1)
 554:	130e2501 	movwne	r2, #58625	; 0xe501
 558:	110e030b 	tstne	lr, fp, lsl #6
 55c:	10061201 	andne	r1, r6, r1, lsl #4
 560:	02000017 	andeq	r0, r0, #23
 564:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 568:	0b3a0e03 	bleq	e83d7c <startup-0x1f17c284>
 56c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 570:	01111349 	tsteq	r1, r9, asr #6
 574:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 578:	01194296 			; <UNDEFINED> instruction: 0x01194296
 57c:	03000013 	movweq	r0, #19
 580:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 584:	0b3b0b3a 	bleq	ec3274 <startup-0x1f13cd8c>
 588:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 58c:	0b040000 	bleq	100594 <startup-0x1feffa6c>
 590:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 594:	05000006 	streq	r0, [r0, #-6]
 598:	08030034 	stmdaeq	r3, {r2, r4, r5}
 59c:	0b3b0b3a 	bleq	ec328c <startup-0x1f13cd74>
 5a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5a4:	0f060000 	svceq	0x00060000
 5a8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 5ac:	07000013 	smladeq	r0, r3, r0, r0
 5b0:	0b0b0024 	bleq	2c0648 <startup-0x1fd3f9b8>
 5b4:	0e030b3e 	vmoveq.16	d3[0], r0
 5b8:	01080000 	mrseq	r0, (UNDEF: 8)
 5bc:	01134901 	tsteq	r3, r1, lsl #18
 5c0:	09000013 	stmdbeq	r0, {r0, r1, r4}
 5c4:	13490021 	movtne	r0, #36897	; 0x9021
 5c8:	00000b2f 	andeq	r0, r0, pc, lsr #22
 5cc:	3f012e0a 	svccc	0x00012e0a
 5d0:	3a0e0319 	bcc	38123c <startup-0x1fc7edc4>
 5d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5d8:	11134919 	tstne	r3, r9, lsl r9
 5dc:	40061201 	andmi	r1, r6, r1, lsl #4
 5e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 5e4:	00001301 	andeq	r1, r0, r1, lsl #6
 5e8:	3f012e0b 	svccc	0x00012e0b
 5ec:	3a0e0319 	bcc	381258 <startup-0x1fc7eda8>
 5f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5f4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5f8:	97184006 	ldrls	r4, [r8, -r6]
 5fc:	00001942 	andeq	r1, r0, r2, asr #18
 600:	0300050c 	movweq	r0, #1292	; 0x50c
 604:	3b0b3a08 	blcc	2cee2c <startup-0x1fd311d4>
 608:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 60c:	00000018 	andeq	r0, r0, r8, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000cc 	andeq	r0, r0, ip, asr #1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	021e0002 	andseq	r0, lr, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200000dc 	ldrdcs	r0, [r0], -ip
  3c:	000000dc 	ldrdeq	r0, [r0], -ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	04230002 	strteq	r0, [r3], #-2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
  5c:	00000550 	andeq	r0, r0, r0, asr r5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	06aa0002 	strteq	r0, [sl], r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000708 	andcs	r0, r0, r8, lsl #14
  7c:	000000dc 	ldrdeq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	08cc0002 	stmiaeq	ip, {r1}^
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200007e4 	andcs	r0, r0, r4, ror #15
  9c:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	095d0002 	ldmdbeq	sp, {r1}^
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000884 	andcs	r0, r0, r4, lsl #17
  bc:	0000005e 	andeq	r0, r0, lr, asr r0
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	0b4a0002 	bleq	12800dc <startup-0x1ed7ff24>
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200008e4 	andcs	r0, r0, r4, ror #17
  dc:	0000013c 	andeq	r0, r0, ip, lsr r1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000dc 	ldrdcs	r0, [r0], -ip
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
  18:	000000f8 	strdeq	r0, [r0], -r8
  1c:	0000011e 	andeq	r0, r0, lr, lsl r1
  20:	00000120 	andeq	r0, r0, r0, lsr #2
  24:	00000122 	andeq	r0, r0, r2, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000d4 	ldrdeq	r0, [r0], -r4
   4:	00740002 	rsbseq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	706d6148 	rsbvc	r6, sp, r8, asr #2
  28:	442f7375 	strtmi	r7, [pc], #-885	; 30 <startup-0x1fffffd0>
  2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  30:	442f706f 	strtmi	r7, [pc], #-111	; 38 <startup-0x1fffffc8>
  34:	31305441 	teqcc	r0, r1, asr #8
  38:	6f432f37 	svcvs	0x00432f37
  3c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  40:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  44:	5f6c6165 	svcpl	0x006c6165
  48:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  4c:	74730000 	ldrbtvc	r0, [r3], #-0
  50:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  54:	00632e70 	rsbeq	r2, r3, r0, ror lr
  58:	6f000001 	svcvs	0x00000001
  5c:	63656a62 	cmnvs	r5, #401408	; 0x62000
  60:	00682e74 	rsbeq	r2, r8, r4, ror lr
  64:	62000001 	andvs	r0, r0, #1
  68:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
  6c:	00010068 	andeq	r0, r1, r8, rrx
  70:	64617000 	strbtvs	r7, [r1], #-0
  74:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
  78:	00010068 	andeq	r0, r1, r8, rrx
  7c:	05000000 	streq	r0, [r0, #-0]
  80:	00000002 	andeq	r0, r0, r2
  84:	010b0320 	tsteq	fp, r0, lsr #6
  88:	03025e13 	movweq	r5, #11795	; 0x2e13
  8c:	00010100 	andeq	r0, r1, r0, lsl #2
  90:	00100205 	andseq	r0, r0, r5, lsl #4
  94:	14032000 	strne	r2, [r3], #-0
  98:	673f3001 	ldrvs	r3, [pc, -r1]!
  9c:	4b595976 	blmi	165667c <startup-0x1e9a9984>
  a0:	2f2f3dde 	svccs	0x002f3dde
  a4:	00302f2f 	eorseq	r2, r0, pc, lsr #30
  a8:	34010402 	strcc	r0, [r1], #-1026	; 0xfffffbfe
  ac:	01040200 	mrseq	r0, R12_usr
  b0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
  b4:	02006701 	andeq	r6, r0, #262144	; 0x40000
  b8:	09030104 	stmdbeq	r3, {r2, r8}
  bc:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
  c0:	02005901 	andeq	r5, r0, #16384	; 0x4000
  c4:	00590104 	subseq	r0, r9, r4, lsl #2
  c8:	59010402 	stmdbpl	r1, {r1, sl}
  cc:	01040200 	mrseq	r0, R12_usr
  d0:	023c7003 	eorseq	r7, ip, #3
  d4:	01010007 	tsteq	r1, r7
  d8:	000000aa 	andeq	r0, r0, sl, lsr #1
  dc:	00710002 	rsbseq	r0, r1, r2
  e0:	01020000 	mrseq	r0, (UNDEF: 2)
  e4:	000d0efb 	strdeq	r0, [sp], -fp
  e8:	01010101 	tsteq	r1, r1, lsl #2
  ec:	01000000 	mrseq	r0, (UNDEF: 0)
  f0:	43010000 	movwmi	r0, #4096	; 0x1000
  f4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  f8:	2f737265 	svccs	0x00737265
  fc:	706d6148 	rsbvc	r6, sp, r8, asr #2
 100:	442f7375 	strtmi	r7, [pc], #-885	; 108 <startup-0x1ffffef8>
 104:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 108:	442f706f 	strtmi	r7, [pc], #-111	; 110 <startup-0x1ffffef0>
 10c:	31305441 	teqcc	r0, r1, asr #8
 110:	6f432f37 	svcvs	0x00432f37
 114:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 118:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 11c:	5f6c6165 	svcpl	0x006c6165
 120:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 124:	61620000 	cmnvs	r2, r0
 128:	632e6c6c 			; <UNDEFINED> instruction: 0x632e6c6c
 12c:	00000100 	andeq	r0, r0, r0, lsl #2
 130:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 134:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 138:	00000100 	andeq	r0, r0, r0, lsl #2
 13c:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 140:	0100682e 	tsteq	r0, lr, lsr #16
 144:	61700000 	cmnvs	r0, r0
 148:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 14c:	0100682e 	tsteq	r0, lr, lsr #16
 150:	00000000 	andeq	r0, r0, r0
 154:	00dc0205 	sbcseq	r0, ip, r5, lsl #4
 158:	1b032000 	blne	c8160 <startup-0x1ff37ea0>
 15c:	754c4b01 	strbvc	r4, [ip, #-2817]	; 0xfffff4ff
 160:	04020077 	streq	r0, [r2], #-119	; 0xffffff89
 164:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 168:	312f5c4b 			; <UNDEFINED> instruction: 0x312f5c4b
 16c:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 170:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 174:	00675f9f 	mlseq	r7, pc, pc, r5	; <UNPREDICTABLE>
 178:	06010402 	streq	r0, [r1], -r2, lsl #8
 17c:	5e9f0666 	cdppl	6, 9, cr0, cr15, cr6, {3}
 180:	00080259 	andeq	r0, r8, r9, asr r2
 184:	012e0101 			; <UNDEFINED> instruction: 0x012e0101
 188:	00020000 	andeq	r0, r2, r0
 18c:	0000005f 	andeq	r0, r0, pc, asr r0
 190:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 194:	0101000d 	tsteq	r1, sp
 198:	00000101 	andeq	r0, r0, r1, lsl #2
 19c:	00000100 	andeq	r0, r0, r0, lsl #2
 1a0:	2f3a4301 	svccs	0x003a4301
 1a4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1a8:	61482f73 	hvcvs	33523	; 0x82f3
 1ac:	7375706d 	cmnvc	r5, #109	; 0x6d
 1b0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1b4:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1b8:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 1bc:	2f373130 	svccs	0x00373130
 1c0:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 1c4:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 1c8:	6165722f 	cmnvs	r5, pc, lsr #4
 1cc:	6f705f6c 	svcvs	0x00705f6c
 1d0:	0000676e 	andeq	r6, r0, lr, ror #14
 1d4:	70617267 	rsbvc	r7, r1, r7, ror #4
 1d8:	2e636968 	vnmulcs.f16	s13, s6, s17	; <UNPREDICTABLE>
 1dc:	00010063 	andeq	r0, r1, r3, rrx
 1e0:	61726700 	cmnvs	r2, r0, lsl #14
 1e4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1e8:	0100682e 	tsteq	r0, lr, lsr #16
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	01b80205 			; <UNDEFINED> instruction: 0x01b80205
 1f4:	67182000 	ldrvs	r2, [r8, -r0]
 1f8:	d76776e5 	strble	r7, [r7, -r5, ror #13]!
 1fc:	3d4b6768 	stclcc	7, cr6, [fp, #-416]	; 0xfffffe60
 200:	033c0b03 	teqeq	ip, #3072	; 0xc00
 204:	3d4b2076 	stclcc	0, cr2, [fp, #-472]	; 0xfffffe28
 208:	20790344 	rsbscs	r0, r9, r4, asr #6
 20c:	1c413d4b 	mcrrne	13, 4, r3, r1, cr11
 210:	4c3e3d4b 	ldcmi	13, cr3, [lr], #-300	; 0xfffffed4
 214:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 218:	2f3d313d 	svccs	0x003d313d
 21c:	03303d4b 	teqeq	r0, #4800	; 0x12c0
 220:	23285879 			; <UNDEFINED> instruction: 0x23285879
 224:	67ca3e3d 			; <UNDEFINED> instruction: 0x67ca3e3d
 228:	593d3d3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 22c:	59303d2f 	ldmdbpl	r0!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 230:	3d4b3e3d 	stclcc	14, cr3, [fp, #-244]	; 0xffffff0c
 234:	313d4b31 	teqcc	sp, r1, lsr fp
 238:	4b91ca3e 	blmi	fe472b38 <returnKeys.4003+0xde471f04>
 23c:	2f3d2f59 	svccs	0x003d2f59
 240:	313d593e 	teqcc	sp, lr, lsr r9
 244:	3d313d59 	ldccc	13, cr3, [r1, #-356]!	; 0xfffffe9c
 248:	91763d3d 	cmnls	r6, sp, lsr sp
 24c:	833d593d 	teqhi	sp, #999424	; 0xf4000
 250:	593d914c 	ldmdbpl	sp!, {r2, r3, r6, r8, ip, pc}
 254:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
 258:	4c675967 			; <UNDEFINED> instruction: 0x4c675967
 25c:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 260:	4b3d3d3d 	blmi	f4f75c <startup-0x1f0b08a4>
 264:	4b4b4b4b 	blmi	12d2f98 <startup-0x1ed2d068>
 268:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
 26c:	02004bad 	andeq	r4, r0, #177152	; 0x2b400
 270:	003d0304 	eorseq	r0, sp, r4, lsl #6
 274:	49030402 	stmdbmi	r3, {r1, sl}
 278:	01040200 	mrseq	r0, R12_usr
 27c:	02003c06 	andeq	r3, r0, #1536	; 0x600
 280:	39060204 	stmdbcc	r6, {r2, r9}
 284:	01040200 	mrseq	r0, R12_usr
 288:	44063c06 	strmi	r3, [r6], #-3078	; 0xfffff3fa
 28c:	0200e64d 	andeq	lr, r0, #80740352	; 0x4d00000
 290:	66060104 	strvs	r0, [r6], -r4, lsl #2
 294:	ad685a06 	vstmdbge	r8!, {s11-s16}
 298:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 29c:	5b595959 	blpl	1656808 <startup-0x1e9a97f8>
 2a0:	4b4b784b 	blmi	12de3d4 <startup-0x1ed21c2c>
 2a4:	d7bb4d68 	ldrle	r4, [fp, r8, ror #26]!
 2a8:	ae4bbc9f 	mcrge	12, 2, fp, cr11, cr15, {4}
 2ac:	ac5a03a1 	mrrcge	3, 10, r0, sl, cr1
 2b0:	02202803 	eoreq	r2, r0, #196608	; 0x30000
 2b4:	01010005 	tsteq	r1, r5
 2b8:	0000009d 	muleq	r0, sp, r0
 2bc:	005d0002 	subseq	r0, sp, r2
 2c0:	01020000 	mrseq	r0, (UNDEF: 2)
 2c4:	000d0efb 	strdeq	r0, [sp], -fp
 2c8:	01010101 	tsteq	r1, r1, lsl #2
 2cc:	01000000 	mrseq	r0, (UNDEF: 0)
 2d0:	43010000 	movwmi	r0, #4096	; 0x1000
 2d4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 2d8:	2f737265 	svccs	0x00737265
 2dc:	706d6148 	rsbvc	r6, sp, r8, asr #2
 2e0:	442f7375 	strtmi	r7, [pc], #-885	; 2e8 <startup-0x1ffffd18>
 2e4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 2e8:	442f706f 	strtmi	r7, [pc], #-111	; 2f0 <startup-0x1ffffd10>
 2ec:	31305441 	teqcc	r0, r1, asr #8
 2f0:	6f432f37 	svcvs	0x00432f37
 2f4:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 2f8:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 2fc:	5f6c6165 	svcpl	0x006c6165
 300:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 304:	626f0000 	rsbvs	r0, pc, #0
 308:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 30c:	0100632e 	tsteq	r0, lr, lsr #6
 310:	626f0000 	rsbvs	r0, pc, #0
 314:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 318:	0100682e 	tsteq	r0, lr, lsr #16
 31c:	00000000 	andeq	r0, r0, r0
 320:	07080205 	streq	r0, [r8, -r5, lsl #4]
 324:	4b152000 	blmi	54832c <startup-0x1fab7cd4>
 328:	03040200 	movweq	r0, #16896	; 0x4200
 32c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 330:	00c70803 	sbceq	r0, r7, r3, lsl #16
 334:	06010402 	streq	r0, [r1], -r2, lsl #8
 338:	4b3f063c 	blmi	fc1c30 <startup-0x1f03e3d0>
 33c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 340:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 344:	c7080304 	strgt	r0, [r8, -r4, lsl #6]
 348:	01040200 	mrseq	r0, R12_usr
 34c:	3f063c06 	svccc	0x00063c06
 350:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 354:	01000402 	tsteq	r0, r2, lsl #8
 358:	00008001 	andeq	r8, r0, r1
 35c:	50000200 	andpl	r0, r0, r0, lsl #4
 360:	02000000 	andeq	r0, r0, #0
 364:	0d0efb01 	vstreq	d15, [lr, #-4]
 368:	01010100 	mrseq	r0, (UNDEF: 17)
 36c:	00000001 	andeq	r0, r0, r1
 370:	01000001 	tsteq	r0, r1
 374:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff939 <returnKeys.4003+0xdfffed05>
 378:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 37c:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 380:	2f737570 	svccs	0x00737570
 384:	6b736544 	blvs	1cd989c <startup-0x1e326764>
 388:	2f706f74 	svccs	0x00706f74
 38c:	30544144 	subscc	r4, r4, r4, asr #2
 390:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 394:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 398:	2f657469 	svccs	0x00657469
 39c:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 3a0:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 3a4:	74000067 	strvc	r0, [r0], #-103	; 0xffffff99
 3a8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 3ac:	0100632e 	tsteq	r0, lr, lsr #6
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	07e40205 	strbeq	r0, [r4, r5, lsl #4]!
 3b8:	2f152000 	svccs	0x00152000
 3bc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 3c0:	01040200 	mrseq	r0, R12_usr
 3c4:	69062006 	stmdbvs	r6, {r1, r2, sp}
 3c8:	214ba03d 	cmpcs	fp, sp, lsr r0
 3cc:	2a2f2f2f 	bcs	bcc090 <startup-0x1f433f70>
 3d0:	764e4c5e 			; <UNDEFINED> instruction: 0x764e4c5e
 3d4:	2f2f2f4c 	svccs	0x002f2f4c
 3d8:	01000302 	tsteq	r0, r2, lsl #6
 3dc:	00008601 	andeq	r8, r0, r1, lsl #12
 3e0:	69000200 	stmdbvs	r0, {r9}
 3e4:	02000000 	andeq	r0, r0, #0
 3e8:	0d0efb01 	vstreq	d15, [lr, #-4]
 3ec:	01010100 	mrseq	r0, (UNDEF: 17)
 3f0:	00000001 	andeq	r0, r0, r1
 3f4:	01000001 	tsteq	r0, r1
 3f8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff9bd <returnKeys.4003+0xdfffed89>
 3fc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 400:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 404:	2f737570 	svccs	0x00737570
 408:	6b736544 	blvs	1cd9920 <startup-0x1e3266e0>
 40c:	2f706f74 	svccs	0x00706f74
 410:	30544144 	subscc	r4, r4, r4, asr #2
 414:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 418:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 41c:	2f657469 	svccs	0x00657469
 420:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 424:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 428:	70000067 	andvc	r0, r0, r7, rrx
 42c:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 430:	00632e65 	rsbeq	r2, r3, r5, ror #28
 434:	6f000001 	svcvs	0x00000001
 438:	63656a62 	cmnvs	r5, #401408	; 0x62000
 43c:	00682e74 	rsbeq	r2, r8, r4, ror lr
 440:	70000001 	andvc	r0, r0, r1
 444:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 448:	00682e65 	rsbeq	r2, r8, r5, ror #28
 44c:	00000001 	andeq	r0, r0, r1
 450:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
 454:	03200008 			; <UNDEFINED> instruction: 0x03200008
 458:	4d4b0136 	stfmie	f0, [fp, #-216]	; 0xffffff28
 45c:	834b4b77 	movthi	r4, #47991	; 0xbb77
 460:	04025977 	streq	r5, [r2], #-2423	; 0xfffff689
 464:	a7010100 	strge	r0, [r1, -r0, lsl #2]
 468:	02000000 	andeq	r0, r0, #0
 46c:	00005100 	andeq	r5, r0, r0, lsl #2
 470:	fb010200 	blx	40c7a <startup-0x1ffbf386>
 474:	01000d0e 	tsteq	r0, lr, lsl #26
 478:	00010101 	andeq	r0, r1, r1, lsl #2
 47c:	00010000 	andeq	r0, r1, r0
 480:	3a430100 	bcc	10c0888 <startup-0x1ef3f778>
 484:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 488:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 48c:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 490:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 494:	6f746b73 	svcvs	0x00746b73
 498:	41442f70 	hvcmi	17136	; 0x42f0
 49c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 4a0:	646f432f 	strbtvs	r4, [pc], #-815	; 4a8 <startup-0x1ffffb58>
 4a4:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 4a8:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 4ac:	705f6c61 	subsvc	r6, pc, r1, ror #24
 4b0:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 4b4:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 4b8:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 4bc:	00010063 	andeq	r0, r1, r3, rrx
 4c0:	05000000 	streq	r0, [r0, #-0]
 4c4:	0008e402 	andeq	lr, r8, r2, lsl #8
 4c8:	91671420 	cmnls	r7, r0, lsr #8
 4cc:	4b4b4b4b 	blmi	12d3200 <startup-0x1ed2ce00>
 4d0:	4b3d924c 	blmi	f64e08 <startup-0x1f09b1f8>
 4d4:	01040200 	mrseq	r0, R12_usr
 4d8:	2f064a06 	svccs	0x00064a06
 4dc:	01040200 	mrseq	r0, R12_usr
 4e0:	2f064a06 	svccs	0x00064a06
 4e4:	01040200 	mrseq	r0, R12_usr
 4e8:	2f064a06 	svccs	0x00064a06
 4ec:	01040200 	mrseq	r0, R12_usr
 4f0:	2f064a06 	svccs	0x00064a06
 4f4:	683d6821 	ldmdavs	sp!, {r0, r5, fp, sp, lr}
 4f8:	59676759 	stmdbpl	r7!, {r0, r3, r4, r6, r8, r9, sl, sp, lr}^
 4fc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 500:	001b0802 	andseq	r0, fp, r2, lsl #16
 504:	06010402 	streq	r0, [r1], -r2, lsl #8
 508:	3d600674 	stclcc	6, cr0, [r0, #-464]!	; 0xfffffe30
 50c:	00080221 	andeq	r0, r8, r1, lsr #4
 510:	Address 0x00000510 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	59726964 	ldmdbpl	r2!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	736f7000 	cmnvc	pc, #0
   8:	69730059 	ldmdbvs	r3!, {r0, r3, r4, r6}^
   c:	0058657a 	subseq	r6, r8, sl, ror r5
  10:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
  14:	64615074 	strbtvs	r5, [r1], #-116	; 0xffffff8c
  18:	00656c64 	rsbeq	r6, r5, r4, ror #24
  1c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  20:	72640059 	rsbvc	r0, r4, #89	; 0x59
  24:	43007761 	movwmi	r7, #1889	; 0x761
  28:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  2c:	2f737265 	svccs	0x00737265
  30:	706d6148 	rsbvc	r6, sp, r8, asr #2
  34:	442f7375 	strtmi	r7, [pc], #-885	; 3c <startup-0x1fffffc4>
  38:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  3c:	442f706f 	strtmi	r7, [pc], #-111	; 44 <startup-0x1fffffbc>
  40:	31305441 	teqcc	r0, r1, asr #8
  44:	6f432f37 	svcvs	0x00432f37
  48:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  4c:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
  50:	5f6c6165 	svcpl	0x006c6165
  54:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  58:	6174732f 	cmnvs	r4, pc, lsr #6
  5c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  60:	7300632e 	movwvc	r6, #814	; 0x32e
  64:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
  68:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  6c:	6f507400 	svcvs	0x00507400
  70:	00746e69 	rsbseq	r6, r4, r9, ror #28
  74:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  78:	736e7500 	cmnvc	lr, #0, 10
  7c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  80:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  84:	47007261 	strmi	r7, [r0, -r1, ror #4]
  88:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  8c:	36203939 			; <UNDEFINED> instruction: 0x36203939
  90:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  94:	31303220 	teqcc	r0, r0, lsr #4
  98:	31323037 	teqcc	r2, r7, lsr r0
  9c:	72282035 	eorvc	r2, r8, #53	; 0x35
  a0:	61656c65 	cmnvs	r5, r5, ror #24
  a4:	20296573 	eorcs	r6, r9, r3, ror r5
  a8:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  ac:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  b0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  b4:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  b8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  bc:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  c0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  c4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  c8:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  cc:	205d3231 	subscs	r3, sp, r1, lsr r2
  d0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  d4:	20626d75 	rsbcs	r6, r2, r5, ror sp
  d8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  dc:	613d6863 	teqvs	sp, r3, ror #16
  e0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  e4:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  e8:	6f6c666d 	svcvs	0x006c666d
  ec:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  f0:	733d6962 	teqvc	sp, #1605632	; 0x188000
  f4:	2074666f 	rsbscs	r6, r4, pc, ror #12
  f8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  fc:	20626d75 	rsbcs	r6, r2, r5, ror sp
 100:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 104:	613d6863 	teqvs	sp, r3, ror #16
 108:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 10c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 110:	4f2d2067 	svcmi	0x002d2067
 114:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 118:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 11c:	50003939 	andpl	r3, r0, r9, lsr r9
 120:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; c <startup-0x1ffffff4>
 124:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 128:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 12c:	70615f74 	rsbvc	r5, r1, r4, ror pc
 130:	47740070 			; <UNDEFINED> instruction: 0x47740070
 134:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 138:	00797274 	rsbseq	r7, r9, r4, ror r2
 13c:	73657270 	cmnvc	r5, #112, 4
 140:	4b646573 	blmi	1919714 <startup-0x1e6e68ec>
 144:	00737965 	rsbseq	r7, r3, r5, ror #18
 148:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 14c:	00707574 	rsbseq	r7, r0, r4, ror r5
 150:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
 154:	64646150 	strbtvs	r6, [r4], #-336	; 0xfffffeb0
 158:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
 15c:	006e6961 	rsbeq	r6, lr, r1, ror #18
 160:	4a424f50 	bmi	1093ea8 <startup-0x1ef6c158>
 164:	00544345 	subseq	r4, r4, r5, asr #6
 168:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 16c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 170:	736f7000 	cmnvc	pc, #0
 174:	69640058 	stmdbvs	r4!, {r3, r4, r6}^
 178:	6e005872 	mcrvs	8, 0, r5, cr0, cr2, {3}
 17c:	6f506d75 	svcvs	0x00506d75
 180:	73746e69 	cmnvc	r4, #1680	; 0x690
 184:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 188:	7400544e 	strvc	r5, [r0], #-1102	; 0xfffffbb2
 18c:	006a624f 	rsbeq	r6, sl, pc, asr #4
 190:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 194:	6f65675f 	svcvs	0x0065675f
 198:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 19c:	68740079 	ldmdavs	r4!, {r0, r3, r4, r5, r6}^
 1a0:	6d007369 	stcvs	3, cr7, [r0, #-420]	; 0xfffffe5c
 1a4:	5f65766f 	svcpl	0x0065766f
 1a8:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 1ac:	2f3a4300 	svccs	0x003a4300
 1b0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1b4:	61482f73 	hvcvs	33523	; 0x82f3
 1b8:	7375706d 	cmnvc	r5, #109	; 0x6d
 1bc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1c0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1c4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 1c8:	2f373130 	svccs	0x00373130
 1cc:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 1d0:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 1d4:	6165722f 	cmnvs	r5, pc, lsr #4
 1d8:	6f705f6c 	svcvs	0x00705f6c
 1dc:	622f676e 	eorvs	r6, pc, #28835840	; 0x1b80000
 1e0:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
 1e4:	72670063 	rsbvc	r0, r7, #99	; 0x63
 1e8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1ec:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 1f0:	5f657469 	svcpl	0x00657469
 1f4:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1f8:	00646e61 	rsbeq	r6, r4, r1, ror #28
 1fc:	70617267 	rsbvc	r7, r1, r7, ror #4
 200:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 204:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 208:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 20c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 210:	00726165 	rsbseq	r6, r2, r5, ror #2
 214:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 218:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
 21c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 220:	635f7363 	cmpvs	pc, #-1946157055	; 0x8c000001
 224:	5f6c7274 	svcpl	0x006c7274
 228:	5f746962 	svcpl	0x00746962
 22c:	00746573 	rsbseq	r6, r4, r3, ror r5
 230:	70617267 	rsbvc	r7, r1, r7, ror #4
 234:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 238:	6165725f 	cmnvs	r5, pc, asr r2
 23c:	61645f64 	cmnvs	r4, r4, ror #30
 240:	67006174 	smlsdxvs	r0, r4, r1, r6
 244:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 248:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 24c:	5f746961 	svcpl	0x00746961
 250:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 254:	3a430079 	bcc	10c0440 <startup-0x1ef3fbc0>
 258:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 25c:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 260:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 264:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 268:	6f746b73 	svcvs	0x00746b73
 26c:	41442f70 	hvcmi	17136	; 0x42f0
 270:	37313054 			; <UNDEFINED> instruction: 0x37313054
 274:	646f432f 	strbtvs	r4, [pc], #-815	; 27c <startup-0x1ffffd84>
 278:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 27c:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 280:	705f6c61 	subsvc	r6, pc, r1, ror #24
 284:	2f676e6f 	svccs	0x00676e6f
 288:	70617267 	rsbvc	r7, r1, r7, ror #4
 28c:	2e636968 	vnmulcs.f16	s13, s6, s17	; <UNPREDICTABLE>
 290:	616d0063 	cmnvs	sp, r3, rrx
 294:	75006b73 	strvc	r6, [r0, #-2931]	; 0xfffff48d
 298:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 29c:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
 2a0:	00797375 	rsbseq	r7, r9, r5, ror r3
 2a4:	70617267 	rsbvc	r7, r1, r7, ror #4
 2a8:	5f636968 	svcpl	0x00636968
 2ac:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2b0:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 2b4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 2b8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 2bc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; f4 <startup-0x1fffff0c>
 2c0:	0072656c 	rsbseq	r6, r2, ip, ror #10
 2c4:	706d6574 	rsbvc	r6, sp, r4, ror r5
 2c8:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 2cc:	67007865 	strvs	r7, [r0, -r5, ror #16]
 2d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2d4:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 2d8:	00646165 	rsbeq	r6, r4, r5, ror #2
 2dc:	70617267 	rsbvc	r7, r1, r7, ror #4
 2e0:	5f636968 	svcpl	0x00636968
 2e4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2e8:	61645f65 	cmnvs	r4, r5, ror #30
 2ec:	70006174 	andvc	r6, r0, r4, ror r1
 2f0:	00656761 	rsbeq	r6, r5, r1, ror #14
 2f4:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 2f8:	72670065 	rsbvc	r0, r7, #101	; 0x65
 2fc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 300:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 304:	5f726165 	svcpl	0x00726165
 308:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 30c:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 310:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 314:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 318:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 31c:	7a696c61 	bvc	1a5b4a8 <startup-0x1e5a4b58>
 320:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 324:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 328:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 32c:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 330:	43006465 	movwmi	r6, #1125	; 0x465
 334:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 338:	2f737265 	svccs	0x00737265
 33c:	706d6148 	rsbvc	r6, sp, r8, asr #2
 340:	442f7375 	strtmi	r7, [pc], #-885	; 348 <startup-0x1ffffcb8>
 344:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 348:	442f706f 	strtmi	r7, [pc], #-111	; 350 <startup-0x1ffffcb0>
 34c:	31305441 	teqcc	r0, r1, asr #8
 350:	6f432f37 	svcvs	0x00432f37
 354:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 358:	722f6574 	eorvc	r6, pc, #116, 10	; 0x1d000000
 35c:	5f6c6165 	svcpl	0x006c6165
 360:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 364:	6a626f2f 	bvs	189c028 <startup-0x1e763fd8>
 368:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 36c:	6c630063 	stclvs	0, cr0, [r3], #-396	; 0xfffffe74
 370:	5f726165 	svcpl	0x00726165
 374:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 378:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 37c:	5f776172 	svcpl	0x00776172
 380:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 384:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 388:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 38c:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 390:	7500696c 	strvc	r6, [r0, #-2412]	; 0xfffff694
 394:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 398:	2064656e 	rsbcs	r6, r4, lr, ror #10
 39c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 3a0:	616c6564 	cmnvs	ip, r4, ror #10
 3a4:	30355f79 	eorscc	r5, r5, r9, ror pc
 3a8:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 3ac:	616c6564 	cmnvs	ip, r4, ror #10
 3b0:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 3b4:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 3b8:	616c6564 	cmnvs	ip, r4, ror #10
 3bc:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 3c0:	006f7263 	rsbeq	r7, pc, r3, ror #4
 3c4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff989 <returnKeys.4003+0xdfffed55>
 3c8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3cc:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 3d0:	2f737570 	svccs	0x00737570
 3d4:	6b736544 	blvs	1cd98ec <startup-0x1e326714>
 3d8:	2f706f74 	svccs	0x00706f74
 3dc:	30544144 	subscc	r4, r4, r4, asr #2
 3e0:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 3e4:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 3e8:	2f657469 	svccs	0x00657469
 3ec:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 3f0:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 3f4:	69742f67 	ldmdbvs	r4!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp}^
 3f8:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
 3fc:	6f6d0063 	svcvs	0x006d0063
 400:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 404:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 408:	61700065 	cmnvs	r0, r5, rrx
 40c:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 410:	6f65675f 	svcvs	0x0065675f
 414:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 418:	3a430079 	bcc	10c0604 <startup-0x1ef3f9fc>
 41c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 420:	482f7372 	stmdami	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 424:	75706d61 	ldrbvc	r6, [r0, #-3425]!	; 0xfffff29f
 428:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
 42c:	6f746b73 	svcvs	0x00746b73
 430:	41442f70 	hvcmi	17136	; 0x42f0
 434:	37313054 			; <UNDEFINED> instruction: 0x37313054
 438:	646f432f 	strbtvs	r4, [pc], #-815	; 440 <startup-0x1ffffbc0>
 43c:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 440:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xfffff09b
 444:	705f6c61 	subsvc	r6, pc, r1, ror #24
 448:	2f676e6f 	svccs	0x00676e6f
 44c:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 450:	632e656c 			; <UNDEFINED> instruction: 0x632e656c
 454:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 458:	65720062 	ldrbvs	r0, [r2, #-98]!	; 0xffffff9e
 45c:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 460:	7379654b 	cmnvc	r9, #314572800	; 0x12c00000
 464:	61657200 	cmnvs	r5, r0, lsl #4
 468:	6c6f4364 	stclvs	3, cr4, [pc], #-400	; 2e0 <startup-0x1ffffd20>
 46c:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 470:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa35 <returnKeys.4003+0xdfffee01>
 474:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 478:	6d61482f 	stclvs	8, cr4, [r1, #-188]!	; 0xffffff44
 47c:	2f737570 	svccs	0x00737570
 480:	6b736544 	blvs	1cd9998 <startup-0x1e326668>
 484:	2f706f74 	svccs	0x00706f74
 488:	30544144 	subscc	r4, r4, r4, asr #2
 48c:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 490:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 494:	2f657469 	svccs	0x00657469
 498:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
 49c:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 4a0:	656b2f67 	strbvs	r2, [fp, #-3943]!	; 0xfffff099
 4a4:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 4a8:	6300632e 	movwvs	r6, #814	; 0x32e
 4ac:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 4b0:	656b006e 	strbvs	r0, [fp, #-110]!	; 0xffffff92
 4b4:	61007379 	tstvs	r0, r9, ror r3
 4b8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 4bc:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
 4c0:	Address 0x000004c0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000005c 	andeq	r0, r0, ip, asr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000006c 	andcs	r0, r0, ip, rrx
  48:	00000070 	andeq	r0, r0, r0, ror r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	180e4101 	stmdane	lr, {r0, r8, lr}
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	200000dc 	ldrdcs	r0, [r0], -ip
  78:	000000dc 	ldrdeq	r0, [r0], -ip
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	180e4101 	stmdane	lr, {r0, r8, lr}
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	0000000c 	andeq	r0, r0, ip
  90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  94:	7c020001 	stcvc	0, cr0, [r2], {1}
  98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	0000008c 	andeq	r0, r0, ip, lsl #1
  a4:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
  a8:	00000038 	andeq	r0, r0, r8, lsr r0
  ac:	40080e41 	andmi	r0, r8, r1, asr #28
  b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b4:	100e4101 	andne	r4, lr, r1, lsl #2
  b8:	00070d41 	andeq	r0, r7, r1, asr #26
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	0000008c 	andeq	r0, r0, ip, lsl #1
  c4:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  c8:	00000034 	andeq	r0, r0, r4, lsr r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	100e4101 	andne	r4, lr, r1, lsl #2
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	0000008c 	andeq	r0, r0, ip, lsl #1
  e4:	20000224 	andcs	r0, r0, r4, lsr #4
  e8:	0000006a 	andeq	r0, r0, sl, rrx
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	0000008c 	andeq	r0, r0, ip, lsl #1
 104:	2000028e 	andcs	r0, r0, lr, lsl #5
 108:	00000072 	andeq	r0, r0, r2, ror r0
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	100e4101 	andne	r4, lr, r1, lsl #2
 118:	00070d41 	andeq	r0, r7, r1, asr #26
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	0000008c 	andeq	r0, r0, ip, lsl #1
 124:	20000300 	andcs	r0, r0, r0, lsl #6
 128:	00000090 	muleq	r0, r0, r0
 12c:	40080e41 	andmi	r0, r8, r1, asr #28
 130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 134:	180e4101 	stmdane	lr, {r0, r8, lr}
 138:	00070d41 	andeq	r0, r7, r1, asr #26
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	0000008c 	andeq	r0, r0, ip, lsl #1
 144:	20000390 	mulcs	r0, r0, r3
 148:	00000080 	andeq	r0, r0, r0, lsl #1
 14c:	40080e41 	andmi	r0, r8, r1, asr #28
 150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 154:	100e4101 	andne	r4, lr, r1, lsl #2
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	0000008c 	andeq	r0, r0, ip, lsl #1
 164:	20000410 	andcs	r0, r0, r0, lsl r4
 168:	00000040 	andeq	r0, r0, r0, asr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 174:	100e4101 	andne	r4, lr, r1, lsl #2
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	0000008c 	andeq	r0, r0, ip, lsl #1
 184:	20000450 	andcs	r0, r0, r0, asr r4
 188:	00000046 	andeq	r0, r0, r6, asr #32
 18c:	40080e41 	andmi	r0, r8, r1, asr #28
 190:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 194:	100e4101 	andne	r4, lr, r1, lsl #2
 198:	00070d41 	andeq	r0, r7, r1, asr #26
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1a4:	20000496 	mulcs	r0, r6, r4
 1a8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	100e4101 	andne	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1c4:	200004c0 	andcs	r0, r0, r0, asr #9
 1c8:	0000005c 	andeq	r0, r0, ip, asr r0
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	0000008c 	andeq	r0, r0, ip, lsl #1
 1e0:	2000051c 	andcs	r0, r0, ip, lsl r5
 1e4:	00000058 	andeq	r0, r0, r8, asr r0
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	100e4101 	andne	r4, lr, r1, lsl #2
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	00000020 	andeq	r0, r0, r0, lsr #32
 1fc:	0000008c 	andeq	r0, r0, ip, lsl #1
 200:	20000574 	andcs	r0, r0, r4, ror r5
 204:	00000194 	muleq	r0, r4, r1
 208:	400c0e41 	andmi	r0, ip, r1, asr #28
 20c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 210:	018e4002 	orreq	r4, lr, r2
 214:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 218:	0000070d 	andeq	r0, r0, sp, lsl #14
 21c:	0000000c 	andeq	r0, r0, ip
 220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 224:	7c020001 	stcvc	0, cr0, [r2], {1}
 228:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 22c:	0000001c 	andeq	r0, r0, ip, lsl r0
 230:	0000021c 	andeq	r0, r0, ip, lsl r2
 234:	20000708 	andcs	r0, r0, r8, lsl #14
 238:	0000005e 	andeq	r0, r0, lr, asr r0
 23c:	40080e41 	andmi	r0, r8, r1, asr #28
 240:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 244:	180e4101 	stmdane	lr, {r0, r8, lr}
 248:	00070d41 	andeq	r0, r7, r1, asr #26
 24c:	0000001c 	andeq	r0, r0, ip, lsl r0
 250:	0000021c 	andeq	r0, r0, ip, lsl r2
 254:	20000766 	andcs	r0, r0, r6, ror #14
 258:	0000005e 	andeq	r0, r0, lr, asr r0
 25c:	40080e41 	andmi	r0, r8, r1, asr #28
 260:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 264:	180e4101 	stmdane	lr, {r0, r8, lr}
 268:	00070d41 	andeq	r0, r7, r1, asr #26
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	0000021c 	andeq	r0, r0, ip, lsl r2
 274:	200007c4 	andcs	r0, r0, r4, asr #15
 278:	00000020 	andeq	r0, r0, r0, lsr #32
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	180e4101 	stmdane	lr, {r0, r8, lr}
 288:	00070d41 	andeq	r0, r7, r1, asr #26
 28c:	0000000c 	andeq	r0, r0, ip
 290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 294:	7c020001 	stcvc	0, cr0, [r2], {1}
 298:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	0000028c 	andeq	r0, r0, ip, lsl #5
 2a4:	200007e4 	andcs	r0, r0, r4, ror #15
 2a8:	00000044 	andeq	r0, r0, r4, asr #32
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	0000028c 	andeq	r0, r0, ip, lsl #5
 2c0:	20000828 	andcs	r0, r0, r8, lsr #16
 2c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	100e4101 	andne	r4, lr, r1, lsl #2
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	0000028c 	andeq	r0, r0, ip, lsl #5
 2e0:	20000854 	andcs	r0, r0, r4, asr r8
 2e4:	0000001e 	andeq	r0, r0, lr, lsl r0
 2e8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f0:	100e4101 	andne	r4, lr, r1, lsl #2
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	00000018 	andeq	r0, r0, r8, lsl r0
 2fc:	0000028c 	andeq	r0, r0, ip, lsl #5
 300:	20000872 	andcs	r0, r0, r2, ror r8
 304:	00000012 	andeq	r0, r0, r2, lsl r0
 308:	40080e41 	andmi	r0, r8, r1, asr #28
 30c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 310:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 314:	0000000c 	andeq	r0, r0, ip
 318:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 31c:	7c020001 	stcvc	0, cr0, [r2], {1}
 320:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	00000314 	andeq	r0, r0, r4, lsl r3
 32c:	20000884 	andcs	r0, r0, r4, lsl #17
 330:	0000005e 	andeq	r0, r0, lr, asr r0
 334:	40080e41 	andmi	r0, r8, r1, asr #28
 338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 33c:	100e4101 	andne	r4, lr, r1, lsl #2
 340:	00070d41 	andeq	r0, r7, r1, asr #26
 344:	0000000c 	andeq	r0, r0, ip
 348:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 34c:	7c020001 	stcvc	0, cr0, [r2], {1}
 350:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 354:	0000001c 	andeq	r0, r0, ip, lsl r0
 358:	00000344 	andeq	r0, r0, r4, asr #6
 35c:	200008e4 	andcs	r0, r0, r4, ror #17
 360:	00000058 	andeq	r0, r0, r8, asr r0
 364:	40080e41 	andmi	r0, r8, r1, asr #28
 368:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 36c:	100e4101 	andne	r4, lr, r1, lsl #2
 370:	00070d41 	andeq	r0, r7, r1, asr #26
 374:	0000001c 	andeq	r0, r0, ip, lsl r0
 378:	00000344 	andeq	r0, r0, r4, asr #6
 37c:	2000093c 	andcs	r0, r0, ip, lsr r9
 380:	0000004c 	andeq	r0, r0, ip, asr #32
 384:	40080e41 	andmi	r0, r8, r1, asr #28
 388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 38c:	100e4101 	andne	r4, lr, r1, lsl #2
 390:	00070d41 	andeq	r0, r7, r1, asr #26
 394:	00000020 	andeq	r0, r0, r0, lsr #32
 398:	00000344 	andeq	r0, r0, r4, asr #6
 39c:	20000988 	andcs	r0, r0, r8, lsl #19
 3a0:	00000098 	muleq	r0, r8, r0
 3a4:	400c0e41 	andmi	r0, ip, r1, asr #28
 3a8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3ac:	018e4002 	orreq	r4, lr, r2
 3b0:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 3b4:	0000070d 	andeq	r0, r0, sp, lsl #14
